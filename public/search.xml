<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java中的clone</title>
      <link href="/2020/01/13/Java%E4%B8%AD%E7%9A%84clone/"/>
      <url>/2020/01/13/Java%E4%B8%AD%E7%9A%84clone/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hYWRiMDk5MzU4NWNkMjU1LmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="Java中对象的创建"><a href="#Java中对象的创建" class="headerlink" title="Java中对象的创建"></a>Java中对象的创建</h2><ul><li>使用new操作符创建一个对象</li><li>使用clone方法复制一个对象<h3 id="这两种方式有什么相同和不同呢？"><a href="#这两种方式有什么相同和不同呢？" class="headerlink" title="这两种方式有什么相同和不同呢？"></a>这两种方式有什么相同和不同呢？</h3>new操作符的本意是分配内存。程序执行到new操作符时， 首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。<br>而clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部 。<h2 id="Java中的Clone"><a href="#Java中的Clone" class="headerlink" title="Java中的Clone"></a>Java中的Clone</h2>clone 顾名思义就是 复制 ， 在Java语言中， clone方法被对象调用，所以会复制对象。所谓的复制对象，首先要分配一个和源对象同样大小的空间，在这个空间中创建一个新的对象<h3 id="复制对象-or-复制引用"><a href="#复制对象-or-复制引用" class="headerlink" title="复制对象 or 复制引用"></a>复制对象 or 复制引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p &#x3D; new Person(23, &quot;张三&quot;);  </span><br><span class="line">Person p1 &#x3D; p;</span><br><span class="line">System.out.println(p);  </span><br><span class="line">System.out.println(p1);</span><br></pre></td></tr></table></figure>打印结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br><span class="line">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br></pre></td></tr></table></figure>可以看出，打印的地址值是相同的，既然地址都是相同的，那么肯定是同一个对象。p和p1只是引用而已，他们都指向了一个相同的对象Person(23, “张三”) 。 可以把这种现象叫做 引用的复制<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOGZkNGRmZWE3ODViODI1LnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>而下面的代码是真真正正的克隆了一个对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p &#x3D; new Person(23, &quot;张三&quot;);    </span><br><span class="line">Person p1 &#x3D; (Person) p.clone();   </span><br><span class="line">System.out.println(p);  </span><br><span class="line">System.out.println(p1);</span><br></pre></td></tr></table></figure>打印结果:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br><span class="line">com.pansoft.zhangjg.testclone.Person@67f1fba0</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mMjkxN2I1NjEzYWFiYTJlLnBuZw?x-oss-process=image/format,png" alt="图片.png"><h2 id="深拷贝-or-浅拷贝"><a href="#深拷贝-or-浅拷贝" class="headerlink" title="深拷贝 or 浅拷贝"></a>深拷贝 or 浅拷贝</h2>上面的示例代码中，Person中有两个成员变量，分别是name和age， name是String类型， age是int类型。代码非常简单，如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Person implements Cloneable&#123; </span><br><span class="line">    private int age ;</span><br><span class="line">    private String name;</span><br><span class="line">    public Person(int age, String name) &#123;</span><br><span class="line">       this.age &#x3D; age; </span><br><span class="line">       this.name &#x3D; name;  </span><br><span class="line">    &#125;</span><br><span class="line">   public Person() &#123;&#125;  </span><br><span class="line">   public int getAge() &#123;</span><br><span class="line">       return age;</span><br><span class="line">   &#125;</span><br><span class="line">  public String getName() &#123;</span><br><span class="line">       return name;</span><br><span class="line">   &#125; </span><br><span class="line"> @Override</span><br><span class="line"> protected Object clone() throws CloneNotSupportedException&#123;</span><br><span class="line">    return (Person)super.clone();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>由于age是基本数据类型， 那么对它的拷贝没有什么疑议，直接将一个4字节的整数值拷贝过来就行。但是name是String类型的， 它只是一个引用， 指向一个真正的String对象，那么对它的拷贝有两种方式：</li></ul><p>①直接将源对象中的name的引用值拷贝给新对象的name字段；</p><p>②根据原Person对象中的name指向的字符串对象创建一个新的相同的字符串对象，将这个新字符串对象的引用赋给新拷贝的Person对象的name字段。</p><p>这两种拷贝方式分别叫做 浅拷贝 和 深拷贝 。</p><p>深拷贝和浅拷贝的原理如下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wZWNkYTQ4MDAwNzMyM2U5LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h2 id="clone是浅拷贝还是深拷贝"><a href="#clone是浅拷贝还是深拷贝" class="headerlink" title="clone是浅拷贝还是深拷贝"></a>clone是浅拷贝还是深拷贝</h2><p>如果两个Person对象的name的地址值相同， 说明两个对象的name都指向同一个String对象， 也就是浅拷贝， 而如果两个对象的name的地址值不同， 那么就说明指向不同的String对象， 也就是在拷贝Person对象的时候， 同时拷贝了name引用的String对象， 也就是深拷贝。验证代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p &#x3D; new Person(23,&quot;张三&quot;);</span><br><span class="line">Person p1 &#x3D;(Person)p.clone();</span><br><span class="line">String  result &#x3D; p.getName() &#x3D;&#x3D; p1.getName() ? </span><br><span class="line">                 &quot;clone是浅拷贝的&quot;:&quot;clone是深拷贝的&quot;;</span><br></pre></td></tr></table></figure><p>打印结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clone是浅拷贝的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序版本自动更新</title>
      <link href="/2020/01/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%89%88%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
      <url>/2020/01/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%89%88%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hY2ExNmRhNWQzNWYxMDIyLnBuZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><blockquote><p>公司的小程序项目上线, 后期还会有小型的版本迭代. 为了让用户能在我们进行版本迭代后及时使用最新版本的功能. 做了以下优化..</p></blockquote><h2 id="小程序的销毁"><a href="#小程序的销毁" class="headerlink" title="小程序的销毁"></a>小程序的销毁</h2><p>当用户点击左上角关闭，或者按了设备Home 键离开微信，小程序并没有直接销毁，而是进入了后台；<br>当再次进入微信或再次打开小程序，又会从后台进入前台，只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。</p><h2 id="“冷启动”-和-“热启动”"><a href="#“冷启动”-和-“热启动”" class="headerlink" title="“冷启动” 和 “热启动”."></a>“冷启动” 和 “热启动”.</h2><p>热启动是指: 小程序打开后，在一段时间内（目前：5分钟）再次被打开，此时会将后台的小程序切换到前台。<br>冷启动是指: 小程序首次打开或销毁后再次被打开.</p><h2 id="更新版本"><a href="#更新版本" class="headerlink" title="更新版本"></a>更新版本</h2><p>冷启动时, 如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。<br>如果要马上应用最新版本，使用 wx.getUpdateManager API 进行处理。</p><p>代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F; 在app.js里写下以下代码</span><br><span class="line">  onLaunch () &#123;</span><br><span class="line">    if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class="line">      const updateManager &#x3D; wx.getUpdateManager()</span><br><span class="line">      updateManager.onCheckForUpdate(function (res) &#123;</span><br><span class="line">        console.log(&#39;onCheckForUpdate&#x3D;&#x3D;&#x3D;&#x3D;&#39;, res)</span><br><span class="line">        &#x2F;&#x2F; 请求完新版本信息的回调</span><br><span class="line">        if (res.hasUpdate) &#123;</span><br><span class="line">          console.log(&#39;res.hasUpdate&#x3D;&#x3D;&#x3D;&#x3D;&#39;)</span><br><span class="line">          updateManager.onUpdateReady(function () &#123;</span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              title: &#39;更新提示&#39;,</span><br><span class="line">              content: &#39;新版本已经准备好，是否重启应用？&#39;,</span><br><span class="line">              success: function (res) &#123;</span><br><span class="line">                console.log(&#39;success&#x3D;&#x3D;&#x3D;&#x3D;&#39;, res)</span><br><span class="line">                &#x2F;&#x2F; res: &#123;errMsg: &quot;showModal: ok&quot;, cancel: false, confirm: true&#125;</span><br><span class="line">                if (res.confirm) &#123;</span><br><span class="line">                  &#x2F;&#x2F; 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span><br><span class="line">                  updateManager.applyUpdate()</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          updateManager.onUpdateFailed(function () &#123;</span><br><span class="line">            &#x2F;&#x2F; 新的版本下载失败</span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              title: &#39;已经有新版本了哟~&#39;,</span><br><span class="line">              content: &#39;新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>小程序重新初始化时会触发onLaunch事件<br>onLaunch事件会触发在页面onShow事件之前.获取小程序更新版本可以写在onLaunch里.</p><p><code>注意：在开发和体验版无法测试版本更新</code></p><p>需要在开发者工具里,编译时选择”模拟更新编译”<br><img src="https://upload-images.jianshu.io/upload_images/12553249-596b037faafe349e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>(部分开发者工具版本, 每次update编译时都需要重新勾选此选项)<br>点击确定,重新编译.<br>页面会弹窗显示:<br><img src="https://upload-images.jianshu.io/upload_images/12553249-d8fce840734a0c6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>点击确定后：<br><img src="https://upload-images.jianshu.io/upload_images/12553249-28cdc47ab292f08b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>随着小程序的不断更新, 部分功能可能需要最新版的微信客户端才能使用. 这时候可以弹窗提示用户更新到最新版本微信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  &#x2F;&#x2F; can&#39;t use getUpdateManager</span><br><span class="line">  wx.showModal(&#123;</span><br><span class="line">        title: &#39;提示&#39;,</span><br><span class="line">        content: &#39;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#39;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>完整版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">onLaunch () &#123;</span><br><span class="line">    if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class="line">      const updateManager &#x3D; wx.getUpdateManager()</span><br><span class="line">      updateManager.onCheckForUpdate(function (res) &#123;</span><br><span class="line">        if (res.hasUpdate) &#123;</span><br><span class="line">          updateManager.onUpdateReady(function () &#123;</span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              title: &#39;更新提示&#39;,</span><br><span class="line">              content: &#39;新版本已经准备好，是否重启应用？&#39;,</span><br><span class="line">              success: function (res) &#123;</span><br><span class="line">                if (res.confirm) &#123;</span><br><span class="line">                  updateManager.applyUpdate()</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          updateManager.onUpdateFailed(function () &#123;</span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              title: &#39;已经有新版本了哟~&#39;,</span><br><span class="line">              content: &#39;新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      wx.showModal(&#123;</span><br><span class="line">        title: &#39;提示&#39;,</span><br><span class="line">        content: &#39;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#39;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果在onLaunch里进行请求, 这是异步请求. 如果对交互顺序有要求, 如: 版本更新–重新获取数据– 用户展示, 那么需要考虑在callback里进行重获数据.小程序启动时，正常是会热更新，下载新版本的包，下一次启动就会使用新包。但发现有更新不成功的情况发生.<br>官方回答: 策略生效跟网络环境以及发布时间等若干因素有关，会尽可能让小程序快地更新，但无法保证每次都热更新成功。<br>小程序的异步更新发生在冷启动过程. 官方不建议热更新. 原因:<br><img src="https://upload-images.jianshu.io/upload_images/12553249-69b50b7aa0385509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Double为什么会失真？</title>
      <link href="/2020/01/07/Double%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%A4%B1%E7%9C%9F%EF%BC%9F/"/>
      <url>/2020/01/07/Double%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%A4%B1%E7%9C%9F%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02OWU4ZGI5MWZlM2E4N2NiLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先来看一个double失真的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class DoubleTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (double i &#x3D; 0; i &lt; 1; i &#x3D; (i * 10 + 1) &#x2F; 10) &#123;</span><br><span class="line">            for (double k &#x3D; 0; k &lt; i; k &#x3D; (k * 10 + 1) &#x2F; 10) &#123;</span><br><span class="line">                System.out.println(i + &quot;-&quot; + k + &quot;&#x3D;&quot; + (i - k));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>0.1-0.0=0.1<br>0.2-0.0=0.2<br>0.2-0.1=0.1<br>0.3-0.0=0.3<br>0.3-0.1=0.19999999999999998<br>0.3-0.2=0.09999999999999998<br>0.4-0.0=0.4<br>0.4-0.1=0.30000000000000004<br>0.4-0.2=0.2<br>0.4-0.3=0.10000000000000003<br>0.5-0.0=0.5<br>0.5-0.1=0.4<br>0.5-0.2=0.3<br>0.5-0.3=0.2<br>0.5-0.4=0.09999999999999998<br>0.6-0.0=0.6<br>0.6-0.1=0.5<br>0.6-0.2=0.39999999999999997<br>0.6-0.3=0.3<br>0.6-0.4=0.19999999999999996<br>0.6-0.5=0.09999999999999998<br>0.7-0.0=0.7<br>0.7-0.1=0.6<br>0.7-0.2=0.49999999999999994<br>0.7-0.3=0.39999999999999997<br>0.7-0.4=0.29999999999999993<br>0.7-0.5=0.19999999999999996<br>0.7-0.6=0.09999999999999998<br>0.8-0.0=0.8<br>0.8-0.1=0.7000000000000001<br>0.8-0.2=0.6000000000000001<br>0.8-0.3=0.5<br>0.8-0.4=0.4<br>0.8-0.5=0.30000000000000004<br>0.8-0.6=0.20000000000000007<br>0.8-0.7=0.10000000000000009<br>0.9-0.0=0.9<br>0.9-0.1=0.8<br>0.9-0.2=0.7<br>0.9-0.3=0.6000000000000001<br>0.9-0.4=0.5<br>0.9-0.5=0.4<br>0.9-0.6=0.30000000000000004<br>0.9-0.7=0.20000000000000007<br>0.9-0.8=0.09999999999999998</p></blockquote><h2 id="一、-什么是浮点数？"><a href="#一、-什么是浮点数？" class="headerlink" title="一、 什么是浮点数？"></a>一、 什么是浮点数？</h2><h3 id="1、小数"><a href="#1、小数" class="headerlink" title="1、小数"></a>1、小数</h3><p>一个小数的组成：在我国，小数表示由三部分组成，分别是整数+小数点（分隔符）+小数。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjFkNzM3YjM4ODEyZWEyLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h3 id="2、小数为什么会被称为浮点数"><a href="#2、小数为什么会被称为浮点数" class="headerlink" title="2、小数为什么会被称为浮点数"></a>2、小数为什么会被称为浮点数</h3><p>浮点数是属于有理数中某特定子集的数的数字表示，在计算机中用以近似表示任意某个实数。具体的说，这个实数由一个整数或定点数（即尾数）乘以某个基数（计算机中通常是2）的整数次幂得到，这种表示方法类似于基数为10的科学计数法。</p><p>对于浮点数可以这样简单的理解：浮点数就是小数点可以任意浮动的数字。</p><p>在计算机的机器语言中，只有二进制，机器语言只能识别0和1。所以，计算机也是不可能存储小数的，所以需要有另一种变通的存储方案。这种方案就是指数方案：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMmIxYjExOTM5NTYzOGJhLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>通过观察以上的图片不难发现，作为一个小数3.14。如果使用指数表现形式的话（3.14E0），其写法是多种多样的，这样写的话，小数点就可以任意浮动了。</p><h3 id="3、Java中浮点数的表示方法"><a href="#3、Java中浮点数的表示方法" class="headerlink" title="3、Java中浮点数的表示方法"></a>3、Java中浮点数的表示方法</h3><p>对于float来说，4个字节，32位，0-22位表示尾数，23-30(8位)表示指数，31位表示符号位。</p><p>对于double来说，8个字节，64位，0-51表示尾数，52-62(11位)表示指数，63位最高位表示符号位。</p><h2 id="二、浮点数在内存中是如何存储的？"><a href="#二、浮点数在内存中是如何存储的？" class="headerlink" title="二、浮点数在内存中是如何存储的？"></a>二、浮点数在内存中是如何存储的？</h2><p>我们知道，任何数据在计算机内存中都是用‘0\1’来存储的，浮点数亦是如此。因此十进制浮点数在存储时必定会转换为二进制的浮点数。</p><p>在内存中使用二进制的科学计数法来存储，因此分为阶码（即指数）和底数，由于也有正负之分，所以还有一位符号位。<br>以float为例，float在内存中的存储为：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMjUzMDkxZDZhOTQ4ZDdmLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>float 符号位(1bit) 指数(8 bit) 尾数(23 bit)</p><p>double 符号位(1bit) 指数(11 bit) 尾数(52 bit)</p><p>float在内存中占8位，由于阶码实际存储的是指数的移码，假设指数的真值是e,阶码为E，则有E=e+(2^n-1 -1)。其中 2^n-1 -1是IEEE754标准规定的指数偏移量，根据这个公式我们可以得到 2^8 -1=127。于是，float的指数范围为-128 +127，而double的指数范围为-1024 +1023。其中负指数决定了浮点数所能表达的绝对值最小的非零数；而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。</p><p>float的范围为-2^128 ~ +2^127，也即-3.40E+38 ~ +3.40E+38；</p><p>double的范围为-2^1024 ~ +2^1023，也即-1.79E+308 ~ +1.79E+308</p><p>这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)</p><p>移位存储本质上是为了保证+0和-0的一致性。</p><p>以float指数部分的这8位来分析，</p><p>那么这8位组成的新的字节，我们来用下面的一串数字表示：0000 0000</p><p>首先，我们假设不使用移位存储技术，而是单单看看这个 8位组成的新字节，到底能表示多少个数： 0000 0000 -1111 1111 即0-255，一共256个数。</p><p>但是我们知道这8位数既要表示正数也要表示负数。</p><p>所以将左边第一位拿出来表示正负的符号：</p><p>第一个区间：</p><blockquote><p>0 000 0000  -  0 111 1111<br>即+0 到127</p></blockquote><p>第二个区间：</p><blockquote><p>1 000 0000  -  1 111 1111<br>即 -0到-127</p></blockquote><p>这就是问题的所在:怎么会有两个0，一个正零，一个负零。</p><p>这时候使用移位存储：float使用127(0111 1111)</p><blockquote><p>表示0：0+127=127 即 0000 0000 +0111 1111=0111 1111<br>表示1：1+127=128 即 0000 0001 +0111 1111=1000 0000<br>表示128：128+127=255 即 1000 0000+0111 1111=1111 1111</p></blockquote><p>最大的正数，再大就要溢出了。</p><blockquote><p>表示-1： -1+127=126=127-1 即 0111 1111-0000 0001=0111 1110<br>表示-1： -2+127=125=127-2 即 0111 1111-0000 0010=0111 1101<br>表示-127： -127+127=0 即0111 1111-0111 1111=0000 0000</p></blockquote><p>最小的负数，在校就溢出了。</p><h2 id="三、浮点数的进制转换"><a href="#三、浮点数的进制转换" class="headerlink" title="三、浮点数的进制转换"></a>三、浮点数的进制转换</h2><h3 id="1、十进制转二进制"><a href="#1、十进制转二进制" class="headerlink" title="1、十进制转二进制"></a>1、十进制转二进制</h3><p>主要看看十进制转二进制，整数部分和小数部分分开处理</p><ul><li><p>整数部分：整数除以2，得到一个商和余数，得到的商继续除以2并得到一个商和一个余数，继续除以2操作直至商为0，上述操作得到一系列余数，从最后一个余数开始直至第一个余数，这一系列0\1即为转换后的二进制数。</p></li><li><p>小数部分：乘以2，然后取出整数部分，将剩下的小数部分继续乘以2，然后再取整数部分，一直取到小数部分为零为止。如果永远不为零，则按要求保留足够位数的小数，最后一位做0舍1入。将取出的整数顺序排列。</p></li></ul><p>从以上转换过程可以看出，并不是任何一个十进制小数都可以用二进制精确表示出来。一个在0到1之间的小数P可用如下形式表示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZjBlYTI1NWM2NDBjNDY3LnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>从这个式子中我们也可看出二进制表示出的小数是分段的，这也是为什么在Java中浮点数很多时候并不是十分精确的表示十进制小数的根本原因。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    float f1&#x3D;20f;</span><br><span class="line">    float f2&#x3D;20.3f;</span><br><span class="line">    float f3&#x3D;20.5f;</span><br><span class="line"></span><br><span class="line">    double d1&#x3D;20;</span><br><span class="line">    double d2&#x3D;20.3;</span><br><span class="line">    double d3&#x3D;20.5;</span><br><span class="line"></span><br><span class="line">    System.out.println(f1&#x3D;&#x3D;d1);</span><br><span class="line">    System.out.println(f2&#x3D;&#x3D;d2);</span><br><span class="line">    System.out.println(f3&#x3D;&#x3D;d3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>true<br>false<br>true</p></blockquote><p>以20.3举例：<br>20转换后变为 10100<br>0.3 要转换二进制，需要乘2, 乘完之后 取整数部分，然后用乘的结果减去整数部分， 然后 接着乘2, 直至最后没有小数或者小数出现循环, 即乘完.</p><blockquote><p>0.3 * 2 = 0.6 (0)<br>  0.6 * 2 = 1.2 (1)<br>  0.2 * 2 = 0.4 (0)<br>  0.4 * 2 = 0.8 (0)<br>  0.8 * 2 = 1.6 (1)</p></blockquote><p>计算到这里， 将再出现0.6,进入循环了，所以，结果<br>0.3 = 0.010011001…1001<br>所以20.3 = 10100.010011001…1001 (二进制).</p><h3 id="2、二进制的科学记数法表示"><a href="#2、二进制的科学记数法表示" class="headerlink" title="2、二进制的科学记数法表示"></a>2、二进制的科学记数法表示</h3><p>20.3 = 10100.010011001…1001 (二进制)=1.01000100110011E10…..（十进制科学计数）=1.01000100110011E100…..(二进制科学计数)</p><p>这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)</p><p>同时要注意一点，以float为例，最高位表示的是整个数的符号位，指数位一共8位，最高位表示的是指数位的正负，因为有可能是E-100这样的情况，所以虽然有8位，最高位只是符号位，剩下7位才是表示真正的数值，这也是使用移位存储的原因。</p><p>对于一个数字，只要不超过和float的范围，同时小数部分不是无限小数，就可以和对应的double类型相等。</p><h3 id="3、浮点数舍入规则"><a href="#3、浮点数舍入规则" class="headerlink" title="3、浮点数舍入规则"></a>3、浮点数舍入规则</h3><p>以52位尾数的双精度浮点数为例，舍入时需要重点参考第53位。</p><p>若第53位为1，而其后的位数都是0，此时就要使第52位为0；若第52位为0则不用再进行其他操作，若第52位为1，则第53位就要向52位进一位。</p><p>若第53位为1，但其后的位数不全为0，则第53为就要向第52位进一位。</p><p>若不是以上两种情况，也即53位为0，那么就直接舍弃不进位，称为下舍入。</p><p>浮点数舍入规则也就证明了为何在上文中提到的浮点数舍入中，相对舍入误差不能大于机器ε的一半。</p><p>对于java来说，一般float类型小数点后保留7位，而double类型小数点后保留15位。</p><p>这个原因也是因为尾数的数据宽度限制</p><p>对于float型来说，因为2^23 = 8388608</p><p>同时最左一位默认省略了，故实际能表示2^24 = 16777216个数，最多能表示8位，但绝对精确的只能表示7位。</p><p>而对于double型来说，2^52 = 4503599627370496，共16位。加上省略的一位，能表示2^53 = 9007199254740992。故double型最多能表示16位，而绝对精确的只能表示15位。</p><h3 id="4、机器ε"><a href="#4、机器ε" class="headerlink" title="4、机器ε"></a>4、机器ε</h3><p>机器ε表示1与大于1的最小浮点数之差。不同精度定义的机器ε不同。以双精度为例，</p><p>双精度表示1是</p><p>1.000……0000（52个0） × 2^0</p><p>而比1大的最小的双精度是（其实还能表示更小的范围，后文中会提到，但并不影响这里的机器ε）</p><p>1.000……0001 × 2^0</p><p>也即</p><p>2^-52 ≈ 2.220446049250313e-16。所以它就是双精度浮点数的机器ε。</p><p>在舍入中，相对舍入误差不能大于机器ε的一半。</p><p>对于双精度浮点数来说，这个值为0.00000005960464477539。</p><p>所以在Java中double类型中连续8个0.1相乘，就会出现表示不精确的情况。</p><p>参考：<br><a href="https://baijiahao.baidu.com/s?id=1618173300159774003&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1618173300159774003&amp;wfr=spider&amp;for=pc</a><br><a href="https://www.cnblogs.com/Vicebery/p/9997636.html" target="_blank" rel="noopener">https://www.cnblogs.com/Vicebery/p/9997636.html</a><br><a href="https://blog.csdn.net/Return_head/article/details/88623060" target="_blank" rel="noopener">https://blog.csdn.net/Return_head/article/details/88623060</a><br><a href="https://blog.csdn.net/u011277123/article/details/95774544" target="_blank" rel="noopener">https://blog.csdn.net/u011277123/article/details/95774544</a><br><a href="https://blog.csdn.net/endlessseaofcrow/article/details/81269079" target="_blank" rel="noopener">https://blog.csdn.net/endlessseaofcrow/article/details/81269079</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2020/01/06/Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2020/01/06/Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hNGQzN2EyYjc0MWZiOGVhLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="一、什么是反射？"><a href="#一、什么是反射？" class="headerlink" title="一、什么是反射？"></a>一、什么是反射？</h2><p><a href="https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990" target="_blank" rel="noopener">JAVA反射机制</a>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><blockquote><p>简单的来说：<br>1.通过new关键字创建对象操作对象，在编译时就已经确定。<br>2.通过反射可以在程序运行过程中动态的操作对象，可以获得编译期无法获得的信息，动态操作最大限度发挥了java扩展性。</p></blockquote><h2 id="二、反射原理"><a href="#二、反射原理" class="headerlink" title="二、反射原理"></a>二、反射原理</h2><p>Java反射的原理:java类的执行需要经历以下过程：</p><ul><li>编译：.java文件编译后生成.class字节码文件</li><li>加载：类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例</li><li>链接<br><code>验证</code>：格式（class文件规范） 语义（final类是否有子类） 操作<br><code>准备</code>：静态变量赋初值和内存空间，final修饰的内存空间直接赋原值，此处不是用户指定的初值。<br><code>解析</code>：符号引用转化为直接引用，分配地址</li><li>初始化：有父类先初始化父类，然后初始化自己；将static修饰代码执行一遍，如果是静态变量，则用用户指定值覆盖原有初值；如果是代码块，则执行一遍操作。</li></ul><p>Java的反射就是利用上面第二步加载到jvm中的.class文件来进行操作的。.class文件中包含java类的所有信息，当你不知道某个类具体信息时，可以使用反射获取class，然后进行各种操作。</p><p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。总结说：反射就是把java类中的各种成分映射成一个个的Java对象，并且可以进行操作。</p><h2 id="三、反射机制相关"><a href="#三、反射机制相关" class="headerlink" title="三、反射机制相关"></a>三、反射机制相关</h2><p>与Java反射相关的类如下：</p><table><thead><tr><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>Class类</td><td>代表类的实体，在运行的Java应用程序中表示类和接口</td></tr><tr><td>Field类</td><td>代表类的成员变量（成员变量也称为类的属性）</td></tr><tr><td>Method类</td><td>代表类的方法</td></tr><tr><td>Constructor类</td><td>代表类的构造方法</td></tr></tbody></table><p> 反射可访问的常用信息</p><table><thead><tr><th>类型</th><th>访问方法</th><th>返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>包路径</td><td>getPackage()</td><td>Package 对象</td><td>获取该类的存放路径</td></tr><tr><td>类名称</td><td>getName()</td><td>String 对象</td><td>获取该类的名称</td></tr><tr><td>继承类</td><td>getSuperclass()</td><td>Class 对象</td><td>获取该类继承的类</td></tr><tr><td>实现接口</td><td>getlnterfaces()</td><td>Class 型数组</td><td>获取该类实现的所有接口</td></tr><tr><td>构造方法</td><td>getConstructors()</td><td>Constructor 型数组</td><td>获取所有权限为 public 的构造方法</td></tr><tr><td>构造方法</td><td>getDeclaredContruectors()</td><td>Constructor 对象</td><td>获取当前对象的所有构造方法</td></tr><tr><td>方法</td><td>getMethods()</td><td>Methods 型数组</td><td>获取所有权限为 public 的方法</td></tr><tr><td>方法</td><td>getDeclaredMethods()</td><td>Methods 对象</td><td>获取当前对象的所有方法</td></tr><tr><td>成员变量</td><td>getFields()</td><td>Field 型数组</td><td>获取所有权限为 public 的成员变量</td></tr><tr><td>成员变量</td><td>getDeclareFileds()</td><td>Field 对象</td><td>获取当前对象的所有成员变量</td></tr><tr><td>内部类</td><td>getClasses()</td><td>Class 型数组</td><td>获取所有权限为 public 的内部类</td></tr><tr><td>内部类</td><td>getDeclaredClasses()</td><td>Class 型数组</td><td>获取所有内部类</td></tr><tr><td>内部类的声明类</td><td>getDeclaringClass()</td><td>Class 对象</td><td>如果该类为内部类，则返回它的成员类，否则返回 null</td></tr></tbody></table><p>Java 反射机制主要提供了以下功能，这些功能都位于java.lang.reflect包。</p><ul><li><p>在运行时判断任意一个对象所属的类。</p></li><li><p>在运行时构造任意一个类的对象。</p></li><li><p>在运行时判断任意一个类所具有的成员变量和方法。</p></li><li><p>在运行时调用任意一个对象的方法。</p></li><li><p>生成动态代理。</p></li></ul><h2 id="四、反射的使用"><a href="#四、反射的使用" class="headerlink" title="四、反射的使用"></a>四、反射的使用</h2><h3 id="1、java中的Class三种获取方式"><a href="#1、java中的Class三种获取方式" class="headerlink" title="1、java中的Class三种获取方式"></a>1、java中的Class三种获取方式</h3><p>　jdk提供了三种方式获取一个对象的Class，就Person person 来说</p><p>　　1.person .getClass()，这个是Object类里面的方法</p><p>　　2.Person .Class属性，任何的数据类型，基本数据类型或者抽象数据类型，都可以通过这种方式获取类</p><p>　　3.Class.forName(“”)，Class类提供了这样一个方法，让我们通过类名来获取到对象类</p><p>　说明：在运行期间，如果我们要产生某个类的对象，Java虚拟机(JVM)会检查该类型的Class对象是否已被加载。如果没有被加载，JVM会根据类的名称找到.class文件并加载它。一旦某个类型的Class对象已被加载到内存，就可以用它来产生该类型的所有对象。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;方式一</span><br><span class="line">Person person &#x3D; new Person();</span><br><span class="line">Class&lt;? extends Person&gt; personClazz01 &#x3D; person.getClass();</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;方式二</span><br><span class="line">try &#123;</span><br><span class="line">    Class&lt;?&gt; personClazz02 &#x3D; Class.forName(&quot;Person&quot;);</span><br><span class="line">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;方式三</span><br><span class="line">Class&lt;? extends Person&gt; personClazz03 &#x3D; Person.class;</span><br></pre></td></tr></table></figure><h3 id="2、如何通过反射获取私有成员变量和私有方法"><a href="#2、如何通过反射获取私有成员变量和私有方法" class="headerlink" title="2、如何通过反射获取私有成员变量和私有方法"></a>2、如何通过反射获取私有成员变量和私有方法</h3><p>Person类 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">private String name &#x3D; &quot;zhangsan&quot;;</span><br><span class="line">private String age;</span><br><span class="line"> </span><br><span class="line">public String getName() &#123;</span><br><span class="line">    return name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    Person person &#x3D; new Person();</span><br><span class="line">    &#x2F;&#x2F;打印没有改变属性之前的name值</span><br><span class="line">    System.out.println(&quot;before：&quot; + getPrivateValue(person, &quot;name&quot;));</span><br><span class="line">    person.setName(&quot;lisi&quot;);</span><br><span class="line">    &#x2F;&#x2F;打印修改之后的name值</span><br><span class="line">    System.out.println(&quot;after：&quot; + getPrivateValue(person, &quot;name&quot;));</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#x2F;**</span><br><span class="line"> * 通过反射获取私有的成员变量</span><br><span class="line"> *</span><br><span class="line"> * @param person</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">private Object getPrivateValue(Person person, String fieldName) &#123;</span><br><span class="line"> </span><br><span class="line">    try &#123;</span><br><span class="line">        Field field &#x3D; person.getClass().getDeclaredField(fieldName);</span><br><span class="line">        &#x2F;&#x2F; 参数值为true，打开禁用访问控制检查</span><br><span class="line">        &#x2F;&#x2F;setAccessible(true) 并不是将方法的访问权限改成了public，而是取消java的权限控制检查。</span><br><span class="line">        &#x2F;&#x2F;所以即使是public方法，其accessible 属相默认也是false</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        return field.get(person);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iNmRjM2Q1MWY1YTM5NzA1LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h3 id="3、demo"><a href="#3、demo" class="headerlink" title="3、demo"></a>3、demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br></pre></td><td class="code"><pre><span class="line">package cn.lee.demo;</span><br><span class="line"> </span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Modifier;</span><br><span class="line">import java.lang.reflect.TypeVariable;</span><br><span class="line"> </span><br><span class="line">public class Main &#123;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 为了看清楚Java反射部分代码，所有异常我都最后抛出来给虚拟机处理！</span><br><span class="line"> * @param args</span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> * @throws InstantiationException</span><br><span class="line"> * @throws IllegalAccessException</span><br><span class="line"> * @throws InvocationTargetException </span><br><span class="line"> * @throws IllegalArgumentException </span><br><span class="line"> * @throws NoSuchFieldException </span><br><span class="line"> * @throws SecurityException </span><br><span class="line"> * @throws NoSuchMethodException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, SecurityException, NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo1.  通过Java反射机制得到类的包名和类名</span><br><span class="line">Demo1();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo2.  验证所有的类都是Class类的实例对象</span><br><span class="line">Demo2();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo3.  通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]，无参构造</span><br><span class="line">Demo3();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo4:  通过Java反射机制得到一个类的构造函数，并实现构造带参实例对象</span><br><span class="line">Demo4();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo5:  通过Java反射机制操作成员变量, set 和 get</span><br><span class="line">Demo5();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等</span><br><span class="line">Demo6();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo7: 通过Java反射机制调用类中方法</span><br><span class="line">Demo7();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo8: 通过Java反射机制获得类加载器</span><br><span class="line">Demo8();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo1: 通过Java反射机制得到类的包名和类名</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo1()</span><br><span class="line">&#123;</span><br><span class="line">Person person &#x3D; new Person();</span><br><span class="line">System.out.println(&quot;Demo1: 包名: &quot; + person.getClass().getPackage().getName() + &quot;，&quot; </span><br><span class="line">+ &quot;完整类名: &quot; + person.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo2: 验证所有的类都是Class类的实例对象</span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo2() throws ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;定义两个类型都未知的Class , 设置初值为null, 看看如何给它们赋值成Person类</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">        Class&lt;?&gt; class2 &#x3D; null;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;写法1, 可能抛出 ClassNotFoundException [多用这个写法]</span><br><span class="line">        class1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class="line">        System.out.println(&quot;Demo2:(写法1) 包名: &quot; + class1.getPackage().getName() + &quot;，&quot; </span><br><span class="line">+ &quot;完整类名: &quot; + class1.getName());</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;写法2</span><br><span class="line">        class2 &#x3D; Person.class;</span><br><span class="line">        System.out.println(&quot;Demo2:(写法2) 包名: &quot; + class2.getPackage().getName() + &quot;，&quot; </span><br><span class="line">+ &quot;完整类名: &quot; + class2.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo3: 通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]</span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> * @throws IllegalAccessException </span><br><span class="line"> * @throws InstantiationException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo3() throws ClassNotFoundException, InstantiationException, IllegalAccessException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class="line">&#x2F;&#x2F;由于这里不能带参数，所以你要实例化的这个类Person，一定要有无参构造函数哈～</span><br><span class="line">Person person &#x3D; (Person) class1.newInstance();</span><br><span class="line">person.setAge(20);</span><br><span class="line">person.setName(&quot;LeeFeng&quot;);</span><br><span class="line">System.out.println(&quot;Demo3: &quot; + person.getName() + &quot; : &quot; + person.getAge());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo4: 通过Java反射机制得到一个类的构造函数，并实现创建带参实例对象</span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> * @throws InvocationTargetException </span><br><span class="line"> * @throws IllegalAccessException </span><br><span class="line"> * @throws InstantiationException </span><br><span class="line"> * @throws IllegalArgumentException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo4() throws ClassNotFoundException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">Person person1 &#x3D; null;</span><br><span class="line">Person person2 &#x3D; null;</span><br><span class="line"></span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class="line">&#x2F;&#x2F;得到一系列构造函数集合</span><br><span class="line">Constructor&lt;?&gt;[] constructors &#x3D; class1.getConstructors();</span><br><span class="line"></span><br><span class="line">person1 &#x3D; (Person) constructors[0].newInstance();</span><br><span class="line">person1.setAge(30);</span><br><span class="line">person1.setName(&quot;leeFeng&quot;);</span><br><span class="line"></span><br><span class="line">person2 &#x3D; (Person) constructors[1].newInstance(20,&quot;leeFeng&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Demo4: &quot; + person1.getName() + &quot; : &quot; + person1.getAge()</span><br><span class="line">+ &quot;  ,   &quot; + person2.getName() + &quot; : &quot; + person2.getAge()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo5: 通过Java反射机制操作成员变量, set 和 get</span><br><span class="line"> * </span><br><span class="line"> * @throws IllegalAccessException </span><br><span class="line"> * @throws IllegalArgumentException </span><br><span class="line"> * @throws NoSuchFieldException </span><br><span class="line"> * @throws SecurityException </span><br><span class="line"> * @throws InstantiationException </span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo5() throws IllegalArgumentException, IllegalAccessException, SecurityException, NoSuchFieldException, InstantiationException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class="line">Object obj &#x3D; class1.newInstance();</span><br><span class="line"></span><br><span class="line">Field personNameField &#x3D; class1.getDeclaredField(&quot;name&quot;);</span><br><span class="line">personNameField.setAccessible(true);</span><br><span class="line">personNameField.set(obj, &quot;胖虎先森&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Demo5: 修改属性之后得到属性变量的值：&quot; + personNameField.get(obj));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等</span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo6() throws ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;取得父类名称</span><br><span class="line">Class&lt;?&gt;  superClass &#x3D; class1.getSuperclass();</span><br><span class="line">System.out.println(&quot;Demo6:  SuperMan类的父类名: &quot; + superClass.getName());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Field[] fields &#x3D; class1.getDeclaredFields();</span><br><span class="line">for (int i &#x3D; 0; i &lt; fields.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;类中的成员: &quot; + fields[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;取得类方法</span><br><span class="line">Method[] methods &#x3D; class1.getDeclaredMethods();</span><br><span class="line">for (int i &#x3D; 0; i &lt; methods.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;Demo6,取得SuperMan类的方法：&quot;);</span><br><span class="line">System.out.println(&quot;函数名：&quot; + methods[i].getName());</span><br><span class="line">System.out.println(&quot;函数返回类型：&quot; + methods[i].getReturnType());</span><br><span class="line">System.out.println(&quot;函数访问修饰符：&quot; + Modifier.toString(methods[i].getModifiers()));</span><br><span class="line">System.out.println(&quot;函数代码写法： &quot; + methods[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;取得类实现的接口,因为接口类也属于Class,所以得到接口中的方法也是一样的方法得到哈</span><br><span class="line">Class&lt;?&gt; interfaces[] &#x3D; class1.getInterfaces();</span><br><span class="line">for (int i &#x3D; 0; i &lt; interfaces.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;实现的接口类名: &quot; + interfaces[i].getName() );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo7: 通过Java反射机制调用类方法</span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> * @throws NoSuchMethodException </span><br><span class="line"> * @throws SecurityException </span><br><span class="line"> * @throws InvocationTargetException </span><br><span class="line"> * @throws IllegalAccessException </span><br><span class="line"> * @throws IllegalArgumentException </span><br><span class="line"> * @throws InstantiationException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo7() throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, InstantiationException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Demo7: \n调用无参方法fly()：&quot;);</span><br><span class="line">Method method &#x3D; class1.getMethod(&quot;fly&quot;);</span><br><span class="line">method.invoke(class1.newInstance());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;调用有参方法walk(int m)：&quot;);</span><br><span class="line">method &#x3D; class1.getMethod(&quot;walk&quot;,int.class);</span><br><span class="line">method.invoke(class1.newInstance(),100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo8: 通过Java反射机制得到类加载器信息</span><br><span class="line"> * </span><br><span class="line"> * 在java中有三种类类加载器。[这段资料网上截取]</span><br><span class="line">1）Bootstrap ClassLoader 此加载器采用c++编写，一般开发中很少见。</span><br><span class="line">2）Extension ClassLoader 用来进行扩展类的加载，一般对应的是jre\lib\ext目录中的类</span><br><span class="line">3）AppClassLoader 加载classpath指定的类，是最常用的加载器。同时也是java中默认的加载器。</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo8() throws ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class="line">String nameString &#x3D; class1.getClassLoader().getClass().getName();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Demo8: 类加载器类名: &quot; + nameString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * </span><br><span class="line"> * @author xiaoyaomeng</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">class  Person&#123;</span><br><span class="line">private int age;</span><br><span class="line">private String name;</span><br><span class="line">public Person()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public Person(int age, String name)&#123;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class SuperMan extends Person implements ActionInterface</span><br><span class="line">&#123;</span><br><span class="line">private boolean BlueBriefs;</span><br><span class="line"></span><br><span class="line">public void fly()</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;超人会飞耶～～&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean isBlueBriefs() &#123;</span><br><span class="line">return BlueBriefs;</span><br><span class="line">&#125;</span><br><span class="line">public void setBlueBriefs(boolean blueBriefs) &#123;</span><br><span class="line">BlueBriefs &#x3D; blueBriefs;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void walk(int m) &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;超人会走耶～～走了&quot; + m + &quot;米就走不动了！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">interface ActionInterface&#123;</span><br><span class="line">public void walk(int m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、java反射调用service或mapper中的接口"><a href="#五、java反射调用service或mapper中的接口" class="headerlink" title="五、java反射调用service或mapper中的接口"></a>五、java反射调用service或mapper中的接口</h2><p>java中的反射需要一个实例，但是接口无法提供这样的实例，但是JDK提供了一个叫做动态代理的东西，这个代理恰恰只能代理接口。所以我们想要反射接口需要使用这个动态代理来做。</p><p>在java的动态代理机制中，有两个重要的东西，一个是 InvocationHandler(接口)、另一个则是 Proxy(类)，这是我们动态代理必须用到的两个东西。</p><h3 id="1、静态代理"><a href="#1、静态代理" class="headerlink" title="1、静态代理"></a>1、静态代理</h3><p>先来看一下静态代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class TestStaticProxy &#123;</span><br><span class="line">    &#x2F;&#x2F;这里传入的是接口类型的对象，方便向上转型，实现多态</span><br><span class="line">    public static void consumer(ProxyInterface pi)&#123;</span><br><span class="line">        pi.say();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        consumer(new ProxyObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;代理接口</span><br><span class="line">interface ProxyInterface&#123;</span><br><span class="line">    public void say();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;被代理者</span><br><span class="line">class RealObject implements ProxyInterface&#123;</span><br><span class="line">    &#x2F;&#x2F;实现接口方法</span><br><span class="line">    @Override</span><br><span class="line">    public void say() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        System.out.println(&quot;say&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;代理者</span><br><span class="line">class ProxyObject implements ProxyInterface&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void say() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        &#x2F;&#x2F;dosomething for example</span><br><span class="line">        System.out.println(&quot;hello proxy&quot;);</span><br><span class="line">        new RealObject().say();</span><br><span class="line">        System.out.println(&quot;this is method end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line">hello proxy</span><br><span class="line">say</span><br><span class="line">this is method end</span><br></pre></td></tr></table></figure><h3 id="2、动态代理"><a href="#2、动态代理" class="headerlink" title="2、动态代理"></a>2、动态代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line">public class TestActiveProxy&#123;</span><br><span class="line">    static void customer(ProxyInterface pi)&#123;</span><br><span class="line">        pi.say();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        RealObject real &#x3D; new RealObject();</span><br><span class="line">        ProxyInterface proxy &#x3D; (ProxyInterface)Proxy.newProxyInstance(ProxyInterface.class.getClassLoader(),new Class[]&#123;ProxyInterface.class&#125;, new ProxyObject(real));</span><br><span class="line">        customer(proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface ProxyInterface&#123;</span><br><span class="line">    void say();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;被代理类</span><br><span class="line">class RealObject implements ProxyInterface&#123;</span><br><span class="line">    public void say()&#123;</span><br><span class="line">        System.out.println(&quot;i&#39;m talking&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;代理类，实现InvocationHandler 接口</span><br><span class="line">class ProxyObject implements InvocationHandler&#123;</span><br><span class="line">    private Object proxied &#x3D; null;</span><br><span class="line">    public ProxyObject()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public ProxyObject(Object proxied)&#123;</span><br><span class="line">        this.proxied  &#x3D; proxied;</span><br><span class="line">    &#125;</span><br><span class="line">    public Object invoke(Object arg0, Method arg1, Object[] arg2) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;hello&quot;);</span><br><span class="line">        return arg1.invoke(proxied, arg2);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、应用场景"><a href="#3、应用场景" class="headerlink" title="3、应用场景"></a>3、应用场景</h3><p>假如现在我们需要通过反射得到<code>TestMapper</code>接口，然后调用其中的一个<code>selectById</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface TestMapper&#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">        * 根据id查对象</span><br><span class="line">        *&#x2F;</span><br><span class="line">        User  selectById(@Param(&quot;id&quot;) Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在如果我们需要反射使用该接口根据用户ID获取用户对象是无法直接反射调取的，所以我们需要一个动态代理类。<br>创建一个<code>MyInvocationHandler</code>实现<code>InvocationHandler</code>接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    private Object target;</span><br><span class="line"></span><br><span class="line">    public MyInvocationHandler(Object target) &#123;</span><br><span class="line">        this.target &#x3D; target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        return method.invoke(target,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去生成代理对象并调用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> SqlSession sqlSession &#x3D; this.sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"> Class&lt;?&gt; clazz &#x3D; Class.forName(&quot;com.example.demo.mapper.TestMapper&quot;);</span><br><span class="line"></span><br><span class="line"> Object instance &#x3D; Proxy.newProxyInstance(</span><br><span class="line">                clazz.getClassLoader(),</span><br><span class="line">                new Class[]&#123;clazz&#125;,</span><br><span class="line">                new MyInvocationHandler(sqlSession.getMapper(clazz))</span><br><span class="line">        );</span><br><span class="line">&#x2F;&#x2F;这里我是通过sqlSession来获取Mapper的</span><br><span class="line"></span><br><span class="line"> Method method &#x3D; instance.getClass().getMethod(&quot;selectById&quot;,Integer.class);</span><br><span class="line"> method.invoke(instance, 1);</span><br><span class="line">&#x2F;&#x2F;object为mapper中传入的参数</span><br></pre></td></tr></table></figure><p>这里需要注意，newProxyInstance()方法中最后一个参数，即为我们创建的动态代理的类（因为我这里调用的接口为mybatis中mapper中的接口，所以需要从sqlSession中getMapper）。</p><p>参考：<br><a href="http://blog.qiji.tech/archives/4374" target="_blank" rel="noopener">http://blog.qiji.tech/archives/4374</a><br><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">https://www.jianshu.com/p/9be58ee20dee</a><br><a href="https://blog.csdn.net/ljphhj/article/details/12858767" target="_blank" rel="noopener">https://blog.csdn.net/ljphhj/article/details/12858767</a><br><a href="https://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zipkin</title>
      <link href="/2020/01/01/zipkin/"/>
      <url>/2020/01/01/zipkin/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjg3MTc0MGEwOWZiMjNjLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h3 id="Waht-is-zipkin"><a href="#Waht-is-zipkin" class="headerlink" title="Waht is zipkin?"></a>Waht is zipkin?</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zYjQ1NTgzNDJhNWQ3NWVlLnBuZw?x-oss-process=image/format,png" alt="zipkin.png"><br>Zipkin是一种分布式跟踪系统。它有助于收集解决微服务架构中的延迟问题所需的时序数据。它管理这些数据的收集和查找。Zipkin的设计基于Google Dapper论文。</p><p>应用程序用于向Zipkin报告时序数据。Zipkin UI还提供了一个依赖关系图，显示了每个应用程序通过的跟踪请求数。如果要解决延迟问题或错误，可以根据应用程序，跟踪长度，注释或时间戳对所有跟踪进行筛选或排序。选择跟踪后，您可以看到每个跨度所需的总跟踪时间百分比，从而可以识别问题应用程序。</p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>下面我们将逐步构建并启动Zipkin实例，以便在本地检查Zipkin。有三个选项：使用Java，Docker或从源代码运行。</p><p>如果您熟悉Docker，这是首选的方法。如果您不熟悉Docker，请尝试通过Java或源代码运行。</p><blockquote><p>无论您如何启动Zipkin，请浏览http：// your_host：9411以查找跟踪！</p></blockquote><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p><a href="https://github.com/openzipkin/docker-zipkin" target="_blank" rel="noopener">Docker zipkin</a>工程可以创建docker 镜像, 提供脚本和一个<a href="https://github.com/openzipkin/docker-zipkin/blob/master/docker-compose.yml" target="_blank" rel="noopener">docker-compose.yml</a> 用于启动预建的镜像。最快的开始是直接运行最新的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9411:9411 openzipkin&#x2F;zipkin</span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>如果安装了Java 8或更高版本，最快的方法是获得最新版本后，通过java启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;curl -sSL https:&#x2F;&#x2F;zipkin.io&#x2F;quickstart.sh  |  bash -s</span><br><span class="line"></span><br><span class="line">&gt;java -jar zipkin.jar</span><br></pre></td></tr></table></figure><h4 id="Running-from-Source（源代码运行）"><a href="#Running-from-Source（源代码运行）" class="headerlink" title="Running from Source（源代码运行）"></a>Running from Source（源代码运行）</h4><p>Zipkin可以从源代码运行。要实现这一点，您需要获得<a href="https://github.com/openzipkin/zipkin" target="_blank" rel="noopener">zipkin源码</a></p><blockquote><p>get the latest source</p></blockquote><blockquote><p>git clone <a href="https://github.com/openzipkin/zipkin" target="_blank" rel="noopener">https://github.com/openzipkin/zipkin</a></p></blockquote><blockquote><p>cd zipkin</p></blockquote><blockquote><p>Build the server and also make its dependencies</p></blockquote><blockquote><p>./mvnw -DskipTests –also-make -pl zipkin-server clean install</p></blockquote><blockquote><p>Run the server</p></blockquote><blockquote><p>java -jar ./zipkin-server/target/zipkin-server-*exec.jar</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Tomcat8上传文件无可读权限问题</title>
      <link href="/2020/01/01/%E8%A7%A3%E5%86%B3Tomcat8%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%A0%E5%8F%AF%E8%AF%BB%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/01/%E8%A7%A3%E5%86%B3Tomcat8%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%A0%E5%8F%AF%E8%AF%BB%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODAwODUwNDI0YWE0Y2M4LmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>使用springmvc做了一个文件上传的功能，上传到nginx目录下的一个文件夹，但是通过目录访问的时候却报403的错误<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YTE5NGE0OTNmOTdmYzkxLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>去服务器查看了一下文件的权限，发现没有可读权限，于是定位了问题，上传的文件全都没有可读权限。</p><h3 id="为什么没有可读权限"><a href="#为什么没有可读权限" class="headerlink" title="为什么没有可读权限"></a>为什么没有可读权限</h3><p>网上查阅资料发现，linux默认umask为022，对应权限为755，其它用户可读可执行。可以<code>vim /etc/profile</code>，搜索umusk关键字查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ $UID -gt 199 ] &amp;&amp; [ &quot;&#96;&#x2F;usr&#x2F;bin&#x2F;id -gn&#96;&quot; &#x3D; &quot;&#96;&#x2F;usr&#x2F;bin&#x2F;id -un&#96;&quot; ]; then</span><br><span class="line">    umask 002</span><br><span class="line">else</span><br><span class="line">    umask 022</span><br></pre></td></tr></table></figure><p>而tomcat8默认umask为027，对应权限为750，也就是说其它用户连可读的权限都没有。<br>可打开catalina.sh文件，搜索umask查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Set UMASK unless it has been overridden</span><br><span class="line">if [ -z &quot;$UMASK&quot; ]; then</span><br><span class="line">    UMASK&#x3D;&quot;0027&quot;</span><br><span class="line">fi</span><br><span class="line">umask $UMASK</span><br></pre></td></tr></table></figure><p>在catalina.sh文件的开篇可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#   UMASK           (Optional) Override Tomcat&#39;s default UMASK of 0027</span><br></pre></td></tr></table></figure><p>于是问题有了答案<br>登录到服务器，进入到tomcat的bin目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim catalina.sh</span><br><span class="line">输入i,进入编辑模式，将umask改为0022</span><br><span class="line">：wq(保存退出)</span><br></pre></td></tr></table></figure><p>可以看到<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjU1N2JlN2UzMTVlMzE0LnBuZw?x-oss-process=image/format,png" alt="3b0b9d5dc0f2d2115073293aeee4331.png"><br>接下来重启tomcat，重新上传图片即可香油可读权限。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件版本命名规范及各阶段说明</title>
      <link href="/2020/01/01/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%8F%8A%E5%90%84%E9%98%B6%E6%AE%B5%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/01/01/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%8F%8A%E5%90%84%E9%98%B6%E6%AE%B5%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zZDQ3NWU3MTkwZTFjYjIwLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很多开发人员都没有经历过产品不断的迭代过程，基本上都是做完一套，至多经历一两个版本的迭代，基本上都会调入到另一个项目组或者离职，之后这样的事情不断地重复，直至离开这个行业。</p><p>开发人员3个月开发一个版本，定位version1，如果有bug，修复后该怎么升级这个版本号呢？可能是version2，修复这个bug后，如果还有bug呢，可能继续version3.，如果这样下去，还没到产品上线，你这个版本号都会很大，而且很难记得哪一版有什么功能。如果产品上线了以后，还会升级，大家可以想象一下，这样下去后，可能到达了version9999….</p><h3 id="命名格式"><a href="#命名格式" class="headerlink" title="命名格式"></a>命名格式</h3><p>版本控制比较普遍的 3 种命名格式 :GNU 风格的版本号命名格式、Windows 风格的版本号命名格式、.Net Framework 风格的版本号命名格式。</p><h5 id="GNU-风格的版本号命名格式"><a href="#GNU-风格的版本号命名格式" class="headerlink" title="GNU 风格的版本号命名格式"></a>GNU 风格的版本号命名格式</h5><p>主版本号 . 子版本号 [. 修正版本号 [. 编译版本号 ]]<br><code>Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]]</code><br>示例 :<code>1.2.1, 2.0, 5.0.0 build-13124</code></p><h5 id="Windows-风格的版本号命名格式"><a href="#Windows-风格的版本号命名格式" class="headerlink" title="Windows 风格的版本号命名格式"></a>Windows 风格的版本号命名格式</h5><p>主版本号 . 子版本号 [ 修正版本号 [. 编译版本号 ]]<br><code>Major_Version_Number.Minor_Version_Number[Revision_Number[.Build_Number]]</code><br>示例: <code>1.21, 2.0</code></p><h5 id="Net-Framework-风格的版本号命名格式"><a href="#Net-Framework-风格的版本号命名格式" class="headerlink" title=".Net Framework 风格的版本号命名格式"></a>.Net Framework 风格的版本号命名格式</h5><p>主版本号.子版本号[.编译版本号[.修正版本号]]<br><code>Major_Version_Number.Minor_Version_Number[.Build_Number[.Revision_Number]]</code><br>版本号由二至四个部分组成：主版本号、次版本号、内部版本号和修订号。主版本号和次版本号是必选的；内部版本号和修订号是可选的，但是如果定义了修订号部分，则内部版本号就是必选的。所有定义的部分都必须是大于或等于 0 的整数。</p><h5 id="应根据下面的约定使用这些部分："><a href="#应根据下面的约定使用这些部分：" class="headerlink" title="应根据下面的约定使用这些部分："></a>应根据下面的约定使用这些部分：</h5><p><code>Major</code> ：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。</p><p><code>Minor</code>：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。</p><p><code>Build</code> ：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。</p><p><code>Revision</code> ：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。</p><p>程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 (Hotfix) 更新。</p><p>因为目前市场上的软件基本上都是移动端化了，所以这里主要介绍GNU风格。</p><h3 id="软件版本阶段说明"><a href="#软件版本阶段说明" class="headerlink" title="软件版本阶段说明"></a>软件版本阶段说明</h3><ul><li><p>Base版: 此版本表示该软件仅仅是一个假页面链接，通常包括所有的功能和页面布局，但是页面中的功能都没有做完整的实现，只是做为整体网站的一个基础架构。</p></li><li><p>Alpha版: 此版本表示该软件在此阶段主要是以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改。</p></li><li><p>Beta版: 该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步消除，此版本主要的修改对像是软件的UI。</p></li><li><p>RC版: 该版本已经相当成熟了，基本上不存在导致错误的BUG，与即将发行的正式版相差无几。</p></li><li><p>Release版: 该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(Ｒ)。</p></li></ul><h3 id="版本命名规范"><a href="#版本命名规范" class="headerlink" title="版本命名规范"></a>版本命名规范</h3><p>软件版本号由四部分组成：</p><ul><li>第一部分为主版本号</li><li>第二部分为子版本号</li><li>第三部分为阶段版本号</li><li>第四部分为日期版本号加希腊字母版本号<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmJhMzQ1OWZhZWJlYzFhLnBuZw?x-oss-process=image/format,png" alt="版本命名规范.png"><h3 id="版本号修改规则"><a href="#版本号修改规则" class="headerlink" title="版本号修改规则"></a>版本号修改规则</h3></li><li><code>主版本号修改</code> 当功能模块有较大的变动，比如增加多个模块或者整体架构发生变化。此版本号由项目决定是否修改。</li><li><code>子版本号修改</code> 当功能有一定的增加或变化，比如增加了对权限控制、增加自定义视图等功能。此版本号由项目决定是否修改。</li><li><code>阶段版本号修改</code> 一般是 Bug 修复或是一些小的变动，要经常发布修订版，时间间隔不限，修复一个严重的bug即可发布一个修订版。此版本号由项目经理决定是否修改。</li><li><code>日期版本号</code> 用于记录修改项目的当前日期，每天对项目的修改都需要更改日期版本号。此版本号由开发人员决定是否修改。</li><li><code>希腊字母版本号</code> 此版本号用于标注当前版本的软件处于哪个开发阶段，当软件进入到另一个阶段时需要修改此版本号。此版本号由项目决定是否修改。<h3 id="版本号阶段标志"><a href="#版本号阶段标志" class="headerlink" title="版本号阶段标志"></a>版本号阶段标志</h3><table><thead><tr><th>阶段名称</th><th>阶段标识</th></tr></thead><tbody><tr><td>需求控制</td><td>a</td></tr><tr><td>设计阶段</td><td>b</td></tr><tr><td>编码阶段</td><td>c</td></tr><tr><td>单元测试</td><td>d</td></tr><tr><td>单元测试修改</td><td>e</td></tr><tr><td>集成测试</td><td>f</td></tr><tr><td>集成测试修改</td><td>g</td></tr><tr><td>系统测试</td><td>h</td></tr><tr><td>系统测试修改</td><td>i</td></tr><tr><td>验收测试</td><td>j</td></tr><tr><td>验收测试修改</td><td>k</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建Spring Boot项目及常用技术整合</title>
      <link href="/2020/01/01/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BASpring-Boot%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF%E6%95%B4%E5%90%88/"/>
      <url>/2020/01/01/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BASpring-Boot%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZWEzZDRhYjIyOGVmNjIxLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h3 id="Spring-Boot简介"><a href="#Spring-Boot简介" class="headerlink" title="Spring Boot简介"></a>Spring Boot简介</h3><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p><h3 id="Spring-Boot特点"><a href="#Spring-Boot特点" class="headerlink" title="Spring Boot特点"></a>Spring Boot特点</h3><ul><li><p>创建独立的Spring应用程序</p></li><li><p>嵌入的Tomcat，无需部署WAR文件</p></li><li><p>简化Maven配置</p></li><li><p>自动配置Spring</p></li><li><p>提供生产就绪型功能，如指标，健康检查和外部配置</p></li><li><p>绝对没有代码生成并且对XML也没有配置要求</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="1、访问http-start-spring-io-构建项目，也可在idea创建如下图："><a href="#1、访问http-start-spring-io-构建项目，也可在idea创建如下图：" class="headerlink" title="1、访问http://start.spring.io/构建项目，也可在idea创建如下图："></a>1、访问<a href="http://start.spring.io/构建项目，也可在idea创建如下图：" target="_blank" rel="noopener">http://start.spring.io/构建项目，也可在idea创建如下图：</a></h4><p><img src="https://img-blog.csdnimg.cn/20191218173310114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RldmlsbGkwMzEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05ZWMxNTkwMzg4MzE0ZWYxLnBuZw?x-oss-process=image/format,png" alt="step2.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xN2RlNDY2YTU4Yjk1YWQyLnBuZw?x-oss-process=image/format,png" alt="step3.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNzQwYWIyYzFiMTE2ZGYzLnBuZw?x-oss-process=image/format,png" alt="step4.png"></p><h4 id="2、-springboot默认生成三个文件"><a href="#2、-springboot默认生成三个文件" class="headerlink" title="2、 springboot默认生成三个文件"></a>2、 springboot默认生成三个文件</h4><h5 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.example&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;demo&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>重点就一个gav：spring-boot-starter-web，其他可以删除。</p><h5 id="2-2-application-properties"><a href="#2-2-application-properties" class="headerlink" title="2.2 application.properties"></a>2.2 application.properties</h5><p>该文件默认为空，springboot的默认启动端口号：8080，可以在改文件修改。建议用yml的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br></pre></td></tr></table></figure><h5 id="2-3-启动类文件"><a href="#2-3-启动类文件" class="headerlink" title="2.3 启动类文件"></a>2.3 启动类文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class JxcApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(JxcApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-验证springboot"><a href="#2-4-验证springboot" class="headerlink" title="2.4 验证springboot"></a>2.4 验证springboot</h5><p>在项目包路径下创建一个Controller，写一个<code>HelloController</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String getHello() &#123;</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器查看效果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMDhmZmU5ZDVjZWI5Nzg4LnBuZw?x-oss-process=image/format,png" alt="HelloController.png"></p></li></ul><h3 id="完成项目"><a href="#完成项目" class="headerlink" title="完成项目"></a>完成项目</h3><h4 id="完整项目目录"><a href="#完整项目目录" class="headerlink" title="完整项目目录"></a>完整项目目录</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZDM5ZWI1ZTRkOGU5ZjJjLnBuZw?x-oss-process=image/format,png" alt="project.png"></p><h4 id="1、项目依赖"><a href="#1、项目依赖" class="headerlink" title="1、项目依赖"></a>1、项目依赖</h4><ul><li>web <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;aspectjweaver.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>mysql<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>lombok(可选)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>pagehelper(可选)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;$&#123;pagehelper.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>JWT(可选)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;io.jsonwebtoken&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;jjwt&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;$&#123;jwt.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>mybatis<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>shiro<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;shiro-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.4.0&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>hutool(可选)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.0.7&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>druid<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.1.10&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.1.10&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>jdbc<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>fastjson<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;fastjson.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>tomcat<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.tomcat.embed&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;tomcat-embed-core&lt;&#x2F;artifactId&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>附上properties<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">        &lt;project.version&gt;1.0&lt;&#x2F;project.version&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">        &lt;mysql.version&gt;5.1.25&lt;&#x2F;mysql.version&gt;</span><br><span class="line">        &lt;pagehelper.version&gt;1.2.12&lt;&#x2F;pagehelper.version&gt;</span><br><span class="line">        &lt;jwt.version&gt;0.9.1&lt;&#x2F;jwt.version&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">        &lt;commons.lang.version&gt;3.9&lt;&#x2F;commons.lang.version&gt;</span><br><span class="line">        &lt;aspectjweaver.version&gt;1.9.4&lt;&#x2F;aspectjweaver.version&gt;</span><br><span class="line">        &lt;fastjson.version&gt;1.2.62&lt;&#x2F;fastjson.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure><h4 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h4><h5 id="2-1修改application-properties为application-yml"><a href="#2-1修改application-properties为application-yml" class="headerlink" title="2.1修改application.properties为application.yml"></a>2.1修改<code>application.properties</code>为<code>application.yml</code></h5>配置端口，项目根路径，spring配置，mybatis配置，分页插件配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8100</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: &#x2F;api</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-8</span><br><span class="line">      force: true</span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:&#x2F;mapper&#x2F;*.xml</span><br><span class="line">  type-aliases-package: com.example.jxc.domain.entity.*</span><br><span class="line">  configuration:</span><br><span class="line">    cache-enabled: true</span><br><span class="line">    lazy-loading-enabled: true</span><br><span class="line">    multiple-result-sets-enabled: true</span><br><span class="line">    use-column-label: true</span><br><span class="line">    call-setters-on-nulls: true</span><br><span class="line">    local-cache-scope: session</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    default-executor-type: BATCH</span><br><span class="line">    auto-mapping-behavior: PARTIAL</span><br><span class="line"></span><br><span class="line">pagehelper:</span><br><span class="line">  helperDialect: mysql</span><br><span class="line">  reasonable: true</span><br><span class="line">  supportMethodsArguments: true</span><br><span class="line">  params: count&#x3D;countSql</span><br></pre></td></tr></table></figure></li></ul><p>mybatis中的configuration配置，这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项的意图、默认值等。<br>| 设置名| 描述| 有效值|默认值|<br>|—–|—–|——|——|<br>| cacheEnabled | 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。 |  true  false |true|<br>| lazyLoadingEnabled| 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 |  true  false |false|<br>| aggressiveLazyLoading|      当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。 |  true  false |false （在 3.4.1 及之前的版本默认值为 true） |<br>| multipleResultSetsEnabled| 是否允许单一语句返回多结果集（需要驱动支持）。 |  true  false |true|<br>| useColumnLabel|      使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。  |  true  false |true|<br>| useGeneratedKeys| 允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。 |  true  false |false |<br>| autoMappingBehavior| 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 | NONE, PARTIAL, FULL  |PARTIAL|<br>| autoMappingUnknownColumnBehavior| 指定发现自动映射目标未知列（或者未知属性类型）的行为。NONE: 不做任何反应，WARNING: 输出提醒日志 (‘org.apache.ibatis.session.AutoMappingUnknownColumnBehavior’ 的日志等级必须设置为 WARN) ，FAILING: 映射失败 (抛出 SqlSessionException) |  NONE, WARNING, FAILING  |NONE|<br>| defaultExecutorType| 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。 |  SIMPLE REUSE BATCH  |SIMPLE|<br>| defaultStatementTimeout|      设置超时时间，它决定驱动等待数据库响应的秒数。  |  任意正整数 |未设置 (null) |<br>| defaultFetchSize|      为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。  |  任意正整数 |未设置 (null) |<br>| defaultResultSetType|      Specifies a scroll strategy when omit it per statement settings. (Since: 3.5.2)  |  FORWARD_ONLY SCROLL_SENSITIVE SCROLL_INSENSITIVE  DEFAULT(same behavior with ‘Not Set’)  |Not Set (null) |<br>| safeRowBoundsEnabled| 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。  |  true  false |false |<br>| safeResultHandlerEnabled|允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为 false。 |  true  false |false |<br>| mapUnderscoreToCamelCase|是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 |  true  false |false |<br>| localCacheScope| MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。  |  SESSION  STATEMENT |SESSION  |<br>| jdbcTypeForNull| 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 |  JdbcType 常量，常用值：NULL, VARCHAR 或 OTHER。|OTHER|<br>| lazyLoadTriggerMethods| 指定哪个对象的方法触发一次延迟加载。 | 用逗号分隔的方法列表 |equals,clone,hashCode,toString |<br>| defaultScriptingLanguage| 指定动态 SQL 生成的默认语言。 | 一个类型别名或完全限定类名 |org.apache.ibatis.scripting.xmltags.XMLLanguageDriver |<br>| defaultEnumTypeHandler|指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）  | 一个类型别名或完全限定类名 |org.apache.ibatis.type.EnumTypeHandler |<br>| callSettersOnNulls| 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值初始化的时候比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。 |  true  false |false |<br>| returnInstanceForEmptyRow| 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2）  |  true  false |false |<br>| logPrefix| 指定 MyBatis 增加到日志名称的前缀。 |  任何字符串 |未设置|<br>| logImpl| 指定 MyBatis      指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 |  SLF4J,LOG4J,LOG4J2,JDK_LOGGING,COMMONS_LOGGING,STDOUT_LOGGING,NO_LOGGING |未设置|<br>| proxyFactory|      指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。 |       CGLIB ,JAVASSIST |AVASSIST （MyBatis 3.3 以上） |<br>| vfsImpl| 指定 VFS 的实现  |       自定义 VFS 的实现的类全限定名，以逗号分隔。 |未设置|<br>| useActualParamName| 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）  |  true   false  |true|<br>| configurationFactory|      指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3）   |       类型别名或者全类名.  |未设置|</p><h5 id="2-2-新建application-dev-yml"><a href="#2-2-新建application-dev-yml" class="headerlink" title="2.2 新建application-dev.yml"></a>2.2 新建<code>application-dev.yml</code></h5><p>配置数据库信息,通过<code>application.yml</code>中的active来启用dev配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure><p><code>application-dev.yml</code>完整配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    #   数据源基本配置</span><br><span class="line">    username: root</span><br><span class="line">    password:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;fhshgl</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    #   数据源其他配置</span><br><span class="line">    initialSize: 5</span><br><span class="line">    minIdle: 5</span><br><span class="line">    maxActive: 20</span><br><span class="line">    maxWait: 60000</span><br><span class="line">    timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">    minEvictableIdleTimeMillis: 300000</span><br><span class="line">    validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">    testWhileIdle: true</span><br><span class="line">    testOnBorrow: false</span><br><span class="line">    testOnReturn: false</span><br><span class="line">    poolPreparedStatements: true</span><br><span class="line">    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#39;wall&#39;用于防火墙</span><br><span class="line">    filters: stat,wall</span><br><span class="line">    maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">    useGlobalDataSourceStat: true</span><br><span class="line">    connectionProperties: druid.stat.mergeSql&#x3D;true;druid.stat.slowSqlMillis&#x3D;500</span><br></pre></td></tr></table></figure><h4 id="3、数据库连接池"><a href="#3、数据库连接池" class="headerlink" title="3、数据库连接池"></a>3、数据库连接池</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjc5NGJmZjQ0ZDk3NjY4LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class DruidConfig &#123;</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(prefix &#x3D; &quot;spring.datasource&quot;)</span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource druid()&#123;</span><br><span class="line">        return  new DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 配置Druid的监控</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean statViewServlet()&#123;</span><br><span class="line">        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean(new StatViewServlet(), &quot;&#x2F;druid&#x2F;*&quot;);</span><br><span class="line">        Map&lt;String,String&gt; initParams &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);</span><br><span class="line">        initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);</span><br><span class="line">        &#x2F;&#x2F;默认就是允许所有访问</span><br><span class="line">        initParams.put(&quot;allow&quot;,&quot;&quot;);</span><br><span class="line">        initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 配置一个web监控的filter</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean webStatFilter()&#123;</span><br><span class="line">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(new WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; initParams &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,&#x2F;druid&#x2F;*&quot;);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(&quot;&#x2F;*&quot;));</span><br><span class="line"></span><br><span class="line">        return  bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、shiro"><a href="#4、shiro" class="headerlink" title="4、shiro"></a>4、shiro</h4><h5 id="4-1自定义realm"><a href="#4-1自定义realm" class="headerlink" title="4.1自定义realm"></a>4.1自定义realm</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMzlmZmVlNDViNzQxOWIzLnBuZw?x-oss-process=image/format,png" alt="realm.png"><br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class MyRealm extends AuthorizingRealm&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">        &#x2F;&#x2F;拿到封装好账户密码的token</span><br><span class="line">        UsernamePasswordToken token &#x3D; (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        String userName &#x3D; token.getUsername();</span><br><span class="line">        &#x2F;&#x2F;用户校验</span><br><span class="line">        User user &#x3D; this.userService.getUser(userName);</span><br><span class="line">        if (user &#x3D;&#x3D; null) &#123;</span><br><span class="line">            throw new AuthenticationException(&quot;用户名或密码错误！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;加盐 计算盐值 保证每个加密后的 MD5 不一样</span><br><span class="line">        ByteSource credentialsSalt &#x3D; ByteSource.Util.bytes(user.getUsername());</span><br><span class="line">        SimpleAuthenticationInfo info &#x3D; new SimpleAuthenticationInfo(user, user.getPassword(), credentialsSalt,</span><br><span class="line">                this.getName());</span><br><span class="line">        return info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2shiro配置"><a href="#4-2shiro配置" class="headerlink" title="4.2shiro配置"></a>4.2shiro配置</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kMmViZjdkM2UwOWExNzBlLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 主要配置一些相应的URL的规则和访问权限</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public ShiroFilterFactoryBean shiroFilter() &#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean &#x3D; new ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager());</span><br><span class="line">        &#x2F;&#x2F;拦截器.</span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionMap &#x3D; new LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">        &#x2F;&#x2F;配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了</span><br><span class="line">        filterChainDefinitionMap.put(&quot;&#x2F;system&#x2F;logout&quot;, &quot;anon&quot;);</span><br><span class="line">        &#x2F;&#x2F;过滤链定义，从上向下顺序执行，一般将&#x2F;**放在最为下边</span><br><span class="line">        &#x2F;&#x2F;authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问</span><br><span class="line">&#x2F;&#x2F;        filterChainDefinitionMap.put(&quot;&#x2F;static&#x2F;**&quot;, &quot;anon&quot;);</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(&quot;&#x2F;system&#x2F;login&quot;);</span><br><span class="line">        filterChainDefinitionMap.put(&quot;&#x2F;**&quot;, &quot;authc&quot;);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        return shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 注入 securityManager</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultWebSecurityManager securityManager() &#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager &#x3D; new DefaultWebSecurityManager();</span><br><span class="line">        &#x2F;&#x2F; 设置realm.</span><br><span class="line">        securityManager.setRealm(customRealm());</span><br><span class="line">        return securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 自定义身份认证 realm;</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 必须写这个类，并加上 @Bean 注解，目的是注入 MyRealm，</span><br><span class="line">     * 否则会影响 MyRealm 中其他类的依赖注入</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public MyRealm customRealm() &#123;</span><br><span class="line">        return new MyRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证</span><br><span class="line">     * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    @DependsOn(&#123;&quot;lifecycleBeanPostProcessor&quot;&#125;)</span><br><span class="line">    public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() &#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator &#x3D; new DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        advisorAutoProxyCreator.setProxyTargetClass(true);</span><br><span class="line">        return advisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor() &#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor &#x3D; new AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());</span><br><span class="line">        return authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Shiro生命周期处理器 ---可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123;</span><br><span class="line">        return new LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、过滤器-跨域过滤"><a href="#5、过滤器-跨域过滤" class="headerlink" title="5、过滤器-跨域过滤"></a>5、过滤器-跨域过滤</h4><h5 id="5-1跨域过滤"><a href="#5-1跨域过滤" class="headerlink" title="5.1跨域过滤"></a>5.1跨域过滤</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODEwMTBkMGZhZGEwYTcwLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class CostFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest req &#x3D; (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse resp &#x3D; (HttpServletResponse) response;</span><br><span class="line">        String origin &#x3D; req.getHeader(&quot;Origin&quot;);</span><br><span class="line">        if (origin &#x3D;&#x3D; null) &#123;</span><br><span class="line">            origin &#x3D; req.getHeader(&quot;Referer&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 允许指定域访问跨域资源</span><br><span class="line">        resp.setHeader(&quot;Access-Control-Allow-Origin&quot;, origin);</span><br><span class="line">        &#x2F;&#x2F; 允许客户端携带跨域cookie，此时origin值不能为“*”，只能为指定单一域名</span><br><span class="line">        resp.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class="line"></span><br><span class="line">        if (&quot;OPTIONS&quot;.equals(req.getMethod())) &#123;</span><br><span class="line">            String allowMethod &#x3D; req.getHeader(&quot;Access-Control-Request-Method&quot;);</span><br><span class="line">            String allowHeaders &#x3D; req.getHeader(&quot;Access-Control-Request-Headers&quot;);</span><br><span class="line">            &#x2F;&#x2F; 浏览器缓存预检请求结果时间,单位:秒</span><br><span class="line">            resp.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;86400&quot;);</span><br><span class="line">            &#x2F;&#x2F; 允许浏览器在预检请求成功之后发送的实际请求方法名</span><br><span class="line">            resp.setHeader(&quot;Access-Control-Allow-Methods&quot;, allowMethod);</span><br><span class="line">            &#x2F;&#x2F; 允许浏览器发送的请求消息头</span><br><span class="line">            resp.setHeader(&quot;Access-Control-Allow-Headers&quot;, allowHeaders);</span><br><span class="line">            resp.setHeader(&quot;Content-Type&quot;, &quot;application&#x2F;json;charset&#x3D;utf-8&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-过滤器配置"><a href="#5-2-过滤器配置" class="headerlink" title="5.2 过滤器配置"></a>5.2 过滤器配置</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZWU3NDQzY2JkMDg2MDVkLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class FilterConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean configureFilter()&#123;</span><br><span class="line">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        bean.setName(&quot;costFilter&quot;);</span><br><span class="line">        CostFilter costFilter &#x3D; new CostFilter();</span><br><span class="line">        bean.setFilter(costFilter);</span><br><span class="line">        bean.setOrder(1);</span><br><span class="line">        List&lt;String&gt; urlList &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">        urlList.add(&quot;&#x2F;*&quot;);</span><br><span class="line">        bean.setUrlPatterns(urlList);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、token拦截"><a href="#6、token拦截" class="headerlink" title="6、token拦截"></a>6、token拦截</h4><h5 id="6-1JWT"><a href="#6-1JWT" class="headerlink" title="6.1JWT"></a>6.1JWT</h5><p>jwt工具类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">public class JwtUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static SecretKey getBase64Key() &#123;</span><br><span class="line">        String stringKey &#x3D; &quot;MyJwtSecret&quot;;</span><br><span class="line">        byte[] encodeKey &#x3D; Base64.getDecoder().decode(stringKey);</span><br><span class="line">        SecretKey key &#x3D; new SecretKeySpec(encodeKey, 0, encodeKey.length, &quot;AES&quot;);</span><br><span class="line">        return key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 签发token</span><br><span class="line">     *</span><br><span class="line">     * @param userName 用户名</span><br><span class="line">     * @return token</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String create(String userName) &#123;</span><br><span class="line">        Date now &#x3D; new Date(System.currentTimeMillis());</span><br><span class="line">        String token &#x3D; Jwts.builder()</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .setSubject(userName)</span><br><span class="line">                .setExpiration(new Date(System.currentTimeMillis() + 60 * 60 * 1000))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, getBase64Key())</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解析token</span><br><span class="line">     *</span><br><span class="line">     * @param token token</span><br><span class="line">     * @return 用户名</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String parse(String token) &#123;</span><br><span class="line">        String username &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            username &#x3D; Jwts.parser()</span><br><span class="line">                    .setSigningKey(getBase64Key())</span><br><span class="line">                    .parseClaimsJws(token.replace(&quot;Bearer &quot;, &quot;&quot;))</span><br><span class="line">                    .getBody()</span><br><span class="line">                    .getSubject();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 检验token是否过期</span><br><span class="line">     *</span><br><span class="line">     * @param token</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static boolean verify(String token) &#123;</span><br><span class="line">        Date expiraDate &#x3D; null;</span><br><span class="line">        Date currentDate &#x3D; new Date();</span><br><span class="line">        try &#123;</span><br><span class="line">            expiraDate &#x3D; Jwts.parser()</span><br><span class="line">                    .setSigningKey(getBase64Key())</span><br><span class="line">                    .parseClaimsJws(token.replace(&quot;Bearer &quot;, &quot;&quot;))</span><br><span class="line">                    .getBody()</span><br><span class="line">                    .getExpiration();</span><br><span class="line">            if (currentDate.before(expiraDate)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2token拦截器"><a href="#6-2token拦截器" class="headerlink" title="6.2token拦截器"></a>6.2token拦截器</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01MzMwZjU3ZTVkNTcxOTYzLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TokenInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    public Log log &#x3D; LogFactory.getLog(TokenInterceptor.class);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)&#123;</span><br><span class="line">        if (request.getMethod().equals(&quot;OPTIONS&quot;)) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        String token &#x3D; request.getHeader(&quot;Authorization&quot;);</span><br><span class="line">        if (token !&#x3D; null) &#123;</span><br><span class="line">            boolean result &#x3D; JwtUtils.verify(token);</span><br><span class="line">            if (result) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.error(&quot;认证失败&quot;);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_NON_AUTHORITATIVE_INFORMATION);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3配置拦截器"><a href="#6-3配置拦截器" class="headerlink" title="6.3配置拦截器"></a>6.3配置拦截器</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjEyNWRjZWNhZjcyODA4LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class InterceptorConfig extends WebMvcConfigurationSupport &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TokenInterceptor tokenInterceptor;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        registry.addInterceptor(tokenInterceptor)</span><br><span class="line">                .addPathPatterns(&quot;&#x2F;**&quot;)</span><br><span class="line">                .excludePathPatterns(&quot;&#x2F;**&#x2F;login&quot;)</span><br><span class="line">                .excludePathPatterns(&quot;&#x2F;**&#x2F;logOut&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、完成一个登录接口LoginController"><a href="#7、完成一个登录接口LoginController" class="headerlink" title="7、完成一个登录接口LoginController"></a>7、完成一个登录接口<code>LoginController</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;system&quot;)</span><br><span class="line">public class LoginController extends BaseController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 浏览器点击登录</span><br><span class="line">     *</span><br><span class="line">     * @param user</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @PostMapping(&quot;&#x2F;login&quot;)</span><br><span class="line">    public R login(@RequestBody User user) &#123;</span><br><span class="line">        log.debug(&quot;------浏览器点击登录------&quot;);</span><br><span class="line">        String userName &#x3D; user.getUsername();</span><br><span class="line">        String passWord &#x3D; user.getPassword();</span><br><span class="line">        UsernamePasswordToken usernamePasswordToken &#x3D; new UsernamePasswordToken(userName, MD5.md5Salt(passWord, userName));</span><br><span class="line">        Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class="line">        try &#123;</span><br><span class="line">            subject.login(usernamePasswordToken);</span><br><span class="line">            String token &#x3D; JwtUtils.create(userName);</span><br><span class="line">            return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);</span><br><span class="line">        &#125; catch (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return R.error(R.MSG_LOGIN_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务网关 Spring Cloud Gateway</title>
      <link href="/2020/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-Spring-Cloud-Gateway/"/>
      <url>/2020/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-Spring-Cloud-Gateway/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMjE2MjFhMjZlNjVhOGQ5LmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="什么是网关"><a href="#什么是网关" class="headerlink" title="什么是网关"></a>什么是网关</h2><p>假设你现在要做一个电商应用，前端是移动端的APP，后端是各种微服务。那你可能某个页面需要调用多个服务的数据来展示。如果没有网关，你的系统看起来就是这个样子的：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01YTQ4NGE3ZTU4Y2M4ODk3LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p>而如果加上了网关，你的系统就会变成这个样子：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02MzQxNWM5YzY0YzViYWVmLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>#Spring Cloud Gateway<br>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><p>Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Netflix Zuul，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul><li>Route（路由）：这是网关的基本构建块。它由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。</li><li>Predicate（断言）：这是一个 Java 8 的 Predicate。输入类型是一个 ServerWebExchange。我们可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。</li><li>Filter（过滤器）：这是org.springframework.cloud.gateway.filter.GatewayFilter的实例，我们可以使用它修改请求和响应。<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNTlmNTA3MTU0NDBkNjdhLnBuZw?x-oss-process=image/format,png" alt="gateway.png"></li></ul><p>（PS：看到这张图是不是很熟悉，没错，很像SpringMVC的请求处理过程）</p><ul><li><p>请求发送到网关，DispatcherHandler是HTTP请求的中央分发器，接管请求并将请求匹配到相应的 HandlerMapping。</p></li><li><p>请求与处理器之间有一个映射关系，网关将会对请求进行路由，handler 此处会匹配到 RoutePredicateHandlerMapping，匹配请求对应的 Route。</p></li><li><p>随后到达网关的 web 处理器，该 WebHandler 代理了一系列网关过滤器和全局过滤器的实例，如对请求或者响应的 Header 处理（增加或者移除某个 Header）。</p></li><li><p>最后，转发到具体的代理服务。</p></li></ul><p>简而言之：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hMzVmNzhiZTMzNjJhN2EwLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>客户端向 Spring Cloud Gateway 发出请求。如果 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。 过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="1-新建一个项目gatewayTest"><a href="#1-新建一个项目gatewayTest" class="headerlink" title="1.新建一个项目gatewayTest"></a>1.新建一个项目gatewayTest</h3><p>在项目中添加3个module<code>eureka,producer,gateway</code><br>项目结构<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWY0NWYzNWNhMjg2MTc0LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h3 id="2-rureka"><a href="#2-rureka" class="headerlink" title="2.rureka"></a>2.rureka</h3><p>新建module</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YzI0YjFlZWYwMjg3ZDEwLnBuZw?x-oss-process=image/format,png" alt="step1.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzMwMjIwY2ZhMGM2NjUzLnBuZw?x-oss-process=image/format,png" alt="step2.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iYjc4NmVmZjgxMGIwY2NjLnBuZw?x-oss-process=image/format,png" alt="step3.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZWU4NDdkZGZjOWNmY2M2LnBuZw?x-oss-process=image/format,png" alt="step4.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGQ0YTllM2RkOGFmZGE4LnBuZw?x-oss-process=image/format,png" alt="step5.png"></p><p>添加eureka依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>完整pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.example.eureka&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;eureka&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;name&gt;eureka&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    fetch-registry: false</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.example.eureka.eureka;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@EnableEurekaServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class EurekaApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序，访问<a href="http://localhost:8761/![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05NzY5NzhkMzZmOGM1NmJlLnBuZw?x-oss-process=image/format,png)" target="_blank" rel="noopener">http://localhost:8761/![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05NzY5NzhkMzZmOGM1NmJlLnBuZw?x-oss-process=image/format,png)</a><br>现在还没有服务进行注册</p><h3 id="3-producer"><a href="#3-producer" class="headerlink" title="3.producer"></a>3.producer</h3><p>新建producer的module，同创建rureka，不同处如下图，其他都一样。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZjY1YTg2Y2ZmZTM3NTI4LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p>完整pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.example.producer&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;producer&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;producer&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: producer</span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.example.producer.producer;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ProducerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建2个类控制器<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjk5MjM2Y2Y5MzQyOTMwLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br><code>HelloController</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;say&quot;)</span><br><span class="line">    public String say() &#123;</span><br><span class="line">        return &quot;Hello Every Buddy&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GoodByeController</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;goodbye&quot;)</span><br><span class="line">public class GoodByeController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;say&quot;)</span><br><span class="line">    public String say() &#123;</span><br><span class="line">        return &quot;Bye Bye&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序，访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02NzU2N2M5NTNiM2VkMDIyLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h3 id="4-gateway"><a href="#4-gateway" class="headerlink" title="4.gateway"></a>4.gateway</h3><p>创建过程同eureka<br>完整pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.example.gateway&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gateway&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;gateway&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">test:</span><br><span class="line">  uri: lb:&#x2F;&#x2F;producer</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway</span><br><span class="line">#  cloud:</span><br><span class="line">#    gateway:</span><br><span class="line">#      routes:</span><br><span class="line">#        - id: route_producer_hello</span><br><span class="line">#          uri: $&#123;test.uri&#125; # uri以lb:&#x2F;&#x2F;开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称</span><br><span class="line">#          predicates:</span><br><span class="line">#            - Path&#x3D;&#x2F;api-hello&#x2F;**</span><br><span class="line">#          filters:</span><br><span class="line">#            - StripPrefix&#x3D;1 # 表示在转发时去掉api</span><br><span class="line">#</span><br><span class="line">#        - id: route_producer_goodbye</span><br><span class="line">#          uri: $&#123;test.uri&#125;</span><br><span class="line">#          predicates:</span><br><span class="line">#            - Path&#x3D;&#x2F;api-goodbye&#x2F;**</span><br><span class="line">#          filters:</span><br><span class="line">#            - StripPrefix&#x3D;1</span><br><span class="line">#            - name: Hystrix</span><br><span class="line">#              args:</span><br><span class="line">#                name: myfallbackcmd</span><br><span class="line">#                fallbackUri: forward:&#x2F;user&#x2F;fallback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org.springframework.cloud.gateway: TRACE</span><br><span class="line">    org.springframework.http.server.reactive: DEBUG</span><br><span class="line">    org.springframework.web.reactive: DEBUG</span><br><span class="line">    reactor.ipc.netty: DEBUG</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class="line">    enabled: true # 是否启用注册服务 默认为true, false是不启用</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.example.gateway.gateway;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line">import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class GatewayApplication &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;test.uri&#125;&quot;)</span><br><span class="line">    private String uri;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RouteLocator routeLocator(RouteLocatorBuilder builder)&#123;</span><br><span class="line">        return builder.routes()</span><br><span class="line">                .route(r -&gt;r.path(&quot;&#x2F;hello&#x2F;**&quot;).uri(uri))</span><br><span class="line">                .route(r -&gt;r.path(&quot;&#x2F;goodbye&#x2F;**&quot;).uri(uri)).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序，访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xODVjYTViMDA1MDI4YmU5LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><p>服务都已经注册到reureka,我们定义了hello和goodbye开头的请求都会转发到<code>lb://producer</code>服务，我们定义gateway的端口是8080，producer的端口是8081<br><code>直接请求producer服务</code><br><a href="http://localhost:8081/hello/say" target="_blank" rel="noopener">http://localhost:8081/hello/say</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04MzJmN2YxMGQ2MTZmN2U1LnBuZw?x-oss-process=image/format,png" alt="图片.png"><br><a href="http://localhost:8081/goodbye/say" target="_blank" rel="noopener">http://localhost:8081/goodbye/say</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYTcyNTA0MzBmODU1MzY0LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p><code>通过网关请求</code><br><a href="http://localhost:8080/hello/say" target="_blank" rel="noopener">http://localhost:8080/hello/say</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYzI3OTZlNWZjZDM0ZTFmLnBuZw?x-oss-process=image/format,png" alt="hello.png"><br><a href="http://localhost:8080/goodbye/say" target="_blank" rel="noopener">http://localhost:8080/goodbye/say</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGJhN2QwYTBjM2M2MGVhLnBuZw?x-oss-process=image/format,png" alt="goodbye.png"></p><h2 id="网关本身的负载均衡"><a href="#网关本身的负载均衡" class="headerlink" title="网关本身的负载均衡"></a>网关本身的负载均衡</h2><p>那所有微服务就只有一个网关，万一并发量上去了，网关承受不住怎么办？<br>Spring Cloud Gateway底层是Netty的，它本身就能承受比较大的并发。如果还是承受不了并发量，那可以注册多个Gateway实例，然后在前面弄一个Nginx或者F5等负载均衡器。大概图是这样：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjRlNTZkYjE2MzU4MjBkLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务注册中心为什么要使用Consul？</title>
      <link href="/2020/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8Consul%EF%BC%9F/"/>
      <url>/2020/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8Consul%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzZiNzMzZDk3YjI1MDI3LmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h3 id="一、Eureka不建议使用"><a href="#一、Eureka不建议使用" class="headerlink" title="一、Eureka不建议使用"></a>一、Eureka不建议使用</h3><p>在选型微服务注册中心时，一定要长远考虑，SpringCloud提供了Eureka作为服务注册中心，我们可以开箱即用，但是，对于服务注册中心随着业务需求的不断变化，对服务注册中心提出了更高要求，Eureka就不太适合了，看到“Eureka 2.0 开源工作宣告停止，继续使用风险自负”。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04ZjA4NGE5Y2VlMDM0OGM3LnBuZw?x-oss-process=image/format,png" alt="eureka.png"><br>这意味着如果开发者继续使用作为 2.x 分支上现有工作 repo 一部分发布的代码库和工件，则将自负风险，对此，专家建议开发者尽快将相关业务迁移到 <code>Consul/ZooKeeper/Etcd</code>等工具上。</p><h3 id="二、Consul与Zookeeper的区别"><a href="#二、Consul与Zookeeper的区别" class="headerlink" title="二、Consul与Zookeeper的区别"></a>二、Consul与Zookeeper的区别</h3><p>Consul是一个在国外流行的服务发现和配置共享的服务软件。本文翻译自Consul的官方文档，文中重点讲述：在与主流同类软件<code>ZooKeeper、Doozerd</code>以及<code>Etcd</code>比较时，Consul的优势所在。</p><p><code>ZooKeeper、Doozerd、Etcd</code>在架构上都非常相似，它们都有服务节点（<code>server node</code>），而这些服务节点的操作都要求达到节点的仲裁数（通常，节点的仲裁数遵循的是简单多数原则）。此外，它们都是强一致性的，并且提供各种原语。通过应用程序内部的客户端lib库，这些原语可以用来构建复杂的分布式系统。</p><p><code>Consul</code>在一个单一的数据中心内部使用服务节点。在每个数据中心中，为了<code>Consule</code>能够运行，并且保持强一致性，Consul服务端需要仲裁。然而，<code>Consul</code>原生支持多数据中心，就像一个丰富<code>gossip</code>系统连接服务器节点和客户端一样。</p><p>当提供K/V存储的时候，这些系统具有大致相同的语义，读取是强一致性的，并且在面对网络分区的时候，为了保持一致性，读取的可用性是可以牺牲的。然而，当系统应用于复杂情况时，这种差异会变得更加明显。</p><p>这些系统提供的语义对开发人员构建服务发现系统很有吸引力，但更重要的是，强调开发人员要构建这些特性。<code>ZooKeeper</code>只提供一个原始的K/V值存储，并要求开发人员构建他们自己的系统来提供服务发现功能。相反的是，<code>Consul</code>提供了一个坚固的框架，这不仅仅是为了提供服务发现功能，也是为了减少推测工作和开发工作量。客户端只需简单地完成服务注册工作，然后使用一个<code>DNS</code>接口或者<code>HTTP</code>接口就可以执行工作了，而其他系统则需要你定制自己的解决方案。</p><p>一个令人信服的服务发现框架必须包含健康检测功能，并且考虑失败的可能性。要是节点失败或者服务故障了，即使开发人员知道节点A提供Foo服务也是没用的。Navie系统利用的是心跳、周期性更新和TTLs，这些系统不仅需要工作量与节点数量成线性关系，并且对服务器的固定数量提出了要求。此外，故障检测窗口的存活时间至少要和TTL一样长。</p><p><code>ZooKeeper</code>提供了临时节点，这些临时节点就是K/V条目，当客户端断开连接时，这些条目会被删除。虽然这些临时节点比一个心跳系统更高级，但仍存在固有的扩展性问题，并且会增加客户端的复杂性。与<code>ZooKeeper</code>服务器端连接时，客户端必须保持活跃，并且去做持续性连接。此外，<code>ZooKeeper</code>还需要胖客户端，而胖客户端是很难编写，并且胖客户端会经常导致调试质询。</p><p><code>Consul</code>使用一个完全不同的架构进行健康检测。<code>Consul</code>客户端可以运行在集群中的每一个节点上，而不是拥有服务器节点，这些<code>Consul</code>客户端属于一个<code>gossip pool</code>，<code>gossip pool</code>提供了一些功能，包括分布式健康检测。<code>gossip</code>协议提供了一个高效的故障检测工具，这个故障检测工具可以应用到任意规模的集群，而不仅仅是作用于特定的服务器组。同时，这个故障检测工具也支持在本地进行多种健康检测。与此相反，ZooKeeper的临时节点只是一个非常原始的活跃度检测。因为有了<code>Consul</code>，客户端可以检测web服务器是否正在返回200状态码，内存利用率是否达到临界点，是否有足够的数据存储盘等。此外，<code>ZooKeeper</code>会暴露系统的复杂性给客户端，为了避免<code>ZooKeeper</code>出现的这种情况，<code>Consul</code>只提供一个简单HTTP接口。</p><p><code>Consul</code>为服务发现、健康检测、K/V存储和多数据中心提供了一流的支持。为了支持任意存储，而不仅仅是简单的K/V存储，其他系统都要求工具和lib库要率先建立。然而，通过使用客户端节点，<code>Consul</code>提供了一个简单的API，这个API的开发只需要瘦客户端就可以了， 而且，通过使用配置文件和DNS接口，开发人员可以建立完整的服务发现解决方案，最终，达到避免开发API的目的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举真的比静态常量更占空间吗？</title>
      <link href="/2019/12/30/%E6%9E%9A%E4%B8%BE%E7%9C%9F%E7%9A%84%E6%AF%94%E9%9D%99%E6%80%81%E5%B8%B8%E9%87%8F%E6%9B%B4%E5%8D%A0%E7%A9%BA%E9%97%B4%E5%90%97%EF%BC%9F/"/>
      <url>/2019/12/30/%E6%9E%9A%E4%B8%BE%E7%9C%9F%E7%9A%84%E6%AF%94%E9%9D%99%E6%80%81%E5%B8%B8%E9%87%8F%E6%9B%B4%E5%8D%A0%E7%A9%BA%E9%97%B4%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZDllOTU4YWQ2OGE3MjlhLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><blockquote><p>前两天在网上看到一条信息：枚举比静态常量更占用空间。<br>这是真的吗？</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举类型是Java 5中新增特性的一部分，它是一种特殊的数据类型，之所以特殊是因为它既是一种类(class)类型却又比类类型多了些特殊的约束，但是这些约束的存在也造就了枚举类型的简洁性、安全性以及便捷性。</p><h3 id="枚举实现原理"><a href="#枚举实现原理" class="headerlink" title="枚举实现原理"></a>枚举实现原理</h3><p>在使用关键字enum创建枚举类型并编译后，编译器会为我们生成一个相关的类，这个类继承了Java API中的java.lang.Enum类，也就是说通过关键字enum创建枚举类型在编译后事实上也是一个类类型而且该类继承自java.lang.Enum类。</p><h2 id="枚举-1"><a href="#枚举-1" class="headerlink" title="枚举"></a>枚举</h2><p>新建一个枚举类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Author: 少年闰土</span><br><span class="line"> * @Date: 2019&#x2F;12&#x2F;27 0027 上午 9:23</span><br><span class="line"> * @Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public enum Season &#123;</span><br><span class="line"></span><br><span class="line">    SPRING(&quot;春天&quot;, &quot;趁春踏青&quot;),</span><br><span class="line">    SUMMER(&quot;夏天&quot;, &quot;夏日炎炎&quot;),</span><br><span class="line">    AUTUMN(&quot;秋天&quot;, &quot;秋高气爽&quot;),</span><br><span class="line">    WINTER(&quot;冬天&quot;, &quot;围炉赏雪&quot;);</span><br><span class="line"></span><br><span class="line">    private final String name;</span><br><span class="line">    private final String desc;</span><br><span class="line"></span><br><span class="line">    Season(String name, String desc) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.desc &#x3D; desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDesc() &#123;</span><br><span class="line">        return desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来使用javac命令进行编译：生成class文件，然后再通过javap反编译<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00OTUwMmE2NzY0NzNjMDQ0LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public final class com.example.demo.Season extends java.lang.Enum&lt;com.example.de</span><br><span class="line">mo.Season&gt; &#123;</span><br><span class="line">  public static final com.example.demo.Season SPRING;</span><br><span class="line">  public static final com.example.demo.Season SUMMER;</span><br><span class="line">  public static final com.example.demo.Season AUTUMN;</span><br><span class="line">  public static final com.example.demo.Season WINTER;</span><br><span class="line">  &#x2F;&#x2F;编译器为我们添加的静态的values()方法</span><br><span class="line">  public static com.example.demo.Season[] values();</span><br><span class="line">  &#x2F;&#x2F;编译器为我们添加的静态的valueOf()方法，注意间接调用了Enum也类的valueOf方法</span><br><span class="line">  public static com.example.demo.Season valueOf(java.lang.String);</span><br><span class="line">  &#x2F;&#x2F;构造方法</span><br><span class="line">  public java.lang.String getName();</span><br><span class="line">  public java.lang.String getDesc();</span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Author: 少年闰土</span><br><span class="line"> * @Date: 2019&#x2F;12&#x2F;27 0027 上午 10:49</span><br><span class="line"> * @Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Season &#123;</span><br><span class="line"></span><br><span class="line">    public static final String SPRING &#x3D;&quot;春天&quot;;</span><br><span class="line">    public static final String SUMMER &#x3D;&quot;夏天&quot;;</span><br><span class="line">    public static final String AUTUMN &#x3D;&quot;秋天&quot;;</span><br><span class="line">    public static final String WINTER &#x3D;&quot;冬天&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>javap反编译后：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kN2I0ZTRjYjhmMWM0YzJhLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class com.example.demo.Season &#123;</span><br><span class="line">  public static final java.lang.String SPRING;</span><br><span class="line">  public static final java.lang.String SUMMER;</span><br><span class="line">  public static final java.lang.String AUTUMN;</span><br><span class="line">  public static final java.lang.String WINTER;</span><br><span class="line">  public com.example.demo.Season();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>枚举<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZTI2Y2FkNjRhMjBiNTJjLnBuZw?x-oss-process=image/format,png" alt="枚举.png"></p><p>静态常量<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjcyN2QwMTRjYjcxNzliLnBuZw?x-oss-process=image/format,png" alt="静态常量.png"></p><p>编译后的枚举class文件大小为1471字节，静态常量class文件大小为400字节。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZWVkNGI4ZDFhM2IxYjAxLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p>用Chkdsk查看簇大小<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZGJjNTllYzA5NzMzOWRmLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p>经过对比枚举类型文件大小更大一些。</p><p>枚举的实现原理就是定义一个类，然后实例化几个由final修饰的这个类的对象，每个实例都带有自己的元信息。而常量相比之下，没有这一层封装，只占用最基本的内存，包括引用，和它的值本身，要简单轻巧很多。如果值可以使用基本类型而不是包装类型，那更不用说了。       不过话又说回来，通常情况下我们没必要在意这种区别。如果用枚举可读性、可扩展性更好，用就是了，枚举占那点内存，沧海一粟。在性能与代码维护性之间，除个别情况，优先选后者。高级编程语言的诞生本身就是硬件提升的背景下，牺牲某些性能来降低开发门槛，提高开发效率的，相对于微小的性能损耗，人力成本更值钱</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> enum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT简介</title>
      <link href="/2019/12/21/JWT%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/12/21/JWT%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。<a href="https://www.jianshu.com/p/c007b8021d05" target="_blank" rel="noopener">微服务常见的认证方案</a></p><h2 id="一、跨域认证的问题"><a href="#一、跨域认证的问题" class="headerlink" title="一、跨域认证的问题"></a>一、跨域认证的问题</h2><p>互联网服务离不开用户认证。一般流程是下面这样。</p><ul><li><p>1、用户向服务器发送用户名和密码。</p></li><li><p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p></li><li><p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p></li><li><p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p></li><li><p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p></li></ul><p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p><p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</p><p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</p><p>什么是JWT：一句话概括就是（通过客户端保存数据，而服务器根本不保存会话数据，每个请求都被发送回服务器。）</p><h2 id="二、JWT"><a href="#二、JWT" class="headerlink" title="二、JWT"></a>二、JWT</h2><p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。</p><p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p><h3 id="1、JWT的原则"><a href="#1、JWT的原则" class="headerlink" title="1、JWT的原则"></a>1、JWT的原则</h3><p>JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户，如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">     &quot;UserName&quot;: &quot;少年闰土&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;Role&quot;: &quot;Admin&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;Expire&quot;: &quot;2019-12-21 09:15:56&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。</p><h3 id="2、JWT的数据结构"><a href="#2、JWT的数据结构" class="headerlink" title="2、JWT的数据结构"></a>2、JWT的数据结构</h3><p>样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1NTc5MDU4MDIsImV4cCI6MTU1NzkwNjgwMiwicm9sZXMiOiJhZG1pbiJ9.AS5Y2fNCwUzQQxXh_QQWMpaB75YqfuK-2P7VZiCXEJI</span><br></pre></td></tr></table></figure><p>他是一个长字符串，中间用<code>.</code>进行分割，代表JWT的三个组成部分，如下：</p><ul><li><p>Header（头部）</p></li><li><p>Payload（负载）</p></li><li><p>Signature（签名）<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xNGFkNzRiMDY3ZTI3YmQxLnBuZw?x-oss-process=image/format,png" alt="图片来自网络-仅供参考.png"></p><h4 id="2-1、头部（Header）"><a href="#2-1、头部（Header）" class="headerlink" title="2.1、头部（Header）"></a>2.1、头部（Header）</h4><p>头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。<br><code>{&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;}</code></p></li></ul><p>这个json中的typ属性，用来标识整个token字符串是一个JWT字符串；它的alg属性，用来说明这个JWT签发的时候所使用的签名和摘要算法。typ跟alg属性的全称其实是type跟algorithm，分别是类型跟算法的意思。之所以都用三个字母来表示，也是基于JWT最终字串大小的考虑，同时也是跟JWT这个名称保持一致，这样就都是三个字符了…typ跟alg是JWT中标准中规定的属性名称</p><p>在头部指明了签名算法是HS256算法。 我们进行BASE64编码<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fbase64.xpcha.com%2F" target="_blank" rel="noopener">http://base64.xpcha.com/</a>，编码后的字符串如下：<br><code>eyJhbGciOiJIUzI1NiJ9</code></p><h4 id="2-2、载荷（Playload）"><a href="#2-2、载荷（Playload）" class="headerlink" title="2.2、载荷（Playload）"></a>2.2、载荷（Playload）</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss: jwt签发者</span><br><span class="line">sub: jwt所面向的用户</span><br><span class="line">aud: 接收jwt的一方</span><br><span class="line">exp: jwt的过期时间，这个过期时间必须要大于签发时间</span><br><span class="line">nbf: 定义在什么时间之前，该jwt都是不可用的.</span><br><span class="line">iat: jwt的签发时间</span><br><span class="line">jti: jwt的唯一身份标识，主要用来作为一次性token。</span><br></pre></td></tr></table></figure><p>除了官方字段，你还可以在这个部分定义私有字段<br>样例：<br><code>{&quot;sub&quot;:&quot;1234567890&quot;,&quot;name&quot;:&quot;John Doe&quot;,&quot;admin&quot;:true}</code><br>然后将其进行base64加密，得到Jwt的第二部分。<br><code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNDM2MzY2NGU3ZTY3NjA1LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h4 id="2-3、签名（Signature）"><a href="#2-3、签名（Signature）" class="headerlink" title="2.3、签名（Signature）"></a>2.3、签名（Signature）</h4><p>Signature 部分是对前两部分的签名，防止数据篡改。这个签证信息由三部分组成：</p><blockquote><p>header (base64后的)<br> payload (base64后的)<br>secret</p></blockquote><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><h3 id="3、Base64URL"><a href="#3、Base64URL" class="headerlink" title="3、Base64URL"></a>3、Base64URL</h3><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。 </p><h3 id="4、JWT-的使用方式"><a href="#4、JWT-的使用方式" class="headerlink" title="4、JWT 的使用方式"></a>4、JWT 的使用方式</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。<br><code>Authorization: Bearer &lt;token&gt;</code></p><p>下图显示了如何获取JWT并将其用于访问API或资源：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MDk3YjI4MDFlYTZjMTlmLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h2 id="三、JWT使用"><a href="#三、JWT使用" class="headerlink" title="三、JWT使用"></a>三、JWT使用</h2><h3 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.auth0&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;java-jwt&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.2.0&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、工具类"><a href="#2、工具类" class="headerlink" title="2、工具类"></a>2、工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.utils;</span><br><span class="line"></span><br><span class="line">import com.auth0.jwt.JWT;</span><br><span class="line">import com.auth0.jwt.JWTVerifier;</span><br><span class="line">import com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line">import com.auth0.jwt.exceptions.JWTDecodeException;</span><br><span class="line">import com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Author: 少年闰土</span><br><span class="line"> * @Date: 2019&#x2F;12&#x2F;11 </span><br><span class="line"> * @Time: 下午 4:12</span><br><span class="line"> * @Version: v1.0</span><br><span class="line"> * jwt工具类</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">public class JwtUtils &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解析token</span><br><span class="line">     *</span><br><span class="line">     * @param token token</span><br><span class="line">     * @return 用户名</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String getUserName(String token) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            DecodedJWT jwt &#x3D; JWT.decode(token);</span><br><span class="line">            return jwt.getClaim(&quot;userName&quot;).asString();</span><br><span class="line">        &#125; catch (JWTDecodeException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 签发token</span><br><span class="line">     *</span><br><span class="line">     * @param userName 用户名</span><br><span class="line">     * @return token</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String sign(String userName,String secret) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;token过期时间</span><br><span class="line">            Date date &#x3D; new Date(System.currentTimeMillis() + (60 * 60 * 1000));</span><br><span class="line">            Algorithm algorithm &#x3D; Algorithm.HMAC256(secret);</span><br><span class="line">            &#x2F;&#x2F; 附带username信息</span><br><span class="line">            return JWT.create()</span><br><span class="line">                    .withClaim(&quot;userName&quot;, userName)</span><br><span class="line">                    .withExpiresAt(date)</span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 检验token是否过期</span><br><span class="line">     *</span><br><span class="line">     * @param token</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static Map verify(String token,String userName, String secret) &#123;</span><br><span class="line">        Map result &#x3D; new HashMap&lt;String, Object&gt;(2);</span><br><span class="line">        try &#123;</span><br><span class="line">            Algorithm algorithm &#x3D; Algorithm.HMAC256(secret);</span><br><span class="line">            JWTVerifier verifier &#x3D; JWT.require(algorithm)</span><br><span class="line">                    .withClaim(&quot;userName&quot;, userName)</span><br><span class="line">                    .build();</span><br><span class="line">            DecodedJWT jwt &#x3D; verifier.verify(token);</span><br><span class="line">            result.put(&quot;isSuccess&quot;, true);</span><br><span class="line">            result.put(&quot;exception&quot;, null);</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            result.put(&quot;isSuccess&quot;, false);</span><br><span class="line">            result.put(&quot;exception&quot;, exception);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value &#x3D; &quot;浏览器点击登录&quot;)</span><br><span class="line">@ApiImplicitParam(name &#x3D; &quot;user&quot;, value &#x3D; &quot;用户实体&quot;, required &#x3D; true, paramType &#x3D; &quot;User&quot;)</span><br><span class="line">@PostMapping(&quot;&#x2F;login&quot;)</span><br><span class="line">public R login(@RequestBody User user) &#123;</span><br><span class="line">    log.debug(&quot;------浏览器点击登录------&quot;);</span><br><span class="line">    String userName &#x3D; user.getUsername();</span><br><span class="line">    String passWord &#x3D; user.getPassword();</span><br><span class="line">    User u &#x3D; this.userService.getUser(userName);</span><br><span class="line">    String passWordSalt &#x3D; MD5.md5Salt(passWord, userName);</span><br><span class="line">    if (u !&#x3D; null &amp;&amp; u.getPassword().equals(passWordSalt)) &#123;</span><br><span class="line">        String token &#x3D; JwtUtils.sign(userName, passWordSalt);</span><br><span class="line">        return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return R.error(R.MSG_LOGIN_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 两种部署到服务器的方式</title>
      <link href="/2019/11/19/Spring-Boot-%E4%B8%A4%E7%A7%8D%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/11/19/Spring-Boot-%E4%B8%A4%E7%A7%8D%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zOTkzMjE4ZjcwZmU0YzNjLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="jar包-官方推荐"><a href="#jar包-官方推荐" class="headerlink" title="jar包(官方推荐)"></a>jar包(官方推荐)</h2><p>jar包方式启动，也就是使用spring boot内置的tomcat运行。服务器上面只要你配置了jdk1.8及以上，就ok。不需要外置tomcat </p><h3 id="1-打成jar包"><a href="#1-打成jar包" class="headerlink" title="1.打成jar包"></a>1.打成jar包</h3><h3 id="2-将jar包放到任意目录"><a href="#2-将jar包放到任意目录" class="headerlink" title="2.将jar包放到任意目录"></a>2.将jar包放到任意目录</h3><p>执行下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nohup java -jar test.jar &gt;temp.txt &amp;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这种方法会把日志文件输入到你指定的文件中，没有则会自动创建。进程会在后台运行。</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04NTNjYTcxMDAzNWQ4ZTg3LnBuZw?x-oss-process=image/format,png" alt=""></p><h3 id="3-放开端口"><a href="#3-放开端口" class="headerlink" title="3.放开端口"></a>3.放开端口</h3><p>阿里云服务器需要放开对应的端口<br>添加安全组：我的项目中配置的启动端口是18080，故这里需要放开18080端口，才能访问 </p><h2 id="war包"><a href="#war包" class="headerlink" title="war包"></a>war包</h2><p>传统的部署方式：将项目打成war包，放入tomcat 的webapps目录下面，启动tomcat，即可访问。</p><p>开发环境：jdk1.8 + IDEA</p><p>下面搭建一个demo演示如何打war包部署并且如何访问：spring boot + maven</p><h3 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmUzY2EwZjYyOTkyOTkzLnBuZw?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjhiMWRkYTIyYjU0ZDUyLnBuZw?x-oss-process=image/format,png" alt=""><br>这里我们默认打成jar包，不用修改。</p><h3 id="2-修改启动Application文件"><a href="#2-修改启动Application文件" class="headerlink" title="2.修改启动Application文件"></a>2.修改启动Application文件</h3><p>项目新建完成后，修改启动Application文件继承SpringBootServletInitializer,实现configure方法<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjA3MDQ3ZTI4ZTY3ZGI2LnBuZw?x-oss-process=image/format,png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@RestController</span><br><span class="line">public class Demo1Application extends SpringBootServletInitializer &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 用来测试访问</span><br><span class="line">    @RequestMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    public String home() &#123;</span><br><span class="line">        return &quot;hello 朋友&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Demo1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 继承SpringBootServletInitializer 实现configure 方便打war 外部服务器部署。</span><br><span class="line">    @Override</span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;</span><br><span class="line">        return application.sources(Demo1Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-修改pom-xml"><a href="#3-修改pom-xml" class="headerlink" title="3.修改pom.xml"></a>3.修改pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br></pre></td></tr></table></figure><p>完整pom.xml代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.example&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo1&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;!-- 这里打成war包 若打jar，需将war改为jar --&gt;</span><br><span class="line">    &lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;demo1&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;demo1&lt;&#x2F;finalName&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><h3 id="4-打包"><a href="#4-打包" class="headerlink" title="4.打包"></a>4.打包</h3><p>这里可以直接到项目根目录下面：运行 maven package命令，打包。</p><p>我这里直接使用idea打包，如下图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMWIzMDgwMTdhMWE5YWViLnBuZw?x-oss-process=image/format,png" alt=""><br>5.将war放入外部tomcat的webapps目录下<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWZkZjIzZWYwODRjNmM2LnBuZw?x-oss-process=image/format,png" alt=""><br>6.启动tomcat<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04Y2M1ZDFkMTZhNTljZDQ4LnBuZw?x-oss-process=image/format,png" alt=""></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="1-对比两种打包方式"><a href="#1-对比两种打包方式" class="headerlink" title="1.对比两种打包方式"></a>1.对比两种打包方式</h3><p>jar更加简单，方便。具体使用哪种方式，应视应用场景而定。</p><h3 id="2-注意"><a href="#2-注意" class="headerlink" title="2.注意"></a>2.注意</h3><p>再说一次，将项目打成war包，部署到外部的tomcat中，这个时候，不能直接访问spring boot 项目中配置文件配置的端口。application.yml中配置的server.port配置的是spring boot内置的tomcat的端口号, 打成war包部署在独立的tomcat上之后, 你配置的server.port是不起作用的。一定要注意这一点！！<br>其实我们从tomcat的启动界面，已经可以看出，是启动的哪个端口：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wNGQ3YzI2YmY0NTRiNDAzLnBuZw?x-oss-process=image/format,png" alt=""><br>很明显，日志告诉我们，我们应该访问8080端口。<br>下图是使用spring boot 内置tomcat启动日志，可以看出配置的server.port是生效了的！</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打包部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consul学习</title>
      <link href="/2019/11/19/Consul%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/11/19/Consul%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03MmE5ZmNhMWQ4NDQxMzkyLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><p>服务注册与服务发现是在分布式服务架构中常常会涉及到的东西，业界常用的服务注册与服务发现工具有 <a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">ZooKeeper</a>、<a href="https://coreos.com/etcd/" target="_blank" rel="noopener">etcd</a>、<a href="https://www.consul.io/" target="_blank" rel="noopener">Consul</a> 和 <a href="https://github.com/Netflix/eureka" target="_blank" rel="noopener">Eureka</a>。Consul 的主要功能有服务发现、健康检查、KV存储、安全服务沟通和多数据中心。Consul 与其他几个工具的区别可以在这里查看 <a href="https://www.consul.io/intro/vs/index.html" target="_blank" rel="noopener">Consul vs. Other Software</a>。<br>##为什么需要有服务注册与服务发现？<br>假设在分布式系统中有两个服务 Service-A （下文以“S-A”代称）和 Service-B（下文以“S-B”代称），当 S-A 想调用 S-B 时，我们首先想到的时直接在 S-A 中请求 S-B 所在服务器的 IP 地址和监听的端口，这在服务规模很小的情况下是没有任何问题的，但是在服务规模很大每个服务不止部署一个实例的情况下是存在一些问题的，比如 S-B 部署了三个实例 S-B-1、S-B-2 和 S-B-3，这时候 S-A 想调用 S-B 该请求哪一个服务实例的 IP 呢？还是将3个服务实例的 IP 都写在 S-A 的代码里，每次调用 S-B 时选择其中一个 IP？这样做显得很不灵活，这时我们想到了 Nginx 刚好就能很好的解决这个问题，引入 Nginx 后现在的架构变成了如下图这样：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYjBhZjFhOTgyNGIyMGRjLnBuZw?x-oss-process=image/format,png" alt=""></p><p>引入 Nginx 后就解决了 S-B 部署多个实例的问题，还做了 S-B 实例间的负载均衡。但现在的架构又面临了新的问题，分布式系统往往要保证高可用以及能做到动态伸缩，在引入 Nginx 的架构中，假如当 S-B-1 服务实例不可用时，Nginx 仍然会向 S-B-1 分配请求，这样服务就不可用，我们想要的是 S-B-1 挂掉后 Nginx 就不再向其分配请求，以及当我们新部署了 S-B-4 和 S-B-5 后，Nginx 也能将请求分配到 S-B-4 和 S-B-5，Nginx 要做到这样就要在每次有服务实例变动时去更新配置文件再重启 Nginx。这样看似乎用了 Nginx 也很不舒服以及还需要人工去观察哪些服务有没有挂掉，Nginx 要是有对服务的健康检查以及能够动态变更服务配置就是我们想要的工具，这就是服务注册与服务发现工具的用处。下面是引入服务注册与服务发现工具后的架构图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03ZTQxZmM4ZGQ5YTc0NmIxLnBuZw?x-oss-process=image/format,png" alt=""></p><p>在这个架构中：</p><ul><li>首先 S-B 的实例启动后将自身的服务信息（主要是服务所在的 IP 地址和端口号）注册到注册工具中。不同注册工具服务的注册方式各不相同，后文会讲 Consul 的具体注册方式。</li><li>服务将服务信息注册到注册工具后，注册工具就可以对服务做健康检查，以此来确定哪些服务实例可用哪些不可用。</li><li>S-A 启动后就可以通过服务注册和服务发现工具获取到所有健康的 S-B 实例的 IP 和端口，并将这些信息放入自己的内存中，S-A 就可用通过这些信息来调用 S-B。</li><li>S-A 可以通过监听（Watch）注册工具来更新存入内存中的 S-B 的服务信息。比如 S-B-1 挂了，健康检查机制就会将其标为不可用，这样的信息变动就被 S-A 监听到了，S-A 就更新自己内存中 S-B-1 的服务信息。</li></ul><p>所以务注册与服务发现工具除了服务本身的服务注册和发现功能外至少还需要有健康检查和状态变更通知的功能。</p><h2 id="Consul内部原理"><a href="#Consul内部原理" class="headerlink" title="Consul内部原理"></a>Consul内部原理</h2><p>Consul 作为一种分布式服务工具，为了避免单点故障常常以集群的方式进行部署，在 Consul 集群的节点中分为 Server 和 Client 两种节点（所有的节点也被称为Agent），Server 节点保存数据，Client 节点负责健康检查及转发数据请求到 Server；Server 节点有一个 Leader 节点和多个 Follower 节点，Leader 节点会将数据同步到 Follower 节点，在 Leader 节点挂掉的时候会启动选举机制产生一个新的 Leader。</p><p>Client 节点很轻量且无状态，它以 RPC 的方式向 Server 节点做读写请求的转发，此外也可以直接向 Server 节点发送读写请求。下面是 Consul 的架构图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWJlYzdiYmFlYWVhZDY3LnBuZw?x-oss-process=image/format,png" alt=""></p><p>首先Consul支持多数据中心，在上图中有两个DataCenter，他们通过Internet互联，同时请注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。</p><p>在单个数据中心中，Consul分为Client和Server两种节点（所有的节点也被称为Agent），Server节点保存数据，Client负责健康检查及转发数据请求到Server；Server节点有一个Leader和多个Follower，Leader节点会将数据同步到Follower，Server的数量推荐是3个或者5个，在Leader挂掉的时候会启动选举机制产生一个新的Leader。</p><p>集群内的Consul节点通过gossip协议（流言协议）维护成员关系，也就是说某个节点了解集群内现在还有哪些节点，这些节点是Client还是Server。单个数据中心的流言协议同时使用TCP和UDP通信，并且都使用8301端口。跨数据中心的流言协议也同时使用TCP和UDP通信，端口使用8302。</p><p>集群内数据的读写请求既可以直接发到Server，也可以通过Client使用RPC转发到Server，请求最终会到达Leader节点，在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过TCP的8300端口完成。</p><h2 id="Consul-的主要特点"><a href="#Consul-的主要特点" class="headerlink" title="Consul 的主要特点"></a>Consul 的主要特点</h2><p><code>Service Discovery</code> : 服务注册与发现，Consul 的客户端可以做为一个服务注册到 Consul，也可以通过 Consul 来查找特定的服务提供者，并且根据提供的信息进行调用。</p><p><code>Health Checking</code>: Consul 客户端会定期发送一些健康检查数据和服务端进行通讯，判断客户端的状态、内存使用情况是否正常，用来监控整个集群的状态，防止服务转发到故障的服务上面。</p><p><code>KV Store</code>: Consul 还提供了一个容易使用的键值存储。这可以用来保持动态配置，协助服务协调、建立 Leader 选举，以及开发者想构造的其它一些事务。</p><p><code>Secure Service Communication</code>: Consul 可以为服务生成分布式的 TLS 证书，以建立相互的 TLS 连接。 可以使用 intentions 定义允许哪些服务进行通信。 可以使用 intentions 轻松管理服务隔离，而不是使用复杂的网络拓扑和静态防火墙规则。</p><p><code>Multi Datacenter</code>: Consul 支持开箱即用的多数据中心，这意味着用户不需要担心需要建立额外的抽象层让业务扩展到多个区域。</p><p><code>Consul 角色</code></p><ul><li>Server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其它数据中心通讯。 每个数据中心的 Server 数量推荐为 3 个或是 5 个。</li><li>Client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。</li></ul><p>Consul 旨在对 DevOps 社区和应用程序开发人员友好，使其成为现代、弹性基础架构的理想选择。</p><h2 id="Consul-的调用过程"><a href="#Consul-的调用过程" class="headerlink" title="Consul 的调用过程"></a>Consul 的调用过程</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZGFmM2VjOThjMTk5ZWQwLnBuZw?x-oss-process=image/format,png" alt=""></p><p>1、当 Producer 启动的时候，会向 Consul 发送一个 post 请求，告诉 Consul 自己的 IP 和 Port；</p><p>2、Consul 接收到 Producer 的注册后，每隔 10s（默认）会向 Producer 发送一个健康检查的请求，检验 Producer 是否健康；</p><p>3、当 Consumer 发送 GET 方式请求 /api/address 到 Producer 时，会先从 Consul 中拿到一个存储服务 IP 和 Port 的临时表，从表中拿到 Producer 的 IP 和 Port 后再发送 GET 方式请求 /api/address；</p><p>4、该临时表每隔 10s 会更新，只包含有通过了健康检查的 Producer。</p><h2 id="Consul-和-eureka的对比"><a href="#Consul-和-eureka的对比" class="headerlink" title="Consul 和 eureka的对比"></a>Consul 和 eureka的对比</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZTEyNjI5Mzk4OTgxMmQxLnBuZw?x-oss-process=image/format,png" alt=""></p><h2 id="Consul服务发现原理"><a href="#Consul服务发现原理" class="headerlink" title="Consul服务发现原理"></a>Consul服务发现原理</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00MWJhNTZkMWU1NGQ3YzA4LmpwZw?x-oss-process=image/format,png" alt=""></p><p>首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server，假设他们选举了Server2上的Consul Server节点为Leader。这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定。</p><p>然后在服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。服务注册到Consul可以通过HTTP API（8500端口）的方式，也可以通过Consul配置文件的方式。Consul Client可以认为是无状态的，它将注册信息通过RPC转发到Consul Server，服务信息保存在Server的各个节点中，并且通过Raft实现了强一致性。</p><p>最后在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的所有部署的IP和端口，然后就可以选择Service B的其中一个部署并向其发起请求了。如果服务发现采用的是DNS方式，则Program D中直接使用Service B的服务发现域名，域名解析请求首先到达本机DNS代理，然后转发到本机Consul Client，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的某个部署的IP和端口。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务常见的认证方案</title>
      <link href="/2019/11/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/"/>
      <url>/2019/11/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="分布式Session"><a href="#分布式Session" class="headerlink" title="分布式Session"></a>分布式Session</h2><p>传统的单体应用的<code>session</code>，在<code>Spring cloud</code>微服务架构下，可以采用<code>分布式session机制</code>，可以将用户的认证信息存储在共享存储（如redis）中，用户会话作为key实现简单的分布式哈希映射，当用户访问微服务时，用户数据可以从共享存储中获取。<code>Spring Session</code>对分布式Session提供了支持，也与<code>Spring Boot/Cloud</code>无缝集成。</p><h2 id="API-Tokens"><a href="#API-Tokens" class="headerlink" title="API Tokens"></a>API Tokens</h2><p>随着 <code>Restful API</code>、<code>微服务</code>的兴起，基于 Token 的认证现在已经相当普遍了。</p><p><code>Token</code>一般会包含用户的相关信息，其它微服务可以从Token里提取出用户、权限等信息完成鉴权。</p><p>基于Token认证的典型流程：<br><img src="https://upload-images.jianshu.io/upload_images/12553249-134554ce479b7226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><ol><li>用户使用包含用户名和密码的credential从客户端发起资源请求。</li><li>后端接受请求，通过授权中心，生产有效token字符串，返回给客户端。</li><li>客户端获得token后，再次发出资源请求。</li><li>后端接受带token的请求，通过授权中心，获取相关资源，返回给客户端。</li></ol><p>优点：</p><ul><li>服务端无状态：服务端不需要存储Session，因为Token已携带用户的相关信息</li><li>性能好：校验Token不需要访问远程服务或数据库</li><li>支持移动端</li><li>支持跨程序、跨域调用</li></ul><p>缺点：</p><ul><li>每次用户请求需要携带有效token，与Auth服务进行交互验证</li><li>Auth服务可能需要处理大量的生产token的操作，可能存在性能问题</li></ul><p>　　基于Token的认证方案，业界推荐使用 <a href="https://jwt.io/" target="_blank" rel="noopener">JSON Web Tokens（JWT）</a>，它足够简单且支持程度也比较好</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Feign使用详解</title>
      <link href="/2019/11/19/Spring-Cloud-Feign%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/11/19/Spring-Cloud-Feign%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00NWUyZTA5MmY3MGVmYzY2LmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Feign是一个声明式的Web Service客户端，它的目的就是让Web Service调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。<br>而Feign则会完全代理HTTP请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关处理。Feign整合了Ribbon和Hystrix(关于Hystrix我们后面再讲)，可以让我们不再需要显式地使用这两个组件。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>总起来说，Feign具有如下特性：</p><ul><li><p>可插拔的注解支持，包括Feign注解和JAX-RS注解;</p></li><li><p>支持可插拔的HTTP编码器和解码器;</p></li><li><p>支持Hystrix和它的Fallback;</p></li><li><p>支持Ribbon的负载均衡;</p></li><li><p>支持HTTP请求和响应的压缩。</p></li></ul><h2 id="FeignClient注解的一些属性"><a href="#FeignClient注解的一些属性" class="headerlink" title="FeignClient注解的一些属性"></a>FeignClient注解的一些属性</h2><p><img src="/asset/2019-11-19/p15.png" alt=""></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="1-引入Feign"><a href="#1-引入Feign" class="headerlink" title="1.引入Feign"></a>1.引入Feign</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-FeignClient注解"><a href="#2-FeignClient注解" class="headerlink" title="2.@FeignClient注解"></a>2.@FeignClient注解</h3><p>SpringbootApplication启动类加上@FeignClient注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class ServiceFeignApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ServiceFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;@EnableDiscoveryClient 和@EnableEurekaClient是等效的</span><br></pre></td></tr></table></figure><h3 id="3-yaml配置"><a href="#3-yaml配置" class="headerlink" title="3.yaml配置"></a>3.yaml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class="line">server:</span><br><span class="line">  port: 8765</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-feign</span><br></pre></td></tr></table></figure><h3 id="4-Feign的使用"><a href="#4-Feign的使用" class="headerlink" title="4.Feign的使用"></a>4.Feign的使用</h3><p>feign接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(value &#x3D; &quot;service-hi&quot;)</span><br><span class="line">public interface SchedualServiceHi &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;hi&quot;, method &#x3D; RequestMethod.GET)</span><br><span class="line">    String sayHiFromClientOne(@RequestParam(&quot;name&quot;) String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HiController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    SchedualServiceHi schedualServiceHi;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value &#x3D; &quot;&#x2F;hi&quot;)</span><br><span class="line">    public String sayHi(@RequestParam String name)&#123;</span><br><span class="line">        return schedualServiceHi.sayHiFromClientOne(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><p>创建一个Maven项目feign，新建2个module <code>service-hi</code>和<code>service-feign</code></p><h3 id="2-service-hi"><a href="#2-service-hi" class="headerlink" title="2.service-hi"></a>2.service-hi</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yNDg5OTI4ZWIzMDA1OTZiLnBuZw?x-oss-process=image/format,png" alt=""></p><p>pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8763</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-hi</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>ServiceHiApplication</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@RestController</span><br><span class="line">public class ServiceHiApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run( ServiceHiApplication.class, args );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    String port;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;hi&quot;)</span><br><span class="line">    public String home(@RequestParam(value &#x3D; &quot;name&quot;, defaultValue &#x3D; &quot;forezp&quot;) String name) &#123;</span><br><span class="line">        return &quot;hi &quot; + name + &quot; ,i am from port:&quot; + port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-service-feign"><a href="#3-service-feign" class="headerlink" title="3.service-feign"></a>3.service-feign</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMTVkN2JkNjUwZDQzYzZmLnBuZw?x-oss-process=image/format,png" alt=""><br>pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class="line">server:</span><br><span class="line">  port: 8765</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-feign</span><br></pre></td></tr></table></figure><p>ServiceFeignApplication</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class ServiceFeignApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ServiceFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SchedualServiceHi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(value &#x3D; &quot;service-hi&quot;)</span><br><span class="line">public interface SchedualServiceHi &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;hi&quot;, method &#x3D; RequestMethod.GET)</span><br><span class="line">    String sayHiFromClientOne(@RequestParam(&quot;name&quot;) String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HiController</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HiController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    SchedualServiceHi schedualServiceHi;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value &#x3D; &quot;&#x2F;hi&quot;)</span><br><span class="line">    public String sayHi(@RequestParam String name)&#123;</span><br><span class="line">        return schedualServiceHi.sayHiFromClientOne(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动eureka<br>访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZDk3Y2M1MmExYzU2MzQ4LnBuZw?x-oss-process=image/format,png" alt=""><br>启动service-hi<br>刷新<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ODI5MzE5NWZhN2RhMjZhLnBuZw?x-oss-process=image/format,png" alt=""><br>访问service-hi<a href="http://localhost:8763/hi?name=kobe" target="_blank" rel="noopener">http://localhost:8763/hi?name=kobe</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjQ2NzE5MDFiYjgwNjg4LnBuZw?x-oss-process=image/format,png" alt=""><br>启动service-feign<br>刷新<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZmM1NTE0ZDZhZGU5ZGZhLnBuZw?x-oss-process=image/format,png" alt=""><br>同过feign访问接口<a href="http://localhost:8765/hi?name=KG" target="_blank" rel="noopener">http://localhost:8765/hi?name=KG</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWM4NGUzMDZhMDRmY2MyLnBuZw?x-oss-process=image/format,png" alt=""><br>可以看到去到了service-hi服务，端口8763</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java线程创建全家桶</title>
      <link href="/2019/09/16/Java%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
      <url>/2019/09/16/Java%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZTJhMWRhM2Q1NGQ3OTgxLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;继承Thread</span><br><span class="line">public class ExtendThread extends Thread&#123;</span><br><span class="line">   &#x2F;&#x2F;线程执行体</span><br><span class="line">   @Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">       &#x2F;&#x2F;do something</span><br><span class="line">       System.out.println(&quot;继承Thread创建线程&quot;);</span><br><span class="line">       &#x2F;&#x2F;无返回值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ThreadCreateDemo &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       &#x2F;&#x2F;创建一个线程</span><br><span class="line">       ExtendThread extendThread &#x3D; new ExtendThread();</span><br><span class="line">       &#x2F;&#x2F;调用start方法启动线程</span><br><span class="line">       extendThread.start();</span><br><span class="line">        &#x2F;&#x2F;没有返回值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>使用继承Thread类的方法来创建线程类时候，多个线程之间是无法共享线程类的实例变量的。</code></p><h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><p>覆写Runnable接口实现多线程可以避免单继承局限， 当子类实现Runnable接口，此时子类和Thread的代理模式（子类负责真实业务的操作，thread负责资源调度与线程创建辅助真实业务）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;实现Runnable接口</span><br><span class="line">public class ImplRunnable implements Runnable &#123;</span><br><span class="line">   &#x2F;&#x2F;线程实行体</span><br><span class="line">   @Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">       &#x2F;&#x2F;do something</span><br><span class="line">       System.out.println(&quot;实现Runnable创建线程&quot;);</span><br><span class="line">       &#x2F;&#x2F;没有返回值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ThreadCreateDemo &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       ImplRunnable implRunnable &#x3D; new ImplRunnable();</span><br><span class="line">       Thread thread &#x3D; new Thread(implRunnable);</span><br><span class="line">       &#x2F;&#x2F;启动线程</span><br><span class="line">       thread.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Runnable对象仅仅作为Thread对象的target，Runnable实现类里包含的run方法仅仅作为线程的执行体，而实际的线程对象依旧是Thread实例，只是该Thread线程负责执行器target的方法。</code></p><h2 id="覆写Callable接口"><a href="#覆写Callable接口" class="headerlink" title="覆写Callable接口"></a>覆写Callable接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;实现Callable返回值类型为Integer类型</span><br><span class="line">public class ImplCallable implements Callable&lt;Integer&gt; &#123;</span><br><span class="line">   &#x2F;&#x2F;该call()方法将作为线程执行体，并且有返回值</span><br><span class="line">   @Override</span><br><span class="line">   public Integer call() throws Exception &#123;</span><br><span class="line">       &#x2F;&#x2F;do something</span><br><span class="line">       System.out.println(&quot;实现Callable接口创建线程，返回类型为Integer类型&quot;);</span><br><span class="line">       return 999;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ThreadCreateDemo &#123;</span><br><span class="line">   public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">       Callable&lt;Integer&gt; callable &#x3D; new ImplCallable();</span><br><span class="line">       FutureTask&lt;Integer&gt; futureTask &#x3D; new FutureTask&lt;&gt;(callable);</span><br><span class="line">       Thread thread &#x3D; new Thread(futureTask);</span><br><span class="line">       thread.start();</span><br><span class="line">       &#x2F;&#x2F;获取返回值futureTask.get()</span><br><span class="line">       System.out.println(futureTask.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Callable接口有泛型限制，Callable接口里的泛型形参类型与call方法返回值类型相同，而且Callable接口是函数式接口，因此可以使用Lambda表达式创建Callable对象。</code></p><h2 id="三种方式的对比"><a href="#三种方式的对比" class="headerlink" title="三种方式的对比"></a>三种方式的对比</h2><p>通过继承Thread类或者实现Runnable接口、Callable接口都可以实现多线程，不过实现Runnable接口与实现Callable接口的方式基本相同，只是Callabl接口里定义的方法返回值，可以声明抛出异常而已。因此将实现Runnable接口和实现Callable接口归为一种方式。这种方式与继承Thread方式之间的主要差别如下。</p><h3 id="采用实现Runnable、Callable接口的方式创建线程的优缺点"><a href="#采用实现Runnable、Callable接口的方式创建线程的优缺点" class="headerlink" title="采用实现Runnable、Callable接口的方式创建线程的优缺点"></a>采用实现Runnable、Callable接口的方式创建线程的优缺点</h3><p><code>优点</code><br>线程类只是实现了Runnable或者Callable接口，还可以继承其他类。这种方式下，多个线程可以共享一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好的体现了面向对象的思想。<br><code>缺点</code><br>编程稍微复杂一些，如果需要访问当前线程，则必须使用<br>Thread.currentThread()方法</p><h3 id="采用继承Thread类的方式创建线程的优缺点"><a href="#采用继承Thread类的方式创建线程的优缺点" class="headerlink" title="采用继承Thread类的方式创建线程的优缺点"></a>采用继承Thread类的方式创建线程的优缺点</h3><p><code>缺点</code><br>因为线程类已经继承了Thread类，Java语言是单继承的，所以就不能再继承其他父类了。</p><p><code>优点</code><br>编写简单，如果需要访问当前线程，则无需使用<br>Thread.currentThread()方法，直接使用this即可获取当前线程</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java下载文件的几种方式 </title>
      <link href="/2019/09/12/Java%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/09/12/Java%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjJiNTNlYTNjOWZlM2I3LmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="以流的方式下载"><a href="#以流的方式下载" class="headerlink" title="以流的方式下载"></a>以流的方式下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public HttpServletResponse download(String path, HttpServletResponse response) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; path是指欲下载的文件的路径。</span><br><span class="line">            File file &#x3D; new File(path);</span><br><span class="line">            &#x2F;&#x2F; 取得文件名。</span><br><span class="line">            String filename &#x3D; file.getName();</span><br><span class="line">            &#x2F;&#x2F; 取得文件的后缀名。</span><br><span class="line">            String ext &#x3D; filename.substring(filename.lastIndexOf(&quot;.&quot;) + 1).toUpperCase();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 以流的形式下载文件。</span><br><span class="line">            InputStream fis &#x3D; new BufferedInputStream(new FileInputStream(path));</span><br><span class="line">            byte[] buffer &#x3D; new byte[fis.available()];</span><br><span class="line">            fis.read(buffer);</span><br><span class="line">            fis.close();</span><br><span class="line">            &#x2F;&#x2F; 清空response</span><br><span class="line">            response.reset();</span><br><span class="line">            &#x2F;&#x2F; 设置response的Header</span><br><span class="line">            response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename&#x3D;&quot; + new String(filename.getBytes()));</span><br><span class="line">            response.addHeader(&quot;Content-Length&quot;, &quot;&quot; + file.length());</span><br><span class="line">            OutputStream toClient &#x3D; new BufferedOutputStream(response.getOutputStream());</span><br><span class="line">            response.setContentType(&quot;application&#x2F;octet-stream&quot;);</span><br><span class="line">            toClient.write(buffer);</span><br><span class="line">            toClient.flush();</span><br><span class="line">            toClient.close();</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="下载本地文件"><a href="#下载本地文件" class="headerlink" title="下载本地文件"></a>下载本地文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void downloadLocal(HttpServletResponse response) throws FileNotFoundException &#123;</span><br><span class="line">        &#x2F;&#x2F; 下载本地文件</span><br><span class="line">        String fileName &#x3D; &quot;Operator.doc&quot;.toString(); &#x2F;&#x2F; 文件的默认保存名</span><br><span class="line">        &#x2F;&#x2F; 读到流中</span><br><span class="line">        InputStream inStream &#x3D; new FileInputStream(&quot;c:&#x2F;Operator.doc&quot;);&#x2F;&#x2F; 文件的存放路径</span><br><span class="line">        &#x2F;&#x2F; 设置输出的格式</span><br><span class="line">        response.reset();</span><br><span class="line">        response.setContentType(&quot;bin&quot;);</span><br><span class="line">        response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;\&quot;&quot; + fileName + &quot;\&quot;&quot;);</span><br><span class="line">        &#x2F;&#x2F; 循环取出流中的数据</span><br><span class="line">        byte[] b &#x3D; new byte[100];</span><br><span class="line">        int len;</span><br><span class="line">        try &#123;</span><br><span class="line">            while ((len &#x3D; inStream.read(b)) &gt; 0)</span><br><span class="line">                response.getOutputStream().write(b, 0, len);</span><br><span class="line">            inStream.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="下载网络文件"><a href="#下载网络文件" class="headerlink" title="下载网络文件"></a>下载网络文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void downloadNet(HttpServletResponse response) throws MalformedURLException &#123;</span><br><span class="line">        &#x2F;&#x2F; 下载网络文件</span><br><span class="line">        int bytesum &#x3D; 0;</span><br><span class="line">        int byteread &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        URL url &#x3D; new URL(&quot;windine.blogdriver.com&#x2F;logo.gif&quot;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            URLConnection conn &#x3D; url.openConnection();</span><br><span class="line">            InputStream inStream &#x3D; conn.getInputStream();</span><br><span class="line">            FileOutputStream fs &#x3D; new FileOutputStream(&quot;c:&#x2F;abc.gif&quot;);</span><br><span class="line"></span><br><span class="line">            byte[] buffer &#x3D; new byte[1204];</span><br><span class="line">            int length;</span><br><span class="line">            while ((byteread &#x3D; inStream.read(buffer)) !&#x3D; -1) &#123;</span><br><span class="line">                bytesum +&#x3D; byteread;</span><br><span class="line">                System.out.println(bytesum);</span><br><span class="line">                fs.write(buffer, 0, byteread);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="支持在线打开的方式"><a href="#支持在线打开的方式" class="headerlink" title="支持在线打开的方式"></a>支持在线打开的方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public void downLoad(String filePath, HttpServletResponse response, boolean isOnLine) throws Exception &#123;</span><br><span class="line">        File f &#x3D; new File(filePath);</span><br><span class="line">        if (!f.exists()) &#123;</span><br><span class="line">            response.sendError(404, &quot;File not found!&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedInputStream br &#x3D; new BufferedInputStream(new FileInputStream(f));</span><br><span class="line">        byte[] buf &#x3D; new byte[1024];</span><br><span class="line">        int len &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        response.reset(); &#x2F;&#x2F; 非常重要</span><br><span class="line">        if (isOnLine) &#123; &#x2F;&#x2F; 在线打开方式</span><br><span class="line">            URL u &#x3D; new URL(&quot;file:&#x2F;&#x2F;&#x2F;&quot; + filePath);</span><br><span class="line">            response.setContentType(u.openConnection().getContentType());</span><br><span class="line">            response.setHeader(&quot;Content-Disposition&quot;, &quot;inline; filename&#x3D;&quot; + f.getName());</span><br><span class="line">            &#x2F;&#x2F; 文件名应该编码成UTF-8</span><br><span class="line">        &#125; else &#123; &#x2F;&#x2F; 纯下载方式</span><br><span class="line">            response.setContentType(&quot;application&#x2F;x-msdownload&quot;);</span><br><span class="line">            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;&quot; + f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        OutputStream out &#x3D; response.getOutputStream();</span><br><span class="line">        while ((len &#x3D; br.read(buf)) &gt; 0)</span><br><span class="line">            out.write(buf, 0, len);</span><br><span class="line">        br.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> file </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC请求参数获取的几种方法</title>
      <link href="/2019/08/15/SpringMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/15/SpringMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lYWJlMjk2MGJlZGJjMmExLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><p>SpringMVC请求参数获取的几种方法</p><h2 id="通过-PathVariabl获取路径中的参数"><a href="#通过-PathVariabl获取路径中的参数" class="headerlink" title="通过@PathVariabl获取路径中的参数"></a>通过@PathVariabl获取路径中的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;user&#x2F;&#123;id&#125;&#x2F;&#123;name&#125;&quot;,method&#x3D;RequestMethod.GET)</span><br><span class="line">public String printMessage1(@PathVariable String id,@PathVariable String name, ModelMap model) &#123;</span><br><span class="line">    </span><br><span class="line">    System.out.println(id);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    model.addAttribute(&quot;message&quot;, &quot;111111&quot;);</span><br><span class="line">    return &quot;users&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，访问user/123/lei路径时，执行以上方法，其中，参数id=123，name=lei</p><h2 id="ModelAttribute获取POST请求的FORM表单数据"><a href="#ModelAttribute获取POST请求的FORM表单数据" class="headerlink" title="@ModelAttribute获取POST请求的FORM表单数据"></a>@ModelAttribute获取POST请求的FORM表单数据</h2><p>表单如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;hao.do&quot;&gt;</span><br><span class="line">   a: &lt;input id&#x3D;&quot;a&quot; type&#x3D;&quot;text&quot;   name&#x3D;&quot;a&quot;&#x2F;&gt;</span><br><span class="line">   b: &lt;input id&#x3D;&quot;b&quot; type&#x3D;&quot;text&quot;   name&#x3D;&quot;b&quot;&#x2F;&gt;</span><br><span class="line">   &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>Java  Pojo如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class Pojo&#123;</span><br><span class="line">    private String a;</span><br><span class="line">    private int b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java Controller如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(method &#x3D; RequestMethod.POST) </span><br><span class="line">public String processSubmit(@ModelAttribute(&quot;pojo&quot;) Pojo pojo) &#123; </span><br><span class="line">    </span><br><span class="line">    return &quot;helloWorld&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestBody获取POST请求的FORM表单数据"><a href="#RequestBody获取POST请求的FORM表单数据" class="headerlink" title="@RequestBody获取POST请求的FORM表单数据"></a>@RequestBody获取POST请求的FORM表单数据</h2><p><code>@RequestBody</code>接收的是一个Json对象的字符串，而不是一个<code>Json</code>对象。然而在<code>ajax</code>请求往往传的都是<code>Json</code>对象，后来发现用 <code>JSON.stringify(data)</code>的方式就能将对象变成字符串。同时<code>ajax</code>请求的时候也要指定<code>dataType: &quot;json&quot;,contentType:&quot;application/json&quot;</code>这样就可以轻易的将一个对象或者<code>List</code>传到<code>Java</code>端，使用<code>@RequestBody</code>即可绑定对象或者<code>List</code>.</p><p>js代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;  </span><br><span class="line">    $(document).ready(function()&#123;  </span><br><span class="line">        var saveDataAry&#x3D;[];  </span><br><span class="line">        var data1&#x3D;&#123;&quot;userName&quot;:&quot;test&quot;,&quot;address&quot;:&quot;gz&quot;&#125;;  </span><br><span class="line">        var data2&#x3D;&#123;&quot;userName&quot;:&quot;ququ&quot;,&quot;address&quot;:&quot;gr&quot;&#125;;  </span><br><span class="line">        saveDataAry.push(data1);  </span><br><span class="line">        saveDataAry.push(data2);         </span><br><span class="line">        $.ajax(&#123; </span><br><span class="line">            type:&quot;POST&quot;, </span><br><span class="line">            url:&quot;user&#x2F;saveUser&quot;, </span><br><span class="line">            dataType:&quot;json&quot;,      </span><br><span class="line">            contentType:&quot;application&#x2F;json&quot;,               </span><br><span class="line">            data:JSON.stringify(saveData), </span><br><span class="line">            success:function(data)&#123; </span><br><span class="line"></span><br><span class="line">            &#125; </span><br><span class="line">         &#125;); </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>java代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value &#x3D; &quot;saveUser&quot;, method &#x3D; &#123;RequestMethod.POST &#125;&#125;) </span><br><span class="line">@ResponseBody  </span><br><span class="line">public void saveUser(@RequestBody List&lt;User&gt; users) &#123; </span><br><span class="line">     userService.batchSave(users); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ModelAttribute</code>和<code>@RequestBody</code>注解不同之处在于<code>@ModelAttribute</code>注解可以在前端直接获取返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class Hello2ModelController extends BaseController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;helloWorld2&quot;)  </span><br><span class="line">    public String helloWorld(@ModelAttribute(&quot;myUser&quot;) User user) &#123;</span><br><span class="line">        user.setName(&quot;老王&quot;);</span><br><span class="line">       return &quot;helloWorld&quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>model</code>中<code>key</code>为<code>myUser</code> ,前台可以直接通过<code>${myUser.xx}</code>获取<code>user</code>相应属性</p><h2 id="直接用HttpServletRequest获取"><a href="#直接用HttpServletRequest获取" class="headerlink" title="直接用HttpServletRequest获取"></a>直接用HttpServletRequest获取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(method &#x3D; RequestMethod.GET) </span><br><span class="line">public String get(HttpServletRequest request, HttpServletResponse response) &#123; </span><br><span class="line">   System.out.println(request.getParameter(&quot;a&quot;)); </span><br><span class="line">    return &quot;helloWorld&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用注解-RequestParam绑定请求参数"><a href="#用注解-RequestParam绑定请求参数" class="headerlink" title="用注解@RequestParam绑定请求参数"></a>用注解@RequestParam绑定请求参数</h2><p>用注解<code>@RequestParam</code>绑定请求参数a到变量a</p><p>当请求参数a不存在时会有异常发生,可以通过设置属性<code>required=false</code>解决,</p><p>例如: <code>@RequestParam(value=&quot;a&quot;, required=false)</code></p><p>Controller如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value &#x3D; &quot;&#x2F;requestParam&quot;, method &#x3D; RequestMethod.GET) </span><br><span class="line">public String setupForm(@RequestParam(&quot;a&quot;) String a, ModelMap model) &#123; </span><br><span class="line">   System.out.println(a); </span><br><span class="line">return &quot;helloWorld&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用Undertow代替tomcat</title>
      <link href="/2019/08/14/SpringBoot%E4%BD%BF%E7%94%A8Undertow%E4%BB%A3%E6%9B%BFtomcat/"/>
      <url>/2019/08/14/SpringBoot%E4%BD%BF%E7%94%A8Undertow%E4%BB%A3%E6%9B%BFtomcat/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjUyMDhkMjE4MzkyODkwLnBuZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><blockquote><p>Undertow 是基于java nio的web服务器，应用比较广泛，内置提供的PathResourceManager，可以用来直接访问文件系统；如果你有文件需要对外提供访问，除了ftp,nginx等，undertow 也是一个不错的选择，作为java开发，服务搭建非常简便</p></blockquote><h2 id="Undertow使用"><a href="#Undertow使用" class="headerlink" title="Undertow使用"></a>Undertow使用</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>spring boot内嵌容器默认为tomcat，想要换成undertow，非常容易，只需修改spring-boot-starter-web依赖，移除tomcat的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;  </span><br><span class="line">    &lt;exclusions&gt;  </span><br><span class="line">        &lt;exclusion&gt;  </span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;  </span><br><span class="line">        &lt;&#x2F;exclusion&gt;  </span><br><span class="line">    &lt;&#x2F;exclusions&gt;  </span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>然后，添加undertow依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;  </span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p> 这样即可，使用默认参数启动undertow服务器。如果需要修改undertow参数，继续往下看。</p><h3 id="undertow的参数设置："><a href="#undertow的参数设置：" class="headerlink" title="undertow的参数设置："></a>undertow的参数设置：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server:  </span><br><span class="line">    port: 8084  </span><br><span class="line">    http2:  </span><br><span class="line">        enabled: true  </span><br><span class="line">    undertow:  </span><br><span class="line">        io-threads: 16  </span><br><span class="line">        worker-threads: 256  </span><br><span class="line">        buffer-size: 1024  </span><br><span class="line">        buffers-per-region: 1024  </span><br><span class="line">        direct-buffers: true</span><br></pre></td></tr></table></figure><p>io-threads：IO线程数, 它主要执行非阻塞的任务，它们会负责多个连接，默认设置每个CPU核心一个线程，不可设置过大，否则启动项目会报错：打开文件数过多。</p><p>worker-threads：阻塞任务线程池，当执行类似servlet请求阻塞IO操作，undertow会从这个线程池中取得线程。它的值取决于系统线程执行任务的阻塞系数，默认值是 io-threads*8</p><p>以下配置会影响buffer，这些buffer会用于服务器连接的IO操作，有点类似netty的池化内存管理。</p><p>buffer-size：每块buffer的空间大小，越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可</p><p>buffers-per-region：每个区分配的buffer数量，所以pool的大小是buffer-size * buffers-per-region</p><p>direct-buffers：是否分配的直接内存(NIO直接分配的堆外内存)</p><h2 id="File-Server"><a href="#File-Server" class="headerlink" title="File Server"></a>File Server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">import io.undertow.Handlers;</span><br><span class="line">import io.undertow.Undertow;</span><br><span class="line">import io.undertow.server.handlers.resource.PathResourceManager;</span><br><span class="line"></span><br><span class="line">public class FileServer &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        File file &#x3D; new File(&quot;&#x2F;&quot;);</span><br><span class="line">        Undertow server &#x3D; Undertow.builder().addHttpListener(8080, &quot;localhost&quot;)</span><br><span class="line">                .setHandler(Handlers.resource(new PathResourceManager(file.toPath(), 100))</span><br><span class="line">                        .setDirectoryListingEnabled(true))</span><br><span class="line">                .build();</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了！运行main函数，打开浏览器访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot - Undertow容器启动</title>
      <link href="/2019/08/14/Spring-Boot-Undertow%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8/"/>
      <url>/2019/08/14/Spring-Boot-Undertow%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MmJmNTNhYmFhZTM2OGI4LmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="Undertow简介"><a href="#Undertow简介" class="headerlink" title="Undertow简介"></a>Undertow简介</h2><ul><li><p>Undertow 是红帽公司开发的一款基于 NIO 的高性能 Web 嵌入式服务器</p></li><li><p>Untertow 的特点：<br><code>轻量级</code>：它是一个 Web 服务器，但不像传统的 Web 服务器有容器概念，它由两个核心 Jar 包组成，加载一个 Web 应 用可以小于 10MB 内存</p><p><code>Servlet3.1 支持</code>：它提供了对 Servlet3.1 的支持</p><p><code>WebSocket 支持</code>：对 Web Socket 完全支持，用以满足 Web 应用巨大数量的客户端</p><p><code>嵌套性</code>：它不需要容器，只需通过 API 即可快速搭建 Web 服务器</p></li><li><p>默认情况下 Spring Cloud 使用 Tomcat 作为内嵌 Servlet 容器，可启动一个 Tomcat 的 Spring Boot 程序与一个 Undertow 的 Spring Boot 程序，通过 VisualVM 工具进行比较，可看到 Undertow 性能优于 Tomcat</p></li></ul><h2 id="使用-Undertow"><a href="#使用-Undertow" class="headerlink" title="使用 Undertow"></a>使用 Undertow</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">    &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="支持-HTTP2"><a href="#支持-HTTP2" class="headerlink" title="支持 HTTP2"></a>支持 HTTP2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在@Configuration的类中添加@bean</span><br><span class="line">@Bean</span><br><span class="line">UndertowEmbeddedServletContainerFactory embeddedServletContainerFactory() &#123;</span><br><span class="line">    </span><br><span class="line">    UndertowEmbeddedServletContainerFactory factory &#x3D; new UndertowEmbeddedServletContainerFactory();</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 这里也可以做其他配置</span><br><span class="line">    factory.addBuilderCustomizers(builder -&gt; builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true));</span><br><span class="line">    </span><br><span class="line">    return factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-Undertow"><a href="#配置-Undertow" class="headerlink" title="配置 Undertow"></a>配置 Undertow</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Undertow 日志存放目录</span><br><span class="line">server.undertow.accesslog.dir</span><br><span class="line"># 是否启动日志</span><br><span class="line">server.undertow.accesslog.enabled&#x3D;false </span><br><span class="line"># 日志格式</span><br><span class="line">server.undertow.accesslog.pattern&#x3D;common</span><br><span class="line"># 日志文件名前缀</span><br><span class="line">server.undertow.accesslog.prefix&#x3D;access_log</span><br><span class="line"># 日志文件名后缀</span><br><span class="line">server.undertow.accesslog.suffix&#x3D;log</span><br><span class="line"># HTTP POST请求最大的大小</span><br><span class="line">server.undertow.max-http-post-size&#x3D;0 </span><br><span class="line"># 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程</span><br><span class="line">server.undertow.io-threads&#x3D;4</span><br><span class="line"># 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载</span><br><span class="line">server.undertow.worker-threads&#x3D;20</span><br><span class="line"># 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理</span><br><span class="line"># 每块buffer的空间大小,越小的空间被利用越充分</span><br><span class="line">server.undertow.buffer-size&#x3D;1024</span><br><span class="line"># 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region</span><br><span class="line">server.undertow.buffers-per-region&#x3D;1024</span><br><span class="line"># 是否分配的直接内存</span><br><span class="line">server.undertow.direct-buffers&#x3D;true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离后的优雅部署</title>
      <link href="/2019/08/12/%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%90%8E%E7%9A%84%E4%BC%98%E9%9B%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/08/12/%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%90%8E%E7%9A%84%E4%BC%98%E9%9B%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMDdkNWI1NTg0ZDY3MWJjLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="Web项目部署容器的选取"><a href="#Web项目部署容器的选取" class="headerlink" title="Web项目部署容器的选取"></a>Web项目部署容器的选取</h2><p>目前常用的部署Web项目的容器用Tomcat、Apache、Nginx等，那我们前后端分离后的前端Html静态项目到底部署在那个应用容器呢？我们先看看这几个应用容器的区别。</p><p><strong>Nginx,Apache,Tomcat的区别：</strong></p><p>Nginx常用做静态内容服务和代理服务器，直接外来请求转发给后面的应用服务器（如tomcat）,而tomcat更多用来做一个应用容器。</p><ul><li>Apache和nginx应该叫做HTTP Server，而tomcat是一个Application Server是一个Servlet/JSO应用的容器。</li><li>HTTP Server访问服务器上存储的资源（HTML文件，图片文件等），HTTP Server是中只是把服务器上的文件如实通过HTTP协议传输给客户端。</li><li>Application Server（应用服务器）往往是运行在HTTP Server的背后并执行应用，将动态的内容转化为静态的内容之后，通过HTTP Server分发到客户端。</li><li>Apache是同步多进程模型，一个连接对应一个进程，而nginx是一步的，多个连接（万级别）可以对应一个进程。nginx轻量级，抗并发，处理静态文件好。</li></ul><p>根据对比，我们不难发现Nginx是较好的选择，它是由俄罗斯人（伊戈尔·赛索耶夫）开发的一款高性能的HTTP和反向代理web服务器。本身是轻量级、抗并发、能实现万级的连接等。同时它也是一个反向代理服务器。因此，我们不仅可以用它部署静态的html应用，还可以实现域名及访问地址的代理。</p><h2 id="Nginx部署前端Web项目"><a href="#Nginx部署前端Web项目" class="headerlink" title="Nginx部署前端Web项目"></a>Nginx部署前端Web项目</h2><p>Nginx的安装这里不做介绍，只说配置及部署相关内容。首先进入linux系统中Nginx的安装录的conf目录下，找到nginx.config配置文件，vim nginx.config进入编辑模式，在http下的server对应的同级编辑或添加如下代码，然后在root对应的目录下上传对应的html今天项目文件。注意：这里上传的如果是压缩包就需要解压，目录下要有index.html。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name www.xxxx.com;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">      root html&#x2F;; #html访问路径  </span><br><span class="line">      index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我们的实际项目中，经常有多个Web端需要部署，如前面图中的例子，Web端有PC商城和Web后台系统，甚至可能更多，这些多个Web静态项目我们都放在nginx的html目录下的不同文件夹里，然后通过域名或ip+port代理到对应目录。下面就是多个Web项目在Nginx里的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">##商城Html页面</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name www.xxxx.com;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">      root html&#x2F;pc&#x2F;; #html访问路径  </span><br><span class="line">      index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">##后台系统Html页面</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name admin.xxxx.com;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">      root html&#x2F;admin&#x2F;; #html访问路径  </span><br><span class="line">      index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑完成后保存，并重启nginx服务 service nginx restart。<br>注：server_name 这里可配置域名或ip+端口号。</p><h2 id="后端项目的部署"><a href="#后端项目的部署" class="headerlink" title="后端项目的部署"></a>后端项目的部署</h2><p>大家应该都知道，SpringBoot里集成了Tomcat容器，所有Springboot的项目部署，很是容易，根本不需要你还安装什么Tomcat、JBoss等应用。我们只需打成jar文件，上传到服务器，然后通过执行<br>java -jar xxx.jar &amp;命令即可。<br>但有没有人遇到过，你通过java -jar xxx.jar &amp;刚刚部署的服务，在你断开linux服务器的shell连接后服务就没了。大家有知道这是什么原因吗？这里给大家说说部署java jar文件命令的那点事。</p><ul><li><p>java -jar xxx.jar &amp;</p><blockquote><p>此命令可直接启动jar文件，是在当前会话进程中开启一个子进程来运行程序，这个子进程会随着会话进程的结束而结束。也就是说在你端口Shell连接回话结束，服务就跟着结束了。这种情况适合短时间测试用。</p></blockquote></li><li><p>nohup java -jar xxx.jar &amp;</p><blockquote><p>这里在说这个命令前先说两个名词，即：<br>hangup (挂断)，终端退出时会发送 hangup 信号来通知关闭所有子进程。<br>nohup(不挂断，忽略挂断信号)</p></blockquote></li></ul><p>nohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上”&amp;”来将命令同时放入后台运行，也可用”&gt;filename2&gt;&amp;1”来更改缺省的重定向文件名。这种情况适合在生产环境长时间运行。</p><p>在生产环境如果你只用简单的jar部署，那一定得用nohup java 命令启动应用。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot逆向工程</title>
      <link href="/2019/07/27/springboot%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
      <url>/2019/07/27/springboot%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zNGY4NTg2MWVlNjI0NWExLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><p>通过逆向工程少写很多代码</p><h2 id="generatorConfig-xml"><a href="#generatorConfig-xml" class="headerlink" title="generatorConfig.xml"></a>generatorConfig.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!--mysql 连接数据库jar 这里选择自己本地位置--&gt;</span><br><span class="line">    &lt;classPathEntry location&#x3D;&quot;C:\Users\Administrator\.m2\repository\mysql\mysql-connector-java\5.1.21\mysql-connector-java-5.1.21.jar&quot; &#x2F;&gt;</span><br><span class="line">    &lt;context id&#x3D;&quot;testTables&quot; targetRuntime&#x3D;&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;suppressAllComments&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;commentGenerator&gt;</span><br><span class="line">        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;oa&quot; userId&#x3D;&quot;root&quot;</span><br><span class="line">                        password&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;&#x2F;jdbcConnection&gt;</span><br><span class="line">        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span><br><span class="line">           NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;forceBigDecimals&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- targetProject:生成PO类的位置 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage&#x3D;&quot;com.yj.oa.project.po&quot;</span><br><span class="line">                            targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;trimStrings&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaModelGenerator&gt;</span><br><span class="line">        &lt;!-- targetProject:mapper映射文件生成的位置</span><br><span class="line">           如果maven工程只是单独的一个工程，targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;</span><br><span class="line">           若果maven工程是分模块的工程，targetProject&#x3D;&quot;所属模块的名称&quot;，例如：</span><br><span class="line">           targetProject&#x3D;&quot;ecps-manager-mapper&quot;，下同--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage&#x3D;&quot;mapper&quot;</span><br><span class="line">                         targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;sqlMapGenerator&gt;</span><br><span class="line">        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type&#x3D;&quot;XMLMAPPER&quot;</span><br><span class="line">                             targetPackage&#x3D;&quot;com.yj.oa.project.mapper&quot;</span><br><span class="line">                             targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaClientGenerator&gt;</span><br><span class="line">        &lt;!-- 指定数据库表 --&gt;</span><br><span class="line">        &lt;table tableName&#x3D;&quot;t_overtimeform&quot; domainObjectName&#x3D;&quot;OvertimeForm&quot; enableCountByExample&#x3D;&quot;false&quot;</span><br><span class="line">               enableUpdateByExample&#x3D;&quot;false&quot; enableDeleteByExample&#x3D;&quot;false&quot; enableSelectByExample&#x3D;&quot;false&quot;</span><br><span class="line">               selectByExampleQueryId&#x3D;&quot;false&quot;&gt;&lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;context&gt;</span><br><span class="line">&lt;&#x2F;generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;configuration&gt; &lt;!--配置文件的位置--&gt;</span><br><span class="line">                    &lt;configurationFile&gt;src&#x2F;main&#x2F;resources&#x2F;generatorConfig.xml&lt;&#x2F;configurationFile&gt;</span><br><span class="line">                    &lt;verbose&gt;true&lt;&#x2F;verbose&gt;</span><br><span class="line">                    &lt;overwrite&gt;true&lt;&#x2F;overwrite&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;Generate MyBatis Artifacts&lt;&#x2F;id&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;generate&lt;&#x2F;goal&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;mybatis-generator-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">                        &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">                    &lt;&#x2F;dependency&gt;</span><br><span class="line">                &lt;&#x2F;dependencies&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己实现一个简单版的HashMap</title>
      <link href="/2019/07/26/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%89%88%E7%9A%84HashMap/"/>
      <url>/2019/07/26/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%89%88%E7%9A%84HashMap/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOWZmN2ZhMDZkMDQ5YzNjLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h2><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br>HashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。<br>HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。</p><p>HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。容量 是哈希表中桶的数量，初始容量 只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。<br>通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。</p><h2 id="简单版，只实现put和get"><a href="#简单版，只实现put和get" class="headerlink" title="简单版，只实现put和get"></a>简单版，只实现put和get</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">public class MyHashMap&lt;K, V&gt; &#123;</span><br><span class="line">    private static int default_length &#x3D; 16;</span><br><span class="line">    private MyEntry&lt;K, V&gt;[] entries;</span><br><span class="line"></span><br><span class="line">    public MyHashMap() &#123;</span><br><span class="line">        super();</span><br><span class="line">        entries &#x3D; new MyEntry[default_length];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public V put(K key, V value) &#123;</span><br><span class="line">        int index &#x3D; key.hashCode() % default_length;&#x2F;&#x2F; hascode值除map大小取余</span><br><span class="line">        MyEntry&lt;K, V&gt; prevoius &#x3D; entries[index];</span><br><span class="line">        for (MyEntry&lt;K, V&gt; entry &#x3D; entries[index]; entry !&#x3D; null; entry &#x3D; entry.next) &#123;</span><br><span class="line">            if (entry.getKey().equals(key)) &#123;</span><br><span class="line">                V oldValue &#x3D; (V) entry.getValue();</span><br><span class="line">                entry.setValue(value);</span><br><span class="line">                return oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        MyEntry&lt;K, V&gt; entry &#x3D; new MyEntry&lt;&gt;(key, value);</span><br><span class="line">        entry.next &#x3D; prevoius;</span><br><span class="line">        entries[index] &#x3D; entry;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public K get(K key)&#123;</span><br><span class="line">        int index&#x3D; key.hashCode()%default_length;</span><br><span class="line">        for (MyEntry&lt;K,V&gt; entry&#x3D; entries[index];entry!&#x3D;null;entry&#x3D;entry.next)&#123;</span><br><span class="line">            if(entry.getKey().equals(key))&#123;</span><br><span class="line">                return (K)entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private final class MyEntry&lt;K, V&gt; &#123;</span><br><span class="line">        private K key;</span><br><span class="line">        private V value;</span><br><span class="line">        private MyEntry next;</span><br><span class="line"></span><br><span class="line">        public MyEntry() &#123;</span><br><span class="line">            super();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public MyEntry(K key, V value) &#123;</span><br><span class="line">            super();</span><br><span class="line">            this.key &#x3D; key;</span><br><span class="line">            this.value &#x3D; value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public MyEntry(K key, V value, MyEntry next) &#123;</span><br><span class="line">            super();</span><br><span class="line">            this.key &#x3D; key;</span><br><span class="line">            this.value &#x3D; value;</span><br><span class="line">            this.next &#x3D; next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public K getKey() &#123;</span><br><span class="line">            return key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setKey(K key) &#123;</span><br><span class="line">            this.key &#x3D; key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public V getValue() &#123;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setValue(V value) &#123;</span><br><span class="line">            this.value &#x3D; value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public MyEntry getNext() &#123;</span><br><span class="line">            return next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setNext(MyEntry next) &#123;</span><br><span class="line">            this.next &#x3D; next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂版"><a href="#复杂版" class="headerlink" title="复杂版"></a>复杂版</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">public class MyHashMap &#123;</span><br><span class="line">    &#x2F;&#x2F;默认初始化大小 16</span><br><span class="line">    private static final int DEFAULT_INITIAL_CAPACITY &#x3D; 16;</span><br><span class="line">    &#x2F;&#x2F;默认负载因子 0.75</span><br><span class="line">    private static final float DEFAULT_LOAD_FACTOR &#x3D; 0.75f;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;临界值</span><br><span class="line">    private int threshold;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;元素个数</span><br><span class="line">    private int size;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;扩容次数</span><br><span class="line">    private int resize;</span><br><span class="line"></span><br><span class="line">    private MyEntry[] table;</span><br><span class="line"></span><br><span class="line">    public MyHashMap() &#123;</span><br><span class="line">        table &#x3D; new MyEntry[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">        threshold &#x3D; (int) (DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</span><br><span class="line">        size &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int index(Object key) &#123;</span><br><span class="line">        &#x2F;&#x2F;根据key的hashcode和entry长度取模计算key在entry中的位置</span><br><span class="line">        return key.hashCode() % table.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void put(Object key, Object value) &#123;</span><br><span class="line">        &#x2F;&#x2F;key为null时需要特殊处理，为简化实现忽略null值</span><br><span class="line">        if (key &#x3D;&#x3D; null) return;</span><br><span class="line">        int index &#x3D; index(key);</span><br><span class="line">        &#x2F;&#x2F;遍历index位置的entry，若找到重复key则更新对应entry的值，然后返回</span><br><span class="line">        MyEntry entry &#x3D; table[index];</span><br><span class="line">        while (entry !&#x3D; null) &#123;</span><br><span class="line">            if (entry.getKey().hashCode() &#x3D;&#x3D; key.hashCode() &amp;&amp; (entry.getKey() &#x3D;&#x3D; key || entry.getKey().equals(key))) &#123;</span><br><span class="line">                entry.setValue(value);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            entry &#x3D; entry.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;若index位置没有entry或者未找到重复的key，则将新key添加到table的index位置</span><br><span class="line">        add(index, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void add(int index, Object key, Object value) &#123;</span><br><span class="line">        &#x2F;&#x2F;将新的entry放到table的index位置第一个，若原来有值则以链表形式存放</span><br><span class="line">        MyEntry entry &#x3D; new MyEntry(key, value, table[index]);</span><br><span class="line">        table[index] &#x3D; entry;</span><br><span class="line">        &#x2F;&#x2F;判断size是否达到临界值，若已达到则进行扩容，将table的capacicy翻倍</span><br><span class="line">        if (size++ &gt;&#x3D; threshold) &#123;</span><br><span class="line">            resize(table.length * 2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void resize(int capacity) &#123;</span><br><span class="line">        if (capacity &lt;&#x3D; table.length) return;</span><br><span class="line"></span><br><span class="line">        MyEntry[] newTable &#x3D; new MyEntry[capacity];</span><br><span class="line">        &#x2F;&#x2F;遍历原table，将每个entry都重新计算hash放入newTable中</span><br><span class="line">        for (int i &#x3D; 0; i &lt; table.length; i++) &#123;</span><br><span class="line">            MyEntry old &#x3D; table[i];</span><br><span class="line">            while (old!&#x3D;null)&#123;</span><br><span class="line">                MyEntry next &#x3D; old.getNext();</span><br><span class="line">                int index &#x3D; index(old.getKey());</span><br><span class="line">                old.setNext(newTable[index]);</span><br><span class="line">                newTable[index] &#x3D; old;</span><br><span class="line">                old&#x3D;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;用newTable替table</span><br><span class="line">        table &#x3D; newTable;</span><br><span class="line">        &#x2F;&#x2F;修改临界值</span><br><span class="line">        threshold &#x3D; (int) (table.length * DEFAULT_LOAD_FACTOR);</span><br><span class="line">        resize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object get(Object key)&#123;</span><br><span class="line">        &#x2F;&#x2F;这里简化处理，忽略null值</span><br><span class="line">        if (key &#x3D;&#x3D; null) return null;</span><br><span class="line">        MyEntry entry&#x3D; getEntry(key);</span><br><span class="line">        return entry &#x3D;&#x3D; null ? null : entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyEntry getEntry(Object key)&#123;</span><br><span class="line">        MyEntry entry &#x3D;table[index(key)];</span><br><span class="line">        while (entry!&#x3D;null)&#123;</span><br><span class="line">            if (entry.getKey().hashCode()&#x3D;&#x3D;key.hashCode()&amp;&amp;(entry.getKey()&#x3D;&#x3D;key||entry.getKey().equals(key)))&#123;</span><br><span class="line">                return entry;</span><br><span class="line">            &#125;</span><br><span class="line">            entry &#x3D; entry.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        return entry;</span><br><span class="line">    &#125;</span><br><span class="line">    public void remove(Object key) &#123;</span><br><span class="line">        if (key &#x3D;&#x3D; null) return;</span><br><span class="line">        int index &#x3D; index(key);</span><br><span class="line">        MyEntry pre &#x3D; null;</span><br><span class="line">        MyEntry entry &#x3D; table[index];</span><br><span class="line">        while (entry !&#x3D; null) &#123;</span><br><span class="line">            if (entry.getKey().hashCode() &#x3D;&#x3D; key.hashCode() &amp;&amp; (entry.getKey() &#x3D;&#x3D; key || entry.getKey().equals(key))) &#123;</span><br><span class="line">                if (pre &#x3D;&#x3D; null) table[index] &#x3D; entry.getNext();</span><br><span class="line">                else pre.setNext(entry.getNext());</span><br><span class="line">                &#x2F;&#x2F;如果成功找到并删除，修改size</span><br><span class="line">                size--;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            pre &#x3D; entry;</span><br><span class="line">            entry &#x3D; entry.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean containsKey(Object key) &#123;</span><br><span class="line">        if (key &#x3D;&#x3D; null) return false;</span><br><span class="line">        return getEntry(key) !&#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int size() &#123;</span><br><span class="line">        return this.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; table.length; i++) &#123;</span><br><span class="line">            table[i] &#x3D; null;</span><br><span class="line">        &#125;</span><br><span class="line">        this.size &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">        sb.append(String.format(&quot;size:%s capacity:%s resize:%s\n\n&quot;, size, table.length, resize));</span><br><span class="line">        for (MyEntry entry : table) &#123;</span><br><span class="line">            while (entry !&#x3D; null) &#123;</span><br><span class="line">                sb.append(entry.getKey() + &quot;:&quot; + entry.getValue() + &quot;\n&quot;);</span><br><span class="line">                entry &#x3D; entry.getNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    final class MyEntry &#123;</span><br><span class="line">        private Object key;</span><br><span class="line">        private Object value;</span><br><span class="line">        private MyEntry next;</span><br><span class="line"></span><br><span class="line">        public MyEntry(Object key, Object value, MyEntry next) &#123;</span><br><span class="line">            this.key &#x3D; key;</span><br><span class="line">            this.value &#x3D; value;</span><br><span class="line">            this.next &#x3D; next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Object getKey() &#123;</span><br><span class="line">            return key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setKey(Object key) &#123;</span><br><span class="line">            this.key &#x3D; key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Object getValue() &#123;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setValue(Object value) &#123;</span><br><span class="line">            this.value &#x3D; value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public MyEntry getNext() &#123;</span><br><span class="line">            return next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setNext(MyEntry next) &#123;</span><br><span class="line">            this.next &#x3D; next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSON搞定任何JSON数据</title>
      <link href="/2019/07/26/GSON%E6%90%9E%E5%AE%9A%E4%BB%BB%E4%BD%95JSON%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/07/26/GSON%E6%90%9E%E5%AE%9A%E4%BB%BB%E4%BD%95JSON%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZmFhOTJlNDU4OTBlMmQyLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h2 id="一、Gson介绍"><a href="#一、Gson介绍" class="headerlink" title="一、Gson介绍"></a>一、Gson介绍</h2><p>GSON是Google提供的用来在Java对象和JSON数据之间进行映射的Java类库。可以将一个Json字符转成一个Java对象，或者将一个Java转化为Json字符串。</p><blockquote><p><em>特点:</em></p></blockquote><ul><li>快速、高效    </li><li>代码量少、简洁</li><li>面向对象</li><li>数据传递和解析</li></ul><h2 id="二、Gson的pom依赖"><a href="#二、Gson的pom依赖" class="headerlink" title="二、Gson的pom依赖"></a>二、Gson的pom依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.8.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="三、Gson的创建方式"><a href="#三、Gson的创建方式" class="headerlink" title="三、Gson的创建方式"></a>三、Gson的创建方式</h2><ul><li><p>Gson gson = new gson();</p></li><li><p>通过GsonBuilder()，可以配置多种配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Gson gson &#x3D; new GsonBuilder()</span><br><span class="line">                        .setLenient()&#x2F;&#x2F; json宽松  </span><br><span class="line">                        .enableComplexMapKeySerialization()&#x2F;&#x2F;支持Map的key为复杂对象的形式  </span><br><span class="line">                        .serializeNulls() &#x2F;&#x2F;智能null  </span><br><span class="line">                        .setPrettyPrinting()&#x2F;&#x2F; 调教格式  </span><br><span class="line">                        .disableHtmlEscaping() &#x2F;&#x2F;默认是GSON把HTML 转义的</span><br><span class="line">                        .create();</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、Gson的基本用法"><a href="#四、Gson的基本用法" class="headerlink" title="四、Gson的基本用法"></a>四、Gson的基本用法</h2><p>之前写过一个获取天气参数的API,就需要去解析返回的json数据，就以此为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String url &#x3D; &quot;http:&#x2F;&#x2F;t.weather.sojson.com&#x2F;api&#x2F;weather&#x2F;city&#x2F;101010100&quot;;</span><br><span class="line">String resultStr &#x3D; HttpClientUtil.sendGetRequest(url, &quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure><h2 id="五、进行解析"><a href="#五、进行解析" class="headerlink" title="五、进行解析"></a>五、进行解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson &#x3D;new Gson();</span><br><span class="line">Map m&#x3D; gson.fromJson(resultStr,Map.class);</span><br><span class="line">System.out.println(m.get(&quot;data&quot;));</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;shidu&#x3D;15%, pm25&#x3D;15.0, pm10&#x3D;35.0, quality&#x3D;优, wendu&#x3D;3, ganmao&#x3D;各类人群可自由活动, </span><br><span class="line">yesterday&#x3D;&#123;date&#x3D;06, sunrise&#x3D;07:36, high&#x3D;高温 3.0℃, low&#x3D;低温 -7.0℃, sunset&#x3D;17:03, </span><br><span class="line">aqi&#x3D;58.0, ymd&#x3D;2019-01-06, week&#x3D;星期日, fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;晴, </span><br><span class="line">notice&#x3D;愿你拥有比阳光明媚的心情&#125;, forecast&#x3D;[&#123;date&#x3D;07, sunrise&#x3D;07:36, high&#x3D;高温 2.0℃, </span><br><span class="line">low&#x3D;低温 -7.0℃, sunset&#x3D;17:04, aqi&#x3D;48.0, ymd&#x3D;2019-01-07, week&#x3D;星期一, fx&#x3D;北风, </span><br><span class="line">fl&#x3D;3-4级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;, &#123;date&#x3D;08, sunrise&#x3D;07:36, </span><br><span class="line">high&#x3D;高温 1.0℃, low&#x3D;低温 -9.0℃, sunset&#x3D;17:05, aqi&#x3D;28.0, ymd&#x3D;2019-01-08, week&#x3D;星期二, </span><br><span class="line">fx&#x3D;北风, fl&#x3D;3-4级, type&#x3D;晴, notice&#x3D;愿你拥有比阳光明媚的心情&#125;, &#123;date&#x3D;09, sunrise&#x3D;07:36,</span><br><span class="line"> high&#x3D;高温 2.0℃, low&#x3D;低温 -8.0℃, sunset&#x3D;17:06, aqi&#x3D;83.0, ymd&#x3D;2019-01-09, week&#x3D;星期三, </span><br><span class="line">fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;, &#123;date&#x3D;10, sunrise&#x3D;07:36, </span><br><span class="line">high&#x3D;高温 4.0℃, low&#x3D;低温 -7.0℃, sunset&#x3D;17:07, aqi&#x3D;128.0, ymd&#x3D;2019-01-10, week&#x3D;星期四,</span><br><span class="line"> fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;晴, notice&#x3D;愿你拥有比阳光明媚的心情&#125;, &#123;date&#x3D;11, sunrise&#x3D;07:36, </span><br><span class="line">high&#x3D;高温 5.0℃, low&#x3D;低温 -6.0℃, sunset&#x3D;17:08, aqi&#x3D;238.0, ymd&#x3D;2019-01-11, week&#x3D;星期五,</span><br><span class="line"> fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;]&#125;</span><br><span class="line">可以新建一个天气的Bean，将返回的json数据转换成对象</span><br></pre></td></tr></table></figure><h2 id="六、GSON直接解析成对象"><a href="#六、GSON直接解析成对象" class="headerlink" title="六、GSON直接解析成对象"></a>六、GSON直接解析成对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultBean resultBean &#x3D; new Gson().fromJson(resultStr,ResultBean.class);</span><br></pre></td></tr></table></figure><h2 id="七、解析简单的json"><a href="#七、解析简单的json" class="headerlink" title="七、解析简单的json"></a>七、解析简单的json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">      shidu &#x3D; 15 % , </span><br><span class="line">      pm25 &#x3D; 15.0,</span><br><span class="line">      pm10 &#x3D; 35.0, </span><br><span class="line">      quality &#x3D; 优, </span><br><span class="line">      wendu &#x3D; 3, </span><br><span class="line">      ganmao &#x3D; 各类人群可自由活动,</span><br><span class="line">     &#125;</span><br><span class="line">JsonObject jsonObject &#x3D;(JsonObject) new JsonParser().parse(resultStr);</span><br><span class="line">Int wendu &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;wendu&quot;).getAsInt();</span><br><span class="line">String quality&#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;quality&quot;).getAsString();</span><br></pre></td></tr></table></figure><h2 id="八、解析多层对象"><a href="#八、解析多层对象" class="headerlink" title="八、解析多层对象"></a>八、解析多层对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> data:&#123;</span><br><span class="line">     shidu &#x3D; 15 % , </span><br><span class="line">     pm25 &#x3D; 15.0, </span><br><span class="line">     pm10 &#x3D; 35.0, </span><br><span class="line">     quality &#x3D; 优, </span><br><span class="line">     wendu &#x3D; 3, </span><br><span class="line">     ganmao &#x3D; 各类人群可自由活动, </span><br><span class="line">     yesterday :&#123;</span><br><span class="line">                   date &#x3D; 06,</span><br><span class="line">                   sunrise &#x3D; 07: 36,</span><br><span class="line">                   high &#x3D; 高温 3.0℃,</span><br><span class="line">                   low &#x3D; 低温 - 7.0℃,</span><br><span class="line">                   sunset &#x3D; 17: 03,</span><br><span class="line">                   aqi &#x3D; 58.0,</span><br><span class="line">                   ymd &#x3D; 2019 - 01 - 06,</span><br><span class="line">                   week &#x3D; 星期日,</span><br><span class="line">                   fx &#x3D; 西南风,</span><br><span class="line">                   fl &#x3D; &lt; 3 级,</span><br><span class="line">                   type &#x3D; 晴,</span><br><span class="line">                   notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class="line">                &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">JsonObject jsonObject &#x3D; (JsonObject) new JsonParser().parse(resultStr);</span><br><span class="line">JsonObject yesterday &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;yesterday &quot;).getAsJsonObject();</span><br><span class="line">String type  &#x3D; yesterday.get(&quot;type&quot;).getAsString();</span><br></pre></td></tr></table></figure><h2 id="九、解析带数组的json"><a href="#九、解析带数组的json" class="headerlink" title="九、解析带数组的json"></a>九、解析带数组的json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">shidu &#x3D; 15 % , pm25 &#x3D; 15.0, pm10 &#x3D; 35.0, quality &#x3D; 优, wendu &#x3D; 3, ganmao &#x3D; 各类人群可自由活动, </span><br><span class="line">yesterday &#x3D; &#123;</span><br><span class="line">        date &#x3D; 06,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 3.0℃,</span><br><span class="line">        low &#x3D; 低温 - 7.0℃,</span><br><span class="line">        sunset &#x3D; 17: 03,</span><br><span class="line">        aqi &#x3D; 58.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 06,</span><br><span class="line">        week &#x3D; 星期日,</span><br><span class="line">        fx &#x3D; 西南风,</span><br><span class="line">        fl &#x3D; &lt; 3 级,</span><br><span class="line">        type &#x3D; 晴,</span><br><span class="line">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class="line">    &#125;, </span><br><span class="line">forecast &#x3D; [&#123;</span><br><span class="line">        date &#x3D; 07,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 2.0℃,</span><br><span class="line">        low &#x3D; 低温 - 7.0℃,</span><br><span class="line">        sunset &#x3D; 17: 04,</span><br><span class="line">        aqi &#x3D; 48.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 07,</span><br><span class="line">        week &#x3D; 星期一,</span><br><span class="line">        fx &#x3D; 北风,</span><br><span class="line">        fl &#x3D; 3 - 4 级,</span><br><span class="line">        type &#x3D; 多云,</span><br><span class="line">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        date &#x3D; 08,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 1.0℃,</span><br><span class="line">        low &#x3D; 低温 - 9.0℃,</span><br><span class="line">        sunset &#x3D; 17: 05,</span><br><span class="line">        aqi &#x3D; 28.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 08,</span><br><span class="line">        week &#x3D; 星期二,</span><br><span class="line">        fx &#x3D; 北风,</span><br><span class="line">        fl &#x3D; 3 - 4 级,</span><br><span class="line">        type &#x3D; 晴,</span><br><span class="line">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        date &#x3D; 09,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 2.0℃,</span><br><span class="line">        low &#x3D; 低温 - 8.0℃,</span><br><span class="line">        sunset &#x3D; 17: 06,</span><br><span class="line">        aqi &#x3D; 83.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 09,</span><br><span class="line">        week &#x3D; 星期三,</span><br><span class="line">        fx &#x3D; 西南风,</span><br><span class="line">        fl &#x3D; &lt; 3 级,</span><br><span class="line">        type &#x3D; 多云,</span><br><span class="line">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        date &#x3D; 10,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 4.0℃,</span><br><span class="line">        low &#x3D; 低温 - 7.0℃,</span><br><span class="line">        sunset &#x3D; 17: 07,</span><br><span class="line">        aqi &#x3D; 128.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 10,</span><br><span class="line">        week &#x3D; 星期四,</span><br><span class="line">        fx &#x3D; 西南风,</span><br><span class="line">        fl &#x3D; &lt; 3 级,</span><br><span class="line">        type &#x3D; 晴,</span><br><span class="line">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        date &#x3D; 11,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 5.0℃,</span><br><span class="line">        low &#x3D; 低温 - 6.0℃,</span><br><span class="line">        sunset &#x3D; 17: 08,</span><br><span class="line">        aqi &#x3D; 238.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 11,</span><br><span class="line">        week &#x3D; 星期五,</span><br><span class="line">        fx &#x3D; 西南风,</span><br><span class="line">        fl &#x3D; &lt; 3 级,</span><br><span class="line">        type &#x3D; 多云,</span><br><span class="line">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JsonObject jsonObject &#x3D;(JsonObject) new JsonParser().parse(resultStr);</span><br><span class="line">&#x2F;&#x2F;获取data</span><br><span class="line">JsonObject data &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject();</span><br><span class="line">&#x2F;&#x2F;获取数组</span><br><span class="line">JsonArray forecast &#x3D; data.getAsJsonObject().get(&quot;forecast&quot;).getAsJsonArray();</span><br><span class="line">String type  &#x3D; forecast.get(0).getAsJsonObject().get(&quot;type&quot;).getAsString();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发中常用的 25 个JavaScript 单行代码</title>
      <link href="/2019/07/26/%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84-25-%E4%B8%AAJavaScript-%E5%8D%95%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
      <url>/2019/07/26/%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84-25-%E4%B8%AAJavaScript-%E5%8D%95%E8%A1%8C%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjg5MGI4N2M1YjFiZmIxLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><h3 id="1-强制布尔值"><a href="#1-强制布尔值" class="headerlink" title="1.强制布尔值"></a>1.强制布尔值</h3><p>要将变量强制转换为布尔值而不更改其值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const myBoolean &#x3D; !! myVariable;!!null &#x2F;&#x2F; false !!undefined &#x2F;&#x2F; false !!false &#x2F;&#x2F; false !!ture &#x2F;&#x2F; ture !!&quot;&quot; &#x2F;&#x2F; false !!&quot;string&quot; &#x2F;&#x2F; true !!0 &#x2F;&#x2F; false !!1 &#x2F;&#x2F; true !!&#123;&#125; &#x2F;&#x2F; true !![] &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="2-基于某个条件为对象设置属性"><a href="#2-基于某个条件为对象设置属性" class="headerlink" title="2.基于某个条件为对象设置属性"></a>2.基于某个条件为对象设置属性</h3><p>要使用spread运算符有条件地在对象上设置属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const myObject &#x3D; &#123;... myProperty &amp;&amp; &#123;propName：myPoperty&#125;&#125;;</span><br><span class="line">let myProperty &#x3D; &#39;Jhon&#39; const myObject &#x3D; &#123;...myProperty &amp;&amp; &#123;propName: myProperty&#125;&#125;; </span><br><span class="line">&#x2F;&#x2F; &#123;propName: &quot;Jhon&quot;&#125; </span><br><span class="line">let myProperty &#x3D; &#39;&#39; </span><br><span class="line">const myObject &#x3D; &#123;...myProperty &amp;&amp; &#123;propName: myProperty&#125;&#125;; </span><br><span class="line">&#x2F;&#x2F; &#123;&#125;</span><br></pre></td></tr></table></figure><p>如果myProperty结果为false，则 &amp;&amp; 失败并且不设置新属性; 否则，如果不为空，&amp;&amp; 将设置新属性并覆盖原来的值。</p><h3 id="3-合并对象"><a href="#3-合并对象" class="headerlink" title="3.合并对象"></a>3.合并对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mergedObject &#x3D; &#123; ...objectOne, ...objectTwo &#125;; </span><br><span class="line">const mergedObject &#x3D; &#123; ...&#123;name: &#39;Jhon&#39;, age: &#39;18&#39;&#125;, ...&#123;name1: &#39;jhon1&#39;, age1: &#39;12&#39;&#125;&#125;;</span><br><span class="line"> &#x2F;&#x2F; &#123;name: &quot;Jhon&quot;, age: &quot;18&quot;, name1: &quot;jhon1&quot;, age1: &quot;12&quot;&#125; </span><br><span class="line">const mergedObject &#x3D; &#123; ...&#123;name: &#39;Jhon&#39;, age: &#39;18&#39;&#125;, ...&#123;name: &#39;jhon1&#39;, age:&#39;12&#39;&#125;&#125;; </span><br><span class="line">&#x2F;&#x2F; &#123;name: &quot;jhon1&quot;, age: &quot;12&quot;&#125;</span><br></pre></td></tr></table></figure><p>支持无限制合并，但如果对象之间存在相同属性，则后面属性会覆盖前面属性。*请注意，这仅适用于浅层合并。</p><h3 id="4-交换变量"><a href="#4-交换变量" class="headerlink" title="4.交换变量"></a>4.交换变量</h3><p>要在不使用中间变量的情况下交换两个变量的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[varA，varB] &#x3D; [varB，varA]; </span><br><span class="line">let a &#x3D; 1; let b &#x3D; 2; </span><br><span class="line">[a, b] &#x3D; [b, a] &#x2F;&#x2F; a &#x3D; 2 b &#x3D; 1</span><br></pre></td></tr></table></figure><h3 id="5-删除Boolean-为-false-值"><a href="#5-删除Boolean-为-false-值" class="headerlink" title="5.删除Boolean 为 false 值"></a>5.删除Boolean 为 false 值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const clean &#x3D; dirty.filter(Boolean); </span><br><span class="line">const clean &#x3D; [0, false, true, undefined, null, &#39;&#39;, 12, 15].filter(Boolean); &#x2F;&#x2F; [true, 12, 15]</span><br></pre></td></tr></table></figure><p>这将删除值等于：null，undefined，false，0 和空字符串(‘’)。</p><h3 id="6-转换元素类型"><a href="#6-转换元素类型" class="headerlink" title="6.转换元素类型"></a>6.转换元素类型</h3><p>要将Number元素转换为String元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const stringArray &#x3D; numberArray.map(String); </span><br><span class="line">const stringArray &#x3D; [1, 2, 3].map(String); [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span><br></pre></td></tr></table></figure><p>如果数组包含字符串，字符串原样保留。 这也可以用于将String元素转换为Number类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const numberArray &#x3D; stringArray.map(Number); </span><br><span class="line">const stringArray &#x3D; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(String); &#x2F;&#x2F; [1, 2, 3]</span><br></pre></td></tr></table></figure><h3 id="7-格式化对象为JSON代码"><a href="#7-格式化对象为JSON代码" class="headerlink" title="7.格式化对象为JSON代码"></a>7.格式化对象为JSON代码</h3><p>要以可读的格式显示JSON代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const formatted &#x3D; JSON.stringify(myObj, null, 4); </span><br><span class="line">const formatted &#x3D; JSON.stringify(&#123;name: &#39;Jhon&#39;, age: 18, address: &#39;sz&#39;&#125;, null, 4); </span><br><span class="line">&#x2F;* &#123;  &quot;name&quot;: &quot;Jhon&quot;,  &quot;age&quot;: 18,  &quot;address&quot;: &quot;sz&quot; &#125; *&#x2F;</span><br></pre></td></tr></table></figure><p>该字符串化命令有三个参数。第一个是Javascript对象。第二个是可选函数，可用于在JSON进行字符串化时对其执行操作。最后一个参数指示要添加多少空格作为缩进以格式化JSON。省略最后一个参数，JSON将返回一个长行。如果myObj中存在循环引用，则会格式失败。</p><h3 id="8-快速创建数字数组"><a href="#8-快速创建数字数组" class="headerlink" title="8.快速创建数字数组"></a>8.快速创建数字数组</h3><p>要创建一个数组并用数字填充它，索引为零：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const numArray &#x3D; Array.from(new Array(10), (x, i)&#x3D;&gt; i);</span><br><span class="line"> &#x2F;&#x2F; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><h3 id="9-随机生成六位数字验证码"><a href="#9-随机生成六位数字验证码" class="headerlink" title="9.随机生成六位数字验证码"></a>9.随机生成六位数字验证码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const code &#x3D; Math.floor(Math.random() * 1000000).toString().padStart(6, &quot;0&quot;); </span><br><span class="line">&#x2F;&#x2F; 942377</span><br></pre></td></tr></table></figure><h3 id="10-身份证正则"><a href="#10-身份证正则" class="headerlink" title="10.身份证正则"></a>10.身份证正则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const IDReg&#x3D; &#x2F;(^[1-9]d&#123;5&#125;(18|19|</span><br><span class="line">              ([23]d))d&#123;2&#125;((0[1-9])|</span><br><span class="line">              (10|11|12))(([0-2][1-9])|10|20|30|31)d&#123;3&#125;[0-9Xx]$)|</span><br><span class="line">              (^[1-9]d&#123;5&#125;d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)d&#123;2&#125;[0-9Xx]$)&#x2F;;</span><br></pre></td></tr></table></figure><h3 id="11-window-location-search-转-JS-对象"><a href="#11-window-location-search-转-JS-对象" class="headerlink" title="11.window.location.search 转 JS 对象"></a>11.window.location.search 转 JS 对象</h3><p>有时候我们会对url的查询参数即从问号 (?)后 开始的 URL（查询部分）进行转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const searchObj &#x3D; search </span><br><span class="line">                &#x3D;&gt; JSON.parse(</span><br><span class="line">                   &#96;&#123;&quot;$&#123;decodeURIComponent(search</span><br><span class="line">                       .substring(1))</span><br><span class="line">                       .replace(&#x2F;&quot;&#x2F;g, &#39;\&quot;&#39;)</span><br><span class="line">                       .replace(&#x2F;&amp;&#x2F;g,&#39;&quot;,&quot;&#39;)</span><br><span class="line">                       .replace(&#x2F;&#x3D;&#x2F;g, &#39;&quot;:&quot;&#39;)</span><br><span class="line">                    &#125;&quot;&#125;&#96;</span><br><span class="line">                ); </span><br><span class="line">&#x2F;&#x2F; 假如请求url为 &#x2F;&#x2F; &#39;https:&#x2F;&#x2F;www.baidu.com?ie&#x3D;utf-8&amp;f&#x3D;8&amp;rsv_bp&#x3D;1&amp;rsv_idx&#x3D;1&amp;tn&#x3D;baidu&amp;wd&#x3D;js&amp;rsv_pq&#x3D;a86b5e5f0007bceb&amp;rsv_t&#x3D;1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&amp;rqlang&#x3D;cn&amp;rsv_enter&#x3D;0&amp;inputT&#x3D;1287&amp;rsv_sug3&#x3D;5&amp;rsv_sug1&#x3D;3&amp;rsv_sug7&#x3D;101&amp;rsv_sug2&#x3D;0&amp;rsv_sug4&#x3D;1907&#39; </span><br><span class="line">&#x2F;&#x2F; 那么 window.location.search 就为： let search &#x3D; &#39;?ie&#x3D;utf-8&amp;f&#x3D;8&amp;rsv_bp&#x3D;1&amp;rsv_idx&#x3D;1&amp;tn&#x3D;baidu&amp;wd&#x3D;js&amp;rsv_pq&#x3D;a86b5e5f0007bceb&amp;rsv_t&#x3D;1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&amp;rqlang&#x3D;cn&amp;rsv_enter&#x3D;0&amp;inputT&#x3D;1287&amp;rsv_sug3&#x3D;5&amp;rsv_sug1&#x3D;3&amp;rsv_sug7&#x3D;101&amp;rsv_sug2&#x3D;0&amp;rsv_sug4&#x3D;1907&#39; searchObj(search)</span><br></pre></td></tr></table></figure><h3 id="12-JS-对象转-url-查询字符串"><a href="#12-JS-对象转-url-查询字符串" class="headerlink" title="12.JS 对象转 url 查询字符串"></a>12.JS 对象转 url 查询字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const objectToQueryString &#x3D; (obj)</span><br><span class="line">                         &#x3D;&gt; Object.keys(obj).map((key)                          </span><br><span class="line">                         &#x3D;&gt;&#96;$&#123;encodeURIComponent(key)&#125;</span><br><span class="line">                         &#x3D;$&#123;encodeURIComponent(obj[key])&#125;&#96;).join(&#39;&amp;&#39;); </span><br><span class="line">objectToQueryString(&#123;name: &#39;Jhon&#39;, age: 18, address: &#39;beijing&#39;&#125;) </span><br><span class="line">&#x2F;&#x2F; name&#x3D;Jhon&amp;age&#x3D;18&amp;address&#x3D;beijing</span><br></pre></td></tr></table></figure><h3 id="13-获取数组交集"><a href="#13-获取数组交集" class="headerlink" title="13.获取数组交集"></a>13.获取数组交集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const similarity &#x3D; (arr, values) &#x3D;&gt; arr.filter(v &#x3D;&gt; values.includes(v)); </span><br><span class="line">similarity([1, 2, 3], [1, 2, 4]); </span><br><span class="line">&#x2F;&#x2F; [1,2]</span><br></pre></td></tr></table></figure><h3 id="14-检测设备类型"><a href="#14-检测设备类型" class="headerlink" title="14.检测设备类型"></a>14.检测设备类型</h3><p>使用正则表达式来检测 navigator.userAgent 属性判断设备是在移动设备还是在台式机/笔记本电脑打开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const detectDeviceType &#x3D; () </span><br><span class="line">                       &#x3D;&gt;&#x2F;Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|</span><br><span class="line">                         OperaMini&#x2F;i.test(navigator.userAgent) ? &#39;Mobile&#39; : &#39;Desktop&#39;;</span><br></pre></td></tr></table></figure><h3 id="15-将数字转化为千分位格式"><a href="#15-将数字转化为千分位格式" class="headerlink" title="15.将数字转化为千分位格式"></a>15.将数字转化为千分位格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const toDecimalMark &#x3D; num &#x3D;&gt; num.toLocaleString(&#39;en-US&#39;); </span><br><span class="line">toDecimalMark(12305030388.9087); </span><br><span class="line">&#x2F;&#x2F; &quot;12,305,030,388.909&quot;</span><br></pre></td></tr></table></figure><h3 id="16-多维数组转一维数组"><a href="#16-多维数组转一维数组" class="headerlink" title="16.多维数组转一维数组"></a>16.多维数组转一维数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const deepFlatten &#x3D; arr </span><br><span class="line">                 &#x3D;&gt; [].concat(</span><br><span class="line">                              ...arr.map(</span><br><span class="line">                                         v &#x3D;&gt; (Array.isArray(v) ? deepFlatten(v) : v))); </span><br><span class="line">deepFlatten([1, [2], [[3], 4], 5]); &#x2F;&#x2F; [1,2,3,4,5]</span><br></pre></td></tr></table></figure><h3 id="17-过滤对象数组"><a href="#17-过滤对象数组" class="headerlink" title="17.过滤对象数组"></a>17.过滤对象数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const reducedFilter &#x3D; (data, keys, fn)</span><br><span class="line">                    &#x3D;&gt;data.filter(fn)</span><br><span class="line">                    .map(</span><br><span class="line">                        el &#x3D;&gt;keys.reduce(</span><br><span class="line">                            (acc, key) &#x3D;&gt; &#123;acc[key] &#x3D;el[key];return acc;&#125;, &#123;&#125;)</span><br><span class="line">                        );</span><br><span class="line">const data &#x3D; [  &#123;  id: 1,  name: &#39;john&#39;,  age: 24  &#125;,  &#123;  id: 2,  name: &#39;mike&#39;,  age: 50  &#125; ]; </span><br><span class="line">let a &#x3D; reducedFilter(data, [&#39;id&#39;, &#39;name&#39;], item &#x3D;&gt; item.age &gt; 24);</span><br><span class="line"> &#x2F;&#x2F; [&#123; id: 2, name: &#39;mike&#39;&#125;]</span><br></pre></td></tr></table></figure><h3 id="18-驼峰字字符串格式化"><a href="#18-驼峰字字符串格式化" class="headerlink" title="18.驼峰字字符串格式化"></a>18.驼峰字字符串格式化</h3><p>转换驼峰拼写的字符串为特定格式。</p><p>使用 String.replace() 去除下划线，连字符和空格，并将驼峰拼写格式的单词转换为全小写。省略第二个参数 separator ，默认使用 _ 分隔符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const fromCamelCase &#x3D; (str, separator &#x3D; &#39;_&#39;) &#x3D;&gt;str.replace(&#x2F;([a-zd])([A-Z])&#x2F;g, &#39;$1&#39; + separator + &#39;$2&#39;).replace(&#x2F;([A-Z]+)([A-Z][a-zd]+)&#x2F;g, &#39;$1&#39; + separator + &#39;$2&#39;).toLowerCase();</span><br><span class="line">fromCamelCase(&#39;someDatabaseFieldName&#39;, &#39; &#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#39;some database field name&#39; fromCamelCase(&#39;someLabelThatNeedsToBeCamelized&#39;, &#39;-&#39;); </span><br><span class="line">&#x2F;&#x2F; &#39;some-label-that-needs-to-be-camelized&#39; fromCamelCase(&#39;someJavascriptProperty&#39;, &#39;_&#39;);</span><br><span class="line">&#x2F;&#x2F; &#39;some_javascript_property&#39;</span><br></pre></td></tr></table></figure><h3 id="19-是否为绝对地址"><a href="#19-是否为绝对地址" class="headerlink" title="19.是否为绝对地址"></a>19.是否为绝对地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const isAbsoluteURL &#x3D; str &#x3D;&gt; &#x2F;^[a-z][a-z0-9+.-]*:&#x2F;.test(str); </span><br><span class="line">isAbsoluteURL(&#39;https:&#x2F;&#x2F;google.com&#39;); &#x2F;&#x2F; true </span><br><span class="line">isAbsoluteURL(&#39;ftp:&#x2F;&#x2F;www.myserver.net&#39;);&#x2F;&#x2F; true </span><br><span class="line">isAbsoluteURL(&#39;&#x2F;foo&#x2F;bar&#39;); &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><h3 id="20-获取两个日期相差天数"><a href="#20-获取两个日期相差天数" class="headerlink" title="20.获取两个日期相差天数"></a>20.获取两个日期相差天数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const getDaysDiffBetweenDates &#x3D; </span><br><span class="line">    (dateInitial, dateFinal) &#x3D;&gt; (dateFinal - dateInitial) &#x2F; (1000 * 3600 * 24); </span><br><span class="line">getDaysDiffBetweenDates(new Date(&#39;2017-12-13&#39;), new Date(&#39;2017-12-22&#39;)); &#x2F;&#x2F; 9</span><br></pre></td></tr></table></figure><h3 id="21-数组去重"><a href="#21-数组去重" class="headerlink" title="21.数组去重"></a>21.数组去重</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const deDupe &#x3D; (myArray) &#x3D;&gt; [... new Set(myArray)];</span><br><span class="line"> deDupe([1, 1, 2, 1, 3, 3, 4]) &#x2F;&#x2F; [1, 2, 3, 4]</span><br></pre></td></tr></table></figure><h3 id="22-数组对象去重"><a href="#22-数组对象去重" class="headerlink" title="22.数组对象去重"></a>22.数组对象去重</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const uniqueElementsBy &#x3D; </span><br><span class="line">             (arr, fn) &#x3D;&gt;arr.reduce((acc, v)</span><br><span class="line">                       &#x3D;&gt; &#123;</span><br><span class="line">                          if (!acc.some(x &#x3D;&gt; fn(v, x))) acc.push(v);</span><br><span class="line">                          return acc;</span><br><span class="line">                          &#125;, []); </span><br><span class="line">uniqueElementsBy([&#123;id: 1, name: &#39;Jhon&#39;&#125;, </span><br><span class="line">                  &#123;id: 2, name: &#39;sss&#39;&#125;,</span><br><span class="line">                  &#123;id: 1, name: &#39;Jhon&#39;&#125;], (a, b)       </span><br><span class="line">             &#x3D;&gt; a.id &#x3D;&#x3D; b.id) </span><br><span class="line">&#x2F;&#x2F; [&#123;id: 1, name: &#39;Jhon&#39;&#125;, &#123;id: 2, name: &#39;sss&#39;&#125;]</span><br></pre></td></tr></table></figure><h3 id="23-RGB-颜色转-16进制颜色"><a href="#23-RGB-颜色转-16进制颜色" class="headerlink" title="23.RGB 颜色转 16进制颜色"></a>23.RGB 颜色转 16进制颜色</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const RGBToHex &#x3D; (r, g, b)</span><br><span class="line">               &#x3D;&gt; ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b).toString(16).padStart(6, &#39;0&#39;); </span><br><span class="line">RGBToHex(255, 165, 1); &#x2F;&#x2F; &#39;ffa501&#39;</span><br></pre></td></tr></table></figure><h3 id="24-常用密码组合正则"><a href="#24-常用密码组合正则" class="headerlink" title="24.常用密码组合正则"></a>24.常用密码组合正则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const passwordReg &#x3D; &#x2F;(?!^(d+|[a-zA-Z]+|[~!@#$%^&amp;*?]+)$)^[w~!@#$%^&amp;*?]&#123;8,20&#125;$&#x2F;; </span><br><span class="line">&#x2F;&#x2F; -长度8~20位字符，支持大小写字母、数字、符号三种字符中任意两种字符的组合</span><br></pre></td></tr></table></figure><h3 id="25-判断dom元素是否具有某个className"><a href="#25-判断dom元素是否具有某个className" class="headerlink" title="25.判断dom元素是否具有某个className"></a>25.判断dom元素是否具有某个className</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const hasClass &#x3D; (el, className)</span><br><span class="line">               &#x3D;&gt; new RegExp(&#96;(^|\s)$&#123;className&#125;(\s|$)&#96;).test(el.className);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro 加密登录 密码加盐处理</title>
      <link href="/2019/07/26/shiro-%E5%8A%A0%E5%AF%86%E7%99%BB%E5%BD%95-%E5%AF%86%E7%A0%81%E5%8A%A0%E7%9B%90%E5%A4%84%E7%90%86/"/>
      <url>/2019/07/26/shiro-%E5%8A%A0%E5%AF%86%E7%99%BB%E5%BD%95-%E5%AF%86%E7%A0%81%E5%8A%A0%E7%9B%90%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYTgzZWZhMTJhZGI5MzAxLmpwZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><p>密码加密登录是为了提高系统安全性，即使是管理员查看数据库也得不到密码<br>使用shiro可以很轻松的完成加密及登录操作</p><h2 id="1-加密工具"><a href="#1-加密工具" class="headerlink" title="1.加密工具"></a>1.加密工具</h2><p><code>此工具用于注册时对密码进行加密</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static final String md5(String password, String salt)&#123;</span><br><span class="line">    &#x2F;&#x2F;加密方式</span><br><span class="line">    String hashAlgorithmName &#x3D; &quot;MD5&quot;;</span><br><span class="line">    &#x2F;&#x2F;盐：为了即使相同的密码不同的盐加密后的结果也不同</span><br><span class="line">    ByteSource byteSalt &#x3D; ByteSource.Util.bytes(salt);</span><br><span class="line">    &#x2F;&#x2F;密码</span><br><span class="line">    Object source &#x3D; password;</span><br><span class="line">    &#x2F;&#x2F;加密次数</span><br><span class="line">    int hashIterations &#x3D; 1024;</span><br><span class="line">    SimpleHash result &#x3D; new SimpleHash(hashAlgorithmName, source, byteSalt, hashIterations);</span><br><span class="line">    return result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>测试一下</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String password &#x3D; md5(&quot;123456&quot;, &quot;WHLH&quot;);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    &#x2F;&#x2F;加密后的结果</span><br><span class="line">    &#x2F;&#x2F;3bcbb857c763d1429a24959cb8de2593</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-使用shiro登录"><a href="#2-使用shiro登录" class="headerlink" title="2.使用shiro登录"></a>2.使用shiro登录</h2><p><code>Realm类</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) &#123;</span><br><span class="line">    UsernamePasswordToken token&#x3D;(UsernamePasswordToken) authenticationToken;</span><br><span class="line">    String username &#x3D; token.getUsername();</span><br><span class="line">    &#x2F;&#x2F;查询用户信息</span><br><span class="line">    User user&#x3D;userService.findByUsername(username);</span><br><span class="line">    &#x2F;&#x2F;取出盐并编码</span><br><span class="line">    ByteSource salt &#x3D; ByteSource.Util.bytes(user.getSalt());</span><br><span class="line">    return new SimpleAuthenticationInfo(username, user.getPassword(),salt, getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-修改自定义realm配置"><a href="#3-修改自定义realm配置" class="headerlink" title="3.修改自定义realm配置"></a>3.修改自定义realm配置</h2><p><code>加密算法和加密次数要和加密工具参数保持一致</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;myRealm&quot; class&#x3D;&quot;cn.jaffreyen.web.shiro.MyRealm&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;credentialsMatcher&quot;&gt;</span><br><span class="line">        &lt;bean class&#x3D;&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;&gt;</span><br><span class="line">            &lt;!-- 加密算法 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hashAlgorithmName&quot; value&#x3D;&quot;MD5&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">            &lt;!-- 加密次数 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hashIterations&quot; value&#x3D;&quot;1024&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次jsoup的使用</title>
      <link href="/2019/07/06/%E8%AE%B0%E4%B8%80%E6%AC%A1jsoup%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/06/%E8%AE%B0%E4%B8%80%E6%AC%A1jsoup%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjFjNDJkZGU1OGRjZTdlLnBuZw?x-oss-process=image/format,png" alt=""></p><a id="more"></a><p>Jsoup是用于解析HTML，就类似XML解析器用于解析XML。 Jsoup它解析HTML成为真实世界的HTML。 它与jquery选择器的语法非常相似，并且非常灵活容易使用以获得所需的结果。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;!-- jsoup HTML parser library @ http:&#x2F;&#x2F;jsoup.org&#x2F; --&gt;</span><br><span class="line">  &lt;groupId&gt;org.jsoup&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jsoup&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.10.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="从URL获取HTML来解析"><a href="#从URL获取HTML来解析" class="headerlink" title="从URL获取HTML来解析"></a>从URL获取HTML来解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;).get();</span><br><span class="line">String title &#x3D; doc.title();</span><br></pre></td></tr></table></figure><p>connect(String url) 方法创建一个新的 Connection, 和 get() 取得和解析一个HTML文件。如果从该URL获取HTML时发生错误，便会抛出 IOException，应适当处理。<br>Connection 接口还提供一个方法链来解决特殊请求，具体如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;example.com&quot;;)</span><br><span class="line">.data(&quot;query&quot;, &quot;Java&quot;)</span><br><span class="line">.userAgent(&quot;Mozilla&quot;)</span><br><span class="line">.cookie(&quot;auth&quot;, &quot;token&quot;)</span><br><span class="line">.timeout(3000)</span><br><span class="line">.post();</span><br></pre></td></tr></table></figure><h3 id="查看元素"><a href="#查看元素" class="headerlink" title="查看元素"></a>查看元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getElementById(String id);</span><br><span class="line">getElementsByTag(String tag);</span><br><span class="line">getElementsByClass(String className);</span><br><span class="line">getElementsByAttribute(String key) (and related methods);</span><br><span class="line">Element siblings: siblingElements(), firstElementSibling(), lastElementSibling(); nextElementSibling(), previousElementSibling();</span><br><span class="line">Graph: parent(), children(), child(int index);</span><br></pre></td></tr></table></figure><h3 id="元素数据"><a href="#元素数据" class="headerlink" title="元素数据"></a>元素数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">attr(String key)获取属性attr(String key, String value)设置属性</span><br><span class="line">attributes()获取所有属性</span><br><span class="line">id(), className() and classNames()</span><br><span class="line">text()获取文本内容text(String value) 设置文本内容</span><br><span class="line">html()获取元素内HTMLhtml(String value)设置元素内的HTML内容</span><br><span class="line">outerHtml()获取元素外HTML内容</span><br><span class="line">data()获取数据内容（例如：script和style标签)</span><br><span class="line">tag() and tagName()</span><br></pre></td></tr></table></figure><h3 id="操作HTML和文本"><a href="#操作HTML和文本" class="headerlink" title="操作HTML和文本"></a>操作HTML和文本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">append(String html), prepend(String html)</span><br><span class="line">appendText(String text), prependText(String text)</span><br><span class="line">appendElement(String tagName), prependElement(String tagName)</span><br><span class="line">html(String value)</span><br></pre></td></tr></table></figure><h3 id="通过类似于css或jQuery的选择器来查找元素"><a href="#通过类似于css或jQuery的选择器来查找元素" class="headerlink" title="通过类似于css或jQuery的选择器来查找元素"></a>通过类似于css或jQuery的选择器来查找元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Elements trs &#x3D; doc.select(&quot;.kuang&quot;).select(&quot;tbody&quot;).get(5).select(&quot;tr&quot;);</span><br><span class="line">        StringBuilder controlTarget &#x3D; new StringBuilder();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; trs.size(); i++) &#123;</span><br><span class="line">            if (i &gt;&#x3D; 1 &amp;&amp; i &lt; trs.size() - 1) &#123;</span><br><span class="line">                Elements tds &#x3D; trs.get(i).select(&quot;td&quot;);</span><br><span class="line">                res.setCropRange(tds.get(0).text());</span><br><span class="line">                res.setDosage(tds.get(2).text());</span><br><span class="line">                res.setMethod(tds.get(3).text());</span><br><span class="line">                controlTarget.append(tds.get(1).text()).append(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="Selector选择器概述"><a href="#Selector选择器概述" class="headerlink" title="Selector选择器概述"></a>Selector选择器概述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tagname: 通过标签查找元素，比如：a;</span><br><span class="line">ns|tag: 通过标签在命名空间查找元素，比如：可以用 fb|name 语法来查找 &lt;fb:name&gt; 元素;</span><br><span class="line">&#39;#id&#39;: 通过ID查找元素，比如：#logo;</span><br><span class="line">.class: 通过class名称查找元素，比如：.masthead;</span><br><span class="line">[attribute]: 利用属性查找元素，比如：[href];</span><br><span class="line">[^attr]: 利用属性名前缀来查找元素，比如：可以用[^data-] 来查找带有HTML5 Dataset属性的元素;</span><br><span class="line">[attr&#x3D;value]: 利用属性值来查找元素，比如：[width&#x3D;500];</span><br><span class="line">[attr^&#x3D;value], [attr$&#x3D;value], [attr*&#x3D;value]: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：[href*&#x3D;&#x2F;path&#x2F;];</span><br><span class="line">[attr~&#x3D;regex]: 利用属性值匹配正则表达式来查找元素，比如： img[src~&#x3D;(?i)\.(png|jpe?g)];</span><br><span class="line">*: 这个符号将匹配所有元素;</span><br></pre></td></tr></table></figure><h3 id="Selector选择器组合使用"><a href="#Selector选择器组合使用" class="headerlink" title="Selector选择器组合使用"></a>Selector选择器组合使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">el#id: 元素+ID，比如： div#logo;</span><br><span class="line">el.class: 元素+class，比如： div.masthead;</span><br><span class="line">el[attr]: 元素+class，比如： a[href];</span><br><span class="line">任意组合，比如：a[href].highlight;</span><br><span class="line">ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在&quot;body&quot;元素下的所有 p元素;</span><br><span class="line">parent &gt; child: 查找某个父元素下的直接子元素，比如：可以用div.content &gt; p 查找 p 元素，也可以用body &gt; * 查找body标签下所有直接子元素;</span><br><span class="line">siblingA + siblingB: 查找在A元素之前第一个同级元素B，比如：div.head + div;</span><br><span class="line">siblingA ~ siblingX: 查找A元素之前的同级X元素，比如：h1 ~ p;</span><br><span class="line">el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo;</span><br></pre></td></tr></table></figure><h3 id="伪选择器selectors"><a href="#伪选择器selectors" class="headerlink" title="伪选择器selectors"></a>伪选择器selectors</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小   于三列的元素</span><br><span class="line">   :gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素</span><br><span class="line">   :eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素</span><br><span class="line">   :has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素</span><br><span class="line">   :not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class&#x3D;&quot;logo&quot; 元素的所有 div 列表</span><br><span class="line">   :contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)</span><br><span class="line">   :containsOwn(text): 查找直接包含给定文本的元素</span><br><span class="line">   :matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)</span><br><span class="line">   :matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素</span><br></pre></td></tr></table></figure><h3 id="提取给定URL中的链接"><a href="#提取给定URL中的链接" class="headerlink" title="提取给定URL中的链接"></a>提取给定URL中的链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class="line">Elements links &#x3D; doc.select(&quot;a[href]&quot;);  </span><br><span class="line">for (Element link : links) &#123;  </span><br><span class="line">    System.out.println(&quot;\nlink : &quot; + link.attr(&quot;href&quot;));  </span><br><span class="line">    System.out.println(&quot;text : &quot; + link.text());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提取URL中的元数据"><a href="#提取URL中的元数据" class="headerlink" title="提取URL中的元数据"></a>提取URL中的元数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class="line">String keywords &#x3D; doc.select(&quot;meta[name&#x3D;keywords]&quot;).first().attr(&quot;content&quot;);  </span><br><span class="line">System.out.println(&quot;Meta keyword : &quot; + keywords);  </span><br><span class="line">String description &#x3D; doc.select(&quot;meta[name&#x3D;description]&quot;).get(0).attr(&quot;content&quot;);  </span><br><span class="line">System.out.println(&quot;Meta description : &quot; + description);</span><br></pre></td></tr></table></figure><h3 id="提取URL中的图像"><a href="#提取URL中的图像" class="headerlink" title="提取URL中的图像"></a>提取URL中的图像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class="line">Elements images &#x3D; doc.select(&quot;img[src~&#x3D;(?i)\\.(png|jpe?g|gif)]&quot;);  </span><br><span class="line">for (Element image : images) &#123;  </span><br><span class="line">    System.out.println(&quot;src : &quot; + image.attr(&quot;src&quot;));  </span><br><span class="line">    System.out.println(&quot;height : &quot; + image.attr(&quot;height&quot;));  </span><br><span class="line">    System.out.println(&quot;width : &quot; + image.attr(&quot;width&quot;));  </span><br><span class="line">    System.out.println(&quot;alt : &quot; + image.attr(&quot;alt&quot;));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
