<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDK中的timer正确的打开与关闭</title>
      <link href="/2020/04/29/JDK%E4%B8%AD%E7%9A%84timer%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%89%93%E5%BC%80%E4%B8%8E%E5%85%B3%E9%97%AD/"/>
      <url>/2020/04/29/JDK%E4%B8%AD%E7%9A%84timer%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%89%93%E5%BC%80%E4%B8%8E%E5%85%B3%E9%97%AD/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/timer.png" alt=""></p><a id="more"></a><h2 id="Timer和TimerTask"><a href="#Timer和TimerTask" class="headerlink" title="Timer和TimerTask"></a>Timer和TimerTask</h2><p>Timer是jdk中提供的一个定时器工具，使用的时候会在主线程之外起一个单独的线程执行指定的计划任务，可以指定执行一次或者反复执行多次。</p><p>TimerTask是一个实现了Runnable接口的抽象类，代表一个可以被Timer执行的任务。</p><h2 id="Timer的调度"><a href="#Timer的调度" class="headerlink" title="Timer的调度"></a>Timer的调度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Timer;</span><br><span class="line">import java.util.TimerTask;</span><br><span class="line"></span><br><span class="line">public class TestTimer &#123;</span><br><span class="line">    </span><br><span class="line">    public static void main(String args[])&#123;</span><br><span class="line">        new Reminder(3);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static class Reminder&#123;</span><br><span class="line">        Timer timer;</span><br><span class="line">        </span><br><span class="line">        public Reminder(int sec)&#123;</span><br><span class="line">            timer &#x3D; new Timer();</span><br><span class="line">            timer.schedule(new TimerTask()&#123;</span><br><span class="line">                public void run()&#123;</span><br><span class="line">                    System.out.println(&quot;Time&#39;s up!&quot;);</span><br><span class="line">                    timer.cancel();</span><br><span class="line">                    System.out.println(&quot;Time&#39;s shutdown!&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, sec*1000);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time&#39;s up!</span><br><span class="line">Time&#39;s shutdown!</span><br></pre></td></tr></table></figure><p>从这个例子可以看出一个典型的利用timer执行计划任务的过程如下：</p><ul><li>new一个TimerTask的子类，重写run方法来指定具体的任务，在这个例子里，我用匿名内部类的方式来实现了一个TimerTask的子类</li><li>new一个Timer类，Timer的构造函数里会起一个单独的线程来执行计划任务。</li></ul><p>jdk的实现代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public Timer() &#123;</span><br><span class="line">        this(&quot;Timer-&quot; + serialNumber());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Timer(String name) &#123;</span><br><span class="line">        thread.setName(name);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Timer的关闭"><a href="#Timer的关闭" class="headerlink" title="Timer的关闭"></a>Timer的关闭</h2><p>在JDK1.5以后，文档中有这么一句话：<br>对 Timer 对象最后的引用完成后，并且 所有未处理的任务都已执行完成后，计时器的任务执行线程会正常终止（并且成为垃圾回收的对象）。但是这可能要很长时间后才发生。</p><h3 id="System-gc"><a href="#System-gc" class="headerlink" title="System.gc()"></a>System.gc()</h3><p>系统默认当Timer运行结束后，如果没有手动终止，那么则只有当系统的垃圾收集被调用的时候才会对其进行回收终止。<br>因此，可以手动System.gc();<br>但是Sytem.gc()在一个项目中是不能随便调用的。因为一个tomcat只启动一个进程，而JVM的垃圾处理器也只有一个，所以在一个工程里运行System.gc也会影响到其他工程。 </p><h3 id="cancle"><a href="#cancle" class="headerlink" title="cancle()"></a>cancle()</h3><p>首先看cancle方法的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void cancel() &#123;</span><br><span class="line">        synchronized(queue) &#123;</span><br><span class="line">            thread.newTasksMayBeScheduled &#x3D; false;</span><br><span class="line">            queue.clear();</span><br><span class="line">            queue.notify();  &#x2F;&#x2F; In case queue was already empty.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>没有显式的线程stop方法，而是调用了queue的clear方法和queue的notify方法，clear是个自定义方法，notify是Objec自带的方法，很明显是去唤醒wait方法的。</p><p>clear方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;**</span><br><span class="line">  * Removes all elements from the priority queue.</span><br><span class="line">  *&#x2F;</span><br><span class="line">void clear() &#123;</span><br><span class="line">        &#x2F;&#x2F; Null out task references to prevent memory leak</span><br><span class="line">        for (int i&#x3D;1; i&lt;&#x3D;size; i++)</span><br><span class="line">            queue[i] &#x3D; null;</span><br><span class="line"></span><br><span class="line">        size &#x3D; 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>clear方法很简单，就是去清空queue，queue是一个TimerTask的数组，然后把queue的size重置成0，变成empty.还是没有看到显式的停止线程方法，回到最开始new Timer的时候，看看new Timer代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public Timer() &#123;</span><br><span class="line">        this(&quot;Timer-&quot; + serialNumber());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line">     * Creates a new timer whose associated thread has the specified name.</span><br><span class="line">     * The associated thread does &lt;i&gt;not&lt;&#x2F;i&gt;</span><br><span class="line">     * &#123;@linkplain Thread#setDaemon run as a daemon&#125;.</span><br><span class="line">     *</span><br><span class="line">     * @param name the name of the associated thread</span><br><span class="line">     * @throws NullPointerException if &#123;@code name&#125; is null</span><br><span class="line">     * @since 1.5</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Timer(String name) &#123;</span><br><span class="line">        thread.setName(name);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看看这个内部变量thread:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * The timer thread.</span><br><span class="line">*&#x2F;</span><br><span class="line">private TimerThread thread &#x3D; new TimerThread(queue);</span><br></pre></td></tr></table></figure><p>不是原生的Thread,是自定义的类TimerThread.这个类实现了Thread类，重写了run方法，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            mainLoop();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            &#x2F;&#x2F; Someone killed this Thread, behave as if Timer cancelled</span><br><span class="line">            synchronized(queue) &#123;</span><br><span class="line">                newTasksMayBeScheduled &#x3D; false;</span><br><span class="line">                queue.clear();  &#x2F;&#x2F; Eliminate obsolete references</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后是这个mainLoop方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">   &#x2F;**</span><br><span class="line">     * The main timer loop.  (See class comment.)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void mainLoop() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                TimerTask task;</span><br><span class="line">                boolean taskFired;</span><br><span class="line">                synchronized(queue) &#123;</span><br><span class="line">                    &#x2F;&#x2F; Wait for queue to become non-empty</span><br><span class="line">                    while (queue.isEmpty() &amp;&amp; newTasksMayBeScheduled)</span><br><span class="line">                        queue.wait();</span><br><span class="line">                    if (queue.isEmpty())</span><br><span class="line">                        break; &#x2F;&#x2F; Queue is empty and will forever remain; die</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F; Queue nonempty; look at first evt and do the right thing</span><br><span class="line">                    long currentTime, executionTime;</span><br><span class="line">                    task &#x3D; queue.getMin();</span><br><span class="line">                    synchronized(task.lock) &#123;</span><br><span class="line">                        if (task.state &#x3D;&#x3D; TimerTask.CANCELLED) &#123;</span><br><span class="line">                            queue.removeMin();</span><br><span class="line">                            continue;  &#x2F;&#x2F; No action required, poll queue again</span><br><span class="line">                        &#125;</span><br><span class="line">                        currentTime &#x3D; System.currentTimeMillis();</span><br><span class="line">                        executionTime &#x3D; task.nextExecutionTime;</span><br><span class="line">                        if (taskFired &#x3D; (executionTime&lt;&#x3D;currentTime)) &#123;</span><br><span class="line">                            if (task.period &#x3D;&#x3D; 0) &#123; &#x2F;&#x2F; Non-repeating, remove</span><br><span class="line">                                queue.removeMin();</span><br><span class="line">                                task.state &#x3D; TimerTask.EXECUTED;</span><br><span class="line">                            &#125; else &#123; &#x2F;&#x2F; Repeating task, reschedule</span><br><span class="line">                                queue.rescheduleMin(</span><br><span class="line">                                  task.period&lt;0 ? currentTime   - task.period</span><br><span class="line">                                                : executionTime + task.period);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (!taskFired) &#x2F;&#x2F; Task hasn&#39;t yet fired; wait</span><br><span class="line">                        queue.wait(executionTime - currentTime);</span><br><span class="line">                &#125;</span><br><span class="line">                if (taskFired)  &#x2F;&#x2F; Task fired; run it, holding no locks</span><br><span class="line">                    task.run();</span><br><span class="line">            &#125; catch(InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到wait方法，之前的notify就是通知到这个wait，然后clear方法在notify之前做了清空数组的操作，所以会break，线程执行结束，退出。</p><h2 id="Listener中的Timer"><a href="#Listener中的Timer" class="headerlink" title="Listener中的Timer"></a>Listener中的Timer</h2><p>很多业务中需要Timer一直执行，不会执行一次后就关闭，上面的例子中，timer调用cancel方法后，该timer就被关闭了。</p><p>监听器的实现方式有多种，这里我们说一下实现<code>ServletContextListener</code>接口。<br>该接口中有2个方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface ServletContextListener extends EventListener &#123;</span><br><span class="line">    void contextInitialized(ServletContextEvent var1);</span><br><span class="line"></span><br><span class="line">    void contextDestroyed(ServletContextEvent var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即上下文的初始化和销毁。</p><p>我们来看一个实例<br>Listener</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class MyListener implements ServletContextListener &#123;</span><br><span class="line"></span><br><span class="line">    private Log log &#x3D; LogFactory.getLog(MyListener.class);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void contextInitialized(ServletContextEvent servletContextEvent) &#123;</span><br><span class="line">        Timer timer &#x3D; new Timer();</span><br><span class="line">        timer.schedule(new MyTask(),5000,5000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void contextDestroyed(ServletContextEvent servletContextEvent) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Task</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class MyTask extends TimerTask &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;timer 正在执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当程序启动的时候，在监听器的初始化中，timer会梅5秒执行一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timer 正在执行</span><br><span class="line">timer 正在执行</span><br><span class="line">timer 正在执行</span><br><span class="line">timer 正在执行</span><br></pre></td></tr></table></figure><p>此次程序中我们没有去调用timer的cancel方法，这样会存在一个问题，就是产生的timer一直不会被关闭，就像上面说的只有当系统的垃圾收集被调用的时候才会对其进行回收终止。</p><p>同时tomcat日志会打印错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">28-Apr-2020 14:23:24.892 警告 [http-nio-8080-exec-23] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads Web应用程序[nyzft]似乎启动了一个名为[Timer-3]的线程，但未能停止它。这很可能会造成内存泄漏。线程的堆栈跟踪：[</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> java.lang.Object.wait(Object.java:502)</span><br><span class="line"> java.util.TimerThread.mainLoop(Timer.java:526)</span><br><span class="line"> java.util.TimerThread.run(Timer.java:505)]</span><br></pre></td></tr></table></figure><p>问题的原因就是我们没有手动去关闭timer，但是如果去调用cancel方法，真实的场景timer只会被执行一次，不符合业务要求。<br>因此可以通过listener的contextDestroyed去关闭timer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class MyListener implements ServletContextListener &#123;</span><br><span class="line"></span><br><span class="line">    private Log log &#x3D; LogFactory.getLog(MyListener.class);</span><br><span class="line"></span><br><span class="line">    private Timer timer;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void contextInitialized(ServletContextEvent servletContextEvent) &#123;</span><br><span class="line">        timer &#x3D; new Timer();</span><br><span class="line">        timer.schedule(new MyTask(),5000,5000);</span><br><span class="line">        System.out.println(&quot;执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void contextDestroyed(ServletContextEvent servletContextEvent) &#123;</span><br><span class="line">        timer.cancel();</span><br><span class="line">        System.out.println(&quot;关闭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序，过几秒钟后再关闭程序，查看控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">执行</span><br><span class="line">timer 正在执行</span><br><span class="line">timer 正在执行</span><br><span class="line">[2020-04-29 09:44:19,609] Artifact ssm-nyzft:war exploded: Artifact is deployed successfully</span><br><span class="line">[2020-04-29 09:44:19,609] Artifact ssm-nyzft:war exploded: Deploy took 38,550 milliseconds</span><br><span class="line">timer 正在执行</span><br><span class="line">timer 正在执行</span><br><span class="line">timer 正在执行</span><br><span class="line">timer 正在执行</span><br><span class="line">E:\Kit\Tomcat\tomcat8\apache-tomcat-8.5.39\bin\catalina.bat stop</span><br><span class="line">Disconnected from the target VM, address: &#39;127.0.0.1:52706&#39;, transport: &#39;socket&#39;</span><br><span class="line">Using CATALINA_BASE:   &quot;C:\Users\Administrator\.IntelliJIdea2019.1\system\tomcat\Unnamed_ssm-nyzft_2&quot;</span><br><span class="line">Using CATALINA_HOME:   &quot;E:\Kit\Tomcat\tomcat8\apache-tomcat-8.5.39&quot;</span><br><span class="line">Using CATALINA_TMPDIR: &quot;E:\Kit\Tomcat\tomcat8\apache-tomcat-8.5.39\temp&quot;</span><br><span class="line">Using JRE_HOME:        &quot;E:\Kit\JDK\JDK&quot;</span><br><span class="line">Using CLASSPATH:       &quot;E:\Kit\Tomcat\tomcat8\apache-tomcat-8.5.39\bin\bootstrap.jar;E:\Kit\Tomcat\tomcat8\apache-tomcat-8.5.39\bin\tomcat-juli.jar&quot;</span><br><span class="line">29-Apr-2020 09:44:40.511 淇℃伅 [main] org.apache.catalina.core.StandardServer.await A valid shutdown command was received via the shutdown port. Stopping the Server instance.</span><br><span class="line">29-Apr-2020 09:44:40.512 淇℃伅 [main] org.apache.coyote.AbstractProtocol.pause Pausing ProtocolHandler [&quot;http-nio-8081&quot;]</span><br><span class="line">29-Apr-2020 09:44:40.638 淇℃伅 [main] org.apache.coyote.AbstractProtocol.pause Pausing ProtocolHandler [&quot;ajp-nio-8009&quot;]</span><br><span class="line">29-Apr-2020 09:44:40.750 淇℃伅 [main] org.apache.catalina.core.StandardService.stopInternal Stopping service [Catalina]</span><br><span class="line">关闭</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Timer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程图谱</title>
      <link href="/2020/04/20/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9B%BE%E8%B0%B1/"/>
      <url>/2020/04/20/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/bingfa.png" alt=""></p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/synchronization-1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程(一)CAS</title>
      <link href="/2020/04/20/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%B8%80-CAS/"/>
      <url>/2020/04/20/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%B8%80-CAS/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/bingfa.png" alt=""></p><a id="more"></a><h2 id="CAS-是什么"><a href="#CAS-是什么" class="headerlink" title="CAS 是什么"></a>CAS 是什么</h2><p>CAS 的全称 Compare-And-Swap，它是一条 CPU 并发。</p><p>它的功能是判断内存某一个位置的值是否为预期，如果是则更改这个值，这个过程就是原子的。</p><p>CAS 并发原体现在 JAVA 语言中就是 <code>sun.misc.Unsafe</code> 类中的各个方法。调用 <code>UnSafe</code> 类中的 CAS 方法，JVM 会帮我们实现出 CAS 汇编指令。这是一种完全依赖硬件的功能，通过它实现了原子操作。由于 CAS 是一种系统源语，源语属于操作系统用语范畴，是由若干条指令组成，用于完成某一个功能的过程，并且原语的执行必须是连续的，在执行的过程中不允许被中断，也就是说 CAS 是一条原子指令，不会造成所谓的数据不一致的问题。 </p><h2 id="比较并交换"><a href="#比较并交换" class="headerlink" title="比较并交换"></a>比较并交换</h2><p>CAS的意思就是比较并交换。上面说到，这个比较过程是原子的。我们新建一个测试类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class CASDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       checkCAS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void checkCAS()&#123;</span><br><span class="line">        AtomicInteger atomicInteger &#x3D; new AtomicInteger(5);</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(5, 2019) + &quot;\t current data is </span><br><span class="line">        &quot; + atomicInteger.get());</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(5, 2020) + &quot;\t current data is </span><br><span class="line">        &quot; + atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">    atomicInteger.getAndIncrement();</span><br><span class="line">    System.out.println(&quot;current data is &quot; + atomicInteger.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看返回结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">true current data is 2019</span><br><span class="line">false current data is 2019</span><br><span class="line">current data is 2020</span><br></pre></td></tr></table></figure><p>原子整型类的初始值是5，当第一次调用compareAndSet的时候期望值是5，更新值是2019，此时的期望值和atomicInteger 值相等，则替换为更新值，输出为2019；第二次调用compareAndSet的时候期望值还是5，此时atomicInteger的值已经更新为2019，期望值和原始值不想等，不做更新操作，所以此时的atomicInteger值还是2019。</p><p>compareAndSet是AtomicInteger的一个方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * Atomically sets the value to the given updated value</span><br><span class="line">     * if the current value &#123;@code &#x3D;&#x3D;&#125; the expected value.</span><br><span class="line">     *</span><br><span class="line">     * @param expect the expected value</span><br><span class="line">     * @param update the new value</span><br><span class="line">     * @return &#123;@code true&#125; if successful. False return indicates that</span><br><span class="line">     * the actual value was not equal to the expected value.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public final boolean compareAndSet(int expect, int update) &#123;</span><br><span class="line">        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>他调用的是unsafe类的<code>compareAndSwapInt</code>方法，this表示当前值对象，valueOffset是当前对象在内存中的偏移量，expect为期望值，update为更新值。</p><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>需要说到 <code>atomicInteger.getAndIncrement();</code>这个方法，类似于i++。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Atomically increments by one the current value.</span><br><span class="line"> *</span><br><span class="line"> * @return the previous value</span><br><span class="line"> *&#x2F;</span><br><span class="line">public final int getAndIncrement() &#123;</span><br><span class="line">    return unsafe.getAndAddInt(this, valueOffset, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是调用的unsafe类的方法。<br>来看一下<code>getAndAddInt</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public final int getAndAddInt(Object var1, long var2, int var4) &#123;</span><br><span class="line">    int var5;</span><br><span class="line">    do &#123;</span><br><span class="line">        var5 &#x3D; this.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    return var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>var1为当前对象，var2为当前对象在内存中的偏移量，var4为1，var5为<code>getIntVolatile(var1, var2)</code>的返回值，<code>getIntVolatile</code>方法的意思是当前对象var1且内存偏移量为var2时的值是多少。</p><p>在while循环中，同样调用了<code>compareAndSwapInt</code>方法，此时的var5为期望值，var5+var4为更新值。直到比较成功。</p><h2 id="Unsafe类"><a href="#Unsafe类" class="headerlink" title="Unsafe类"></a>Unsafe类</h2><p>unsafe类是CAS的核心类，由于java无法直接访问底层系统，需要通过本地（native）方法来访问，基于unsafe类可直接操作特定内存的数据unsafe类存在于sun.mics包中，其内部方法可以像c的指针一样直接操作内存。因为 Java 中 CAS 操作执行依赖于 Unsafe 类。 </p><p>变量 vauleOffset，表示该变量值在内存中的偏移量，因为 Unsafe 就是根据内存偏移量来获取数据的。</p><p>变量 value 用 volatile 修饰，保证了多线程之间的内存可见性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class AtomicInteger extends Number implements java.io.Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID &#x3D; 6214790243416807050L;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; setup to use Unsafe.compareAndSwapInt for updates</span><br><span class="line">    private static final Unsafe unsafe &#x3D; Unsafe.getUnsafe();</span><br><span class="line">    private static final long valueOffset;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取下面 value 的地址偏移量</span><br><span class="line">            valueOffset &#x3D; unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(&quot;value&quot;));</span><br><span class="line">        &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private volatile int value;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CAS-的缺点"><a href="#CAS-的缺点" class="headerlink" title="CAS 的缺点"></a>CAS 的缺点</h2><ul><li>循环时间长开销很大<ul><li>如果 CAS 失败，会一直尝试，如果 CAS 长时间一直不成功，可能会给 CPU 带来很大的开销（比如线程数很多，每次比较都是失败，就会一直循环），所以希望是线程数比较小的场景。</li></ul></li><li>只能保证一个共享变量的原子操作<ul><li>对于多个共享变量操作时，循环 CAS 就无法保证操作的原子性。</li></ul></li><li>引出 ABA 问题</li></ul><h2 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h2><h3 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class AtomicRefrenceDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        User z3 &#x3D; new User(&quot;张三&quot;, 22);</span><br><span class="line">        User l4 &#x3D; new User(&quot;李四&quot;, 23);</span><br><span class="line">        AtomicReference&lt;User&gt; atomicReference &#x3D; new AtomicReference&lt;&gt;();</span><br><span class="line">        atomicReference.set(z3);</span><br><span class="line">        System.out.println(atomicReference.compareAndSet(z3, l4) + &quot;\t&quot; + atomicReference.get().toString());</span><br><span class="line">        System.out.println(atomicReference.compareAndSet(z3, l4) + &quot;\t&quot; + atomicReference.get().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Getter</span><br><span class="line">@ToString</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">class User &#123;</span><br><span class="line">    String userName;</span><br><span class="line">    int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ABA-问题是怎么产生的"><a href="#ABA-问题是怎么产生的" class="headerlink" title="ABA 问题是怎么产生的"></a>ABA 问题是怎么产生的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class ABADemo &#123;</span><br><span class="line">    private static AtomicReference&lt;Integer&gt; atomicReference &#x3D; new AtomicReference&lt;&gt;(100);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            atomicReference.compareAndSet(100, 101);</span><br><span class="line">            atomicReference.compareAndSet(101, 100);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; 保证上面线程先执行</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            atomicReference.compareAndSet(100, 2019);</span><br><span class="line">            System.out.println(atomicReference.get()); &#x2F;&#x2F; 2019</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当有一个值从 A 改为 B 又改为 A，这就是 ABA 问题。</p><h3 id="ABA-问题解决"><a href="#ABA-问题解决" class="headerlink" title="ABA 问题解决"></a>ABA 问题解决</h3><p>时间戳原子引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class ABADemo2 &#123;</span><br><span class="line">    private static AtomicStampedReference&lt;Integer&gt; atomicStampedReference &#x3D; new AtomicStampedReference&lt;&gt;(100, 1);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            int stamp &#x3D; atomicStampedReference.getStamp();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot; 的版本号为：&quot; + stamp);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            atomicStampedReference.compareAndSet(100, 101, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + 1 );</span><br><span class="line">            atomicStampedReference.compareAndSet(101, 100, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + 1 );</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            int stamp &#x3D; atomicStampedReference.getStamp();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot; 的版本号为：&quot; + stamp);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(3000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            boolean b &#x3D; atomicStampedReference.compareAndSet(100, 2019, stamp, stamp + 1);</span><br><span class="line">            System.out.println(b); &#x2F;&#x2F; false</span><br><span class="line">            System.out.println(atomicStampedReference.getReference()); &#x2F;&#x2F; 100</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread-0 的版本号为：1</span><br><span class="line">Thread-1 的版本号为：1</span><br><span class="line">false</span><br><span class="line">100</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> CAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM&amp;GC(一)java引用</title>
      <link href="/2020/04/16/JVM-GC-%E4%B8%80-java%E5%BC%95%E7%94%A8/"/>
      <url>/2020/04/16/JVM-GC-%E4%B8%80-java%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/jvm.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java中的引用有点像C++中的指针，通过引用可以对堆中的对象进行操作。在Java程序中最常见的引用类型是<code>强引用</code>，也是默认的引用类型。当在Java语言中使用New操作符创建一个新的对象，并将其赋值给一个变量的时候，这个变量就成为指向该对象的一个强引用。</p><h2 id="Jva中的引用"><a href="#Jva中的引用" class="headerlink" title="Jva中的引用"></a>Jva中的引用</h2><p>Java中提供了四个级别的引用，强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）。</p><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>在一个线程内，无需引用直接可以使用的对象，除非引用不存在了，否则强引用不会被GC清理。JVM即使抛出OOM异常，也不会回收强引用所指向的对象。强引用可能导致内存泄漏问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str &#x3D; &quot;hello&quot;;</span><br><span class="line">String str1 &#x3D; str;</span><br><span class="line">System.out.println(str&#x3D;&#x3D;str1);</span><br></pre></td></tr></table></figure><p>str变量将被分配到栈内，而“hello”对象则被分配在java堆中。局部变量str指向“hello”实例所在的堆空间，通过str可以操作该实例。此时str就是该实例的引用。<br><code>str1 = str</code>此时，str所指向的对象也被str1所指向，同时会在局部栈空间上分配空间存放str1变量。<br>对引用使用<code>==</code>比较的是两个引用所指向的堆空间的地址是否相同。</p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>软引用是除了强引用外，最强的引用类型。用来描述一些还有用但是并非必须的对象，在Java中用java.lang.ref.SoftReference类来表示。对于软引用关联着的对象，只有在内存不足的时候JVM才会回收该对象。因此，这一点可以很好地用来解决OOM的问题，并且这个特性很适合用来实现缓存：比如网页缓存、图片缓存等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object obj &#x3D; new Object();</span><br><span class="line">SoftReference&lt;Object&gt; sf &#x3D; new SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj &#x3D; null;</span><br><span class="line">sf.get();&#x2F;&#x2F;有时候会返回null</span><br><span class="line">&#x2F;&#x2F;sf是对obj的一个软引用，通过sf.get()方法可以取到这个对象，当这个对象被标记为需要回收的对象时，则返回null；</span><br></pre></td></tr></table></figure><p>SoftReference的特点是它的一个实例保存对一个Java对象的软引用，该软引用的存在不妨碍垃圾收集线程对该Java对象的回收。也就是说，一旦SoftReference保存了对一个Java对象的软引用后，在垃圾线程对 这个Java对象回收前，SoftReference类所提供的get()方法返回Java对象的强引用。一旦垃圾线程回收该Java对象之后，get()方法将返回null。</p><p>软引用主要用户实现类似缓存的功能，在内存足够的情况下直接通过软引用取值，无需从繁忙的真实来源查询数据，提升速度；当内存不足时，自动删除这部分缓存数据，从真正的来源查询这些数据。使用软引用能防止内存泄露，增强程序的健壮性。软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。也就是说，ReferenceQueue中保存的对象是Reference对象，而且是已经失去了它所软引用的对象的Reference对象。当调用它的poll()方法的时候，如果这个队列中不是空队列，那么将返回队列前面的那个Reference对象。在任何时候，都可以调用ReferenceQueue的poll()方法来检查是否有它所关心的非强可及对象被回收。如果队列为空，将返回一个null,否则该方法返回队列中前面的一个Reference对象。利用这个方法，可以检查哪个SoftReference所软引用的对象已经被回收，于是可以把这些失去所软引用的对象的SoftReference对象清除掉。</p><p>Java虚拟机会尽量让软引用存活的时间长一些，迫不得以才清理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.ref.SoftReference;</span><br><span class="line"> </span><br><span class="line">public class TestRef &#123;</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        SoftReference&lt;String&gt; str &#x3D; new SoftReference&lt;String&gt;(new String(&quot;abc&quot;));</span><br><span class="line">        System.out.println(str.get());</span><br><span class="line">        &#x2F;&#x2F;通知JVM进行内存回收</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(str.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/jvm-2.png" alt=""></p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>在java中，可以用java.lang.ref.WeakReference实例来保存对一个Java对象的弱引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object obj &#x3D; new Object();</span><br><span class="line">WeakReference&lt;Object&gt; wf &#x3D; new WeakReference&lt;Object&gt;(obj);</span><br><span class="line">obj &#x3D; null;</span><br><span class="line">wf.get();&#x2F;&#x2F;有时候会返回null</span><br><span class="line">wf.isEnQueued();&#x2F;&#x2F;返回是否被垃圾回收器标记为即将回收的垃圾</span><br></pre></td></tr></table></figure><p>当GC进行回收时，需要通过算法检查是否回收软引用对象，而对于弱引用对象，GC总是进行回收。弱引用对象更容易，更快的被GC回收。弱引用对象尝尝用于Map结构中，引用数据量比较大的对象，一旦该对象的强引用为null时，GC能够快速的回收该对象空间。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p><p>弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.ref.WeakReference;</span><br><span class="line"> </span><br><span class="line">public class TestRef &#123;</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        WeakReference&lt;String&gt; str &#x3D; new WeakReference&lt;String&gt;(new String(&quot;abc&quot;));</span><br><span class="line">        System.out.println(str.get());</span><br><span class="line">        &#x2F;&#x2F;通知JVM进行内存回收</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(str.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/jvm-3.png" alt=""></p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>又称为幽灵引用，主要目的是在一个对象所占的内存被实际回收之前的到通知，从而可以进行一些相关的清理工作。幽灵引用在创建是必须提供一个引用队列作为参数，它的作用在于检测对象是否已经从内存中删除，跟踪垃圾回收过程。其次幽灵引用对象的get方法总是返回null，因此无法通过幽灵引用来获取被引用的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object obj &#x3D; new Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf &#x3D; new PhantomReference&lt;Object&gt;(obj);</span><br><span class="line">obj&#x3D;null;</span><br><span class="line">pf.get();&#x2F;&#x2F;永远返回null</span><br><span class="line">pf.isEnQueued();&#x2F;&#x2F;返回是否从内存中已经删除</span><br></pre></td></tr></table></figure><p>当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在垃圾回收后，销毁这个对象，将这个虚引用加入引用队列。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.ref.PhantomReference;</span><br><span class="line">import java.lang.ref.ReferenceQueue;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">public class TestRef &#123;</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        ReferenceQueue&lt;String&gt; queue &#x3D; new ReferenceQueue&lt;&gt;();</span><br><span class="line">        PhantomReference&lt;String&gt; str &#x3D; new PhantomReference&lt;String&gt;(&quot;abc&quot;, queue);</span><br><span class="line">        System.out.println(str.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/jvm-4.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx实现负载均衡</title>
      <link href="/2020/04/11/Nginx%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2020/04/11/Nginx%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/nginx.png" alt=""></p><a id="more"></a><p>负载均衡即是代理服务器将接收的请求均衡的分发到各服务器中。</p><p>负载均衡的优势在访问量少或并发小的时候可能并不明显，且不说淘宝双11、铁道部抢票这种级别的访问量、高并发，就是一般网站的抢购活动时，也会给服务器造成很大压力，可能会造成服务器崩溃。而负载均衡可以很明显的减少甚至消除这种情况的出现，下面我们说说实现方法。</p><p>准备工作</p><p>首先下载安装Nginx。</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-1.png" alt=""></p><p>下载完成解压到本地盘符。解压后是这样的</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-2.png" alt=""></p><p>注意：nginx.exe是启动的程序，为了方便我们可以手写两个bat文件：</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-3.png" alt=""></p><p>我将nginx解压到了我本地的E盘</p><p>reload.bat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:</span><br><span class="line">cd kit\nginx-1.14.0\</span><br><span class="line">nginx  -s reload</span><br></pre></td></tr></table></figure><p>stop.bat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:</span><br><span class="line">cd  kit\nginx-1.14.0\</span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><p>我们双击nginx.exe就可以启动nginx，我们启动一下，打开任务 管理器看到</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-4.png" alt=""></p><p>就说明启动成功。</p><p>接下来配置两个tomcat来进行测试，下面是我本地的tomcat，存放在E盘中。</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-5.png" alt=""></p><p>拷贝一份放到我的D盘中，并修改端口号，默认 为8080，我们将D盘中的tomcat端口号修改为8082，将E盘中的tomcat端口号修改为8081。</p><p>端口号的修改：</p><p>找到conf</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-6.png" alt=""></p><p>修改</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-7.png" alt=""></p><p>修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;Server port&#x3D;&quot;8006&quot; shutdown&#x3D;&quot;SHUTDOWN&quot;&gt;  </span><br><span class="line">&lt;Listener className&#x3D;&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine&#x3D;&quot;on&quot; &#x2F;&gt;  </span><br><span class="line">&lt;Listener className&#x3D;&quot;org.apache.catalina.core.JasperListener&quot; &#x2F;&gt;  </span><br><span class="line">&lt;Listener className&#x3D;&quot;org.apache.catalina.mbeans.ServerLifecycleListener&quot; &#x2F;&gt;  </span><br><span class="line">&lt;Listener className&#x3D;&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; &#x2F;&gt;  </span><br><span class="line">&lt;GlobalNamingResources&gt;    </span><br><span class="line"> &lt;Resource name&#x3D;&quot;UserDatabase&quot;</span><br><span class="line">                   auth&#x3D;&quot;Container&quot;             </span><br><span class="line">                   type&#x3D;&quot;org.apache.catalina.UserDatabase&quot;              </span><br><span class="line">                  description&#x3D;&quot;User database that can be updated and saved&quot;              </span><br><span class="line">                  factory&#x3D;&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;              </span><br><span class="line">                 pathname&#x3D;&quot;conf&#x2F;tomcat-users.xml&quot; &#x2F;&gt;  </span><br><span class="line">&lt;&#x2F;GlobalNamingResources&gt;  </span><br><span class="line">&lt;Service name&#x3D;&quot;Catalina&quot;&gt;    </span><br><span class="line">&lt;Connector port&#x3D;&quot;8082&quot; </span><br><span class="line">                   protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;                </span><br><span class="line">                   connectionTimeout&#x3D;&quot;20000&quot;                </span><br><span class="line">                   redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;            </span><br><span class="line">&lt;Connector port&#x3D;&quot;8010&quot; </span><br><span class="line">                    protocol&#x3D;&quot;AJP&#x2F;1.3&quot; </span><br><span class="line">                    redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;    </span><br><span class="line">&lt;Engine name&#x3D;&quot;Catalina&quot; defaultHost&#x3D;&quot;localhost&quot;&gt;      </span><br><span class="line">&lt;Realm className&#x3D;&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;             </span><br><span class="line">             resourceName&#x3D;&quot;UserDatabase&quot;&#x2F;&gt;      </span><br><span class="line">&lt;Host name&#x3D;&quot;localhost&quot;  </span><br><span class="line">          appBase&#x3D;&quot;webapps&quot;            </span><br><span class="line">          unpackWARs&#x3D;&quot;true&quot; </span><br><span class="line">          autoDeploy&#x3D;&quot;true&quot;            </span><br><span class="line">          xmlValidation&#x3D;&quot;false&quot; </span><br><span class="line">          xmlNamespaceAware&#x3D;&quot;false&quot;&gt;     </span><br><span class="line"> &lt;&#x2F;Host&gt;    </span><br><span class="line">&lt;&#x2F;Engine&gt;  </span><br><span class="line">&lt;&#x2F;Service&gt;</span><br><span class="line">&lt;&#x2F;Server&gt;</span><br></pre></td></tr></table></figure><p>将E盘中的tomcat端口号修改为8081；只需修改默认文件中的一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port&#x3D;&quot;8081&quot; </span><br><span class="line">                   protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;               </span><br><span class="line">                   connectionTimeout&#x3D;&quot;20000&quot;              </span><br><span class="line">                  redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>配置nginx的配置文件：</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-8.png" alt=""></p><p>找到文件中的server节点，然后再上面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream local_tomcat_test &#123;          </span><br><span class="line">          server localhost:8082 weight&#x3D;8 max_fails&#x3D;3 fail_timeout&#x3D;30s;           </span><br><span class="line">          server localhost:8081 weight&#x3D;2 max_fails&#x3D;3 fail_timeout&#x3D;30s;    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>然后修改server:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream local_tomcat_test &#123;          </span><br><span class="line">       server localhost:8082 weight&#x3D;8 max_fails&#x3D;3 fail_timeout&#x3D;30s;          </span><br><span class="line">       server localhost:8081 weight&#x3D;2 max_fails&#x3D;3 fail_timeout&#x3D;30s;    </span><br><span class="line"> &#125;      </span><br><span class="line">server &#123;        </span><br><span class="line">      listen       80;        </span><br><span class="line">      server_name  localhost;        </span><br><span class="line">location &#x2F; &#123;            </span><br><span class="line">     proxy_pass http:&#x2F;&#x2F;local_tomcat_test;            </span><br><span class="line">     #root html;           </span><br><span class="line">     #index index.html index.htm       </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>配置完成后，启动两个tomcat，为了区分是哪个tomcat，我把tomcat的默认访问页进行了修改。</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-9.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-10.png" alt=""></p><p>然后我们再地址栏输入localhost,试试效果：</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-11.png" alt=""></p><p>访问了tomcat-8082,刷新一下：</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/nginx-12.png" alt=""></p><p>可以看到访问了tomcat-8081</p><p>各参数的含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">worker_processes：工作进程个数，可配置多个</span><br><span class="line">worker_connections:单个进程最大连接数</span><br><span class="line">server:每一个server相当于一个代理服务器</span><br><span class="line">lister:监听端口，默认80</span><br><span class="line">server_name:当前服务的域名，可以有多个，用空格分隔(我们是本地所以是localhost)</span><br><span class="line">location：表示匹配的路径，这时配置了&#x2F;表示所有请求都被匹配到这里</span><br><span class="line">index：当没有指定主页时，默认会选择这个指定的文件，可多个，空格分隔</span><br><span class="line">proxy_pass：请求转向自定义的服务器列表</span><br><span class="line">upstream name&#123; &#125;:服务器集群名称</span><br></pre></td></tr></table></figure><p>小结</p><p>nginx作为一个反向代理服务器，能缓存我们项目的静态文件，并实现反向代理与均衡负载，可以有效减少服务器压力，即使项目不大，也可以使用。</p><p>大家另外应该都还发现了个问题，虽然这样请求能分别请求到两个tomcat上，如果是一般不需身份校检的或什么认证的方法尚可，但如果出现这类情况：</p><p>我们在tomcat1上进行了登录，这时用户session当然是存在tomcat1上的，而这时进入个人中心的请求请求到tomcat2上了，这时就会出现问题了。tomcat2会告诉你还未登录，这显然不是我们想看到的。</p><p>这就涉及到session共享了，如何让两个服务器上的session共用。我这里放到下次再说，可能要过个好几天。</p><p>感谢大家支持。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql中InnoDB表为什么要建议用自增列做主键</title>
      <link href="/2020/04/10/MySql%E4%B8%ADInnoDB%E8%A1%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BB%BA%E8%AE%AE%E7%94%A8%E8%87%AA%E5%A2%9E%E5%88%97%E5%81%9A%E4%B8%BB%E9%94%AE/"/>
      <url>/2020/04/10/MySql%E4%B8%ADInnoDB%E8%A1%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BB%BA%E8%AE%AE%E7%94%A8%E8%87%AA%E5%A2%9E%E5%88%97%E5%81%9A%E4%B8%BB%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/sql.png" alt=""></p><a id="more"></a><h2 id="InnoDB引擎表的特点"><a href="#InnoDB引擎表的特点" class="headerlink" title="InnoDB引擎表的特点"></a>InnoDB引擎表的特点</h2><h3 id="1、InnoDB引擎表是基于B-树的索引组织表-IOT"><a href="#1、InnoDB引擎表是基于B-树的索引组织表-IOT" class="headerlink" title="1、InnoDB引擎表是基于B+树的索引组织表(IOT)"></a>1、InnoDB引擎表是基于B+树的索引组织表(IOT)</h3><p>关于B+树<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/mysql-1.png" alt=""></p><p>B+ 树的特点:</p><ul><li>所有关键字都出现在叶子结点的链表中(稠密索引)，且链表中的关键字恰好是有序的;</li><li>不可能在非叶子结点命中;</li><li>非叶子结点相当于是叶子结点的索引(稀疏索引)，叶子结点相当于是存储(关键字)数据的数据层;</li></ul><h3 id="2、主键-PRIMARY-KEY"><a href="#2、主键-PRIMARY-KEY" class="headerlink" title="2、主键(PRIMARY KEY)"></a>2、主键(PRIMARY KEY)</h3><p>如果我们定义了主键(PRIMARY KEY)，那么InnoDB会选择主键作为聚集索引、如果没有显式定义主键，则InnoDB会选择第一个不包含有NULL值的唯一索引作为主键索引、如果也没有这样的唯一索引，则InnoDB会选择内置6字节长的ROWID作为隐含的聚集索引(ROWID随着行记录的写入而主键递增，这个ROWID不像ORACLE的ROWID那样可引用，是隐含的)。</p><h3 id="3、主索引"><a href="#3、主索引" class="headerlink" title="3、主索引"></a>3、主索引</h3><p>数据记录本身被存于主索引（一颗B+Tree）的叶子节点上。这就要求同一个叶子节点内（大小为一个内存页或磁盘页）的各条数据记录按主键顺序存放，因此每当有一条新的记录插入时，MySQL会根据其主键将其插入适当的节点和位置，如果页面达到装载因子（InnoDB默认为15/16），则开辟一个新的页（节点）</p><h3 id="4、自增主键"><a href="#4、自增主键" class="headerlink" title="4、自增主键"></a>4、自增主键</h3><p>如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页</p><h3 id="5、非自增主键"><a href="#5、非自增主键" class="headerlink" title="5、非自增主键"></a>5、非自增主键</h3><p>如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置，此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果InnoDB表的数据写入顺序能和B+树索引的叶子节点顺序一致的话，这时候存取效率是最高的，也就是下面这几种情况的存取效率最高：<br>1、使用自增列(INT/BIGINT类型)做主键，这时候写入顺序是自增的，和B+数叶子节点分裂顺序一致；</p><p>2、该表不指定自增列做主键，同时也没有可以被选为主键的唯一索引(上面的条件)，这时候InnoDB会选择内置的ROWID作为主键，写入顺序和ROWID增长顺序一致；<br>除此以外，如果一个InnoDB表又没有显示主键，又有可以被选择为主键的唯一索引，但该唯一索引可能不是递增关系时(例如字符串、UUID、多字段联合唯一索引的情况)，该表的存取效率就会比较差。</p><p>《高性能MySQL》中的原话<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/mysql-2.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/mysql-3.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel入门</title>
      <link href="/2020/04/01/Sentinel%E5%85%A5%E9%97%A8/"/>
      <url>/2020/04/01/Sentinel%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/sentinel.png" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="Sentinel-是什么？"><a href="#Sentinel-是什么？" class="headerlink" title="Sentinel 是什么？"></a>Sentinel 是什么？</h3><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><h3 id="Sentinel-的历史"><a href="#Sentinel-的历史" class="headerlink" title="Sentinel 的历史"></a>Sentinel 的历史</h3><ul><li>2012 年，Sentinel 诞生，主要功能为入口流量控制。</li><li>2013-2017 年，Sentinel 在阿里巴巴集团内部迅速发展，成为基础技术模块，覆盖了所有的核心场景。Sentinel 也因此积累了大量的流量归整场景以及生产实践。</li><li>2018 年，Sentinel 开源，并持续演进。</li><li>2019 年，Sentinel 朝着多语言扩展的方向不断探索，推出 <a href="https://github.com/alibaba/sentinel-cpp" target="_blank" rel="noopener">C++ 原生版本</a>，同时针对 Service Mesh 场景也推出了 <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-cluster/sentinel-cluster-server-envoy-rls" target="_blank" rel="noopener">Envoy 集群流量控制支持</a>，以解决 Service Mesh 架构下多语言限流的问题。</li><li>2020 年，推出 <a href="https://github.com/alibaba/sentinel-golang" target="_blank" rel="noopener">Sentinel Go 版本</a>，继续朝着云原生方向演进。</li></ul><h3 id="Sentinel-特征"><a href="#Sentinel-特征" class="headerlink" title="Sentinel 特征"></a>Sentinel 特征</h3><ul><li>丰富的应用场景：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li>完备的实时监控：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li>广泛的开源生态：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li>完善的 SPI 扩展点：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><h3 id="Sentinel-的主要特性"><a href="#Sentinel-的主要特性" class="headerlink" title="Sentinel 的主要特性"></a>Sentinel 的主要特性</h3><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/Sentinel-1.png" alt=""></p><h3 id="Sentinel-的开源生态"><a href="#Sentinel-的开源生态" class="headerlink" title="Sentinel 的开源生态"></a>Sentinel 的开源生态</h3><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/Sentinel-2.png" alt=""></p><h3 id="Sentinel-分为两个部分"><a href="#Sentinel-分为两个部分" class="headerlink" title="Sentinel 分为两个部分"></a>Sentinel 分为两个部分</h3><ul><li>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li><li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li></ul><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="1-添加pom依赖"><a href="#1-添加pom依赖" class="headerlink" title="1.添加pom依赖"></a>1.添加pom依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sentinel-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意: 从 Sentinel 1.5.0 开始仅支持 JDK 1.7 或者以上版本。Sentinel 1.5.0 之前的版本最低支持 JDK 1.6。</p></blockquote><h3 id="2-定义资源"><a href="#2-定义资源" class="headerlink" title="2.定义资源"></a>2.定义资源</h3><p>接下来，我们把需要控制流量的代码用 Sentinel API SphU.entry(“HelloWorld”) 和 entry.exit() 包围起来即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    &#x2F;&#x2F; 配置规则.</span><br><span class="line">    initFlowRules();</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        Entry entry &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">    entry &#x3D; SphU.entry(&quot;HelloWorld&quot;);</span><br><span class="line">            &#x2F;*您的业务逻辑 - 开始*&#x2F;</span><br><span class="line">            System.out.println(&quot;hello world&quot;);</span><br><span class="line">            &#x2F;*您的业务逻辑 - 结束*&#x2F;</span><br><span class="line">&#125; catch (BlockException e1) &#123;</span><br><span class="line">            &#x2F;*流控逻辑处理 - 开始*&#x2F;</span><br><span class="line">    System.out.println(&quot;block!&quot;);</span><br><span class="line">            &#x2F;*流控逻辑处理 - 结束*&#x2F;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">   if (entry !&#x3D; null) &#123;</span><br><span class="line">       entry.exit();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-定义规则"><a href="#3-定义规则" class="headerlink" title="3.定义规则"></a>3.定义规则</h3><p>接下来，通过规则来指定允许该资源通过的请求次数，例如下面的代码定义了资源 HelloWorld 每秒最多只能通过 20 个请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private static void initFlowRules()&#123;</span><br><span class="line">    List&lt;FlowRule&gt; rules &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    FlowRule rule &#x3D; new FlowRule();</span><br><span class="line">    rule.setResource(&quot;HelloWorld&quot;);</span><br><span class="line">    rule.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class="line">    &#x2F;&#x2F; Set limit QPS to 20.</span><br><span class="line">    rule.setCount(20);</span><br><span class="line">    rules.add(rule);</span><br><span class="line">    FlowRuleManager.loadRules(rules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解支持"><a href="#注解支持" class="headerlink" title="注解支持"></a>注解支持</h2><p>Sentinel 提供了 <code>@SentinelResource</code> 注解用于定义资源，并提供了 AspectJ 的扩展用于自动定义资源、处理 <code>BlockException</code> 等。使用 <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-extension/sentinel-annotation-aspectj" target="_blank" rel="noopener">Sentinel Annotation AspectJ Extension</a> 的时候需要引入以下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sentinel-annotation-aspectj&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;x.y.z&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>将 SentinelResourceAspect 注册为一个 Spring Bean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class SentinelAspectConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public SentinelResourceAspect sentinelResourceAspect() &#123;</span><br><span class="line">        return new SentinelResourceAspect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class TestService &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 对应的 &#96;handleException&#96; 函数需要位于 &#96;ExceptionUtil&#96; 类中，并且必须为 static 函数.</span><br><span class="line">    @SentinelResource(value &#x3D; &quot;test&quot;, blockHandler &#x3D; &quot;handleException&quot;, blockHandlerClass &#x3D; &#123;ExceptionUtil.class&#125;)</span><br><span class="line">    public void test() &#123;</span><br><span class="line">        System.out.println(&quot;Test&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 原函数</span><br><span class="line">    @SentinelResource(value &#x3D; &quot;hello&quot;, blockHandler &#x3D; &quot;exceptionHandler&quot;, fallback &#x3D; &quot;helloFallback&quot;)</span><br><span class="line">    public String hello(long s) &#123;</span><br><span class="line">        return String.format(&quot;Hello at %d&quot;, s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; Fallback 函数，函数签名与原函数一致或加一个 Throwable 类型的参数.</span><br><span class="line">    public String helloFallback(long s) &#123;</span><br><span class="line">        return String.format(&quot;Halooooo %d&quot;, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Block 异常处理函数，参数最后多一个 BlockException，其余与原函数一致.</span><br><span class="line">    public String exceptionHandler(long s, BlockException ex) &#123;</span><br><span class="line">        &#x2F;&#x2F; Do some log here.</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        return &quot;Oops, error occurred at &quot; + s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实战"><a href="#代码实战" class="headerlink" title="代码实战"></a>代码实战</h2><p>新建一个SpringBoot的项目</p><h3 id="1-pom依赖"><a href="#1-pom依赖" class="headerlink" title="1.pom依赖"></a>1.pom依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2.1.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.example.sentinel&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sentinel-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;sentinel-demo&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;sentinel demo&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">        &lt;spring.boot.version&gt;2.2.1.RELEASE&lt;&#x2F;spring.boot.version&gt;</span><br><span class="line">        &lt;sentinel.version&gt;1.7.0&lt;&#x2F;sentinel.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.boot.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.boot.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.boot.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;sentinel-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;sentinel.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;sentinel-annotation-aspectj&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;sentinel.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;sentinel-transport-simple-http&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;sentinel.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;&#x2F;exclusion&gt;</span><br><span class="line">            &lt;&#x2F;exclusions&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><h3 id="2-Controller"><a href="#2-Controller" class="headerlink" title="2.Controller"></a>2.Controller</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">package com.example.sentinel.sentineldemo.controller;</span><br><span class="line"></span><br><span class="line">import com.alibaba.csp.sentinel.Entry;</span><br><span class="line">import com.alibaba.csp.sentinel.SphU;</span><br><span class="line">import com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line">import com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line">import com.example.sentinel.sentineldemo.service.TestSentinelService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Author: Monday</span><br><span class="line"> * @Date: 2020&#x2F;4&#x2F;1 0001 上午 11:44</span><br><span class="line"> * @Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;test&quot;)</span><br><span class="line">public class TestSentinelController &#123;</span><br><span class="line"></span><br><span class="line">    private static final String KEY &#x3D; &quot;queryOne&quot;;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TestSentinelService testSentinelService;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 代码不加任何限流 熔断</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;getValue_0&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    @SentinelResource(&quot;queryZero&quot;)</span><br><span class="line">    public String getValue_0(@RequestParam(&quot;key&quot;) String key) &#123;</span><br><span class="line">        return testSentinelService.getValue_0(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 限流实现方式一: 抛出异常的方式定义资源</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;getValue_1&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String getValue_1(@RequestParam(&quot;key&quot;) String key) &#123;</span><br><span class="line">        Entry entry &#x3D; null;</span><br><span class="line">        &#x2F;&#x2F; 资源名</span><br><span class="line">        String resourceName &#x3D; KEY;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; entry可以理解成入口登记</span><br><span class="line">            entry &#x3D; SphU.entry(resourceName);</span><br><span class="line">            &#x2F;&#x2F; 被保护的逻辑, 这里为查询接口</span><br><span class="line">            return testSentinelService.getValue_1(key);</span><br><span class="line">        &#125; catch (BlockException blockException) &#123;</span><br><span class="line">            &#x2F;&#x2F; 接口被限流的时候, 会进入到这里</span><br><span class="line">            return &quot;接口限流, 返回空&quot;;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            &#x2F;&#x2F; SphU.entry(xxx) 需要与 entry.exit() 成对出现,否则会导致调用链记录异常</span><br><span class="line">            if (entry !&#x3D; null) &#123;</span><br><span class="line">                entry.exit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 限流实现方式二: 注解定义资源</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;getValue_2&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String getValue_2(@RequestParam(&quot;key&quot;) String key) &#123;</span><br><span class="line">        String res &#x3D; testSentinelService.getValue_2(key);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Service"><a href="#3-Service" class="headerlink" title="3.Service"></a>3.Service</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">package com.example.sentinel.sentineldemo.service;</span><br><span class="line"></span><br><span class="line">import com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line">import com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line">import com.alibaba.csp.sentinel.slots.block.RuleConstant;</span><br><span class="line">import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class="line">import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;</span><br><span class="line">import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class="line">import com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Author: Monday</span><br><span class="line"> * @Date: 2020&#x2F;4&#x2F;1 0001 上午 11:45</span><br><span class="line"> * @Description: 商品查询接口</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class TestSentinelService &#123;</span><br><span class="line"></span><br><span class="line">    private static final String KEY &#x3D; &quot;queryTwo&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 代码不加任何限流 熔断</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getValue_0(String key) &#123;</span><br><span class="line">        System.out.println(&quot;获取Value:&quot; + key);</span><br><span class="line">        return &quot;return value :&quot; + key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 抛出异常的方式定义资源</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getValue_1(String key) &#123;</span><br><span class="line">        System.out.println(&quot;获取Value:&quot; + key);</span><br><span class="line">        return &quot;return value :&quot; + key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 注解定义资源</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @SentinelResource(value &#x3D; KEY, blockHandler &#x3D; &quot;blockHandlerMethod&quot;, fallback &#x3D; &quot;queryFallback&quot;)</span><br><span class="line">    public String getValue_2(String key) &#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟调用服务出现异常</span><br><span class="line">        if (&quot;0&quot;.equals(key)) &#123;</span><br><span class="line">            throw new RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;query value success, &quot; + key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String blockHandlerMethod(String key, BlockException e) &#123;</span><br><span class="line">        return &quot;queryValue error, blockHandlerMethod res: &quot; + key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String queryFallback(String key, Throwable e) &#123;</span><br><span class="line">        return &quot;queryValue error, return fallback res: &quot; + key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 初始化限流配置</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void initDegradeRule() &#123;</span><br><span class="line">        List&lt;FlowRule&gt; rules &#x3D; new ArrayList&lt;FlowRule&gt;();</span><br><span class="line">        FlowRule rule1 &#x3D; new FlowRule();</span><br><span class="line">        rule1.setResource(KEY);</span><br><span class="line">        &#x2F;&#x2F; QPS控制在2以内</span><br><span class="line">        rule1.setCount(2);</span><br><span class="line">        &#x2F;&#x2F; QPS限流</span><br><span class="line">        rule1.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class="line">        rule1.setLimitApp(&quot;default&quot;);</span><br><span class="line">        rules.add(rule1);</span><br><span class="line">        FlowRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-控制台"><a href="#4-控制台" class="headerlink" title="4.控制台"></a>4.控制台</h3><h4 id="4-1下载"><a href="#4-1下载" class="headerlink" title="4.1下载"></a>4.1下载</h4><p>从 <a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">release 页面</a> 下载截止目前为止最新版本的控制台 jar 包<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/Sentinel-3.png" alt=""></p><blockquote><p>注意：<br>启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本<br>  从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的 登录 功能，默认用户名和密码都是 sentinel</p></blockquote><p>用户可以通过如下参数进行配置</p><ul><li><code>-Dsentinel.dashboard.auth.username=sentinel</code> 用于指定控制台的登录用户名为 sentinel</li><li><code>-Dsentinel.dashboard.auth.password=123456</code> 用于指定控制台的登录密码为 123456；如果省略这两个参数，默认用户和密码均为 sentinel</li><li><code>-Dserver.servlet.session.timeout=7200</code> 用于指定 Spring Boot 服务端 session 的过期时间，如 7200 表示 7200 秒；60m 表示 60 分钟，默认为 30 分钟</li></ul><h4 id="4-2启动"><a href="#4-2启动" class="headerlink" title="4.2启动"></a>4.2启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.7.1.jar</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/Sentinel-4.png" alt=""></p><h4 id="4-3登录"><a href="#4-3登录" class="headerlink" title="4.3登录"></a>4.3登录</h4><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/Sentinel-5.png" alt=""><br>可以看到当前控制台中没有任何的应用，因为还没有应用接入。</p><h3 id="5-客户端接入"><a href="#5-客户端接入" class="headerlink" title="5.客户端接入"></a>5.客户端接入</h3><p>启动了控制台模块后，控制台页面都是空的，需要接入客户端。</p><h4 id="5-1导入与控制台通信的jar包"><a href="#5-1导入与控制台通信的jar包" class="headerlink" title="5.1导入与控制台通信的jar包"></a>5.1导入与控制台通信的jar包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sentinel-transport-simple-http&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;sentinel.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-配置应用启动参数"><a href="#5-2-配置应用启动参数" class="headerlink" title="5.2 配置应用启动参数"></a>5.2 配置应用启动参数</h4><p>引入了依赖之后，接着就是在我们的应用中配置 JVM 启动参数，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dproject.name&#x3D;xxx -Dcsp.sentinel.dashboard.server&#x3D;consoleIp:port</span><br></pre></td></tr></table></figure><p>其中的consoleIp和port对应的就是我们部署的 sentinel dashboard 的ip和port，我这里对应的是 127.0.0.1 和 8080，按照实际情况来配置 dashboard 的ip和port就好了，如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/Sentinel-6.png" alt=""></p><h4 id="5-3-启动应用"><a href="#5-3-启动应用" class="headerlink" title="5.3 启动应用"></a>5.3 启动应用</h4><p>启动上边的springboot项目</p><h4 id="5-4-测试效果"><a href="#5-4-测试效果" class="headerlink" title="5.4 测试效果"></a>5.4 测试效果</h4><p>本demo中<a href="http://localhost:8083/test/getValue_2?key=kobe接口执行多次，会触发限流操作，这时候再去看控制台：" target="_blank" rel="noopener">http://localhost:8083/test/getValue_2?key=kobe接口执行多次，会触发限流操作，这时候再去看控制台：</a><br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/Sentinel-7.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/Sentinel-8.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/Sentinel-9.png" alt=""></p><p>详细说明请参考 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Falibaba%2FSentinel%2Fwiki" target="_blank" rel="noopener">官方 Sentinel Wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CentOS安装Maven</title>
      <link href="/2020/03/28/%E5%9F%BA%E4%BA%8ECentOS%E5%AE%89%E8%A3%85Maven/"/>
      <url>/2020/03/28/%E5%9F%BA%E4%BA%8ECentOS%E5%AE%89%E8%A3%85Maven/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/maven.jpg" alt=""></p><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="1-通过官网下载"><a href="#1-通过官网下载" class="headerlink" title="1.通过官网下载"></a>1.通过官网下载</h3><p>Maven官网：<a href="http://maven.apache.org/" target="_blank" rel="noopener">http://maven.apache.org/</a></p><p>Maven下载地址：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><p>将下载好的包通过ftp上传到服务器。</p><h3 id="2-wget下载"><a href="#2-wget下载" class="headerlink" title="2.wget下载"></a>2.wget下载</h3><p>这里使用了<a href="http://mirrors.hust.edu.cn/" target="_blank" rel="noopener">华中科技大学开源镜像站</a>,网上有很多，自行选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# wget http:&#x2F;&#x2F;mirrors.hust.edu.cn&#x2F;apache&#x2F;maven&#x2F;maven-3&#x2F;3.5.4&#x2F;binaries&#x2F;apache-maven-3.5.4-bin.tar.gz</span><br><span class="line">--2020-03-28 09:04:47--  http:&#x2F;&#x2F;mirrors.hust.edu.cn&#x2F;apache&#x2F;maven&#x2F;maven-3&#x2F;3.5.4&#x2F;binaries&#x2F;apache-maven-3.5.4-bin.tar.gz</span><br><span class="line">正在解析主机 mirrors.hust.edu.cn (mirrors.hust.edu.cn)... 202.114.18.160</span><br><span class="line">正在连接 mirrors.hust.edu.cn (mirrors.hust.edu.cn)|202.114.18.160|:80... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 200 OK</span><br><span class="line">长度：8842660 (8.4M) [application&#x2F;octet-stream]</span><br><span class="line">正在保存至: “apache-maven-3.5.4-bin.tar.gz”</span><br><span class="line"></span><br><span class="line">100%[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;] 8,842,660   5.30MB&#x2F;s 用时 1.6s   </span><br><span class="line"></span><br><span class="line">2020-03-28 09:04:49 (5.30 MB&#x2F;s) - 已保存 “apache-maven-3.5.4-bin.tar.gz” [8842660&#x2F;8842660])</span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxf apache-maven-3.5.4-bin.tar.gz</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc</span><br><span class="line">ll</span><br><span class="line">vi profile</span><br><span class="line">#按i进入编辑状态</span><br><span class="line">#添加maven的环境变量</span><br><span class="line">export M2_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-maven-3.5.4</span><br><span class="line">export PATH&#x3D;$PATH:$M2_HOME&#x2F;bin</span><br><span class="line">#编辑完成按Esc退出编辑状态，然后按:wq保存退出。</span><br><span class="line">#保存退出后运行下面的命令使配置生效</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# mvn -v</span><br><span class="line">Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)</span><br><span class="line">Maven home: &#x2F;usr&#x2F;local&#x2F;apache-maven-3.5.4</span><br><span class="line">Java version: 1.8.0_241, vendor: Oracle Corporation, runtime: &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_241&#x2F;jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;3.10.0-957.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure><p>配置成功！</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建 Git 服务器[Linux版]</title>
      <link href="/2020/03/27/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-Git-%E6%9C%8D%E5%8A%A1%E5%99%A8-Linux%E7%89%88/"/>
      <url>/2020/03/27/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-Git-%E6%9C%8D%E5%8A%A1%E5%99%A8-Linux%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/git.png" alt=""></p><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>如果未安装wget,则先安装wget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure><p>安装完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# yum install wget</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * epel: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">正在解决依赖关系</span><br><span class="line">--&gt; 正在检查事务</span><br><span class="line">---&gt; 软件包 wget.x86_64.0.1.14-18.el7_6.1 将被 安装</span><br><span class="line">--&gt; 解决依赖关系完成</span><br><span class="line"></span><br><span class="line">依赖关系解决</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> Package                                                架构                                                     版本                                                               源                                                      大小</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">正在安装:</span><br><span class="line"> wget                                                   x86_64                                                   1.14-18.el7_6.1                                                    base                                                   547 k</span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">安装  1 软件包</span><br><span class="line"></span><br><span class="line">总下载量：547 k</span><br><span class="line">安装大小：2.0 M</span><br><span class="line">Is this ok [y&#x2F;d&#x2F;N]: y</span><br><span class="line">Downloading packages:</span><br><span class="line">wget-1.14-18.el7_6.1.x86_64.rpm                                                                                                                                                                                           | 547 kB  00:00:00     </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  正在安装    : wget-1.14-18.el7_6.1.x86_64                                                                                                                                                                                                  1&#x2F;1 </span><br><span class="line">  验证中      : wget-1.14-18.el7_6.1.x86_64                                                                                                                                                                                                  1&#x2F;1 </span><br><span class="line"></span><br><span class="line">已安装:</span><br><span class="line">  wget.x86_64 0:1.14-18.el7_6.1                                                                                                                                                                                                                  </span><br><span class="line"></span><br><span class="line">完毕！</span><br></pre></td></tr></table></figure><p>下载gitblit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;dl.bintray.com&#x2F;gitblit&#x2F;releases&#x2F;gitblit-1.8.0.tar.gz</span><br></pre></td></tr></table></figure><p>下载完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# wget http:&#x2F;&#x2F;dl.bintray.com&#x2F;gitblit&#x2F;releases&#x2F;gitblit-1.8.0.tar.gz</span><br><span class="line">--2020-03-27 11:59:22--  http:&#x2F;&#x2F;dl.bintray.com&#x2F;gitblit&#x2F;releases&#x2F;gitblit-1.8.0.tar.gz</span><br><span class="line">正在解析主机 dl.bintray.com (dl.bintray.com)... 52.41.180.114, 54.191.3.105</span><br><span class="line">正在连接 dl.bintray.com (dl.bintray.com)|52.41.180.114|:80... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 302 </span><br><span class="line">位置：http:&#x2F;&#x2F;d29vzk4ow07wi7.cloudfront.net&#x2F;d23f30c1fe7d28648d682f387f9a16bfd05cd000da418489d00f04e10279776f?response-content-disposition&#x3D;attachment%3Bfilename%3D%22gitblit-1.8.0.tar.gz%22&amp;Policy&#x3D;eyJTdGF0ZW1lbnQiOiBbeyJSZXNvdXJjZSI6Imh0dHAqOi8vZDI5dnprNG93MDd3aTcuY2xvdWRmcm9udC5uZXQvZDIzZjMwYzFmZTdkMjg2NDhkNjgyZjM4N2Y5YTE2YmZkMDVjZDAwMGRhNDE4NDg5ZDAwZjA0ZTEwMjc5Nzc2Zj9yZXNwb25zZS1jb250ZW50LWRpc3Bvc2l0aW9uPWF0dGFjaG1lbnQlM0JmaWxlbmFtZSUzRCUyMmdpdGJsaXQtMS44LjAudGFyLmd6JTIyIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNTg1MjgyMjgzfSwiSXBBZGRyZXNzIjp7IkFXUzpTb3VyY2VJcCI6IjAuMC4wLjAvMCJ9fX1dfQ__&amp;Signature&#x3D;kLEsE2~0a-gSiDvvEPDNqjAuOO8ab7-aqqzuZjDm2sRBZGtPmrkGINTxHEJn~-2hGeQkxX61okj5uV2sq92xSnkPXxSuw9WKJvRPYB35HLdXUTEj2aMbNtKV8J-Dq3eSkQEnLWv7SBOAFn07nrHJE8PpuIy0lKC~ulCXnM1WBmOvr6AWjf3Nla0kLpdBV3HtpCTeTgPNwbCSZYHyqrFtaNI~CQCW8aHQVji-wOLYsy~wyrQ0jjywB8r~P-jSCCAzcyFH7OVqMbJuDsFl63Mw7lK4OVU9jHKKZly6M8GcZXIhqBKS-Ddz9CZ9jHhuoPo5kVhn8jxGsbKHkunv1Zs-Fw__&amp;Key-Pair-Id&#x3D;APKAIFKFWOMXM2UMTSFA [跟随至新的 URL]</span><br><span class="line">--2020-03-27 11:59:24--  http:&#x2F;&#x2F;d29vzk4ow07wi7.cloudfront.net&#x2F;d23f30c1fe7d28648d682f387f9a16bfd05cd000da418489d00f04e10279776f?response-content-disposition&#x3D;attachment%3Bfilename%3D%22gitblit-1.8.0.tar.gz%22&amp;Policy&#x3D;eyJTdGF0ZW1lbnQiOiBbeyJSZXNvdXJjZSI6Imh0dHAqOi8vZDI5dnprNG93MDd3aTcuY2xvdWRmcm9udC5uZXQvZDIzZjMwYzFmZTdkMjg2NDhkNjgyZjM4N2Y5YTE2YmZkMDVjZDAwMGRhNDE4NDg5ZDAwZjA0ZTEwMjc5Nzc2Zj9yZXNwb25zZS1jb250ZW50LWRpc3Bvc2l0aW9uPWF0dGFjaG1lbnQlM0JmaWxlbmFtZSUzRCUyMmdpdGJsaXQtMS44LjAudGFyLmd6JTIyIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNTg1MjgyMjgzfSwiSXBBZGRyZXNzIjp7IkFXUzpTb3VyY2VJcCI6IjAuMC4wLjAvMCJ9fX1dfQ__&amp;Signature&#x3D;kLEsE2~0a-gSiDvvEPDNqjAuOO8ab7-aqqzuZjDm2sRBZGtPmrkGINTxHEJn~-2hGeQkxX61okj5uV2sq92xSnkPXxSuw9WKJvRPYB35HLdXUTEj2aMbNtKV8J-Dq3eSkQEnLWv7SBOAFn07nrHJE8PpuIy0lKC~ulCXnM1WBmOvr6AWjf3Nla0kLpdBV3HtpCTeTgPNwbCSZYHyqrFtaNI~CQCW8aHQVji-wOLYsy~wyrQ0jjywB8r~P-jSCCAzcyFH7OVqMbJuDsFl63Mw7lK4OVU9jHKKZly6M8GcZXIhqBKS-Ddz9CZ9jHhuoPo5kVhn8jxGsbKHkunv1Zs-Fw__&amp;Key-Pair-Id&#x3D;APKAIFKFWOMXM2UMTSFA</span><br><span class="line">正在解析主机 d29vzk4ow07wi7.cloudfront.net (d29vzk4ow07wi7.cloudfront.net)... 13.35.127.69, 13.35.127.111, 13.35.127.37, ...</span><br><span class="line">正在连接 d29vzk4ow07wi7.cloudfront.net (d29vzk4ow07wi7.cloudfront.net)|13.35.127.69|:80... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 200 OK</span><br><span class="line">长度：42063149 (40M) [application&#x2F;gzip]</span><br><span class="line">正在保存至: “gitblit-1.8.0.tar.gz”</span><br><span class="line"></span><br><span class="line">100%[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;] 42,063,149  3.57MB&#x2F;s 用时 13s    </span><br><span class="line"></span><br><span class="line">2020-03-27 11:59:38 (3.07 MB&#x2F;s) - 已保存 “gitblit-1.8.0.tar.gz” [42063149&#x2F;42063149])</span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>我的目录放在<code>/usr/local/</code>下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd usr&#x2F;local</span><br><span class="line">tar -xf gitblit-1.8.0.tar.gz</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><h3 id="1-更改端口配置"><a href="#1-更改端口配置" class="headerlink" title="1.更改端口配置"></a>1.更改端口配置</h3><blockquote><p>cd gitblit-1.8.0<br>ll<br>cd data<br>vi defaults.properties<br>设置修改编辑完成后按ESC 输入:wq 保存退出</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# cd gitblit-1.8.0</span><br><span class="line">[root@localhost gitblit-1.8.0]# ll</span><br><span class="line">总用量 3680</span><br><span class="line">-rwxr-xr-x. 1 root root     984 5月  15 2014 add-indexed-branch.sh</span><br><span class="line">-rwxr-xr-x. 1 root root      82 4月  20 2014 authority.sh</span><br><span class="line">drwxr-xr-x. 6 root root     153 3月  27 14:27 data</span><br><span class="line">drwxr-xr-x. 5 root root    4096 3月  27 14:27 docs</span><br><span class="line">drwxr-xr-x. 2 root root    4096 3月  27 14:27 ext</span><br><span class="line">-rw-r--r--. 1 root root 3685177 6月  23 2016 gitblit.jar</span><br><span class="line">-rwxr-xr-x. 1 root root      52 4月  20 2014 gitblit.sh</span><br><span class="line">-rwxr-xr-x. 1 root root      59 4月  20 2014 gitblit-stop.sh</span><br><span class="line">-rwxr-xr-x. 1 root root      87 4月  20 2014 install-service-centos.sh</span><br><span class="line">-rwxr-xr-x. 1 root root    1249 11月 23 2015 install-service-fedora.sh</span><br><span class="line">-rwxr-xr-x. 1 root root      92 4月  20 2014 install-service-ubuntu.sh</span><br><span class="line">-rwxr-xr-x. 1 root root     997 2月  26 2015 java-proxy-config.sh</span><br><span class="line">-rw-r--r--. 1 root root   11556 1月  18 2016 LICENSE</span><br><span class="line">-rwxr-xr-x. 1 root root     599 6月  17 2014 migrate-tickets.sh</span><br><span class="line">-rw-r--r--. 1 root root   12237 1月  18 2016 NOTICE</span><br><span class="line">-rwxr-xr-x. 1 root root     641 6月  17 2014 reindex-tickets.sh</span><br><span class="line">-rwxr-xr-x. 1 root root    1224 2月  26 2015 service-centos.sh</span><br><span class="line">-rwxr-xr-x. 1 root root    1512 5月  15 2014 service-ubuntu.sh</span><br><span class="line">[root@localhost gitblit-1.8.0]# cd data</span><br><span class="line">[root@localhost data]# ll</span><br><span class="line">总用量 88</span><br><span class="line">drwxr-xr-x. 2 root root    70 3月  27 14:27 certs</span><br><span class="line">-rw-r--r--. 1 root root 65818 6月  23 2016 defaults.properties</span><br><span class="line">drwxr-xr-x. 2 root root    25 3月  27 14:27 git</span><br><span class="line">-rw-r--r--. 1 root root   535 6月  23 2016 gitblit.properties</span><br><span class="line">drwxr-xr-x. 2 root root  4096 3月  27 14:27 gitignore</span><br><span class="line">drwxr-xr-x. 2 root root   274 3月  27 14:27 groovy</span><br><span class="line">-rw-r--r--. 1 root root    87 6月  23 2016 projects.conf</span><br><span class="line">-rw-r--r--. 1 root root    74 6月  23 2016 users.conf</span><br><span class="line">[root@localhost data]# vi defaults.properties</span><br></pre></td></tr></table></figure><p>找到<code>server.httpPort</code>，设定http协议的端口号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Standard http port to serve.  &lt;&#x3D; 0 disables this connector.</span><br><span class="line"># On Unix&#x2F;Linux systems, ports &lt; 1024 require root permissions.</span><br><span class="line"># Recommended value: 80 or 8080</span><br><span class="line">#</span><br><span class="line"># SINCE 0.5.0</span><br><span class="line"># RESTART REQUIRED</span><br><span class="line">server.httpPort &#x3D; 7070</span><br></pre></td></tr></table></figure><p>找到<code>server.httpBindInterface</code>，设定服务器的IP地址。这里就设定你的服务器IP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Specify the interface for Jetty to bind the standard connector.</span><br><span class="line"># You may specify an ip or an empty value to bind to all interfaces.</span><br><span class="line"># Specifying localhost will result in Gitblit ONLY listening to requests to</span><br><span class="line"># localhost.</span><br><span class="line">#</span><br><span class="line"># SINCE 0.5.0</span><br><span class="line"># RESTART REQUIRED</span><br><span class="line">server.httpBindInterface &#x3D; 192.168.1.70</span><br></pre></td></tr></table></figure><p>找到<code>server.httpsBindInterface</code>，设定为本机的ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Specify the interface for Jetty to bind the secure connector.</span><br><span class="line"># You may specify an ip or an empty value to bind to all interfaces.</span><br><span class="line"># Specifying localhost will result in Gitblit ONLY listening to requests to</span><br><span class="line"># localhost.</span><br><span class="line">#</span><br><span class="line"># SINCE 0.5.0</span><br><span class="line"># RESTART REQUIRED</span><br><span class="line">server.httpsBindInterface &#x3D; 192.168.1.70</span><br></pre></td></tr></table></figure><p><code>server.httpsPort = 8443</code> 保持默认不用修改</p><h3 id="2-改变路径配置"><a href="#2-改变路径配置" class="headerlink" title="2.改变路径配置"></a>2.改变路径配置</h3><blockquote><p>vi service-centos.sh<br>设置修改编辑完成后按ESC 输入:wq 保存退出</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GITBLIT_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;gitblit-1.8.0</span><br><span class="line">GITBLIT_BASE_FOLDER&#x3D;&#x2F;usr&#x2F;local&#x2F;gitblit-1.8.0&#x2F;data</span><br><span class="line">GITBLIT_HTTP_PORT&#x3D;7070</span><br><span class="line">GITBLIT_HTTPS_PORT&#x3D;8443</span><br><span class="line">GITBLIT_LOG&#x3D;&#x2F;var&#x2F;log&#x2F;gitblit.log</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="1-jar包启动"><a href="#1-jar包启动" class="headerlink" title="1.jar包启动"></a>1.jar包启动</h3><p><code>java  -jar gitblit.jar</code> 即可手动启动gitblit<br>当按ctrl+c或者退出终端时则该进程会关闭，服务也会关闭，因此这里必须要将该jar程序放到后台运行，这里需要对gitblit.sh文件进行修改，<code>vi gitblit.sh</code>修改成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">java -jar gitblit.jar --baseFolder data &gt;&#x2F;dev&#x2F;null    &amp;</span><br></pre></td></tr></table></figure><h3 id="2-服务启动"><a href="#2-服务启动" class="headerlink" title="2.服务启动"></a>2.服务启动</h3><p>将gitblit添加为服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">install-service-centos.sh</span><br><span class="line">service gitblit  start</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>用户名：admin<br>密码：admin<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/gitblit-6.png" alt="图片.png"></p><h2 id="额外依赖库"><a href="#额外依赖库" class="headerlink" title="额外依赖库"></a>额外依赖库</h2><p>如果需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc-c++ curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class="line">yum install lsof</span><br><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure><blockquote><p>lsof -i:8888 - 查看端口<br>kill -9 pid - 杀死服务</p></blockquote><h2 id="设置防火墙"><a href="#设置防火墙" class="headerlink" title="设置防火墙"></a>设置防火墙</h2><p>如果需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;7070&#x2F;tcp --permanent 开启端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;7071&#x2F;tcp --permanent 开启端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;8443&#x2F;tcp --permanent 开启端口</span><br><span class="line">firewall-cmd --reload 重启防火墙后生效</span><br></pre></td></tr></table></figure><p>也可以全部开启http和https端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone&#x3D;public --add-service&#x3D;http</span><br><span class="line">sudo firewall-cmd --permanent --zone&#x3D;public --add-service&#x3D;https</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line">sudo systemctl restart firewalld.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建 Git 服务器[Windows版]</title>
      <link href="/2020/03/25/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-Git-%E6%9C%8D%E5%8A%A1%E5%99%A8-Windows%E7%89%88/"/>
      <url>/2020/03/25/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-Git-%E6%9C%8D%E5%8A%A1%E5%99%A8-Windows%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/git.png" alt=""></p><a id="more"></a><h2 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li>下载 JDK：<a href="https://www.oracle.com/technetwork/java/javase/downloads/" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/</a></li><li>下载 Gitblit：<a href="http://gitblit.com/" target="_blank" rel="noopener">http://gitblit.com/</a><br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/gitblit-4.png" alt="图片.png"></li></ul><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>解压缩下载的压缩包即可，无需安装。<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/gitblit-5.png" alt="图片.png"></p><h3 id="创建本地存储文件夹"><a href="#创建本地存储文件夹" class="headerlink" title="创建本地存储文件夹"></a>创建本地存储文件夹</h3><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/gitblit-3.png" alt="图片.png"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>打开data文件夹下的<code>gitblit.properties</code><br>在第17行可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include &#x3D; defaults.properties</span><br></pre></td></tr></table></figure><p>同文件夹下找到<code>defaults.properties</code><br>将上边配置的本地存储文件夹的路径复制过来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#git.repositoriesFolder &#x3D; $&#123;baseFolder&#125;&#x2F;git</span><br><span class="line">git.repositoriesFolder &#x3D; E:\GitBlit\Repository</span><br></pre></td></tr></table></figure><p>找到server.httpPort，设定http协议的端口号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Standard http port to serve.  &lt;&#x3D; 0 disables this connector.</span><br><span class="line"># On Unix&#x2F;Linux systems, ports &lt; 1024 require root permissions.</span><br><span class="line"># Recommended value: 80 or 8080</span><br><span class="line">#</span><br><span class="line"># SINCE 0.5.0</span><br><span class="line"># RESTART REQUIRED</span><br><span class="line">server.httpPort &#x3D; 1024</span><br></pre></td></tr></table></figure><p>找到server.httpBindInterface，设定服务器的IP地址。这里就设定你的服务器IP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Specify the interface for Jetty to bind the standard connector.</span><br><span class="line"># You may specify an ip or an empty value to bind to all interfaces.</span><br><span class="line"># Specifying localhost will result in Gitblit ONLY listening to requests to</span><br><span class="line"># localhost.</span><br><span class="line">#</span><br><span class="line"># SINCE 0.5.0</span><br><span class="line"># RESTART REQUIRED</span><br><span class="line">server.httpBindInterface &#x3D; localhost</span><br></pre></td></tr></table></figure><p>找到server.httpsBindInterface，设定为localhost</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Specify the interface for Jetty to bind the secure connector.</span><br><span class="line"># You may specify an ip or an empty value to bind to all interfaces.</span><br><span class="line"># Specifying localhost will result in Gitblit ONLY listening to requests to</span><br><span class="line"># localhost.</span><br><span class="line">#</span><br><span class="line"># SINCE 0.5.0</span><br><span class="line"># RESTART REQUIRED</span><br><span class="line">server.httpsBindInterface &#x3D; localhost</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>运行gitblit.cmd<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/gitblit-1.png" alt="图片.png"><br>如上图则运行成功<br>在浏览器中打开,现在就可以使用GitBlit了。默认用户名密码都是 admin<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/gitblit-2.png" alt="图片.png"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5 到底是不是加密算法？</title>
      <link href="/2020/03/21/MD5-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%8D%E6%98%AF%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%EF%BC%9F/"/>
      <url>/2020/03/21/MD5-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%8D%E6%98%AF%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/MD5.jpg" alt=""></p><a id="more"></a><p>在回答这个问题之前，我们先分别来了解一下两个知识点：</p><ul><li>什么是 MD5 算法？</li><li>什么是加密算法？</li></ul><h2 id="一、MD5算法"><a href="#一、MD5算法" class="headerlink" title="一、MD5算法"></a>一、MD5算法</h2><p>MD5 即 Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一，主流编程语言普遍已有 MD5 实现。</p><p>将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5 的前身有 MD2 、MD3 和 MD4 。</p><p>MD5 是输入不定长度信息，输出固定长度 128-bits 的算法。经过程序流程，生成四个32位数据，最后联合起来成为一个 128-bits 散列。</p><p>基本方式为，求余、取余、调整长度、与链接变量进行循环运算，得出结果。</p><p>MD5 计算广泛应用于错误检查。在一些 BitTorrent 下载中，软件通过计算 MD5 来检验下载到的碎片的完整性。</p><h2 id="二、加密算法"><a href="#二、加密算法" class="headerlink" title="二、加密算法"></a>二、加密算法</h2><h3 id="百度百科"><a href="#百度百科" class="headerlink" title="百度百科"></a>百度百科</h3><p>加密，是以某种特殊的算法改变原有的信息数据，使得未授权的用户即使获得了已加密的信息，但因不知解密的方法，仍然无法了解信息的内容。</p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>在密码学中，加密（英语：Encryption）是将明文信息改变为难以读取的密文内容，使之不可读的过程。只有拥有解密方法的对象，经由解密过程，才能将密文还原为正常可读的内容。</p><h2 id="三、对比"><a href="#三、对比" class="headerlink" title="三、对比"></a>三、对比</h2><p>也就是说，MD5 算法和加密算法都可以将信息转换为另外一种内容。</p><p>但是，MD5 算法对比 加密算法 缺少了解密过程。</p><p>事实上，使用 加密算法 加密后的消息是完整的，并且基于解密算法后，可以恢复原始数据。</p><p>而 MD5 算法 得到的消息是不完整的，并且通过摘要的数据也无法得到原始数据。</p><p>所以，MD5 算法不是加密算法！</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个Git仓库开源软件的比较</title>
      <link href="/2020/03/20/%E5%87%A0%E4%B8%AAGit%E4%BB%93%E5%BA%93%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%AF%94%E8%BE%83/"/>
      <url>/2020/03/20/%E5%87%A0%E4%B8%AAGit%E4%BB%93%E5%BA%93%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/git.png" alt=""></p><a id="more"></a><table><thead><tr><th>特性</th><th>gitlab</th><th>gitblit</th><th>gitbucket</th><th>gogs</th><th>gitolite</th></tr></thead><tbody><tr><td>公开库</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>私有库</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>在线编辑</td><td>√</td><td>×</td><td>√</td><td>×</td><td>×</td></tr><tr><td>wiki</td><td>√</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>issue</td><td>√</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>fork</td><td>√</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>pull request</td><td>√</td><td>×</td><td>√</td><td>√</td><td>×</td></tr><tr><td>支持ssh</td><td>√</td><td>√</td><td>×</td><td>√</td><td>？</td></tr><tr><td>邮件通知</td><td>√</td><td>？</td><td>√</td><td>√</td><td>？</td></tr><tr><td>项目统计</td><td>√</td><td>×</td><td>√</td><td>√</td><td>×</td></tr><tr><td>组织管理</td><td>√</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>中文支持</td><td>×</td><td>√</td><td>×</td><td>√</td><td>×</td></tr><tr><td>权限控制</td><td>√</td><td>√</td><td>×</td><td>×</td><td>√</td></tr><tr><td>插件机制</td><td>√</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>系统资源要求</td><td>高</td><td>高</td><td>高</td><td>很低</td><td>低</td></tr><tr><td>方便安装</td><td>巨大不方便</td><td>单文件部署</td><td>单文件部署</td><td>单文件部署</td><td>未知</td></tr><tr><td>开发语言</td><td>ruby</td><td>java</td><td>scala</td><td>go</td><td>perl</td></tr><tr><td>项目历史（年）</td><td>？</td><td>5</td><td>3</td><td>2</td><td>？</td></tr><tr><td>开发者数量</td><td>？</td><td>97</td><td>80</td><td>196</td><td>？</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 开发环境、测试环境、生产环境、UAT环境、仿真环境</title>
      <link href="/2020/03/19/%E4%BB%80%E4%B9%88%E6%98%AF-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E3%80%81%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E3%80%81%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E3%80%81UAT%E7%8E%AF%E5%A2%83%E3%80%81%E4%BB%BF%E7%9C%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/03/19/%E4%BB%80%E4%B9%88%E6%98%AF-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E3%80%81%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E3%80%81%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E3%80%81UAT%E7%8E%AF%E5%A2%83%E3%80%81%E4%BB%BF%E7%9C%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>开发环境</strong>：开发环境是程序猿们专门用于开发的服务器，配置可以比较随意， 为了开发调试方便，一般打开全部错误报告。</p><p><strong>测试环境</strong>：一般是克隆一份生产环境的配置，一个程序在测试环境工作不正常，那么肯定不能把它发布到生产机上。</p><p><strong>生产环境</strong>：是指正式提供对外服务的，一般会关掉错误报告，打开错误日志。可以理解为包含所有的功能的环境，任何项目所使用的环境都以这个为基础，然后根据客户的个性化需求来做调整或者修改。</p><p>三个环境也可以说是系统开发的三个阶段：开发-&gt;测试-&gt;上线，其中生产环境也就是通常说的真实环境。</p><p><strong>UAT环境</strong>：UAT，(User Acceptance Test),用户接受度测试 即验收测试，所以UAT环境主要是用来作为客户体验的环境。</p><p><strong>仿真环境</strong>：顾名思义是和真正使用的环境一样的环境（即已经出售给客户的系统所在环境，也成为商用环境），所有的配置，页面展示等都应该和商家正在使用的一样，差别只在环境的性能方面。</p><p>系统内部<a href="https://www.baidu.com/s?wd=%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YLnWnLnAcsmWTvmHKbrHmv0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHnLnHTznHDL" target="_blank" rel="noopener">集成测试</a>(System Integration Testing) SIT<br>用户<a href="https://www.baidu.com/s?wd=%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YLnWnLnAcsmWTvmHKbrHmv0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHnLnHTznHDL" target="_blank" rel="noopener">验收测试</a>(User Acceptance Testing) UAT<br>SIT在前，UAT在后，UAT测完才可以上线。</p><p>SIT是<a href="https://www.baidu.com/s?wd=%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YLnWnLnAcsmWTvmHKbrHmv0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHnLnHTznHDL" target="_blank" rel="noopener">集成测试</a>UAT是<a href="https://www.baidu.com/s?wd=%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YLnWnLnAcsmWTvmHKbrHmv0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHnLnHTznHDL" target="_blank" rel="noopener">验收测试</a>从时间上看，UAT要在SIT后面，<a href="https://www.baidu.com/s?wd=UAT%E6%B5%8B%E8%AF%95&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YLnWnLnAcsmWTvmHKbrHmv0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHnLnHTznHDL" target="_blank" rel="noopener">UAT测试</a>要在<a href="https://www.baidu.com/s?wd=%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YLnWnLnAcsmWTvmHKbrHmv0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHnLnHTznHDL" target="_blank" rel="noopener">系统测试</a>完成后才开始。从测试人员看，SIT由公司的测试员来测试，而UAT一般是由用户来测试。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis if标签判断数字大小</title>
      <link href="/2020/03/18/Mybatis%20if%E6%A0%87%E7%AD%BE%E5%88%A4%E6%96%AD%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/"/>
      <url>/2020/03/18/Mybatis%20if%E6%A0%87%E7%AD%BE%E5%88%A4%E6%96%AD%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/mybatis.png" alt=""></p><a id="more"></a><h2 id="if标签语法"><a href="#if标签语法" class="headerlink" title="if标签语法"></a>if标签语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select...&gt;</span><br><span class="line">  SQL语句1</span><br><span class="line">  &lt;if test&#x3D;&quot;条件表达式&quot;&gt;</span><br><span class="line">     SQL语句2</span><br><span class="line">  &lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><h2 id="条件表达式中大于号小于号用-gt-lt"><a href="#条件表达式中大于号小于号用-gt-lt" class="headerlink" title="条件表达式中大于号小于号用 gt,lt"></a>条件表达式中大于号小于号用 gt,lt</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;if test&#x3D;&quot;num gt 0&quot;&gt;...&lt;&#x2F;if&gt;</span><br><span class="line"></span><br><span class="line">&lt;if test&#x3D;&quot;num lt 0&quot;&gt;...&lt;&#x2F;if&gt;</span><br></pre></td></tr></table></figure><h2 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ZftjHalf&gt; selectByAreaIdAndYear(@Param(&quot;areaId&quot;) String areaId,</span><br><span class="line">                                     @Param(&quot;year&quot;) String year,</span><br><span class="line">                                     @Param(&quot;level&quot;) int level);</span><br></pre></td></tr></table></figure><p>##xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectByAreaIdAndYear&quot; resultType&#x3D;&quot;com.zftdata.nyzft.entity.ZftjHalf&quot;&gt;</span><br><span class="line">  select * from ZFTJ_HALF</span><br><span class="line">  where FILLING_TIME LIKE CONCAT(#&#123;year&#125;,&#39;%&#39;)</span><br><span class="line">  &lt;if test&#x3D;&quot;level lt 3&quot;&gt;</span><br><span class="line">    and AREA_ID_PID &#x3D;#&#123;areaId&#125;</span><br><span class="line">  &lt;&#x2F;if&gt;</span><br><span class="line">  &lt;if test&#x3D;&quot;level gt 2&quot;&gt;</span><br><span class="line">    and AREA_ID &#x3D;#&#123;areaId&#125;</span><br><span class="line">  &lt;&#x2F;if&gt;</span><br><span class="line">  &lt;if test&#x3D;&quot;level &#x3D;&#x3D; 4&quot;&gt;</span><br><span class="line">    and AREA_ID &#x3D;#&#123;areaId&#125;</span><br><span class="line">  &lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java14新特性：Switch表达式</title>
      <link href="/2020/03/16/Java14%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9ASwitch%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/03/16/Java14%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9ASwitch%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><blockquote><p>Java 14正式发布switch表达式特性。在之前的两个 Java 版本Java12，Java13，switch特性只是预览版。<br>新的switch表达式有助于避免一些bug，因为它的表达和组合方式更容易编写。</p></blockquote><p>switch新的表达式有两个特点：</p><ul><li>支持箭头表达式返回。</li><li>支持yied和return返回值。<h2 id="Java-14之前switch语法"><a href="#Java-14之前switch语法" class="headerlink" title="Java 14之前switch语法"></a>Java 14之前switch语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">switch (season) &#123;</span><br><span class="line">    case SPRING:</span><br><span class="line">    case AUTUMN:</span><br><span class="line">        System.out.println(&quot;温暖&quot;);</span><br><span class="line">        break;</span><br><span class="line">    case SUMMER:</span><br><span class="line">        System.out.println(&quot;炎热&quot;);</span><br><span class="line">        break;</span><br><span class="line">    case WINTER:</span><br><span class="line">        System.out.println(&quot;寒冷&quot;);</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Java-14-switch表达式"><a href="#Java-14-switch表达式" class="headerlink" title="Java 14 switch表达式"></a>Java 14 switch表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">switch (season) &#123;</span><br><span class="line">    case SPRING, AUTUMN -&gt; System.out.println(&quot;温暖&quot;);</span><br><span class="line">    case SUMMER         -&gt; System.out.println(&quot;炎热&quot;);</span><br><span class="line">    case WINTER         -&gt; System.out.println(&quot;寒冷&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 14的switch表达式使用箭头表达时，不需要我们在每一个case后都加上break，减少我们出错的机会。</p><h2 id="Java14之前switch语法返回值"><a href="#Java14之前switch语法返回值" class="headerlink" title="Java14之前switch语法返回值"></a>Java14之前switch语法返回值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String temperature &#x3D;&quot;&quot;;</span><br><span class="line">switch (season) &#123;</span><br><span class="line">    case SPRING:</span><br><span class="line">    case AUTUMN:</span><br><span class="line">        temperature  &#x3D; &quot;温暖&quot;;</span><br><span class="line">        break;</span><br><span class="line">    case SUMMER:</span><br><span class="line">        temperature  &#x3D; &quot;炎热&quot;;</span><br><span class="line">        break;</span><br><span class="line">    case WINTER:</span><br><span class="line">        temperature  &#x3D; &quot;寒冷&quot;;</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">       temperature  &#x3D; &quot;忽冷忽热&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它不支持返回值，需要通过一个中间变量来返回。</p><h2 id="Java14-switch表达式返回值"><a href="#Java14-switch表达式返回值" class="headerlink" title="Java14 switch表达式返回值"></a>Java14 switch表达式返回值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String temperature &#x3D; switch (season) &#123;</span><br><span class="line">    case SPRING, AUTUMN -&gt; &quot;温暖&quot;;</span><br><span class="line">    case SUMMER         -&gt; &quot;炎热&quot;;</span><br><span class="line">    case WINTER         -&gt; &quot;寒冷&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java14 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java14新特性：字符串块</title>
      <link href="/2020/03/15/Java14%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9D%97/"/>
      <url>/2020/03/15/Java14%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><p>java1之前写字符串拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str &#x3D; &quot;&lt;html&gt;&quot; +</span><br><span class="line">               &quot;&lt;header&gt;&quot; +</span><br><span class="line">               &quot;&lt;&#x2F;header&gt;&quot; +</span><br><span class="line">               &quot;&lt;body&gt;&quot; +</span><br><span class="line">               &quot;&lt;div&gt;body&lt;&#x2F;div&gt;&quot; +</span><br><span class="line">               &quot;&lt;&#x2F;body&gt;&quot; +</span><br><span class="line">               &quot;&lt;&#x2F;html&gt;&quot;;</span><br></pre></td></tr></table></figure><p>内容短的时候还算可以，当需要拼接的内容很多的时候就会显得很乱</p><p>java14后，引进了三个引号作为字符串块，类似python中的字符串块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 注意 &quot;&quot;&quot; 之后必须换行</span><br><span class="line">String str &#x3D; &quot;&quot;&quot;</span><br><span class="line">        &lt;html&gt;</span><br><span class="line">                &lt;header&gt;</span><br><span class="line">                &lt;&#x2F;header&gt;</span><br><span class="line">            &lt;body&gt;</span><br><span class="line">                &lt;div&gt;&quot;body&quot;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;body&gt;</span><br><span class="line">        &lt;&#x2F;html&gt;</span><br><span class="line">        &quot;&quot;&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java14 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java14新特性：增强 instanceOf 类型推断</title>
      <link href="/2020/03/14/Java14%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A%E5%A2%9E%E5%BC%BA-instanceOf-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/"/>
      <url>/2020/03/14/Java14%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A%E5%A2%9E%E5%BC%BA-instanceOf-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><blockquote><p>Java中instanceof是用来判断对象的类型是否是目标类型。如果是返回true，不是返回false。</p></blockquote><p>在Java 14之前，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (obj instanceof String) &#123;</span><br><span class="line">    String str &#x3D; (String) obj; </span><br><span class="line">    str.contains(&quot;A&quot;) ;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">     str &#x3D; &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obj instanceof String已经为true，在后面的代码里，我们还是要清晰的定义一个新变量，并且要做类型强转换。</p><p>Java 14对instanceof引入了模式匹配，修改后的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (!(obj instanceof String str)) &#123;</span><br><span class="line">     str.contains(&quot;A&quot;) ;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">     str &#x3D; &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了str，就可以在后续代码使用，不在需要显式做类型转换了。</p><p>还能继续加入判断条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (obj instanceof String str &amp;&amp; str.contains(&quot;A&quot;)) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">if (obj instanceof String str || str.contains(&quot;A&quot;)) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java14 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java14新特性：增强NPE NullPointerException 错误推断</title>
      <link href="/2020/03/13/Java14%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A%E5%A2%9E%E5%BC%BANPE-NullPointerException-%E9%94%99%E8%AF%AF%E6%8E%A8%E6%96%AD/"/>
      <url>/2020/03/13/Java14%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A%E5%A2%9E%E5%BC%BANPE-NullPointerException-%E9%94%99%E8%AF%AF%E6%8E%A8%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><blockquote><p>改进 NullPointerExceptions，通过准确描述哪些变量为 null 来提高 JVM 生成的异常的可用性。该提案的作者希望为开发人员和支持人员提供有关程序为何异常终止的有用信息，并通过更清楚地将动态异常与静态程序代码相关联来提高对程序的理解。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name &#x3D; user.getLocation().getCity().getName();</span><br></pre></td></tr></table></figure><p>在Java 14之前，你可能会得到如下的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerExceptionat NullPointerExample.main(NullPointerExample.java:2)</span><br></pre></td></tr></table></figure><p>不幸的是，如果在第2行是一个包含了多个方法调用的赋值语句（如getLocation()和getCity()），那么任何一个都可能会返回null。实际上，变量user也可能是null。因此，无法判断是谁导致了NullPointerException。</p><p>在Java 14中，新的JVM特性可以显示更详细的诊断信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException: Cannot invoke &quot;Location.getCity()&quot; </span><br><span class="line">because the return value of &quot;User.getLocation()&quot; is null at NullPointerExample.main(NullPointerExample.java:2)</span><br></pre></td></tr></table></figure><p>该消息包含两个明确的组成部分：</p><ul><li>后果：<code>Location.getCity()</code>无法被调用</li><li>原因：<code>User.getLocation()</code>的返回值为null</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java14 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 中 IO 流</title>
      <link href="/2020/03/12/Java-%E4%B8%AD-IO-%E6%B5%81/"/>
      <url>/2020/03/12/Java-%E4%B8%AD-IO-%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><h2 id="Java-中-IO-流分为几种"><a href="#Java-中-IO-流分为几种" class="headerlink" title="Java 中 IO 流分为几种?"></a>Java 中 IO 流分为几种?</h2><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ul><p>Java Io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><p>按操作方式分类结构图：<br><img src="http://q6rnahf7l.bkt.clouddn.com/IO-%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F%E5%88%86%E7%B1%BB.png.jpeg" alt=""></p><p>按操作对象分类结构图：<br><img src="http://q6rnahf7l.bkt.clouddn.com/IO-%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB.png.jpeg" alt=""></p><h2 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流,为什么还要有字符流?"></a>既然有了字节流,为什么还要有字符流?</h2><p>字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h2 id="BIO-NIO-AIO-有什么区别"><a href="#BIO-NIO-AIO-有什么区别" class="headerlink" title="BIO,NIO,AIO 有什么区别?"></a>BIO,NIO,AIO 有什么区别?</h2><ul><li>BIO (Blocking I/O): 同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机 1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</li><li>NIO (New I/O): NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO 提供了与传统 BIO 模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发</li><li>AIO (Asynchronous I/O): AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础知识汇总(三)</title>
      <link href="/2020/03/11/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB-%E4%B8%89/"/>
      <url>/2020/03/11/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><h2 id="21-静态方法和实例方法有何不同"><a href="#21-静态方法和实例方法有何不同" class="headerlink" title="21.静态方法和实例方法有何不同"></a>21.静态方法和实例方法有何不同</h2><ul><li><p>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。</p></li><li><p>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。</p></li></ul><h2 id="22-对象的相等与指向他们的引用相等-两者有什么不同"><a href="#22-对象的相等与指向他们的引用相等-两者有什么不同" class="headerlink" title="22.对象的相等与指向他们的引用相等,两者有什么不同?"></a>22.对象的相等与指向他们的引用相等,两者有什么不同?</h2><p>对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。</p><h2 id="23-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是"><a href="#23-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是" class="headerlink" title="23.在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?"></a>23.在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?</h2><p>帮助子类做初始化工作。</p><h2 id="24-与-equals-重要"><a href="#24-与-equals-重要" class="headerlink" title="24.== 与 equals(重要)"></a>24.== 与 equals(重要)</h2><p>== : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。</p><p>equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况 1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li><li>情况 2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li></ul><p>举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class test1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a &#x3D; new String(&quot;ab&quot;); &#x2F;&#x2F; a 为一个引用</span><br><span class="line">        String b &#x3D; new String(&quot;ab&quot;); &#x2F;&#x2F; b为另一个引用,对象的内容一样</span><br><span class="line">        String aa &#x3D; &quot;ab&quot;; &#x2F;&#x2F; 放在常量池中</span><br><span class="line">        String bb &#x3D; &quot;ab&quot;; &#x2F;&#x2F; 从常量池中查找</span><br><span class="line">        if (aa &#x3D;&#x3D; bb) &#x2F;&#x2F; true</span><br><span class="line">            System.out.println(&quot;aa&#x3D;&#x3D;bb&quot;);</span><br><span class="line">        if (a &#x3D;&#x3D; b) &#x2F;&#x2F; false，非同一对象</span><br><span class="line">            System.out.println(&quot;a&#x3D;&#x3D;b&quot;);</span><br><span class="line">        if (a.equals(b)) &#x2F;&#x2F; true</span><br><span class="line">            System.out.println(&quot;aEQb&quot;);</span><br><span class="line">        if (42 &#x3D;&#x3D; 42.0) &#123; &#x2F;&#x2F; true</span><br><span class="line">            System.out.println(&quot;true&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li></ul><h2 id="25-hashCode-与-equals-重要"><a href="#25-hashCode-与-equals-重要" class="headerlink" title="25.hashCode 与 equals (重要)"></a>25.hashCode 与 equals (重要)</h2><p>面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode 方法？”</p><h3 id="hashCode（）介绍"><a href="#hashCode（）介绍" class="headerlink" title="hashCode（）介绍"></a>hashCode（）介绍</h3><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在 JDK 的 Object.java 中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。</p><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><h3 id="为什么要有-hashCode"><a href="#为什么要有-hashCode" class="headerlink" title="为什么要有 hashCode"></a>为什么要有 hashCode</h3><p>我们先以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode： 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与该位置其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，HashSet 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 equals()方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的 Java 启蒙书《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p>通过我们可以看出：hashCode() 的作用就是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode()在散列表中才有用，在其它情况下没用。在散列表中 hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p><h3 id="hashCode（）与-equals（）的相关规定"><a href="#hashCode（）与-equals（）的相关规定" class="headerlink" title="hashCode（）与 equals（）的相关规定"></a>hashCode（）与 equals（）的相关规定</h3><ul><li>如果两个对象相等，则 hashcode 一定也是相同的</li><li>两个对象相等,对两个对象分别调用 equals 方法都返回 true</li><li>两个对象有相同的 hashcode 值，它们也不一定是相等的</li><li>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ul><h2 id="26-简述线程、程序、进程的基本概念。以及他们之间关系是什么"><a href="#26-简述线程、程序、进程的基本概念。以及他们之间关系是什么" class="headerlink" title="26.简述线程、程序、进程的基本概念。以及他们之间关系是什么?"></a>26.简述线程、程序、进程的基本概念。以及他们之间关系是什么?</h2><p>线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p>程序是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p><p>进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如 CPU 时间，内存空间，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。 线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><h2 id="27-线程有哪些基本状态"><a href="#27-线程有哪些基本状态" class="headerlink" title="27.线程有哪些基本状态?"></a>27.线程有哪些基本状态?</h2><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态（图源《Java 并发编程艺术》4.1.4 节）。<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/java-base-3.png" alt="图片.png"><br>线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。Java 线程状态变迁如下图所示（图源《Java 并发编程艺术》4.1.4 节）：<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/java-base-4.png" alt="图片.png"></p><p>由上图可以看出：</p><p>线程创建之后它将处于 <strong>NEW（新建）</strong> 状态，调用 <code>start()</code> 方法后开始运行，线程这时候处于 <strong>READY（可运行）</strong> 状态。可运行状态的线程获得了 cpu 时间片（timeslice）后就处于 <strong>RUNNING（运行）</strong> 状态。</p><blockquote><p>操作系统隐藏 Java 虚拟机（JVM）中的 READY 和 RUNNING 状态，它只能看到 RUNNABLE 状态（图源：<a href="https://howtodoinjava.com/" target="_blank" rel="noopener">HowToDoInJava</a>：<a href="https://howtodoinjava.com/java/multi-threading/java-thread-life-cycle-and-thread-states/" target="_blank" rel="noopener">Java Thread Life Cycle and Thread States</a>），所以 Java 系统一般将这两个状态统称为 <strong>RUNNABLE（运行中）</strong> 状态 。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/java-base-5.png" alt="图片.png"></p><p>当线程执行 wait()方法之后，线程进入 WAITING（等待）状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而 TIME_WAITING(超时等待) 状态相当于在等待状态的基础上增加了超时限制，比如通过 sleep（long millis）方法或 wait（long millis）方法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到 BLOCKED（阻塞） 状态。线程在执行 Runnable 的run()方法之后将会进入到 TERMINATED（终止） 状态。</p><h2 id="28-关于-final-关键字的一些总结"><a href="#28-关于-final-关键字的一些总结" class="headerlink" title="28.关于 final 关键字的一些总结"></a>28.关于 final 关键字的一些总结</h2><p>final 关键字主要用在三个地方：变量、方法、类。</p><ul><li>对于一个 final 变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</li><li>当用 final 修饰一个类时，表明这个类不能被继承。final 类中的所有成员方法都会被隐式地指定为 final 方法。</li><li>使用 final 方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的 Java 实现版本中，会将 final 方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的 Java 版本已经不需要使用 final 方法进行这些优化了）。类中所有的 private 方法都隐式地指定为 final。</li></ul><h2 id="29-Java-中的异常处理"><a href="#29-Java-中的异常处理" class="headerlink" title="29.Java 中的异常处理"></a>29.Java 中的异常处理</h2><h3 id="Java-异常类层次结构图"><a href="#Java-异常类层次结构图" class="headerlink" title="Java 异常类层次结构图"></a>Java 异常类层次结构图</h3><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/java-base-6.png" alt="图片.png"><br>在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable： 有两个重要的子类：Exception（异常） 和 Error（错误） ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p><p>Error（错误）:是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java 虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p><p>这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如 Java 虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java 中，错误通过 Error 的子类描述。</p><p>Exception（异常）:是程序本身可以处理的异常。Exception 类有一个重要的子类 RuntimeException。RuntimeException 异常由 Java 虚拟机抛出。NullPointerException（要访问的变量没有引用任何对象时，抛出该异常）、ArithmeticException（算术运算异常，一个整数除以 0 时，抛出该异常）和 ArrayIndexOutOfBoundsException （下标越界异常）。</p><p>注意：异常和错误的区别：异常能被程序本身处理，错误是无法处理。</p><h3 id="Throwable-类常用方法"><a href="#Throwable-类常用方法" class="headerlink" title="Throwable 类常用方法"></a>Throwable 类常用方法</h3><ul><li>public string getMessage():返回异常发生时的简要描述</li><li>public string toString():返回异常发生时的详细信息</li><li>public string getLocalizedMessage():返回异常对象的本地化信息。使用 Throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 getMessage（）返回的结果相同</li><li>public void printStackTrace():在控制台上打印 Throwable 对象封装的异常信息</li></ul><h3 id="异常处理总结"><a href="#异常处理总结" class="headerlink" title="异常处理总结"></a>异常处理总结</h3><ul><li>try 块： 用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。</li><li>catch 块： 用于处理 try 捕获到的异常。</li><li>finally 块： 无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。</li></ul><p><strong>在以下 4 种特殊情况下，finally 块不会被执行：</strong></p><ol><li>在 finally 语句块第一行发生了异常。 因为在其他行，finally 块还是会得到执行</li><li>在前面的代码中用了 System.exit(int)已退出程序。 exit 是带参函数 ；若该语句在异常语句之后，finally 会执行</li><li>程序所在的线程死亡。</li><li>关闭 CPU。</li></ol><p>下面这部分内容来自 issue:<a href="https://github.com/Snailclimb/JavaGuide/issues/190" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/issues/190</a>。</p><p><strong>注意：</strong> 当 try 语句和 finally 语句中都有 return 语句时，在方法返回之前，finally 语句的内容将被执行，并且 finally 语句的返回值将会覆盖原始的返回值。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static int f(int value) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        return value * value;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (value &#x3D;&#x3D; 2) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果调用 f(2)，返回值将是 0，因为 finally 语句的返回值覆盖了 try 语句块的返回值。</p><h2 id="30-java-序列化中如果有些字段不想进行序列化，怎么办？"><a href="#30-java-序列化中如果有些字段不想进行序列化，怎么办？" class="headerlink" title="30.java 序列化中如果有些字段不想进行序列化，怎么办？"></a>30.java 序列化中如果有些字段不想进行序列化，怎么办？</h2><p>对于不想进行序列化的变量，使用 transient 关键字修饰。</p><p>transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础知识汇总(二)</title>
      <link href="/2020/03/10/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB-%E4%BA%8C/"/>
      <url>/2020/03/10/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><h2 id="11-自动装箱与拆箱"><a href="#11-自动装箱与拆箱" class="headerlink" title="11.自动装箱与拆箱"></a>11.自动装箱与拆箱</h2><ul><li>装箱：将基本类型用它们对应的引用类型包装起来；</li><li>拆箱：将包装类型转换为基本数据类型；</li></ul><h2 id="12-在一个静态方法内调用一个非静态成员为什么是非法的"><a href="#12-在一个静态方法内调用一个非静态成员为什么是非法的" class="headerlink" title="12.在一个静态方法内调用一个非静态成员为什么是非法的?"></a>12.在一个静态方法内调用一个非静态成员为什么是非法的?</h2><p>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><h2 id="13-在-Java-中定义一个不做事且没有参数的构造方法的作用"><a href="#13-在-Java-中定义一个不做事且没有参数的构造方法的作用" class="headerlink" title="13.在 Java 中定义一个不做事且没有参数的构造方法的作用"></a>13.在 Java 中定义一个不做事且没有参数的构造方法的作用</h2><p>Java 程序在执行子类的构造方法之前，如果没有用 super()来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 super()来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。</p><h2 id="14-import-java-和-javax-有什么区别？"><a href="#14-import-java-和-javax-有什么区别？" class="headerlink" title="14.import java 和 javax 有什么区别？"></a>14.import java 和 javax 有什么区别？</h2><p>刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来使用。然而随着时间的推移，javax 逐渐地扩展成为 Java API 的组成部分。但是，将扩展从 javax 包移动到 java 包确实太麻烦了，最终会破坏一堆现有的代码。因此，最终决定 javax 包将成为标准 API 的一部分。</p><p>所以，实际上 java 和 javax 没有区别。这都是一个名字。</p><h2 id="15-接口和抽象类的区别是什么？"><a href="#15-接口和抽象类的区别是什么？" class="headerlink" title="15.接口和抽象类的区别是什么？"></a>15.接口和抽象类的区别是什么？</h2><ol><li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</li><li>接口中除了 static、final 变量，不能有其他变量，而抽象类中则不一定。</li><li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。</li><li>接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）。</li><li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li></ol><blockquote><p>备注：</p><ol><li>在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见 issue:<a href="https://github.com/Snailclimb/JavaGuide/issues/146" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/issues/146</a>。</li><li>jdk9 的接口被允许定义私有方法 。</li></ol></blockquote><p>总结一下 jdk7~jdk9 Java 中接口概念的变化（<a href="https://www.geeksforgeeks.org/private-methods-java-9-interfaces/" target="_blank" rel="noopener">相关阅读</a>）：</p><ol><li>在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。</li><li>jdk8 的时候接口可以有默认方法和静态方法功能。</li><li>Jdk 9 在接口中引入了私有方法和私有静态方法。</li></ol><h2 id="16-成员变量与局部变量的区别有哪些？"><a href="#16-成员变量与局部变量的区别有哪些？" class="headerlink" title="16.成员变量与局部变量的区别有哪些？"></a>16.成员变量与局部变量的区别有哪些？</h2><ul><li>从语法形式上看:成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li><li>从变量在内存中的存储方式来看:如果成员变量是使用static修饰的，那么这个成员变量是属于类的，如果没有使用static修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</li><li>从变量在内存中的生存时间上看:成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</li><li>成员变量如果没有被赋初值:则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</li></ul><h2 id="17-创建一个对象用什么运算符-对象实体与对象引用有何不同"><a href="#17-创建一个对象用什么运算符-对象实体与对象引用有何不同" class="headerlink" title="17.创建一个对象用什么运算符?对象实体与对象引用有何不同?"></a>17.创建一个对象用什么运算符?对象实体与对象引用有何不同?</h2><p>new 运算符，new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。</p><h2 id="18-什么是方法的返回值-返回值在类的方法里的作用是什么"><a href="#18-什么是方法的返回值-返回值在类的方法里的作用是什么" class="headerlink" title="18.什么是方法的返回值?返回值在类的方法里的作用是什么?"></a>18.什么是方法的返回值?返回值在类的方法里的作用是什么?</h2><p>方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用:接收出结果，使得它可以用于其他的操作！</p><h2 id="19-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么"><a href="#19-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么" class="headerlink" title="19.一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?"></a>19.一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?</h2><p>主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。</p><h2 id="20-构造方法有哪些特性？"><a href="#20-构造方法有哪些特性？" class="headerlink" title="20.构造方法有哪些特性？"></a>20.构造方法有哪些特性？</h2><ul><li>名字与类名相同。</li><li>没有返回值，但不能用 void 声明构造函数。</li><li>生成类的对象时自动执行，无需调用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础知识汇总(一)</title>
      <link href="/2020/03/09/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB-%E4%B8%80/"/>
      <url>/2020/03/09/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><h2 id="1-面向对象和面向过程的区别"><a href="#1-面向对象和面向过程的区别" class="headerlink" title="1. 面向对象和面向过程的区别"></a>1. 面向对象和面向过程的区别</h2><ul><li>面向过程 ：面向过程性能比面向对象高。 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发。但是，面向过程没有面向对象易维护、易复用、易扩展。</li><li>面向对象 ：面向对象易维护、易复用、易扩展。 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，面向对象性能比面向过程低。</li></ul><h2 id="2-关于-JVM-JDK-和-JRE-最详细通俗的解答"><a href="#2-关于-JVM-JDK-和-JRE-最详细通俗的解答" class="headerlink" title="2. 关于 JVM JDK 和 JRE 最详细通俗的解答"></a>2. 关于 JVM JDK 和 JRE 最详细通俗的解答</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><h3 id="什么是字节码-采用字节码的好处是什么"><a href="#什么是字节码-采用字节码的好处是什么" class="headerlink" title="什么是字节码?采用字节码的好处是什么?"></a>什么是字节码?采用字节码的好处是什么?</h3><p>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p><h3 id="Java-程序从源代码到运行一般有下面-3-步："><a href="#Java-程序从源代码到运行一般有下面-3-步：" class="headerlink" title="Java 程序从源代码到运行一般有下面 3 步："></a>Java 程序从源代码到运行一般有下面 3 步：</h3><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/java-base-1.png" alt="图片.png"><br>我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p><p>HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><h3 id="JDK-和-JRE"><a href="#JDK-和-JRE" class="headerlink" title="JDK 和 JRE"></a>JDK 和 JRE</h3><p>JDK 是 Java Development Kit，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p>JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。</p><p>如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p><h2 id="3-Oracle-JDK-和-OpenJDK-的对比"><a href="#3-Oracle-JDK-和-OpenJDK-的对比" class="headerlink" title="3.Oracle JDK 和 OpenJDK 的对比"></a>3.Oracle JDK 和 OpenJDK 的对比</h2><p>对于 Java 7，没什么关键的地方。OpenJDK 项目主要基于 Sun 捐赠的 HotSpot 源代码。此外，OpenJDK 被选为 Java 7 的参考实现，由 Oracle 工程师维护。关于 JVM，JDK，JRE 和 OpenJDK 之间的区别，Oracle 博客帖子在 2012 年有一个更详细的答案：</p><blockquote><p>问：OpenJDK 存储库中的源代码与用于构建 Oracle JDK 的代码之间有什么区别？<br>答：非常接近 - 我们的 Oracle JDK 版本构建过程基于 OpenJDK 7 构建，只添加了几个部分，例如部署代码，其中包括 Oracle 的 Java 插件和 Java WebStart 的实现，以及一些封闭的源代码派对组件，如图形光栅化器，一些开源的第三方组件，如 Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源 Oracle JDK 的所有部分，除了我们考虑商业功能的部分。</p></blockquote><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><ol><li>Oracle JDK 大概每 6 个月发一次主要版本，而 OpenJDK 版本大概每三个月发布一次。但这不是固定的，我觉得了解这个没啥用处。详情参见：<a href="https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence。" target="_blank" rel="noopener">https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence。</a></li><li>OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的；</li><li>Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择 Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；</li><li>在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；</li><li>Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li><li>Oracle JDK 根据二进制代码许可协议获得许可，而 OpenJDK 根据 GPL v2 许可获得许可。</li></ol><h2 id="4-什么是-Java-程序的主类-应用程序和小程序的主类有何不同"><a href="#4-什么是-Java-程序的主类-应用程序和小程序的主类有何不同" class="headerlink" title="4.什么是 Java 程序的主类 应用程序和小程序的主类有何不同?"></a>4.什么是 Java 程序的主类 应用程序和小程序的主类有何不同?</h2><p>一个程序中可以有多个类，但只能有一个类是主类。在 Java 应用程序中，这个主类是指包含 main（）方法的类。而在 Java 小程序中，这个主类是一个继承自系统类 JApplet 或 Applet 的子类。应用程序的主类不一定要求是 public 类，但小程序的主类要求必须是 public 类。主类是 Java 程序执行的入口点。</p><h2 id="5-Java-应用程序与小程序之间有哪些差别"><a href="#5-Java-应用程序与小程序之间有哪些差别" class="headerlink" title="5.Java 应用程序与小程序之间有哪些差别?"></a>5.Java 应用程序与小程序之间有哪些差别?</h2><p>简单说应用程序是从主线程启动(也就是 main() 方法)。applet 小程序没有 main() 方法，主要是嵌在浏览器页面上运行(调用init()或者run()来启动)，嵌入浏览器这点跟 flash 的小游戏类似。</p><h2 id="6-字符型常量和字符串常量的区别"><a href="#6-字符型常量和字符串常量的区别" class="headerlink" title="6.字符型常量和字符串常量的区别?"></a>6.字符型常量和字符串常量的区别?</h2><ul><li>形式上: 字符常量是单引号引起的一个字符; 字符串常量是双引号引起的若干个字符</li><li>含义上: 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)</li><li>占内存大小 字符常量只占 2 个字节; 字符串常量占若干个字节 (注意： char 在 Java 中占两个字节)<h2 id="7-构造器-Constructor-是否可被-override"><a href="#7-构造器-Constructor-是否可被-override" class="headerlink" title="7.构造器 Constructor 是否可被 override?"></a>7.构造器 Constructor 是否可被 override?</h2>Constructor 不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</li></ul><h2 id="8-重载和重写的区别"><a href="#8-重载和重写的区别" class="headerlink" title="8.重载和重写的区别"></a>8.重载和重写的区别</h2><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</p><p>下面是《Java 核心技术》对重载这个概念的介绍：<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/java-base-2.png" alt="图片.png"></p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写,发生在子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。另外，如果父类方法访问修饰符为 private 则子类就不能重写该方法。也就是说方法提供的行为改变，而方法的外貌并没有改变。</p><h2 id="9-Java-面向对象编程三大特性-封装-继承-多态"><a href="#9-Java-面向对象编程三大特性-封装-继承-多态" class="headerlink" title="9.Java 面向对象编程三大特性: 封装 继承 多态"></a>9.Java 面向对象编程三大特性: 封装 继承 多态</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p><p><strong>关于继承如下 3 点请记住：</strong></p><ol><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。（以后介绍）。</li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在 Java 中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><h2 id="10-String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#10-String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="10.String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?"></a>10.String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</h2><p><strong>可变性</strong><br>简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，<code>private final char value[]</code>，所以 String 对象是不可变的。</p><blockquote><p>补充（来自<a href="https://github.com/Snailclimb/JavaGuide/issues/675" target="_blank" rel="noopener">issue 675</a>）：在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 <code>private final byte[] value</code>;</p></blockquote><p>而 StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 final 关键字修饰，所以这两种对象都是可变的。</p><p>StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的，大家可以自行查阅源码。</p><p><code>AbstractStringBuilder.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">abstract class AbstractStringBuilder implements Appendable, CharSequence &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * The value is used for character storage.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    char[] value;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * The count is the number of characters used.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    int count;</span><br><span class="line"></span><br><span class="line">    AbstractStringBuilder(int capacity) &#123;</span><br><span class="line">        value &#x3D; new char[capacity];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>线程安全性</strong></p><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p><p><strong>性能</strong></p><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>对于三者使用的总结：</strong></p><ul><li>操作少量的数据: 适用 String</li><li>单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql之ONLY_FULL_GROUP_BY默认配置问题</title>
      <link href="/2020/03/08/Mysql%E4%B9%8BONLY-FULL-GROUP-BY%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/08/Mysql%E4%B9%8BONLY-FULL-GROUP-BY%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/sql.png" alt=""></p><a id="more"></a><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">### Cause: </span><br><span class="line">com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Expression #3 of SELECT list is </span><br><span class="line">not in GROUP BY clause and contains nonaggregated column &#39;fhshgl.ii.COMMODITYDETAILPRICE_ID&#39; </span><br><span class="line">which is not functionally dependent on columns in GROUP BY clause; </span><br><span class="line">this is incompatible with sql_mode&#x3D;only_full_group_by</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在把<code>MySQL</code>升级到<code>5.7</code>或者更高的版本，一些以前看上去不会出错的<code>group by</code> 操作在这个版本以后就会出现语法报错的情况：</p><p>在这个模式下，我们使用分组查询时，出现在<code>select</code>字段后面的只能是<code>group by</code>后面的分组字段，或使用聚合函数包裹着的字段。</p><p><code>Oracled</code>等数据库都不支持<code>select target list</code>中出现语义不明确的列，这样的语句在这些数据库中是会被报错的，所以从<code>MySQL 5.7</code>版本开始修正了这个语义，就是所说的<code>ONLY_FULL_GROUP_BY</code>语义。</p><p>因为有<code>only_full_group_by</code>，所以我们要在<code>MySQL</code>中正确的使用<code>group by</code>语句的话，只能是<code>select column1 from tb1 group by column1</code>(即只能展示group by的字段，其他均都要报1055的错)</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="暂时性关闭"><a href="#暂时性关闭" class="headerlink" title="暂时性关闭"></a>暂时性关闭</h3><p>可以通过<code>select @@sql_mode</code>查出<code>sql_mode</code>以后去掉<code>ONLY_FULL_GROUP_BY</code></p><p>查看当前连接会话的sql模式：<code>select @@session.sql_mode;</code><br>查看全局sql_mode设置：<code>select @@global.sql_mode;</code></p><p>设置全局sql_mode可以在不重启MySQL的情况下生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set @@global.sql_mode&#x3D;&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;;</span><br><span class="line"></span><br><span class="line">set @@SESSION.sql_mode&#x3D;&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;;</span><br></pre></td></tr></table></figure><h3 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h3><p> linux系统更改/etc/my.cnf文件，使用vi命令打开，如果有sql_mode=…的注释就把注释打开，如果没有就加上sql_mode=…（可以通过select @@sql_mode查出sql_mode以后去掉ONLY_FULL_GROUP_BY后复制过来）</p><p> windows下配置文件是安装目录下的my.ini文件，其余同上</p><h2 id="相关参数说明"><a href="#相关参数说明" class="headerlink" title="相关参数说明"></a>相关参数说明</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>ONLY_FULL_GROUP_BY</td><td>对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中</td></tr><tr><td>NO_AUTO_VALUE_ON_ZERO</td><td>该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户 希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。</td></tr><tr><td>STRICT_TRANS_TABLES</td><td>在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制。</td></tr><tr><td>NO_ZERO_IN_DATE</td><td>在严格模式下，不允许日期和月份为零</td></tr><tr><td>NO_ZERO_DATE</td><td>设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告。</td></tr><tr><td>ERROR_FOR_DIVISION_BY_ZERO</td><td>在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如 果未给出该模式，那么数据被零除时MySQL返回NULL</td></tr><tr><td>NO_AUTO_CREATE_USER</td><td>禁止GRANT创建密码为空的用户</td></tr><tr><td>NO_ENGINE_SUBSTITUTION</td><td>如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</td></tr><tr><td>PIPES_AS_CONCAT</td><td>将||视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似</td></tr><tr><td>ANSI_QUOTES</td><td>启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机是如何加载Java类的？</title>
      <link href="/2020/03/07/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BDJava%E7%B1%BB%E7%9A%84%EF%BC%9F/"/>
      <url>/2020/03/07/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BDJava%E7%B1%BB%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/jvm.jpg" alt=""></p><a id="more"></a><blockquote><p>Java 虚拟机中的类加载即从 class 文件到内存中的类，按先后顺序需要经过加载、链接以及初始化三大步骤。</p></blockquote><h2 id="虚拟机的加载对象是什么？"><a href="#虚拟机的加载对象是什么？" class="headerlink" title="虚拟机的加载对象是什么？"></a>虚拟机的加载对象是什么？</h2><p>上文中说过Java中有两种类型：基本类型和引用类型，而基本类型是由虚拟机预先定义好的，引用类型中的泛型参数又会在编译过程中被擦除，所以加载的对象就剩下类、接口和数组类。</p><p>在类、接口和数组类中，数组类是由 Java 虚拟机直接生成的，其他两种则有对应的字节流。无论是直接生成的数组类，还是加载的类，Java 虚拟机都需要对其进行链接和初始化。接下来，就详细介绍一下每个步骤具体都在干些什么。</p><h2 id="虚拟机的加载流程是什么？"><a href="#虚拟机的加载流程是什么？" class="headerlink" title="虚拟机的加载流程是什么？"></a>虚拟机的加载流程是什么？</h2><h3 id="1-加载"><a href="#1-加载" class="headerlink" title="1.加载"></a>1.加载</h3><p>是指查找字节流，并且据此创建类的过程。上面提过数组类是由Java虚拟机直接生成的，所以加载过程针对的是生成字节流的类与接口。如何找到这些字节流，则需要虚拟机借助类加载器。</p><p>启动类加载器是由 C++ 实现的，没有对应的 Java 对象，因此在 Java 中只能用 null 来指代。在 Java 9 之前，启动类加载器负责加载最为基础、最为重要的类，比如存放在 JRE 的 lib 目录下 jar 包中的类（以及由虚拟机参数 -Xbootclasspath 指定的类）。除了启动类加载器之外，另外两个重要的类加载器是扩展类加载器（extension class loader）和应用类加载器（application class loader），均由 Java 核心类库提供。故除了启动类加载器之外，其他的类加载器都是java.lang.ClassLoader 的子类，因此有对应的 Java 对象。</p><p>扩展类加载器的父类加载器是启动类加载器。它负责加载相对次要、但又通用的类，比如存放在 JRE 的 lib/ext 目录下 jar 包中的类（以及由系统变量 java.ext.dirs 指定的类）。</p><p>应用类加载器的父类加载器则是扩展类加载器。它负责加载应用程序路径下的类。（这里的应用程序路径，便是指虚拟机参数 -cp/-classpath、系统变量 java.class.path 或环境变量 CLASSPATH 所指定的路径。）默认情况下，应用程序中包含的类便是由应用类加载器加载的。</p><p>Java 9 引入了模块系统，并且略微更改了上述的类加载器1。扩展类加载器被改名为平台类加载器（platform class loader）。Java SE 中除了少数几个关键模块，比如说 java.base 是由启动类加载器加载之外，其他的模块均由平台类加载器所加载。当然还可以自定义类加载器哦。</p><p>除了加载功能之外，类加载器还提供了命名空间的作用，在 Java 虚拟机中，类的唯一性是由类加载器实例以及类的全名一同确定的。即便是同一串字节流，经由不同的类加载器加载，也会得到两个不同的类。在大型应用中，我们往往借助这一特性，来运行同一个类的不同版本。</p><h3 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h3><p>是指将创建成的类合并至 Java 虚拟机中，使之能够执行的过程。它可分为验证、准备以及解析三个阶段。</p><ul><li>验证阶段：确保被加载类能够满足 Java 虚拟机的约束条件。</li><li>准备阶段：为被加载类的静态字段分配内存，构造其他跟类层次相关的数据结构。</li><li>解析阶段：将符号引用解析成为实际引用（Java 虚拟机规范并没有要求在链接过程中完成解析。它仅规定了：如果某些字节码使用了符号引用，那么在执行这些字节码之前，需要完成对这些符号引用的解析）。</li></ul><p>符号引用则是在 class 文件被加载至 Java 虚拟机之前，类无法知道其他类及其方法、字段所对应的具体地址，甚至不知道自己方法、字段的地址。每当需要引用这些成员时，Java 编译器会生成一个符号引用。在运行阶段，这个符号引用一般都能够无歧义地定位到具体目标上。</p><h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h3><p>初始化即给常量赋值以及执行 &lt; clinit &gt; 方法的过程，完成之后，类才正式成为可执行的状态。</p><p>类初始化触发条件</p><ul><li><p>当虚拟机启动时，初始化用户指定的主类；</p></li><li><p>当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类；</p></li><li><p>当遇到调用静态方法的指令时，初始化该静态方法所在的类；</p></li><li><p>当遇到访问静态字段的指令时，初始化该静态字段所在的类；</p></li><li><p>子类的初始化会触发父类的初始化；</p></li><li><p>如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</p></li><li><p>使用反射 API 对某个类进行反射调用时，初始化这个类；</p></li><li><p>当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虚拟机加载Java类是Java 虚拟机将字节流转化为 Java 类的过程。这个过程可分为加载、链接以及初始化三大步骤。</p></li><li><p><code>加载</code>：是指查找字节流，并且据此创建类的过程。加载需要借助类加载器，在 Java 虚拟机中，类加载器使用了双亲委派模型，即接收到加载请求时，会先将请求转发给父类加载器。</p></li><li><p><code>链接</code>：是指将创建成的类合并至 Java 虚拟机中，使之能够执行的过程。链接还分验证、准备和解析三个阶段。其中，解析阶段为非必须的。</p></li><li><p><code>初始化</code>：是为标记为常量值的字段赋值，以及执行 &lt; clinit &gt; 方法的过程。类的初始化仅会被执行一次，这个特性被用来实现单例的延迟初始化。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将SpringBoot项目发布到Docker</title>
      <link href="/2020/03/06/%E5%B0%86SpringBoot%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E5%88%B0Docker/"/>
      <url>/2020/03/06/%E5%B0%86SpringBoot%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E5%88%B0Docker/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/springboot.jpg" alt=""></p><a id="more"></a><h3 id="1-创建springboot项目"><a href="#1-创建springboot项目" class="headerlink" title="1.创建springboot项目"></a>1.创建springboot项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.test.demo.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        return &quot;Hello, SpringBoot With Docker&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-将SpringBoot项目打jar包"><a href="#2-将SpringBoot项目打jar包" class="headerlink" title="2.将SpringBoot项目打jar包"></a>2.将SpringBoot项目打jar包</h3><p><code>pom.xml</code>增加<code>spring-boot-maven-plugin</code>插件</p><p>使用右侧<code>maven-Lifecycle-package</code>打jar包</p><p>使用<code>java -jar *-1.0.0.jar</code>测试可用</p><h3 id="3-编写Dockerfile文件"><a href="#3-编写Dockerfile文件" class="headerlink" title="3.编写Dockerfile文件"></a>3.编写Dockerfile文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 基础镜像使用java</span><br><span class="line">FROM java:8</span><br><span class="line"># VOLUME 指定了临时文件目录为&#x2F;tmp。</span><br><span class="line"># 其效果是在主机 &#x2F;var&#x2F;lib&#x2F;docker 目录下创建了一个临时文件，并链接到容器的&#x2F;tmp</span><br><span class="line">VOLUME &#x2F;tmp </span><br><span class="line"># 将jar包添加到容器中并更名为app.jar</span><br><span class="line">ADD demo-0.0.1-SNAPSHOT.jar app.jar </span><br><span class="line"># 运行jar包</span><br><span class="line">RUN bash -c &#39;touch &#x2F;app.jar&#39;</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;]</span><br></pre></td></tr></table></figure><p>解释下这个配置文件：</p><p>VOLUME 指定了临时文件目录为/tmp。其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp。改步骤是可选的，如果涉及到文件系统的应用就很有必要了。/tmp目录用来持久化到 Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录<br>项目的 jar 文件作为 “app.jar” 添加到容器的<br>ENTRYPOINT 执行项目 app.jar。为了缩短 Tomcat 启动时间，添加一个系统属性指向 “/dev/./urandom” 作为 Entropy Source</p><p>如果是第一次打包，它会自动下载java 8的镜像作为基础镜像，以后再制作镜像的时候就不会再下载了。</p><h3 id="4-将jar包拷贝到和Dockerfile同文件夹"><a href="#4-将jar包拷贝到和Dockerfile同文件夹" class="headerlink" title="4.将jar包拷贝到和Dockerfile同文件夹"></a>4.将jar包拷贝到和Dockerfile同文件夹</h3><p>在服务器新建一个docker文件夹，将maven打包好的jar包和Dockerfile文件复制到服务器的docker文件夹下</p><h3 id="5-制作镜像"><a href="#5-制作镜像" class="headerlink" title="5.制作镜像"></a>5.制作镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t springbootdemo4docker .</span><br></pre></td></tr></table></figure><h3 id="6-运行镜像"><a href="#6-运行镜像" class="headerlink" title="6.运行镜像"></a>6.运行镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:8088 --name springbootdemo4docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECharts地图省市联动</title>
      <link href="/2020/03/05/ECharts%E5%9C%B0%E5%9B%BE%E7%9C%81%E5%B8%82%E8%81%94%E5%8A%A8/"/>
      <url>/2020/03/05/ECharts%E5%9C%B0%E5%9B%BE%E7%9C%81%E5%B8%82%E8%81%94%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/chart.png" alt=""></p><a id="more"></a><blockquote><p>最近需要做一个省市联动的地图，来随时观看各地区的用户数量。</p></blockquote><p>记录实现代码。</p><p>主页面<code>china.html</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;EDGE&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #china-map &#123;</span><br><span class="line">            width: 1000px;</span><br><span class="line">            height: 1000px;</span><br><span class="line">            margin: auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #box &#123;</span><br><span class="line">            display: none;</span><br><span class="line">            background-color: goldenrod;</span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #box-title &#123;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;www.jq22.com&#x2F;jquery&#x2F;jquery-1.10.2.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;echarts&#x2F;4.2.0-rc.2&#x2F;echarts.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;.&#x2F;js&#x2F;map&#x2F;china.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;wrapper wrapper-content&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;back&quot;&gt;返回全国&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div id&#x3D;&quot;china-map&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var myChart &#x3D; echarts.init(document.getElementById(&#39;china-map&#39;));</span><br><span class="line">    var oBack &#x3D; document.getElementById(&quot;back&quot;);</span><br><span class="line"></span><br><span class="line">    var provinces &#x3D; [&#39;shanghai&#39;, &#39;hebei&#39;, &#39;shanxi&#39;, &#39;neimenggu&#39;, &#39;liaoning&#39;, &#39;jilin&#39;, &#39;heilongjiang&#39;, &#39;jiangsu&#39;, &#39;zhejiang&#39;, &#39;anhui&#39;, &#39;fujian&#39;, &#39;jiangxi&#39;, &#39;shandong&#39;, &#39;henan&#39;, &#39;hubei&#39;, &#39;hunan&#39;, &#39;guangdong&#39;, &#39;guangxi&#39;, &#39;hainan&#39;, &#39;sichuan&#39;, &#39;guizhou&#39;, &#39;yunnan&#39;, &#39;xizang&#39;, &#39;shanxi1&#39;, &#39;gansu&#39;, &#39;qinghai&#39;, &#39;ningxia&#39;, &#39;xinjiang&#39;, &#39;beijing&#39;, &#39;tianjin&#39;, &#39;chongqing&#39;, &#39;xianggang&#39;, &#39;aomen&#39;];</span><br><span class="line"></span><br><span class="line">    var provincesText &#x3D; [&#39;上海&#39;, &#39;河北&#39;, &#39;山西&#39;, &#39;内蒙古&#39;, &#39;辽宁&#39;, &#39;吉林&#39;, &#39;黑龙江&#39;, &#39;江苏&#39;, &#39;浙江&#39;, &#39;安徽&#39;, &#39;福建&#39;, &#39;江西&#39;, &#39;山东&#39;, &#39;河南&#39;, &#39;湖北&#39;, &#39;湖南&#39;, &#39;广东&#39;, &#39;广西&#39;, &#39;海南&#39;, &#39;四川&#39;, &#39;贵州&#39;, &#39;云南&#39;, &#39;西藏&#39;, &#39;陕西&#39;, &#39;甘肃&#39;, &#39;青海&#39;, &#39;宁夏&#39;, &#39;新疆&#39;, &#39;北京&#39;, &#39;天津&#39;, &#39;重庆&#39;, &#39;香港&#39;, &#39;澳门&#39;];</span><br><span class="line"></span><br><span class="line">    oBack.onclick &#x3D; function () &#123;</span><br><span class="line">        initEcharts(&quot;china&quot;, &quot;点亮中国&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    initEcharts(&quot;china&quot;, &quot;点亮中国&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 初始化echarts</span><br><span class="line">    function initEcharts(pName, Chinese_) &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: &quot;GET&quot;,</span><br><span class="line">            url: &quot;http:&#x2F;&#x2F;localhost:4000&#x2F;user&#x2F;userCount?searchName&#x3D;&quot;+pName,</span><br><span class="line">            success: function (res) &#123;</span><br><span class="line">                &#x2F;&#x2F; var seriesData &#x3D; res.data;</span><br><span class="line">                &#x2F;&#x2F; var tmpSeriesData &#x3D; pName &#x3D;&#x3D;&#x3D; &quot;china&quot; ? seriesData : [];</span><br><span class="line">                var tmpSeriesData &#x3D; res.data;</span><br><span class="line">                var option &#x3D; &#123;</span><br><span class="line">                    title: &#123;</span><br><span class="line">                        text: Chinese_ || pName,</span><br><span class="line">                        left: &#39;center&#39;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    toolbox: &#123;</span><br><span class="line">                        show: !0,</span><br><span class="line">                        orient: &quot;vertical&quot;,</span><br><span class="line">                        x: &quot;right&quot;,</span><br><span class="line">                        y: &quot;center&quot;,</span><br><span class="line">                        feature: &#123;</span><br><span class="line">                            mark: &#123;</span><br><span class="line">                                show: !0</span><br><span class="line">                            &#125;,</span><br><span class="line">                            dataView: &#123;</span><br><span class="line">                                show: !0,</span><br><span class="line">                                readOnly: !1</span><br><span class="line">                            &#125;,</span><br><span class="line">                            restore: &#123;</span><br><span class="line">                                show: !0</span><br><span class="line">                            &#125;,</span><br><span class="line">                            saveAsImage: &#123;</span><br><span class="line">                                show: !0</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    tooltip: &#123;</span><br><span class="line">                        trigger: &#39;item&#39;,</span><br><span class="line">                        formatter: &#39;&#123;b&#125;&lt;br&#x2F;&gt;&#123;c&#125; (人)&#39;,</span><br><span class="line">                        backgroundColor: &quot;#ff7f50&quot;,&#x2F;&#x2F;提示标签背景颜色</span><br><span class="line">                        textStyle: &#123;color: &quot;#fff&quot;&#125; &#x2F;&#x2F;提示标签字体颜色</span><br><span class="line">                    &#125;,</span><br><span class="line">                    series: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            name: Chinese_ || pName,</span><br><span class="line">                            type: &#39;map&#39;,</span><br><span class="line">                            mapType: pName,</span><br><span class="line">                            roam: false,&#x2F;&#x2F;是否开启鼠标缩放和平移漫游</span><br><span class="line">                            data: tmpSeriesData,</span><br><span class="line">                            top: &quot;3%&quot;,&#x2F;&#x2F;组件距离容器的距离</span><br><span class="line">                            zoom: 1.1,</span><br><span class="line">                            selectedMode: &#39;single&#39;,</span><br><span class="line"></span><br><span class="line">                            label: &#123;</span><br><span class="line">                                normal: &#123;</span><br><span class="line">                                    show: true,&#x2F;&#x2F;显示省份标签</span><br><span class="line">                                    textStyle: &#123;color: &quot;#fbfdfe&quot;&#125;&#x2F;&#x2F;省份标签字体颜色</span><br><span class="line">                                &#125;,</span><br><span class="line">                                emphasis: &#123;&#x2F;&#x2F;对应的鼠标悬浮效果</span><br><span class="line">                                    show: true,</span><br><span class="line">                                    textStyle: &#123;color: &quot;#323232&quot;&#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            itemStyle: &#123;</span><br><span class="line">                                normal: &#123;</span><br><span class="line">                                    borderWidth: .5,&#x2F;&#x2F;区域边框宽度</span><br><span class="line">                                    borderColor: &#39;#0550c3&#39;,&#x2F;&#x2F;区域边框颜色</span><br><span class="line">                                    areaColor: &quot;#4ea397&quot;,&#x2F;&#x2F;区域颜色</span><br><span class="line"></span><br><span class="line">                                &#125;,</span><br><span class="line">                                emphasis: &#123;</span><br><span class="line">                                    borderWidth: .5,</span><br><span class="line">                                    borderColor: &#39;#4b0082&#39;,</span><br><span class="line">                                    areaColor: &quot;#ece39e&quot;,</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                myChart.setOption(option);</span><br><span class="line"></span><br><span class="line">                myChart.off(&quot;click&quot;);</span><br><span class="line"></span><br><span class="line">                if (pName &#x3D;&#x3D;&#x3D; &quot;china&quot;) &#123; &#x2F;&#x2F; 全国时，添加click 进入省级</span><br><span class="line">                    myChart.on(&#39;click&#39;, function (param) &#123;</span><br><span class="line">                        console.log(param.name);</span><br><span class="line">                        &#x2F;&#x2F; 遍历取到provincesText 中的下标  去拿到对应的省js</span><br><span class="line">                        for (var i &#x3D; 0; i &lt; provincesText.length; i++) &#123;</span><br><span class="line">                            if (param.name &#x3D;&#x3D;&#x3D; provincesText[i]) &#123;</span><br><span class="line">                                &#x2F;&#x2F;显示对应省份的方法</span><br><span class="line">                                showProvince(provinces[i], provincesText[i]);</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (param.componentType &#x3D;&#x3D;&#x3D; &#39;series&#39;) &#123;</span><br><span class="line">                            var provinceName &#x3D; param.name;</span><br><span class="line">                            $(&#39;#box&#39;).css(&#39;display&#39;, &#39;block&#39;);</span><br><span class="line">                            $(&quot;#box-title&quot;).html(provinceName);</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; else &#123; &#x2F;&#x2F; 省份，添加双击 回退到全国</span><br><span class="line">                    myChart.on(&quot;dblclick&quot;, function () &#123;</span><br><span class="line">                        initEcharts(&quot;china&quot;, &quot;点亮中国&quot;);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 展示对应的省</span><br><span class="line">    function showProvince(pName, Chinese_) &#123;</span><br><span class="line">        &#x2F;&#x2F;这写省份的js都是通过在线构建工具生成的，保存在本地，需要时加载使用即可，最好不要一开始全部直接引入。</span><br><span class="line">        loadBdScript(&#39;$&#39; + pName + &#39;JS&#39;, &#39;.&#x2F;js&#x2F;map&#x2F;province&#x2F;&#39; + pName + &#39;.js&#39;, function () &#123;</span><br><span class="line">            initEcharts(Chinese_);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 加载对应的JS</span><br><span class="line">    function loadBdScript(scriptId, url, callback) &#123;</span><br><span class="line">        var script &#x3D; document.createElement(&quot;script&quot;);</span><br><span class="line">        script.type &#x3D; &quot;text&#x2F;javascript&quot;;</span><br><span class="line">        if (script.readyState) &#123;  &#x2F;&#x2F;IE</span><br><span class="line">            script.onreadystatechange &#x3D; function () &#123;</span><br><span class="line">                if (script.readyState &#x3D;&#x3D;&#x3D; &quot;loaded&quot; || script.readyState &#x3D;&#x3D;&#x3D; &quot;complete&quot;) &#123;</span><br><span class="line">                    script.onreadystatechange &#x3D; null;</span><br><span class="line">                    callback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; else &#123;  &#x2F;&#x2F; Others</span><br><span class="line">            script.onload &#x3D; function () &#123;</span><br><span class="line">                callback();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        script.src &#x3D; url;</span><br><span class="line">        script.id &#x3D; scriptId;</span><br><span class="line">        document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/echart-1.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/echart-2.png" alt=""></p><p>源码地址：<a href="https://github.com/coder-lida/chinamap.git" target="_blank" rel="noopener">https://github.com/coder-lida/chinamap.git</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM运行内存分类</title>
      <link href="/2020/03/04/JVM%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E5%88%86%E7%B1%BB/"/>
      <url>/2020/03/04/JVM%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/jvm.jpg" alt=""></p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/jvm-1.png" alt=""></p><h2 id="一、程序计数器"><a href="#一、程序计数器" class="headerlink" title="一、程序计数器"></a>一、程序计数器</h2><p>　　java线程私有的，类似于操作系统里的PC计数器，可以看做是当前线程所执行的字节码的行号指示器。</p><p>　　如果线程正在执行的是一个java方法，这个计数器记录的正在执行的虚拟机字节码指令的地址。</p><p>　　如果正在执行的是native方法，这个计数器值则为空。 undefined</p><p>　　此内存区域是唯一一个在java虚拟规范中没有规定任何OutOfMemoryError情况的区域</p><h2 id="二、虚拟机栈（栈内存）"><a href="#二、虚拟机栈（栈内存）" class="headerlink" title="二、虚拟机栈（栈内存）"></a>二、虚拟机栈（栈内存）</h2><p>　　java线程私有，虚拟机栈描述的是java方法执行的内存模型。</p><p>　　每个方法在执行的时候，都会创建一个栈帧用于存储局部变量、操作数、动态链接、方法出口等信息。</p><p>　　每个方法调用都意味着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><h2 id="三、本地方法栈"><a href="#三、本地方法栈" class="headerlink" title="三、本地方法栈"></a>三、本地方法栈</h2><p>　　和java虚拟机栈的作用类似。区别是该区域为JVM提供使用Native方法的服务。</p><h2 id="四、堆内存"><a href="#四、堆内存" class="headerlink" title="四、堆内存"></a>四、堆内存</h2><p>　　所有线程共享的一块区域，垃圾回收器管理的主要区域。</p><p>　　目前主要垃圾回收算法都是分代收集算法，所以java堆中还可以细分为：新生代和老年代，再细致一点的还有eden区，from survivor、to survivor，默认情况下是8：1：1的比例。</p><p>　　根据java虚拟机规范的规定，java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘一样。</p><h2 id="五、方法区"><a href="#五、方法区" class="headerlink" title="五、方法区"></a>五、方法区</h2><p>　　各个线程共享的一个区域，用于存储虚拟机加载的类信息，常量、静态变量，即时编译器编译后的代码等数据。</p><p>　　虽然虚拟机规范中把方法区描述成堆的一个逻辑部分，但是他却有一个别名叫Non-heap 非堆，目的是为了与java堆区分开来。</p><p>　　运行时常量池。是方法区的一部分，用于存放编译器生成的各种字面量和符号引用。　　</p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p> 　　direct memory，并不是虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域。在1.4中新加入的NIO类，引入了一种基于通道Channel与缓冲区Buffer的IO方式，它可以使用native函数库直接分配堆外内存，</p><p>然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在java堆和Nativa堆中来回复制数据。</p><p>　　本机直接内存的分配不会受到Java堆大小的限制，受到本机总内存的大小限制。配置虚拟机参数时，不要忽略直接内存，防止出现OOM异常。</p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>　　直接内存申请空间耗费更高的性能，当频繁申请到一定量时尤为明显。</p><p>　　直接内存IO 读写的性能要优于普通的堆内存，在多次读写操作的情况下差异明显。</p><h2 id="后续发展"><a href="#后续发展" class="headerlink" title="后续发展"></a>后续发展</h2><p>　  JDK7：</p><p>　　　　存储在永久代的部分数据转移到了JVM heap或者是Native heap中。</p><p>　　JDK8：</p><p>　　　　废弃了永久代PermGen，新增Metaspace元数据区</p><p>　　　　方法区在Metaspace中了。</p><p>　　　　MetaSpace大小默认没有限制，一般根据系统内存的大小，jvm会动态改变此值。</p><p>　　　　可以通过jvm参数配置：</p><p>　　　  -XX：MetaspaceSize 分配给类元数据空间(以字节计算)的初始大小。MetaspaceSize的值设置的太大会延长垃圾回收时间，垃圾回收过后，引起下一次垃圾回收的类元数据空间的大小可能会变大。</p><p>　　　　-XX:MaxMteaspaceSize：分配给类元数据空间的最大值，超过此值就会触发FullGC，此值默认没有限制，但应取决于系统内存的大小，JVM会动态改变此值。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费CDN：jsDelivr + Github</title>
      <link href="/2020/03/03/%E5%85%8D%E8%B4%B9CDN%EF%BC%9AjsDelivr-Github/"/>
      <url>/2020/03/03/%E5%85%8D%E8%B4%B9CDN%EF%BC%9AjsDelivr-Github/</url>
      
        <content type="html"><![CDATA[<p><img src="http://q6pznk9ej.bkt.clouddn.com/img%20%283%29.png" alt=""></p><a id="more"></a><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。</p><h3 id="1、新建Github仓库"><a href="#1、新建Github仓库" class="headerlink" title="1、新建Github仓库"></a>1、新建Github仓库</h3><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/cdn-1.png" alt="图片.png"></p><h3 id="2、克隆Github仓库到本地"><a href="#2、克隆Github仓库到本地" class="headerlink" title="2、克隆Github仓库到本地"></a>2、克隆Github仓库到本地</h3><p>在本地目录右键 Git Bash Here，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 一键复制的仓库地址</span><br></pre></td></tr></table></figure><h3 id="3、上传资源"><a href="#3、上传资源" class="headerlink" title="3、上传资源"></a>3、上传资源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# CDN&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="4、发布仓库"><a href="#4、发布仓库" class="headerlink" title="4、发布仓库"></a>4、发布仓库</h3><p>点击release发布<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/cdn-2.png" alt="图片.png"></p><p>自定义发布版本号</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/cdn-3.png" alt="图片.png"></p><h3 id="5、通过jsDelivr引用资源"><a href="#5、通过jsDelivr引用资源" class="headerlink" title="5、通过jsDelivr引用资源"></a>5、通过jsDelivr引用资源</h3><p>使用方法：<a href="https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</a></p><p>例如：<a href="https://cdn.jsdelivr.net/gh/coder-lida/CDN/css/style.css" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/coder-lida/CDN/css/style.css</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat 配置https证书</title>
      <link href="/2020/03/02/Tomcat-%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6/"/>
      <url>/2020/03/02/Tomcat-%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/tomcat.png" alt=""></p><a id="more"></a><blockquote><p>TTPS 是安全套接字层超文本传输协议，在http 的基础上加入了 SSL协议，需要使用证书来校验身份。 HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。其默认端口为：443。越来越多的网站使用了https，这里简介其相关配置。</p></blockquote><h2 id="一、使用jdk创建证书"><a href="#一、使用jdk创建证书" class="headerlink" title="一、使用jdk创建证书"></a>一、使用jdk创建证书</h2><h3 id="1、keytool的概念"><a href="#1、keytool的概念" class="headerlink" title="1、keytool的概念"></a>1、keytool的概念</h3><p>　keytool 是个密钥和证书管理工具。它使用户能够管理自己的公钥/私钥对及相关证书，用于（通过数字签名）自我认证（用户向别的用户/服务认证自己）或数据完整性以及认证服务。在JDK 1.4以后的版本中都包含了这一工具，它的位置为<code>%JAVA_HOME%\bin\keytool.exe</code>，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/tomcat-1.png" alt="keytool.png"></p><h3 id="2、keytool的用法"><a href="#2、keytool的用法" class="headerlink" title="2、keytool的用法"></a>2、keytool的用法</h3><p>这里在安装有 JDK 环境的情况下进行，利用 keytool 工具生成 tomcat 证书，可使用 –help 命令查看相关残数据说明，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 6.1.7601]</span><br><span class="line">版权所有 (c) 2009 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;keytool</span><br><span class="line">密钥和证书管理工具</span><br><span class="line"></span><br><span class="line">命令:</span><br><span class="line"></span><br><span class="line"> -certreq            生成证书请求</span><br><span class="line"> -changealias        更改条目的别名</span><br><span class="line"> -delete             删除条目</span><br><span class="line"> -exportcert         导出证书</span><br><span class="line"> -genkeypair         生成密钥对</span><br><span class="line"> -genseckey          生成密钥</span><br><span class="line"> -gencert            根据证书请求生成证书</span><br><span class="line"> -importcert         导入证书或证书链</span><br><span class="line"> -importpass         导入口令</span><br><span class="line"> -importkeystore     从其他密钥库导入一个或所有条目</span><br><span class="line"> -keypasswd          更改条目的密钥口令</span><br><span class="line"> -list               列出密钥库中的条目</span><br><span class="line"> -printcert          打印证书内容</span><br><span class="line"> -printcertreq       打印证书请求的内容</span><br><span class="line"> -printcrl           打印 CRL 文件的内容</span><br><span class="line"> -storepasswd        更改密钥库的存储口令</span><br><span class="line"></span><br><span class="line">使用 &quot;keytool -command_name -help&quot; 获取 command_name 的用法</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;keytool -genkeypair --help</span><br><span class="line">keytool -genkeypair [OPTION]...</span><br><span class="line"></span><br><span class="line">生成密钥对</span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line"></span><br><span class="line"> -alias &lt;alias&gt;                  要处理的条目的别名</span><br><span class="line"> -keyalg &lt;keyalg&gt;                密钥算法名称</span><br><span class="line"> -keysize &lt;keysize&gt;              密钥位大小</span><br><span class="line"> -sigalg &lt;sigalg&gt;                签名算法名称</span><br><span class="line"> -destalias &lt;destalias&gt;          目标别名</span><br><span class="line"> -dname &lt;dname&gt;                  唯一判别名</span><br><span class="line"> -startdate &lt;startdate&gt;          证书有效期开始日期&#x2F;时间</span><br><span class="line"> -ext &lt;value&gt;                    X.509 扩展</span><br><span class="line"> -validity &lt;valDays&gt;             有效天数</span><br><span class="line"> -keypass &lt;arg&gt;                  密钥口令</span><br><span class="line"> -keystore &lt;keystore&gt;            密钥库名称</span><br><span class="line"> -storepass &lt;arg&gt;                密钥库口令</span><br><span class="line"> -storetype &lt;storetype&gt;          密钥库类型</span><br><span class="line"> -providername &lt;providername&gt;    提供方名称</span><br><span class="line"> -providerclass &lt;providerclass&gt;  提供方类名</span><br><span class="line"> -providerarg &lt;arg&gt;              提供方参数</span><br><span class="line"> -providerpath &lt;pathlist&gt;        提供方类路径</span><br><span class="line"> -v                              详细输出</span><br><span class="line"> -protected                      通过受保护的机制的口令</span><br><span class="line"></span><br><span class="line">使用 &quot;keytool -help&quot; 获取所有可用命令</span><br></pre></td></tr></table></figure><h3 id="3、创建证书"><a href="#3、创建证书" class="headerlink" title="3、创建证书"></a>3、创建证书</h3><p>这里使用如下命令生成证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkeypair -alias &quot;tomcat&quot; -keyalg &quot;RSA&quot; -keystore &quot;E:\tomcat.keystore&quot;</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：<br>-genkeypair 表示生成密钥对;<br>-alias 表示别名，该别名是公开的;<br>-keyalg 表示密钥算法名称,本例中的采用通用的RAS加密算法;<br>-keystore 表示密钥库的路径及名称，不指定的话，默认在操作系统的用户目录下生成一个”.keystore”的文件</p></blockquote><p>然后安装提示输入，但需要注意的是 <code>名字</code>与<code>姓氏</code> 那个是填写<code>域名</code>的。 此外，尽量前后密码一致，避免后面出现密码错误的问题。密钥库的密码至少必须6个字符，可以是纯数字或者字母或者数字和字母的组合等等,其他的可以不填。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;keytool -genkeypair -alias &quot;tomcat&quot; -keyalg &quot;RSA&quot; -keysto</span><br><span class="line">re &quot;E:\tomcat.keystore&quot;</span><br><span class="line">输入密钥库口令:</span><br><span class="line">再次输入新口令:</span><br><span class="line">您的名字与姓氏是什么?</span><br><span class="line">  [Unknown]:  local.test.com</span><br><span class="line">您的组织单位名称是什么?</span><br><span class="line">  [Unknown]:</span><br><span class="line">您的组织名称是什么?</span><br><span class="line">  [Unknown]:</span><br><span class="line">您所在的城市或区域名称是什么?</span><br><span class="line">  [Unknown]:</span><br><span class="line">您所在的省&#x2F;市&#x2F;自治区名称是什么?</span><br><span class="line">  [Unknown]:</span><br><span class="line">该单位的双字母国家&#x2F;地区代码是什么?</span><br><span class="line">  [Unknown]:</span><br><span class="line">CN&#x3D;local.test.com, OU&#x3D;Unknown, O&#x3D;Unknown, L&#x3D;Unknown, ST&#x3D;Unknown, C&#x3D;Unknown是否正</span><br><span class="line">确?</span><br><span class="line">  [否]:  y</span><br><span class="line"></span><br><span class="line">输入 &lt;tomcat&gt; 的密钥口令</span><br><span class="line">        (如果和密钥库口令相同, 按回车):</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/tomcat-2.png" alt="keytool.png"></p><p>这里随便写了个域名，是一个不存在的二级域名，为了能够访问，需要在 C:\Windows\System32\drivers\etc 路径下的 hosts 文件添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1     local.test.com</span><br></pre></td></tr></table></figure><h2 id="二、tomcat-配置-https-证书"><a href="#二、tomcat-配置-https-证书" class="headerlink" title="二、tomcat 配置 https 证书"></a>二、tomcat 配置 https 证书</h2><p>通过上面的步骤，生成了密钥，修改tomcat配置文件：/conf/server.xml, 添加如下设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector </span><br><span class="line">     port&#x3D;&quot;443&quot; </span><br><span class="line">     protocol&#x3D;&quot;org.apache.coyote.http11.Http11Protocol&quot; </span><br><span class="line">     maxThreads&#x3D;&quot;150&quot; </span><br><span class="line">     SSLEnabled&#x3D;&quot;true&quot; </span><br><span class="line">     scheme&#x3D;&quot;https&quot; </span><br><span class="line">     secure&#x3D;&quot;true&quot; </span><br><span class="line">     clientAuth&#x3D;&quot;false&quot; </span><br><span class="line">     sslProtocol&#x3D;&quot;TLS&quot; </span><br><span class="line">     keystoreFile&#x3D;&quot;E:\tomcat.keystore&quot; </span><br><span class="line">     keystorePass&#x3D;&quot;test8544903&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>其中，keystoreFile 指明密钥位置，keystorePass 指明密钥密码。<br>在该配置文件中有 https的 Connector 配置，被注释掉了。https 默认端口为 443。<br>上面介绍了自己生成密钥配置https的方法，只适合本地测试.</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7 web 环境搭建</title>
      <link href="/2020/03/01/Centos-7-web-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/03/01/Centos-7-web-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/Jennifer-4.png" alt=""></p><a id="more"></a><h2 id="1、Xshell-5"><a href="#1、Xshell-5" class="headerlink" title="1、Xshell 5"></a>1、Xshell 5</h2><p>为了方便管理操作服务器，这里采用 <code>xshell 5</code> 来连接服务器，使用ssh证书，端口号 22，对于购买的与主机需要开放相应的端口。<br>如下是连接成功的提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[c:\~]$ open </span><br><span class="line">Connecting to 115.159.200.102:22... </span><br><span class="line">Connection established. </span><br><span class="line">To escape to local shell, press &#39;Ctrl+Alt+]&#39;. </span><br><span class="line">Last login: Sat Mar 10 18:37:31 2017 from 115.195.220.207 </span><br><span class="line">[root@imtianx ~]#</span><br></pre></td></tr></table></figure><p>其中 [root@imtianx ~]一句，rooot为登陆账号，imtianx 为主机名。<br>默认主机名一般很长，可以进行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 设置主机名为name</span><br><span class="line">hostnamectl set-hostname name   </span><br><span class="line"></span><br><span class="line"># 查看是否设置成功</span><br><span class="line">hostnamectl status  </span><br><span class="line"></span><br><span class="line"># 重启 </span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>重启后提示符才会变。</p><h2 id="2、JDK"><a href="#2、JDK" class="headerlink" title="2、JDK"></a>2、JDK</h2><p>安装jdk，这里采用 rpm 方式安装，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 下载jdk </span><br><span class="line">curl -O http:&#x2F;&#x2F;download.oracle.com&#x2F;otn-pub&#x2F;java&#x2F;jdk&#x2F;8u121-b13&#x2F;jdk-8u121-linux-x64.rpm </span><br><span class="line"># 使用 rpm 安装 </span><br><span class="line">rpm -ivh jdk-8u121-linux-x64.rpm</span><br></pre></td></tr></table></figure><p>然后 可以使用 <code>java -version</code> 、<code>javac</code> 查看是否安装成功。由于 rpm 的安装方式会把jdk安装到 <code>/usr/java/jdk1.8.0_121</code>下，通过三层；链接到 /usr/bin下，环境变量可以不用配置。<br>环境变量配置方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile   &#x2F;&#x2F;打开 profile</span><br></pre></td></tr></table></figure><p>添加下面的配置信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#set java environment </span><br><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_121 </span><br><span class="line">JRE_HOME&#x3D;$JAVA_HOME&#x2F;jre </span><br><span class="line">CLASS_PATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib </span><br><span class="line">PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin </span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br></pre></td></tr></table></figure><p>若需要立即生效，可执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 下载 Tomcat </span><br><span class="line">wget http:&#x2F;&#x2F;download.nextag.com&#x2F;apache&#x2F;tomcat&#x2F;tomcat-8&#x2F;v8.5.12&#x2F;bin&#x2F;apache-tomcat-8.5.12.zip </span><br><span class="line"></span><br><span class="line"># 解压,可使用 rm 移动位子 </span><br><span class="line">unzip apache-tomcat-8.5.12.zip </span><br><span class="line"></span><br><span class="line"># tomcat&#x2F;bin下执行，授予 .sh 文件执行权限 </span><br><span class="line">chomd +x *.sh </span><br><span class="line"></span><br><span class="line"># 启动服务，若无法启动 请看后文 使用 systemctl 命令 </span><br><span class="line">startup.sh</span><br></pre></td></tr></table></figure><p>由于防火墙的限制，需要开放相应的端口，这里选择 iptables 防火墙。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 安装 </span><br><span class="line">yum install iptables-services </span><br><span class="line"></span><br><span class="line">#配置防火墙 </span><br><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;iptables </span><br><span class="line"></span><br><span class="line"># 在 22端口号线面添加 如下端口，然后保存并退出 （：wq） </span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT </span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT </span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT </span><br><span class="line"></span><br><span class="line">#重启防火墙 </span><br><span class="line">systemctl restart iptables.service </span><br><span class="line"></span><br><span class="line">#查看 开放端口 </span><br><span class="line">iptables -L -n</span><br></pre></td></tr></table></figure><blockquote><p>注：这里必须要在 22端口号下面添加，不能添加到最后，为方便将tomcat端口配置为80，mysql 数据库端口为 3306，这里一并开放。<br>设置Tomcat 为服务，开机自启。<br>首先在 /usr/lib/systemd/system/ 目录下添加 tomcat.service 文件，内容如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[unit] </span><br><span class="line">Description&#x3D;Tomcat </span><br><span class="line">After&#x3D;syslog.target network.target remote-fs.target nss-lookup.target </span><br><span class="line"></span><br><span class="line">[Service] </span><br><span class="line">Type&#x3D;forking </span><br><span class="line">PIDFile&#x3D;&#x2F;home&#x2F;tomcat&#x2F;tomcat.pid </span><br><span class="line">ExecStart&#x3D;&#x2F;home&#x2F;tomcat&#x2F;bin&#x2F;startup.sh </span><br><span class="line">ExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPID </span><br><span class="line">ExecStop&#x3D;&#x2F;bin&#x2F;kill -s QUIT $MAINPID </span><br><span class="line">PrivateTmp&#x3D;true </span><br><span class="line"></span><br><span class="line">[Install] </span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>然后在 tomcat/bin/ 下添加 setenv.ssh文件，设置pid 及 java内存（可忽略）内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#add tomcat pid </span><br><span class="line">CATALINA_PID&#x3D;&quot;$CATALINA_BASE&#x2F;tomcat.pid&quot; </span><br><span class="line">#add java opts </span><br><span class="line">JAVA_OPTS&#x3D;&quot;-server -XX:PermSize&#x3D;256M -XX:MaxPermSize&#x3D;1024m -Xms512M -Xmx1024M -XX:MaxNewSize&#x3D; 256m&quot;</span><br></pre></td></tr></table></figure><p>最后使用 systemctl 相关命令，设置服务，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务，stop停止 </span><br><span class="line">systemctl start tomcat </span><br><span class="line"></span><br><span class="line"># 查看服务状态 </span><br><span class="line">systemctl status name </span><br><span class="line"></span><br><span class="line"># 设置开机自启，disable删除 </span><br><span class="line">systemctl enable tomcat </span><br><span class="line"></span><br><span class="line"># 重启服务 </span><br><span class="line">systemctl restart tomcat</span><br></pre></td></tr></table></figure><h2 id="4、Mysql（Mariadb）"><a href="#4、Mysql（Mariadb）" class="headerlink" title="4、Mysql（Mariadb）"></a>4、Mysql（Mariadb）</h2><p>这里选择了较为轻量级的 Mariadb 安装，与mysql类似。具体安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 安装 </span><br><span class="line">yum -y install mariadb mariadb-server </span><br><span class="line"></span><br><span class="line"># 启动 </span><br><span class="line">systemctl start mariadb </span><br><span class="line"></span><br><span class="line"># 设置开机启动 </span><br><span class="line">systemctl enable mariadb </span><br><span class="line"></span><br><span class="line"># 接着是对数据库的配置信息 </span><br><span class="line"># ... </span><br><span class="line"># 最后授予 权限 </span><br><span class="line">grant all privileges on *.* to root@&#39;%&#39; identified by &#39;password&#39;;</span><br></pre></td></tr></table></figure><p>对于设置编码之类的，更多 Mariadb 的安装配置，请 <a href="http://www.linuxidc.com/Linux/2016-03/128880.htm" target="_blank" rel="noopener">点击此处查看</a></p><p>此外，往往需要文件的上传下载，这里选择 <code>lrzsz</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">yum install lrzsz</span><br><span class="line"># 上传</span><br><span class="line">rz</span><br><span class="line"># 下载</span><br><span class="line">sz</span><br></pre></td></tr></table></figure><p>转载:<a href="http://imtianx.cn/2017/03/25/Centos%207%20web%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">http://imtianx.cn/2017/03/25/Centos%207%20web%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2020/02/29/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/29/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/git.png" alt=""></p><a id="more"></a><blockquote><p>相关资料：<br><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰教程链接</a><br><a href="https://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">Git远程操作详解</a><br><a href="https://blog.zengrong.net/post/1746.html" target="_blank" rel="noopener">Git查看、删除、重命名远程分支和tag</a></p></blockquote><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><p>日常使用git更新提交代码的一般流程是这样的：<br>    在对代码进行了一些修改之后，使用：<code>git add .</code>或<code>git add -A</code>(<code>git add --all</code>的缩写)将本地所有新增文件添加进版本库。<br>    使用：git commit -m 备注 将代码提交到本地版本库。（备注内容没有空格的话不需要加引号）<br>    使用：git pull 从服务器拉取代码，更新本地版本库。<br>    使用：git push 将本地版本库推送到服务器。</p><blockquote><ul><li><code>git add .</code> ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</li><li><code>git add -u</code> ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add –update的缩写）</li><li><code>git add -A</code> ：是上面两个功能的合集（git add –all的缩写）</li></ul></blockquote><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="创建并切换-branch"><a href="#创建并切换-branch" class="headerlink" title="创建并切换 branch"></a>创建并切换 branch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure><h3 id="仅仅切换-branch"><a href="#仅仅切换-branch" class="headerlink" title="仅仅切换 branch"></a>仅仅切换 branch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><h3 id="创建-tag"><a href="#创建-tag" class="headerlink" title="创建 tag"></a>创建 tag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag 标签名</span><br></pre></td></tr></table></figure><h3 id="创建-tag-并备注-备注信息加不加双引号都可以"><a href="#创建-tag-并备注-备注信息加不加双引号都可以" class="headerlink" title="创建 tag 并备注(备注信息加不加双引号都可以)"></a>创建 tag 并备注(备注信息加不加双引号都可以)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a 标签名 -m 备注信息</span><br></pre></td></tr></table></figure><h3 id="创建PGP-tag-并备注"><a href="#创建PGP-tag-并备注" class="headerlink" title="创建PGP tag 并备注"></a>创建PGP tag 并备注</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -s 标签名 -m 备注信息</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><h3 id="查看本地-branch-list"><a href="#查看本地-branch-list" class="headerlink" title="查看本地 branch list"></a>查看本地 branch list</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><h3 id="查看远程-branch-list"><a href="#查看远程-branch-list" class="headerlink" title="查看远程 branch list"></a>查看远程 branch list</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r 分支名</span><br></pre></td></tr></table></figure><h3 id="查看所有-branch-list"><a href="#查看所有-branch-list" class="headerlink" title="查看所有 branch list"></a>查看所有 branch list</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a 分支名</span><br></pre></td></tr></table></figure><h3 id="查看本地-tag"><a href="#查看本地-tag" class="headerlink" title="查看本地 tag"></a>查看本地 tag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="查看某个本地-tag-详情"><a href="#查看某个本地-tag-详情" class="headerlink" title="查看某个本地 tag 详情"></a>查看某个本地 tag 详情</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show 标签名</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除本地-branch-tag"><a href="#删除本地-branch-tag" class="headerlink" title="删除本地 branch / tag"></a>删除本地 branch / tag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名或标签名</span><br></pre></td></tr></table></figure><h3 id="删除所有未推送的本地-branch"><a href="#删除所有未推送的本地-branch" class="headerlink" title="删除所有未推送的本地 branch"></a>删除所有未推送的本地 branch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -p</span><br></pre></td></tr></table></figure><h3 id="仅仅删除某个远程-branch-tag"><a href="#仅仅删除某个远程-branch-tag" class="headerlink" title="仅仅删除某个远程 branch / tag"></a>仅仅删除某个远程 branch / tag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin :分支名或标签名</span><br><span class="line"># 或者</span><br><span class="line">git push origin --delete 分支名或标签名</span><br></pre></td></tr></table></figure><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><h3 id="推送某个-branch-tag"><a href="#推送某个-branch-tag" class="headerlink" title="推送某个 branch / tag"></a>推送某个 branch / tag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin 分支名或标签名</span><br></pre></td></tr></table></figure><h3 id="推送所有-branch"><a href="#推送所有-branch" class="headerlink" title="推送所有 branch"></a>推送所有 branch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --all origin</span><br></pre></td></tr></table></figure><h3 id="推送所有-tag"><a href="#推送所有-tag" class="headerlink" title="推送所有 tag"></a>推送所有 tag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>重命名本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m 旧分支名 新分支名</span><br></pre></td></tr></table></figure><p>重命名远程分支需要分三步操作</p><ul><li>删除远程分支</li><li>重命名本地分支</li><li>推送本地分支</li></ul><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><h3 id="soft-（默认）"><a href="#soft-（默认）" class="headerlink" title="soft （默认）"></a>soft （默认）</h3><p>只回滚到某个commit，本地代码不变 (不加–soft或–hard默认为–soft)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft 分支名或标签名</span><br></pre></td></tr></table></figure><h3 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h3><p>彻底回滚（commit和本地代码都回滚）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">彻底回滚（commit和本地代码都回滚）</span><br></pre></td></tr></table></figure><h2 id="下载、合并分支"><a href="#下载、合并分支" class="headerlink" title="下载、合并分支"></a>下载、合并分支</h2><p>合并某本地分支到当前分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure><p>合并某远程分支到当前分支 <code>直接合并，慎用</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin 远程分支名</span><br></pre></td></tr></table></figure><p>下载某个远程标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin tag 远程标签名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA 非对称加密原理</title>
      <link href="/2020/02/28/RSA-%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86/"/>
      <url>/2020/02/28/RSA-%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="RSA-加密原理"><a href="#RSA-加密原理" class="headerlink" title="RSA 加密原理"></a>RSA 加密原理</h2><table><thead><tr><th>步骤</th><th>说明</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>找出质数</td><td>P 、Q</td><td>-</td></tr><tr><td>2</td><td>计算公共模数</td><td>N = P * Q</td><td>-</td></tr><tr><td>3</td><td>欧拉函数</td><td>φ(N) = (P-1)(Q-1)</td><td>-</td></tr><tr><td>4</td><td>计算公钥E</td><td>1 &lt; E &lt; φ(N)</td><td>E的取值必须是整数E 和 φ(N) 必须是互质数</td></tr><tr><td>5</td><td>计算私钥D</td><td>E * D % φ(N) = 1</td><td>-</td></tr><tr><td>6</td><td>加密</td><td>C ＝ M E mod N</td><td>C：密文 M：明文</td></tr><tr><td>7</td><td>解密</td><td>M ＝C D mod N</td><td>C：密文 M：明文</td></tr></tbody></table><p>公钥＝(E , N)<br>私钥＝(D, N)</p><p>对外，我们只暴露公钥。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="1、找出质数-P-、Q"><a href="#1、找出质数-P-、Q" class="headerlink" title="1、找出质数 P 、Q"></a>1、找出质数 P 、Q</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P &#x3D; 3  </span><br><span class="line">Q &#x3D; 11</span><br></pre></td></tr></table></figure><h3 id="2、计算公共模数"><a href="#2、计算公共模数" class="headerlink" title="2、计算公共模数"></a>2、计算公共模数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">N &#x3D; P * Q &#x3D; 3 * 11 &#x3D; 33</span><br><span class="line">N &#x3D; 33</span><br></pre></td></tr></table></figure><h3 id="3、-欧拉函数"><a href="#3、-欧拉函数" class="headerlink" title="3、 欧拉函数"></a>3、 欧拉函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">φ(N) &#x3D; (P-1)(Q-1) &#x3D; 2 * 10 &#x3D; 20</span><br><span class="line">φ(N) &#x3D; 20</span><br></pre></td></tr></table></figure><h3 id="4、计算公钥E"><a href="#4、计算公钥E" class="headerlink" title="4、计算公钥E"></a>4、计算公钥E</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt; E &lt; φ(N)</span><br><span class="line">1 &lt;E &lt; 20</span><br></pre></td></tr></table></figure><p>E 的取值范围 {3, 7, 9, 11, 13, 17, 19}<br>E的取值必须是整数, E 和 φ(N) 必须是互质数<br>为了测试，我们取最小的值 E =3<br>3 和 φ(N) =20 互为质数，满足条件</p><h3 id="5、计算私钥D"><a href="#5、计算私钥D" class="headerlink" title="5、计算私钥D"></a>5、计算私钥D</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E * D % φ(N) &#x3D; 1</span><br><span class="line">3 * D  % 20 &#x3D; 1</span><br></pre></td></tr></table></figure><p>根据上面可计算出 D = 7</p><h3 id="6、公钥加密"><a href="#6、公钥加密" class="headerlink" title="6、公钥加密"></a>6、公钥加密</h3><p>我们这里为了演示，就加密一个比较小的数字 M = 2</p><blockquote><p>公式：C ＝ ME mod N</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M &#x3D; 2</span><br><span class="line">E &#x3D; 3</span><br><span class="line">N &#x3D; 33</span><br></pre></td></tr></table></figure><blockquote><p>C = 23 % 33 = 8</p></blockquote><p>明文 “2” 经过 RSA 加密后变成了密文 “8”</p><h3 id="7、私钥解密"><a href="#7、私钥解密" class="headerlink" title="7、私钥解密"></a>7、私钥解密</h3><blockquote><p>M ＝CD mod N</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C &#x3D; 8</span><br><span class="line">D &#x3D; 7</span><br><span class="line">N &#x3D; 33</span><br></pre></td></tr></table></figure><blockquote><p>M = 87 % 33<br>8 * 8 * 8 * 8 * 8 * 8 * 8=2097152<br>8 * 8 * 8 * 8 * 8 * 8 * 8 % 33 = 2</p></blockquote><p>密文 “8” 经过 RSA 解密后变成了明文 2。</p><h2 id="JDK-自带的-RSA-算法"><a href="#JDK-自带的-RSA-算法" class="headerlink" title="JDK 自带的 RSA 算法"></a>JDK 自带的 RSA 算法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">import java.security.KeyFactory;</span><br><span class="line">import java.security.KeyPair;</span><br><span class="line">import java.security.KeyPairGenerator;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.security.PrivateKey;</span><br><span class="line">import java.security.PublicKey;</span><br><span class="line">import java.security.interfaces.RSAPrivateKey;</span><br><span class="line">import java.security.interfaces.RSAPublicKey;</span><br><span class="line">import java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line">import java.security.spec.X509EncodedKeySpec;</span><br><span class="line"></span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 非对称加密 唯一广泛接受并实现 数据加密&amp;数字签名 公钥加密、私钥解密 私钥加密、公钥解密</span><br><span class="line"> * </span><br><span class="line"> * @author jjs</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class RSADemo &#123;</span><br><span class="line"></span><br><span class="line">    private static String src &#x3D; &quot;infcn&quot;;</span><br><span class="line"></span><br><span class="line">    private static RSAPublicKey rsaPublicKey;</span><br><span class="line">    private static RSAPrivateKey rsaPrivateKey;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        &#x2F;&#x2F; 1、初始化密钥</span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        try &#123;</span><br><span class="line">            keyPairGenerator &#x3D; KeyPairGenerator.getInstance(&quot;RSA&quot;);</span><br><span class="line">            keyPairGenerator.initialize(512);&#x2F;&#x2F; 64的整倍数</span><br><span class="line">            KeyPair keyPair &#x3D; keyPairGenerator.generateKeyPair();</span><br><span class="line">            rsaPublicKey &#x3D; (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">            rsaPrivateKey &#x3D; (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">            System.out.println(&quot;Public Key : &quot; + Base64.encodeBase64String(rsaPublicKey.getEncoded()));</span><br><span class="line">            System.out.println(&quot;Private Key : &quot; + Base64.encodeBase64String(rsaPrivateKey.getEncoded()));</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 公钥加密，私钥解密</span><br><span class="line">     * @author jijs</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static void pubEn2PriDe() &#123;</span><br><span class="line">        &#x2F;&#x2F;公钥加密</span><br><span class="line">        X509EncodedKeySpec x509EncodedKeySpec &#x3D; new X509EncodedKeySpec(rsaPublicKey.getEncoded());</span><br><span class="line">        KeyFactory keyFactory &#x3D; KeyFactory.getInstance(&quot;RSA&quot;);</span><br><span class="line">        PublicKey publicKey &#x3D; keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class="line">        Cipher cipher &#x3D; Cipher.getInstance(&quot;RSA&quot;);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">        byte[] result &#x3D; cipher.doFinal(src.getBytes());</span><br><span class="line">        System.out.println(&quot;公钥加密，私钥解密 --加密: &quot; + Base64.encodeBase64String(result));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;私钥解密</span><br><span class="line">        PKCS8EncodedKeySpec pkcs8EncodedKeySpec &#x3D; new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());</span><br><span class="line">        keyFactory &#x3D; KeyFactory.getInstance(&quot;RSA&quot;);</span><br><span class="line">        PrivateKey privateKey &#x3D; keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class="line">        cipher &#x3D; Cipher.getInstance(&quot;RSA&quot;);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">        result &#x3D; cipher.doFinal(result);</span><br><span class="line">        System.out.println(&quot;公钥加密，私钥解密 --解密: &quot; + new String(result));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 私钥加密，公钥解密</span><br><span class="line">     * @author jijs</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static void priEn2PubDe() &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;私钥加密</span><br><span class="line">        PKCS8EncodedKeySpec pkcs8EncodedKeySpec &#x3D; new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());</span><br><span class="line">        KeyFactory keyFactory &#x3D; KeyFactory.getInstance(&quot;RSA&quot;);</span><br><span class="line">        PrivateKey privateKey &#x3D; keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class="line">        Cipher cipher &#x3D; Cipher.getInstance(&quot;RSA&quot;);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class="line">        byte[] result &#x3D; cipher.doFinal(src.getBytes());</span><br><span class="line">        System.out.println(&quot;私钥加密，公钥解密 --加密 : &quot; + Base64.encodeBase64String(result));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;公钥解密</span><br><span class="line">        X509EncodedKeySpec x509EncodedKeySpec &#x3D; new X509EncodedKeySpec(rsaPublicKey.getEncoded());</span><br><span class="line">        keyFactory &#x3D; KeyFactory.getInstance(&quot;RSA&quot;);</span><br><span class="line">        PublicKey publicKey &#x3D; keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class="line">        cipher &#x3D; Cipher.getInstance(&quot;RSA&quot;);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class="line">        result &#x3D; cipher.doFinal(result);</span><br><span class="line">        System.out.println(&quot;私钥加密，公钥解密   --解密: &quot; + new String(result));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        pubEn2PriDe();  &#x2F;&#x2F;公钥加密，私钥解密</span><br><span class="line">        priEn2PubDe();  &#x2F;&#x2F;私钥加密，公钥解密</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 413错误解决方法</title>
      <link href="/2020/02/27/HTTP-413%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/02/27/HTTP-413%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>这是由于上传文件过大引起的。</p><h2 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h2><p>如果是springmvc的框架，用mutipartFile上传的文件，先检查配置文件中的最大上传文件胆小。<br><code>spring-mvc.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 上传文件拦截，设置最大上传文件大小   10M&#x3D;10*1024*1024(B)&#x3D;10485760 bytes 和编码，如果这里设置过小会导致图片可能无法上传--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;multipartResolver&quot; class&#x3D;&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;maxUploadSize&quot; value&#x3D;&quot;10485760&quot; &#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;defaultEncoding&quot; value&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>查看上传的文件是否超出了最大限制，根据自己的情况进行修改。</p><h2 id="如果服务器使用了nginx做反向代理。"><a href="#如果服务器使用了nginx做反向代理。" class="headerlink" title="如果服务器使用了nginx做反向代理。"></a>如果服务器使用了nginx做反向代理。</h2><p>检查Nginx的文件上传大小的配置。<br>方法：<br>修改nginx配置文件，配置客户端请求大小和缓存大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br></pre></td></tr></table></figure><p>在http{}中输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client_max_body_size 8M;(配置请求体缓存区大小) </span><br><span class="line"> client_body_buffer_size 128k;(设置客户端请求体最大值)</span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd sbin</span><br><span class="line">.&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式</title>
      <link href="/2020/02/26/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/02/26/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在 Java 8 以前，若我们想要把某些功能传递给某些方法，总要去写匿名类。以前注册事件监听器的写法与下面的示例代码就很像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">manager.addScheduleListener(new ScheduleListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onSchedule(ScheduleEvent e) &#123;        </span><br><span class="line">        &#x2F;&#x2F; Event listener implementation goes here...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里我们添加了一些自定义代码到 Schedule 监听器中，需要先定义匿名内部类，然后传递一些功能到 <code>onSchedule</code> 方法中。</p><p>正是 Java 在作为参数传递普通方法或功能的限制，Java 8 增加了一个全新语言级别的功能，称为 <code>Lambda</code> 表达式。</p><h2 id="为什么-Java-需要-Lambda-表达式"><a href="#为什么-Java-需要-Lambda-表达式" class="headerlink" title="为什么 Java 需要 Lambda 表达式"></a>为什么 Java 需要 Lambda 表达式</h2><p>Java 是<code>面向对象</code>语言，除了原始数据类型之处，Java 中的所有内容都是一个对象。而在<code>函数式</code>语言中，我们只需要给函数分配变量，并将这个函数作为参数传递给其它函数就可实现特定的功能。JavaScript 就是功能编程语言的典范（闭包）。</p><p>Lambda 表达式的加入，使得 Java 拥有了函数式编程的能力。在其它语言中，Lambda 表达式的类型是一个函数；但在 Java 中，Lambda 表达式被表示为对象，因此它们必须绑定到被称为<code>功能接口</code>的特定对象类型。</p><h2 id="Lambda-表达式简介"><a href="#Lambda-表达式简介" class="headerlink" title="Lambda 表达式简介"></a>Lambda 表达式简介</h2><p>Lambda 表达式是一个匿名函数（对于 Java 而言并不很准确，但这里我们不纠结这个问题）。简单来说，这是一种没有声明的方法，即没有访问修饰符，返回值声明和名称。</p><p>在仅使用一次方法的地方特别有用，方法定义很短。它为我们节省了，如包含类声明和编写单独方法的工作。</p><p>Java 中的 Lambda 表达式通常使用语法是 <code>(argument) -&gt; (body)</code>，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(arg1, arg2...) -&gt; &#123; body &#125;</span><br><span class="line"></span><br><span class="line">(type1 arg1, type2 arg2...) -&gt; &#123; body &#125;</span><br></pre></td></tr></table></figure><p>以下是 Lambda 表达式的一些示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(int a, int b) -&gt; &#123;  return a + b; &#125;</span><br><span class="line"></span><br><span class="line">() -&gt; System.out.println(&quot;Hello World&quot;);</span><br><span class="line"></span><br><span class="line">(String s) -&gt; &#123; System.out.println(s); &#125;</span><br><span class="line"></span><br><span class="line">() -&gt; 42</span><br><span class="line"></span><br><span class="line">() -&gt; &#123; return 3.1415 &#125;;</span><br></pre></td></tr></table></figure><h3 id="Lambda-表达式的结构"><a href="#Lambda-表达式的结构" class="headerlink" title="Lambda 表达式的结构"></a>Lambda 表达式的结构</h3><ul><li>Lambda 表达式可以具有零个，一个或多个参数。</li><li>可以显式声明参数的类型，也可以由编译器自动从上下文推断参数的类型。例如<code>(int a)</code> 与刚才相同 <code>(a)</code>。</li><li>参数用小括号括起来，用逗号分隔。例如 <code>(a, b)</code> 或 <code>(int a, int b)</code> 或 <code>(String a, int b, float c)</code>。</li><li>空括号用于表示一组空的参数。例如 <code>() -&gt; 42</code>。</li><li>当有且仅有一个参数时，如果不显式指明类型，则不必使用小括号。例如 <code>a -&gt; return a*a</code>。</li><li>Lambda 表达式的正文可以包含零条，一条或多条语句。</li><li>如果 Lambda 表达式的正文只有一条语句，则大括号可不用写，且表达式的返回值类型要与匿名函数的返回类型相同。</li><li>如果 Lambda 表达式的正文有一条以上的语句必须包含在大括号（代码块）中，且表达式的返回值类型要与匿名函数的返回类型相同。<h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3>#####从 Lambda 表达式到双冒号操作符<br>使用 Lambda 表达式，我们已经看到代码可以变得非常简洁。</li></ul><p>例如，要创建一个比较器，以下语法就足够了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator c &#x3D; (Person p1, Person p2) -&gt; p1.getAge().compareTo(p2.getAge());</span><br></pre></td></tr></table></figure><p>然后，使用类型推断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator c &#x3D; (p1, p2) -&gt; p1.getAge().compareTo(p2.getAge());</span><br></pre></td></tr></table></figure><p>但是，我们可以使上面的代码更具表现力和可读性吗？我们来看一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator c &#x3D; Comparator.comparing(Person::getAge);</span><br></pre></td></tr></table></figure><p>使用 :: 运算符作为 Lambda 调用特定方法的缩写，并且拥有更好的可读性。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>双冒号（<code>::</code>）操作符是 Java 中的<code>方法引用</code>。当们使用一个方法的引用时，目标引用放在<code>::</code>之前，目标引用提供的方法名称放在<code>::</code>之后，即 <code>目标引用::方法</code>。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person::getAge;</span><br></pre></td></tr></table></figure><p>在 <code>Person</code> 类中定义的方法 <code>getAge</code> 的方法引用。</p><p>然后我们可以使用 <code>Function</code> 对象进行操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取 getAge 方法的 Function 对象</span><br><span class="line">Function&lt;Person, Integer&gt; getAge &#x3D; Person::getAge;</span><br><span class="line">&#x2F;&#x2F; 传参数调用 getAge 方法</span><br><span class="line">Integer age &#x3D; getAge.apply(p);</span><br></pre></td></tr></table></figure><p>我们引用 <code>getAge</code>，然后将其应用于正确的参数。</p><p>目标引用的参数类型是 <code>Function&lt;T,R&gt;，T</code> 表示传入类型，R 表示返回类型。比如，表达式<code>person -&gt; person.getAge();</code>，传入参数是<code>person</code>，返回值是 <code>person.getAge()</code>，那么方法引用 <code>Person::getAge</code> 就对应着 <code>Function&lt;Person,Integer&gt;</code> 类型。</p><h3 id="什么是功能接口（Functional-interface）"><a href="#什么是功能接口（Functional-interface）" class="headerlink" title="什么是功能接口（Functional interface）"></a>什么是功能接口（Functional interface）</h3><p>在 Java 中，功能接口（Functional interface）指<code>只有一个</code>抽象方法的接口。</p><p><code>java.lang.Runnable</code> 是一个功能接口，在 <code>Runnable</code> 中只有一个方法的声明 <code>void run()</code>。我们使用匿名内部类实例化功能接口的对象，而使用 <code>Lambda</code> 表达式，可以简化写法。</p><p>每个 <code>Lambda</code> 表达式都可以隐式地分配给功能接口。例如，我们可以从 <code>Lambda</code> 表达式创建 <code>Runnable</code> 接口的引用，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runnable r &#x3D; () -&gt; System.out.println(&quot;hello world&quot;);</span><br></pre></td></tr></table></figure><p>当我们不指定功能接口时，这种类型的转换会被编译器自动处理。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Thread(</span><br><span class="line">    () -&gt; System.out.println(&quot;hello world&quot;)</span><br><span class="line">).start();</span><br></pre></td></tr></table></figure><p>在上面的代码中，编译器会自动推断，<code>Lambda</code> 表达式可以从 <code>Thread</code>类的构造函数签名<code>（public Thread(Runnable r) { }）</code>转换为 <code>Runnable</code> 接口。</p><p><code>@FunctionalInterface</code> 是在 <code>Java 8</code> 中添加的一个新注解，用于指示接口类型，声明接口为 Java 语言规范定义的功能接口。Java 8 还声明了 <code>Lambda</code> 表达式可以使用的功能接口的数量。当您注释的接口不是有效的功能接口时， <code>@FunctionalInterface</code>会产生编译器级错误。</p><p>以下是自定义功能接口的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.wuxianjiezh.demo.lambda;</span><br><span class="line"></span><br><span class="line">@FunctionalInterface</span><br><span class="line">public interface WorkerInterface &#123;</span><br><span class="line"></span><br><span class="line">    public void doSomeWork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如其定义所述，功能接口只能有一个抽象方法。如果我们尝试在其中添加一个抽象方法，则会抛出编译时错误。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.wuxianjiezh.demo.lambda;</span><br><span class="line"></span><br><span class="line">@FunctionalInterface</span><br><span class="line">public interface WorkerInterface &#123;</span><br><span class="line"></span><br><span class="line">    public void doWork();</span><br><span class="line">    public void doMoreWork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error:(3, 1) java: 意外的 @FunctionalInterface 注释</span><br><span class="line">  com.wuxianjiezh.demo.lambda.WorkerInterface 不是函数接口</span><br><span class="line">    在 接口 com.wuxianjiezh.demo.lambda.WorkerInterface 中找到多个非覆盖抽象方法</span><br></pre></td></tr></table></figure><p>一旦定义了功能接口，我们就可以利用 Lambda 表达式调用。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.wuxianjiezh.demo.lambda;</span><br><span class="line"></span><br><span class="line">@FunctionalInterface</span><br><span class="line">public interface WorkerInterface &#123;</span><br><span class="line"></span><br><span class="line">    public void doWork();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class WorkTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 通过匿名内部类调用</span><br><span class="line">        WorkerInterface work &#x3D; new WorkerInterface() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void doWork() &#123;</span><br><span class="line">                System.out.println(&quot;通过匿名内部类调用&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        work.doWork();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 通过 Lambda 表达式调用</span><br><span class="line">        &#x2F;&#x2F; Lambda 表达式实际上是一个对象。</span><br><span class="line">        &#x2F;&#x2F; 我们可以将 Lambda 表达式赋值给一个变量，就可像其它对象一样调用。</span><br><span class="line">        work &#x3D; ()-&gt; System.out.println(&quot;通过 Lambda 表达式调用&quot;);</span><br><span class="line">        work.doWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过匿名内部类调用</span><br><span class="line">通过 Lambda 表达式调用</span><br></pre></td></tr></table></figure><h2 id="Lambda-表达式的例子"><a href="#Lambda-表达式的例子" class="headerlink" title="Lambda 表达式的例子"></a>Lambda 表达式的例子</h2><h3 id="线程初始化"><a href="#线程初始化" class="headerlink" title="线程初始化"></a>线程初始化</h3><p>线程可以初始化如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Old way</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;Hello world&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; New way</span><br><span class="line">new Thread(</span><br><span class="line">    () -&gt; System.out.println(&quot;Hello world&quot;)</span><br><span class="line">).start();</span><br></pre></td></tr></table></figure><p>我们在使用IDEA的时候，如果写出Old way的代码，IDEA会提示我们将其转换为Lambda表达式的形式，为IDEA点赞！<br><img src="http://q6rnahf7l.bkt.clouddn.com/lamda-idea.jpg" alt="IDEA自动检测并提示转换为Lambda表达式形式.jpg"></p><p>我们将光标移动到灰色代码区域(new Runnable这里)，使用快捷键alt+Enter就可以实现自动转换了。<br><img src="http://q6rnahf7l.bkt.clouddn.com/alt-enter.jpg" alt="自动转换为Lambda表达式.jpg"></p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>事件处理可以用 Java 8 使用<code>Lambda</code>表达式来完成。以下代码显示了将 <code>ActionListener</code> 添加到 UI 组件的新旧方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Old way</span><br><span class="line">button.addActionListener(new ActionListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void actionPerformed(ActionEvent e) &#123;</span><br><span class="line">        System.out.println(&quot;Hello world&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; New way</span><br><span class="line">button.addActionListener( (e) -&gt; &#123;</span><br><span class="line">        System.out.println(&quot;Hello world&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="遍例输出（方法引用）"><a href="#遍例输出（方法引用）" class="headerlink" title="遍例输出（方法引用）"></a>遍例输出（方法引用）</h3><p>输出给定数组的所有元素的简单代码。请注意，还有一种使用 Lambda 表达式的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; old way</span><br><span class="line">List&lt;Integer&gt; list &#x3D; Arrays.asList(1, 2, 3, 4, 5, 6, 7);</span><br><span class="line">for (Integer n : list) &#123;</span><br><span class="line">    System.out.println(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用 -&gt; 的 Lambda 表达式</span><br><span class="line">list.forEach(n -&gt; System.out.println(n));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用 :: 的 Lambda 表达式</span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>这里顺便补充一下<code>Arrays.asList()</code>方法。<code>Arrays.asList()</code>将数组转换为集合后,底层其实还是数组，《阿里巴巴》Java 开发使用手册对于这个方法有如下描述：<br><img src="http://q6rnahf7l.bkt.clouddn.com/alibaba.jpg" alt="图片.jpg"></p><p>如何正确的将数组转换为ArrayList？可以像下面这样(参见：stackoverflow- <a href="https://dwz.cn/vcBkTiTW" target="_blank" rel="noopener">https://dwz.cn/vcBkTiTW</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list &#x3D; new ArrayList&lt;&gt;(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</span><br></pre></td></tr></table></figure><h3 id="逻辑操作"><a href="#逻辑操作" class="headerlink" title="逻辑操作"></a>逻辑操作</h3><p>输出通过逻辑判断的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.wuxianjiezh.demo.lambda;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;Integer&gt; list &#x3D; Arrays.asList(1, 2, 3, 4, 5, 6, 7);</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;输出所有数字：&quot;);</span><br><span class="line">        evaluate(list, (n) -&gt; true);</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;不输出：&quot;);</span><br><span class="line">        evaluate(list, (n) -&gt; false);</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;输出偶数：&quot;);</span><br><span class="line">        evaluate(list, (n) -&gt; n % 2 &#x3D;&#x3D; 0);</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;输出奇数：&quot;);</span><br><span class="line">        evaluate(list, (n) -&gt; n % 2 &#x3D;&#x3D; 1);</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;输出大于 5 的数字：&quot;);</span><br><span class="line">        evaluate(list, (n) -&gt; n &gt; 5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void evaluate(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate) &#123;</span><br><span class="line">        for (Integer n : list) &#123;</span><br><span class="line">            if (predicate.test(n)) &#123;</span><br><span class="line">                System.out.print(n + &quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出所有数字：1 2 3 4 5 6 7</span><br><span class="line">不输出：</span><br><span class="line">输出偶数：2 4 6</span><br><span class="line">输出奇数：1 3 5 7</span><br><span class="line">输出大于 5 的数字：6 7</span><br></pre></td></tr></table></figure><h3 id="Stream-API-示例"><a href="#Stream-API-示例" class="headerlink" title="Stream API 示例"></a>Stream API 示例</h3><p><code>java.util.stream.Stream</code>接口 和 <code>Lambda</code> 表达式一样，都是 <code>Java 8</code> 新引入的。所有 <code>Stream</code> 的操作必须以 <code>Lambda</code> 表达式为参数。<code>Stream</code> 接口中带有大量有用的方法，比如 <code>map()</code>的作用就是将 <code>input Stream</code> 的每个元素，映射成<code>output Stream</code> 的另外一个元素。</p><p>下面的例子，我们将 <code>Lambda</code> 表达式 <code>x -&gt; x*x</code>传递给<code>map()</code>方法，将其应用于流的所有元素。之后，我们使用 <code>forEach</code>打印列表的所有元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; old way</span><br><span class="line">List&lt;Integer&gt; list &#x3D; Arrays.asList(1,2,3,4,5,6,7);</span><br><span class="line">for(Integer n : list) &#123;</span><br><span class="line">    int x &#x3D; n * n;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; new way</span><br><span class="line">List&lt;Integer&gt; list &#x3D; Arrays.asList(1,2,3,4,5,6,7);</span><br><span class="line">list.stream().map((x) -&gt; x*x).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>下面的示例中，我们给定一个列表，然后求列表中每个元素的平方和。这个例子中，我们使用了 reduce() 方法，这个方法的主要作用是把 Stream 元素组合起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; old way</span><br><span class="line">List&lt;Integer&gt; list &#x3D; Arrays.asList(1,2,3,4,5,6,7);</span><br><span class="line">int sum &#x3D; 0;</span><br><span class="line">for(Integer n : list) &#123;</span><br><span class="line">    int x &#x3D; n * n;</span><br><span class="line">    sum &#x3D; sum + x;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; new way</span><br><span class="line">List&lt;Integer&gt; list &#x3D; Arrays.asList(1,2,3,4,5,6,7);</span><br><span class="line">int sum &#x3D; list.stream().map(x -&gt; x*x).reduce((x,y) -&gt; x + y).get();</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><h2 id="Lambda-表达式和匿名类之间的区别"><a href="#Lambda-表达式和匿名类之间的区别" class="headerlink" title="Lambda 表达式和匿名类之间的区别"></a>Lambda 表达式和匿名类之间的区别</h2><ul><li><code>this</code> 关键字。对于匿名类<code>this</code> 关键字解析为匿名类，而对于 <code>Lambda</code> 表达式，<code>this</code> 关键字解析为包含写入 Lambda 的类。</li><li>编译方式。Java 编译器编译<code>Lambda</code> 表达式时，会将其转换为类的私有方法，再进行动态绑定。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis返回Map键值对数据Key值大小写问题</title>
      <link href="/2020/01/23/MyBatis%E8%BF%94%E5%9B%9EMap%E9%94%AE%E5%80%BC%E5%AF%B9%E6%95%B0%E6%8D%AEKey%E5%80%BC%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/23/MyBatis%E8%BF%94%E5%9B%9EMap%E9%94%AE%E5%80%BC%E5%AF%B9%E6%95%B0%E6%8D%AEKey%E5%80%BC%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/mybatis.png" alt=""></p><a id="more"></a><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;web&quot;)</span><br><span class="line">public class MapKeyTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private InvoicingBuyOrderService invoicingBuyOrderService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;testKey&quot;)</span><br><span class="line">    public Map&lt;String,Object&gt; testMayKey(String id)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String,String&gt; result &#x3D; this.invoicingBuyOrderService.test(id);</span><br><span class="line">        map.put(&quot;data&quot;,result);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; test(String id);</span><br></pre></td></tr></table></figure><h2 id="ServiceImpl"><a href="#ServiceImpl" class="headerlink" title="ServiceImpl"></a>ServiceImpl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Map&lt;String, String&gt; test(String id) &#123;</span><br><span class="line">      Map&lt;String, String&gt; map &#x3D; this.invoicingPackageunitMapper.selectPackageNameByCommodityDetailId(id);</span><br><span class="line">      return map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; selectPackageNameByCommodityDetailId(@Param(&quot;commodityDetailId&quot;) String commodityDetailId);</span><br></pre></td></tr></table></figure><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="①我们不设置字段的别名"><a href="#①我们不设置字段的别名" class="headerlink" title="①我们不设置字段的别名"></a>①我们不设置字段的别名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectPackageNameByCommodityDetailId&quot; </span><br><span class="line">        parameterType&#x3D;&quot;java.lang.String&quot; resultType&#x3D;&quot;java.util.HashMap&quot;&gt;</span><br><span class="line">select * from invoicing_commoditydetailprice icd where icd.COMMODITYDETAILPRICE_ID&#x3D;#&#123;commodityDetailId&#125;</span><br></pre></td></tr></table></figure><p>postMan请求：<br><code>localhost:8001/FHSHGL/web/testKey?id=15b67d1756134936a6fbc8a5d5007bef</code><br>返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;SMALL_PACKAGE_COUNT&quot;: &quot;300&quot;,</span><br><span class="line">        &quot;SMALL_PACKAGE_UNIT_ID&quot;: &quot;0f899de1f92911e8bb4500ffa0c803da&quot;,</span><br><span class="line">        &quot;PHP_ID&quot;: 80270,</span><br><span class="line">        &quot;MIDDLE_PACKAGE_UNIT_ID&quot;: &quot;0f8995cef92911e8bb4500ffa0c803da&quot;,</span><br><span class="line">        &quot;CREATED_TIME&quot;: 1570839233000,</span><br><span class="line">        &quot;UPDATED_TIME&quot;: 1570839233000,</span><br><span class="line">        &quot;PRODUCTION_TIME&quot;: 1522425600000,</span><br><span class="line">        &quot;IN_PRICE&quot;: &quot;15.00&quot;,</span><br><span class="line">        &quot;MIDDLE_PACKAGE_COUNT&quot;: &quot;20&quot;,</span><br><span class="line">        &quot;OUT_PRICE&quot;: &quot;15.00&quot;,</span><br><span class="line">        &quot;INVOICING_COMMODITY_ID&quot;: &quot;25422c6135ed497dafa5f6e50fd6abcd&quot;,</span><br><span class="line">        &quot;CODE&quot;: &quot;11325882056318109808267349261365&quot;,</span><br><span class="line">        &quot;BIG_PACKAGE_UNIT_ID&quot;: &quot;0f894c61f92911e8bb4500ffa0c803da&quot;,</span><br><span class="line">        &quot;COMMODITYDETAILPRICE_ID&quot;: &quot;15b67d1756134936a6fbc8a5d5007bef&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②设置返回字段的别名"><a href="#②设置返回字段的别名" class="headerlink" title="②设置返回字段的别名"></a>②设置返回字段的别名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectPackageNameByCommodityDetailId&quot; parameterType&#x3D;&quot;java.lang.String&quot; resultType&#x3D;&quot;java.util.HashMap&quot;&gt;</span><br><span class="line">  SELECT</span><br><span class="line">      ips.&#96;NAME&#96; AS smallName,</span><br><span class="line">      ipm.&#96;NAME&#96; AS middleName,</span><br><span class="line">      ipb.&#96;NAME&#96; AS bigName</span><br><span class="line">  FROM</span><br><span class="line">      invoicing_commoditydetailprice icd</span><br><span class="line">  LEFT JOIN invoicing_packageunit ips ON icd.SMALL_PACKAGE_UNIT_ID &#x3D; ips.PACKAGEUNIT_ID</span><br><span class="line">  LEFT JOIN invoicing_packageunit ipm ON icd.MIDDLE_PACKAGE_UNIT_ID &#x3D; ipm.PACKAGEUNIT_ID</span><br><span class="line">  LEFT JOIN invoicing_packageunit ipb ON icd.BIG_PACKAGE_UNIT_ID &#x3D; ipb.PACKAGEUNIT_ID</span><br><span class="line">  WHERE icd.COMMODITYDETAILPRICE_ID&#x3D;#&#123;commodityDetailId&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>postMan请求：<br><code>localhost:8001/FHSHGL/web/testKey?id=15b67d1756134936a6fbc8a5d5007bef</code><br>返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;bigName&quot;: &quot;箱&quot;,</span><br><span class="line">        &quot;middleName&quot;: &quot;瓶&quot;,</span><br><span class="line">        &quot;smallName&quot;: &quot;克&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="springboot中处理mybatis返回Map时key值的大小写"><a href="#springboot中处理mybatis返回Map时key值的大小写" class="headerlink" title="springboot中处理mybatis返回Map时key值的大小写"></a>springboot中处理mybatis返回Map时key值的大小写</h2><p>为了统一不同数据库返回key值大小写不一致的问题，特自定义ObjectWrapperFactory来做统一的处理</p><h3 id="1、首先自定义MapWrapper"><a href="#1、首先自定义MapWrapper" class="headerlink" title="1、首先自定义MapWrapper"></a>1、首先自定义MapWrapper</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 将Map的key全部转换为小写</span><br><span class="line"> * *&#x2F;</span><br><span class="line">public class MapKeyLowerWrapper extends MapWrapper &#123;</span><br><span class="line"></span><br><span class="line">    public MapKeyLowerWrapper(MetaObject metaObject, Map&lt;String, Object&gt; map) &#123;</span><br><span class="line">        super(metaObject, map);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String findProperty(String name, boolean useCamelCaseMapping) &#123;</span><br><span class="line">        return name&#x3D;&#x3D;null?&quot;&quot;:name.toLowerCase() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、自定义ObjectWrapperFactory"><a href="#2、自定义ObjectWrapperFactory" class="headerlink" title="2、自定义ObjectWrapperFactory"></a>2、自定义ObjectWrapperFactory</h3><p>mybatis默认的ObjectWrapperFactory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class DefaultObjectWrapperFactory implements ObjectWrapperFactory &#123;</span><br><span class="line">    public boolean hasWrapperFor(Object object) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ObjectWrapper getWrapperFor(MetaObject metaObject, Object object) &#123;</span><br><span class="line">        throw new ReflectionException(</span><br><span class="line">                &quot;The DefaultObjectWrapperFactory should never be called to provide an ObjectWrapper.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们自定义的如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class MapWrapperFactory implements ObjectWrapperFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean hasWrapperFor(Object object) &#123;</span><br><span class="line">         return object !&#x3D; null &amp;&amp; object instanceof Map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ObjectWrapper getWrapperFor(MetaObject metaObject, Object object) &#123;</span><br><span class="line">        return new MapKeyLowerWrapper(metaObject, (Map) object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、在mybatis的配置中添加-MapWrapperFactory-的配置"><a href="#3、在mybatis的配置中添加-MapWrapperFactory-的配置" class="headerlink" title="3、在mybatis的配置中添加 MapWrapperFactory 的配置"></a>3、在mybatis的配置中添加 MapWrapperFactory 的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Bean(name &#x3D; &quot;sqlSessionFactory&quot;)</span><br><span class="line">@ConditionalOnBean(name &#x3D; &quot;dataSource&quot;)</span><br><span class="line">public SqlSessionFactory sqlSessionFactoryBean(@Qualifier(&quot;dataSource&quot;) DataSource dataSource) &#123;</span><br><span class="line">        SqlSessionFactoryBean bean &#x3D; new SqlSessionFactoryBean();</span><br><span class="line">        bean.setObjectWrapperFactory(new MapWrapperFactory());</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        &#x2F;&#x2F; 添加XML目录</span><br><span class="line">        ResourcePatternResolver resolver &#x3D; new PathMatchingResourcePatternResolver();</span><br><span class="line">        try &#123;</span><br><span class="line">            bean.setMapperLocations(resolver.getResources(&quot;classpath*:com&#x2F;ultrapower&#x2F;ioss&#x2F;**&#x2F;mapper&#x2F;**&#x2F;*.xml&quot;));</span><br><span class="line">            return bean.getObject();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean(&quot;sqlSessionTemplate&quot;)</span><br><span class="line">@ConditionalOnBean(name &#x3D; &quot;sqlSessionFactory&quot;)</span><br><span class="line">public SqlSessionTemplate sqlSessionTemplate(</span><br><span class="line">            @Qualifier(&quot;sqlSessionFactory&quot;) SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line">        return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@ConditionalOnBean(name &#x3D; &quot;dataSource&quot;)</span><br><span class="line">@Bean(name &#x3D; &quot;transactionManager&quot;)</span><br><span class="line">public PlatformTransactionManager transactionManager(@Qualifier(&quot;dataSource&quot;) DataSource dataSource) &#123;</span><br><span class="line">        DataSourceTransactionManager dataSourceTransactionManager &#x3D; new DataSourceTransactionManager(dataSource);</span><br><span class="line">        return dataSourceTransactionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是Java中的魔法值？</title>
      <link href="/2020/01/20/%E4%BB%80%E4%B9%88%E6%98%AFJava%E4%B8%AD%E7%9A%84%E9%AD%94%E6%B3%95%E5%80%BC%EF%BC%9F/"/>
      <url>/2020/01/20/%E4%BB%80%E4%B9%88%E6%98%AFJava%E4%B8%AD%E7%9A%84%E9%AD%94%E6%B3%95%E5%80%BC%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><blockquote><p>使用IDEA时，启用了阿里的代码规范检查，其中就有一项提示是不允许任何魔法值出现在代码里，于是出于好奇就了解一下到底啥时魔法值。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>魔法数值、魔法数字、魔法值，这是一个东西，不同的叫法。<br>所谓魔法值，是指在代码中直接出现的数值，只有在这个数值记述的那部分代码中才能明确了解其含义。</p><p>看一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * 获取当前周所有的日期</span><br><span class="line">  *</span><br><span class="line">  * @return</span><br><span class="line">  *&#x2F;</span><br><span class="line"> public static List&lt;String&gt; getRangeDayOfWeek() &#123;</span><br><span class="line">     List&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">     &#x2F;&#x2F; 日期格式转换</span><br><span class="line">     SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">     &#x2F;&#x2F; 时间调整到本周一</span><br><span class="line">     Calendar instance &#x3D; Calendar.getInstance();</span><br><span class="line">     instance.set(instance.get(Calendar.YEAR), instance.get(Calendar.MONDAY), instance.get(Calendar.DAY_OF_MONTH), 0, 0, 0);</span><br><span class="line">     instance.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);</span><br><span class="line">     &#x2F;&#x2F;循环打印</span><br><span class="line">     for (int i &#x3D; 1; i &lt;&#x3D; 7; i++) &#123;</span><br><span class="line">         list.add(sdf.format(instance.getTime()));</span><br><span class="line">         instance.add(Calendar.DAY_OF_WEEK, 1);</span><br><span class="line">     &#125;</span><br><span class="line">     return list;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>使用static final 定义常量或使用enum值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static final int WEEK_DAYS&#x3D; 7;</span><br></pre></td></tr></table></figure><blockquote><p>注：使用static final 声明常量，可以方便以后维护更新。修改变量的值时只用修改一处，还不用担心修改了其他不该修改的常量。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>魔法值的问题对于代码逻辑来说，并不是什么要命的事情，即使不修改也基本不影响代码的正常运行，我以前没有安装阿里代码检查规范时，一样这么使用，也没出现过啥问题。好吧，应该说但是了。但是，遵循公认的代码规范，可以有效的避免开发过程的一些小问题（最让人头疼的往往都是一些小问题引起的），提升开发的效率和代码的可阅读性，老老实实按照规范来，自然就会受益良多，继续加油！</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写出让同事无法维护的代码？</title>
      <link href="/2020/01/20/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E8%AE%A9%E5%90%8C%E4%BA%8B%E6%97%A0%E6%B3%95%E7%BB%B4%E6%8A%A4%E7%9A%84%E4%BB%A3%E7%A0%81%EF%BC%9F/"/>
      <url>/2020/01/20/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E8%AE%A9%E5%90%8C%E4%BA%8B%E6%97%A0%E6%B3%95%E7%BB%B4%E6%8A%A4%E7%9A%84%E4%BB%A3%E7%A0%81%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><code>原文</code>：<a href="http://mindprod.com/jgloss/unmain.html" target="_blank" rel="noopener">http://mindprod.com/jgloss/unmain.html</a><br><code>译文</code>：<a href="http://coolshell.cn/articles/4758.html" target="_blank" rel="noopener">http://coolshell.cn/articles/4758.html</a><br>对，你没看错，本文就是教你怎么写出让同事无法维护的代码。</p><h2 id="程序命名"><a href="#程序命名" class="headerlink" title="程序命名"></a>程序命名</h2><p><code>容易输入的变量名</code>比如：Fred，asdf</p><p><code>单字母的变量名</code>比如：a，b，c，x，y，z（如果不够用，可以考虑 a1，a2，a3，a4，….）</p><p><code>有创意地拼写错误</code>比如：SetPintleOpening， SetPintalClosing，这样可以让人很难搜索代码。</p><p><code>抽象</code>比如：ProcessData，DoIt，GetData… 抽象到就跟什么都没说一样。</p><p><code>缩写</code>比如：WTF，RTFSC …… （使用拼音缩写也同样给力，比如： BT，TMD，TJJTDS）</p><p><code>随机大写字母</code>比如：gEtnuMbER..</p><p><code>重用命名</code>在内嵌的语句块中使用相同的变量名有奇效。</p><p><code>使用重音字母</code>比如：int ínt（第二个 ínt 不是 int ）</p><p><code>使用下划线</code>比如：_， <strong>， _</strong>。</p><p><code>使用不同的语言</code>比如混用英语，德语，或是中文拼音。</p><p><code>使用字符命名</code>比如：slash, asterix, comma…</p><p><code>使用无关的单词</code>比如：god, superman, iloveu….</p><p><code>混淆l和1</code>字母 l 和数字 1 有时候是看不出来的。</p><h2 id="伪装欺诈"><a href="#伪装欺诈" class="headerlink" title="伪装欺诈"></a>伪装欺诈</h2><p><code>把注释和代码交织在一起</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(j&#x3D;0; j&lt;array_len; j+ &#x3D;8)&#123;    total +&#x3D; array[j+0 ];    total +&#x3D; array[j+1 ];    total +&#x3D; array[j+2 ]; &#x2F;* Main body of    total +&#x3D; array[j+3]; * loop is unrolled    total +&#x3D; array[j+4]; * for greater speed.    total +&#x3D; array[j+5]; *&#x2F;    total +&#x3D; array[j+6 ];    total +&#x3D; array[j+7 ];&#125;</span><br></pre></td></tr></table></figure><p><code>代码和显示不一致</code>比如，你的界面显示叫 postal code，但是代码里确叫 zipcode。</p><p><code>隐藏全局变量</code>把使用全局变量以函数参数的方式传递给函数，这样可以让人觉得那个变量不是全局变量。</p><p><code>使用相似的变量名</code>如：单词相似，swimmer 和 swimner，字母相似：ilI1| 或 oO08，parselnt 和 parseInt， D0Calc 和 DOCalc，还有这一组：xy_Z, xy__z, _xy_z, _xyz, XY_Z, xY_z, Xy_z。</p><p><code>重载函数</code>使用相同的函数名，但是其功能和具体实现完全没有关系。</p><p><code>操作符重载</code>重载操作符可以让你的代码变得诡异，感谢 CCTV，感谢 C++，这个东西是可以把混乱代码提高到一种艺术的形式。比如：重载一个类的 ! 操作符，但实际功能并不是取反，让其返回一个整数。于是，如果你使用 ! ! 操作符，那么，有意思的事就发生了—— 先是调用类的重载 ! 操作符，然后把其返回的整数给 ! 成了 布尔变量，如果是 !!! 呢？呵呵。</p><h2 id="文档和注释"><a href="#文档和注释" class="headerlink" title="文档和注释"></a>文档和注释</h2><p><code>在注释中撒谎</code>你不用真的去撒谎，只需在改代码的时候不要更新注释就可以了。</p><p><code>注释里面写废话</code>比如：/* add 1 to i */</p><p><code>只注释是什么，而不是为什么。</code></p><p><code>不要注释秘密</code>如果你开发一个航班系统，请你一定要保证每有一个新的航班被加入，就得要修改 25 个以上的位置的程序。千万别把这个事写在文档中。</p><p><code>注重细节</code>当你设计一个很复杂的算法的时候，你一定要把所有的详细细设计都写下来，没有 100 页不能罢休，段落要有5级以上，段落编号要有 500 个以上。</p><p>例如：1.2.4.6.3.13 – Display all impacts for activity where selected mitigations can apply (short pseudocode omitted).。</p><p>这样，当你写代码的时候，你就可以让你的代码和文档一致，如：Act1_2_4_6_3_13() 千万不要注释度衡单位。</p><p>比如时间用的是秒还是毫秒，尺寸用的是像素还是英寸，大小是 MB 还是 KB 等等。另外，在你的代码里，你可以混用不同的度衡单位，但也不要注释。</p><p><code>Gotchas陷阱</code>千万不要注释代码中的陷阱。</p><p><code>在注释和文档中发泄不满。</code></p><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p><code>Java Casts</code>Java 的类型转型是天赐之物，每一次当你从 Collectio n里取到一个 object 的时候，你都需要把其转回原来的类型。</p><p>因些，这些转型操作会出现在 N 多的地方。</p><p>如果你改变了类型，那么你不一定能改变所有的地方。而编译器可能能检查到，也可能检查不到。</p><p><code>利用 Java 的冗余</code>比如：Bubblegum b = new Bubblegom(); 和 swimmer = swimner + 1; 注意变量间的细微差别。</p><p><code>从不验证</code>从不验证输入的数据，从不验证函数的返回值。这样做可以向大家展示你是多么的信任公司的设备和其它程序员</p><p><code>不要封装</code>调用者需要知道被调用的所有的细节。</p><p><code>克隆和拷贝</code>为了效率，你要学会使用 copy + past，你几乎都不用理解别人的代码，你就可以高效地编程了。</p><p><code>巨大的listener</code>写一个 listener，然后让你的所有的 button 类都使用这个 listener，这样你可以在这个 listener 中整出一大堆 if…else… 语句，相当的刺激。</p><p><code>使用三维数组</code>如果你觉得三维还不足够，你可以试试四维。</p><p><code>混用</code>同时使用类的 get/set 方法和直接访问那个 public 变量，这样做的好处是可以极大的挫败维护人员。</p><p><code>包装</code>包装，包装。把你所有的 API 都包装上 6 到 8 遍，包装深度多达 4层以上，然后包装出相似的功能。</p><p><code>没有秘密</code>把所有的成员都声明成 public 的，这样，你以后就很难限制其被人使用，而且这样可以和别的代码造成更多的耦合度，可以让你的代码存活得更久。</p><p><code>排列和阻碍</code>把drawRectangle(height, width) 改成 drawRectangle(width, height)，等 release 了几个版本后，再把其改回去，这样维护程序的程序员们很快就不明白哪一个是对的。</p><p><code>把变量改在名字上</code>例如，把 setAlignment(int alignment) 改成，setLeftAlignment，setRightAlignment，setCenterAlignment。</p><p><code>保留你所有的没有使用的和陈旧的变量，方法和代码。</code></p><p><code>Final 你所有的子结点的类</code>这样，当你做完这个项目后，没有人可以通过继承来扩展你的类。java.lang.String 不也是这样吗？</p><p><code>避免使用 layout</code>这样就使得我们只能使用绝对坐标，如果你的老大强制你使用 layout，你可以考虑使用 GridBagLayout，然后把 grid 坐标 hard code。</p><p><code>环境变量</code>如果你的代码需要使用环境变量，那么，你应该把你的类的成员的初始化使用环境变量，而不是构造函数。</p><p><code>使用全局变量</code>1）把全局变量的初始化放在不同的函数中，就算这个函数和这个变量没有任何关系，这样能够让我们的维护人员就像做侦探工作一样。2）使用全局变量可以让你的函数的参数变得少一些。</p><p><code>配置文件</code>配置文件主要用于一些参数的初始化，在编程中，我们可以让配置文件中的参数名和实际程序中的名字不一样。</p><p><code>膨胀你的类</code>让你的类尽可能地拥有各种臃肿和晦涩的方法，比如，你的类只实现一种可能性，但是你要提供所有可能性的方法。不要定义其它的类，把所有的功能都放在一个类中。</p><p><code>使用子类</code>面向对象是写出无法维护代码的天赐之物，如果你有一个类有十个成为（变量和方法）你可以考虑写 10 个层次的继承，然后把这十个属性分别放在这十个层次中。如果可能的话，把这十个类分别放在十个不同的文件中。</p><p><code>混乱你的代码</code>使用 XML，XML 的强大是无人能及的，使用 XML 你可以把本来只要 10 行的代码变成 100 行。而且，还要逼着别人也有 XML。（参看，信 XML 得永生，信 XML 得自信）</p><p><code>分解条件表达式</code>如：把 a==100 分解成，a&gt;99 &amp;&amp; a&lt;101</p><p><code>学会利用分号</code>如：if ( a );else;{ int d; d = c;}</p><p><code>间接转型</code>如：把 double 转 string，写成 new Double(d).toString() 而不是 Double.toString(d)</p><p><code>大量使用嵌套</code>一个 NB 的程序员可以在一行代码上使用超过 10 层的小括号（），或是在一个函数里使用超过 20 层的语句嵌套{}，把嵌套的 if else 转成 [? :] 也是一件很 NB 的事。</p><p><code>长代码行</code>一行的代码越长越好，这样别人阅读时就需要来来回回的。</p><p><code>不要过早的return</code>不要使用 break，这样，你就需要至少 5 层以上的 if-else 来处理错误。</p><p><code>不要使用{}</code>不要在 if else 使用{}，尤其是在你重量地使用 if-else 嵌套时，你甚至可以在其中乱缩进代码，这样一来，就算是最有经验的程序员也会踩上陷阱。</p><p><code>琐碎的封装</code>比较封装一个 bool 类，类里面什么都做，就是一个 bool。</p><p><code>循环</code>千万不可用 for(int i=0; i&lt;n; i++) 使用 while 代替 for，交换 n 和 i，把 &lt; 改成 &lt;=，使用 i– 调整步伐 。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><code>从不测试</code>千万不要测试任何的出错处理，从来也不检测系统调用的返回值。</p><p><code>永远不做性能测试</code>如果不够快就告诉用户换一个更快的机器。如果你一做测试，那么就可能会要改你的算法，甚至重设计，重新架构。</p><p><code>不要写测试案例</code>不要做什么代码覆盖率测试，自动化测试。</p><p><code>测试是懦夫行为</code>一个勇敢的程序员是根本不需要这一步的，太多的程序太害怕他们的老板，害怕失去工作，害怕用户抱怨，甚至被起诉，这种担心害怕直接影响了生产力。</p><p><code>如果你对你的代码有强大的信心，那还要什么测试呢？真正的程序员是不需要测试自己的代码的。</code></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>你的老板什么都知道</code>无论你的老板有多 SB，你都要严格地遵照他的旨意办事，这样一来，你会学到更多的知识以及如何写出更加无法维护的代码。</p><p><code>颠覆Help Desk</code>你要确保你那满是 bug 的程序永远不要被维护团队知道。当用户打电话和写邮件给你的时候，你就不要理会，就算要理会，让用户重做系统或是告诉用户其帐号有问题，是标准的回答。</p><p><code>闭嘴</code>对于一些像 y2k 这样的大 bug，你要学会守口如瓶，不要告诉任何人，包括你的亲人好友以及公司的同事和管理层，这样当到那一天的时候，你就可以用这个 bug 挣钱了。</p><p><code>忽悠</code>你会学会忽悠，就算你的代码写得很烂，你也要为其挂上 GoF 设计模式的标签，就算你的项目做得再烂，你也要为其挂上敏捷的标签，让整个团队和公司，甚至整个业界都开始躁动，这样才能真正为难维护的代码铺平道路。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>总之，我们的口号是—— Write Everywhere, Read Nowhere</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Travis CI 自动更新 GitHub Pages</title>
      <link href="/2020/01/15/%E4%BD%BF%E7%94%A8-Travis-CI-%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0-GitHub-Pages/"/>
      <url>/2020/01/15/%E4%BD%BF%E7%94%A8-Travis-CI-%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0-GitHub-Pages/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/hexo-1.png" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Github Pages 不能运行动态程序，只能输出一些静态内容。因此 Github Pages 非常适合用于前端项目的展示。可用于存放项目介绍、项目文档或者个人博客。本文介绍了怎么用 Travis CI 自动化部署 Github Pages。</p><h2 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h2><p>持续集成（Continuous integration）是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。目前 github 开源项目用的较多的 CI 主要是 Circle CI 和 Travis CI，两者都是利用容器技术来适配不同项目环境。</p><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>hexo虽然可以方便地部署github静态博客，但是仅仅是把最终生成的html保存在repository中，像原始的Markdown文件，hexo配置文件，主题配置文件，修改文件都仅仅是保存在本地。这样不利于保存，也无法查看每篇博客的修改历史。<br>在github上搭blog最大的问题就是，每次提交都需要先hexo g，然后再hexo d生成文件，这样哪怕是改一个小的地方都需要重新编译全部blog。</p><h2 id="Travis-CI-amp-GitHub-Pages"><a href="#Travis-CI-amp-GitHub-Pages" class="headerlink" title="Travis CI  &amp; GitHub Pages"></a>Travis CI  &amp; GitHub Pages</h2><p>以我的博客为例<br><code>coder-lida.github.io</code>:博客静态文件仓库<br><code>blog-source</code>:文档源码仓库<br>文档源码放置在blog-source仓库，最终部署文件在 coder-lida.github.io仓库。当在 blog-source仓库更改某些内容之后，通过运行 hexo g来生成最终部署的 HTML 文件到 public 目录，随后再进入 public 目录初始化 git 仓库、添加文件、提交文件，最后将提交强制推送到远程coder-lida.github.io仓库。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01MTFmNDM0YWRjZDQ0YTJhLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h2 id="Start-Travis-CI"><a href="#Start-Travis-CI" class="headerlink" title="Start Travis CI"></a>Start Travis CI</h2><h3 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h3><p><a href="https://hexo.io/docs/github-pages" target="_blank" rel="noopener">Hexo官网配置</a>,官方配置是在同一个仓库的不同分支来实现的。我没用这种方式，而是创建了2个仓库，一个放部署的网页，另一个放blog的源文件，包括post和themes。</p><h3 id="注册并设置Travis-CI"><a href="#注册并设置Travis-CI" class="headerlink" title="注册并设置Travis CI"></a>注册并设置Travis CI</h3><p><a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI官网</a><br>点击右上角使用Github登录的按钮<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMjJmMzAzYzlhN2QwZjBiLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>登录成功后<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNTQwMTY4MmY3YWI5YjA1LnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>选中博客的源文件仓库，点击Setting<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZjcyOTY1ODJmMTgyYmY0LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h3 id="关于GH-TOKEN"><a href="#关于GH-TOKEN" class="headerlink" title="关于GH_TOKEN"></a>关于GH_TOKEN</h3><p>登录到GitHub，点击右上角头像框，选择Settings<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01Y2ZmNjFjMDlmMmFiMzdkLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>选择Developer settings<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ODkyY2QxNTNlMmRiOTIxLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>添加一个token<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03ODQ4NTNiYjJiM2RhZjJiLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>填写token description，比如叫hexo deploy.<br>勾选上授予的权限，比如我勾选的是repo和gist，然后create.<br>将产生的token串复制保留下来，后面会使用到,如果丢失，只能重新产生。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hOTA1NWVkNmMzYzMxZDAxLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p>将生成的token设置到Travis CI作为环境变量。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMzU0NTgxZGEwZDJmMDQzLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p>到此Travis CI设置完成。</p><h3 id="添加-travis-yml"><a href="#添加-travis-yml" class="headerlink" title="添加 .travis.yml"></a>添加 .travis.yml</h3><p>先贴出我的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">language: node_js #设置语言</span><br><span class="line">node_js: stable # nodejs版本</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - master #只监测master分支</span><br><span class="line">cache:</span><br><span class="line">    apt: true</span><br><span class="line">    directories:</span><br><span class="line">        - node_modules # 缓存不经常更改的内容</span><br><span class="line">before_install:</span><br><span class="line">  - git config --global user.name &quot;your name&quot;  # github用户名</span><br><span class="line">  - git config --global user.email &quot;your email&quot;  # 邮箱</span><br><span class="line">  - npm install -g hexo-cli</span><br><span class="line">install:</span><br><span class="line">  - npm i</span><br><span class="line">before_script:</span><br><span class="line"># 无其他依赖项所以执行npm run build 构建就行了</span><br><span class="line">script:</span><br><span class="line">  - hexo clean  #清除</span><br><span class="line">  - hexo generate #生成</span><br><span class="line">after_script:</span><br><span class="line">  - git clone https:&#x2F;&#x2F;$&#123;GH_REF&#125; .deploy_git  # GH_REF是最下面配置的仓库地址</span><br><span class="line">  - cd .deploy_git</span><br><span class="line">  - git checkout master</span><br><span class="line">  - cd ..&#x2F;</span><br><span class="line">  - mv .deploy_git&#x2F;.git&#x2F; .&#x2F;public&#x2F;   # 这一步之前的操作是为了保留master分支的提交记录，不然每次git init的话只有1条commit</span><br><span class="line">  - cd .&#x2F;public</span><br><span class="line">  - git init</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m &quot;Travis CI Auto Builder at &#96;date +&quot;%Y-%m-%d %H:%M&quot;&#96;&quot; # 提交记录包含时间 </span><br><span class="line">  - git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master #GH_TOKEN是在Travis中配置环境变量的名称</span><br><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   - GH_REF: github.com&#x2F;coder-lida&#x2F;coder-lida.github.io.git #设置GH_REF,换成自己用户名和仓库名</span><br></pre></td></tr></table></figure><p>哪些文件需要提交到源文件的仓库<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01OTU3YTcxOGFiNDg5ZmQ0LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p><code>package-lock.json</code>文件在<code>.gitignore</code>文件中加上<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yODgzYmRmYjhiMmVlM2I4LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p>在经历的11次失败之后，第12次终于成功了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MDI3ZGVmMzM3Y2RhYWI0LnBuZw?x-oss-process=image/format,png" alt="图片.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZTBjMjc4Yjg4MzNkMTg5LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的clone</title>
      <link href="/2020/01/13/Java%E4%B8%AD%E7%9A%84clone/"/>
      <url>/2020/01/13/Java%E4%B8%AD%E7%9A%84clone/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><h2 id="Java中对象的创建"><a href="#Java中对象的创建" class="headerlink" title="Java中对象的创建"></a>Java中对象的创建</h2><ul><li>使用new操作符创建一个对象</li><li>使用clone方法复制一个对象<h3 id="两种方式的异同"><a href="#两种方式的异同" class="headerlink" title="两种方式的异同"></a>两种方式的异同</h3>new操作符的本意是分配内存。程序执行到new操作符时， 首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。<br>而clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部 。<h2 id="Java中的Clone"><a href="#Java中的Clone" class="headerlink" title="Java中的Clone"></a>Java中的Clone</h2>clone 顾名思义就是 复制 ， 在Java语言中， clone方法被对象调用，所以会复制对象。所谓的复制对象，首先要分配一个和源对象同样大小的空间，在这个空间中创建一个新的对象<h3 id="复制对象-or-复制引用"><a href="#复制对象-or-复制引用" class="headerlink" title="复制对象 or 复制引用"></a>复制对象 or 复制引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p &#x3D; new Person(23, &quot;张三&quot;);  </span><br><span class="line">Person p1 &#x3D; p;</span><br><span class="line">System.out.println(p);  </span><br><span class="line">System.out.println(p1);</span><br></pre></td></tr></table></figure>打印结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br><span class="line">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br></pre></td></tr></table></figure>可以看出，打印的地址值是相同的，既然地址都是相同的，那么肯定是同一个对象。p和p1只是引用而已，他们都指向了一个相同的对象Person(23, “张三”) 。 可以把这种现象叫做 引用的复制<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOGZkNGRmZWE3ODViODI1LnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>而下面的代码是真真正正的克隆了一个对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p &#x3D; new Person(23, &quot;张三&quot;);    </span><br><span class="line">Person p1 &#x3D; (Person) p.clone();   </span><br><span class="line">System.out.println(p);  </span><br><span class="line">System.out.println(p1);</span><br></pre></td></tr></table></figure>打印结果:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br><span class="line">com.pansoft.zhangjg.testclone.Person@67f1fba0</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mMjkxN2I1NjEzYWFiYTJlLnBuZw?x-oss-process=image/format,png" alt="图片.png"><h2 id="深拷贝-or-浅拷贝"><a href="#深拷贝-or-浅拷贝" class="headerlink" title="深拷贝 or 浅拷贝"></a>深拷贝 or 浅拷贝</h2>上面的示例代码中，Person中有两个成员变量，分别是name和age， name是String类型， age是int类型。代码非常简单，如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Person implements Cloneable&#123; </span><br><span class="line">    private int age ;</span><br><span class="line">    private String name;</span><br><span class="line">    public Person(int age, String name) &#123;</span><br><span class="line">       this.age &#x3D; age; </span><br><span class="line">       this.name &#x3D; name;  </span><br><span class="line">    &#125;</span><br><span class="line">   public Person() &#123;&#125;  </span><br><span class="line">   public int getAge() &#123;</span><br><span class="line">       return age;</span><br><span class="line">   &#125;</span><br><span class="line">  public String getName() &#123;</span><br><span class="line">       return name;</span><br><span class="line">   &#125; </span><br><span class="line"> @Override</span><br><span class="line"> protected Object clone() throws CloneNotSupportedException&#123;</span><br><span class="line">    return (Person)super.clone();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>由于age是基本数据类型， 那么对它的拷贝没有什么疑议，直接将一个4字节的整数值拷贝过来就行。但是name是String类型的， 它只是一个引用， 指向一个真正的String对象，那么对它的拷贝有两种方式：</li></ul><p>①直接将源对象中的name的引用值拷贝给新对象的name字段；</p><p>②根据原Person对象中的name指向的字符串对象创建一个新的相同的字符串对象，将这个新字符串对象的引用赋给新拷贝的Person对象的name字段。</p><p>这两种拷贝方式分别叫做 浅拷贝 和 深拷贝 。</p><p>深拷贝和浅拷贝的原理如下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wZWNkYTQ4MDAwNzMyM2U5LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h2 id="clone是浅拷贝还是深拷贝"><a href="#clone是浅拷贝还是深拷贝" class="headerlink" title="clone是浅拷贝还是深拷贝"></a>clone是浅拷贝还是深拷贝</h2><p>如果两个Person对象的name的地址值相同， 说明两个对象的name都指向同一个String对象， 也就是浅拷贝， 而如果两个对象的name的地址值不同， 那么就说明指向不同的String对象， 也就是在拷贝Person对象的时候， 同时拷贝了name引用的String对象， 也就是深拷贝。验证代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p &#x3D; new Person(23,&quot;张三&quot;);</span><br><span class="line">Person p1 &#x3D;(Person)p.clone();</span><br><span class="line">String  result &#x3D; p.getName() &#x3D;&#x3D; p1.getName() ? </span><br><span class="line">                 &quot;clone是浅拷贝的&quot;:&quot;clone是深拷贝的&quot;;</span><br></pre></td></tr></table></figure><p>打印结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clone是浅拷贝的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序版本自动更新</title>
      <link href="/2020/01/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%89%88%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
      <url>/2020/01/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%89%88%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/weixin.jpg" alt=""></p><a id="more"></a><blockquote><p>公司的小程序项目上线, 后期还会有小型的版本迭代. 为了让用户能在我们进行版本迭代后及时使用最新版本的功能. 做了以下优化..</p></blockquote><h2 id="小程序的销毁"><a href="#小程序的销毁" class="headerlink" title="小程序的销毁"></a>小程序的销毁</h2><p>当用户点击左上角关闭，或者按了设备Home 键离开微信，小程序并没有直接销毁，而是进入了后台；<br>当再次进入微信或再次打开小程序，又会从后台进入前台，只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。</p><h2 id="“冷启动”-和-“热启动”"><a href="#“冷启动”-和-“热启动”" class="headerlink" title="“冷启动” 和 “热启动”."></a>“冷启动” 和 “热启动”.</h2><p>热启动是指: 小程序打开后，在一段时间内（目前：5分钟）再次被打开，此时会将后台的小程序切换到前台。<br>冷启动是指: 小程序首次打开或销毁后再次被打开.</p><h2 id="更新版本"><a href="#更新版本" class="headerlink" title="更新版本"></a>更新版本</h2><p>冷启动时, 如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。<br>如果要马上应用最新版本，使用 wx.getUpdateManager API 进行处理。</p><p>代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F; 在app.js里写下以下代码</span><br><span class="line">  onLaunch () &#123;</span><br><span class="line">    if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class="line">      const updateManager &#x3D; wx.getUpdateManager()</span><br><span class="line">      updateManager.onCheckForUpdate(function (res) &#123;</span><br><span class="line">        console.log(&#39;onCheckForUpdate&#x3D;&#x3D;&#x3D;&#x3D;&#39;, res)</span><br><span class="line">        &#x2F;&#x2F; 请求完新版本信息的回调</span><br><span class="line">        if (res.hasUpdate) &#123;</span><br><span class="line">          console.log(&#39;res.hasUpdate&#x3D;&#x3D;&#x3D;&#x3D;&#39;)</span><br><span class="line">          updateManager.onUpdateReady(function () &#123;</span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              title: &#39;更新提示&#39;,</span><br><span class="line">              content: &#39;新版本已经准备好，是否重启应用？&#39;,</span><br><span class="line">              success: function (res) &#123;</span><br><span class="line">                console.log(&#39;success&#x3D;&#x3D;&#x3D;&#x3D;&#39;, res)</span><br><span class="line">                &#x2F;&#x2F; res: &#123;errMsg: &quot;showModal: ok&quot;, cancel: false, confirm: true&#125;</span><br><span class="line">                if (res.confirm) &#123;</span><br><span class="line">                  &#x2F;&#x2F; 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span><br><span class="line">                  updateManager.applyUpdate()</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          updateManager.onUpdateFailed(function () &#123;</span><br><span class="line">            &#x2F;&#x2F; 新的版本下载失败</span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              title: &#39;已经有新版本了哟~&#39;,</span><br><span class="line">              content: &#39;新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>小程序重新初始化时会触发onLaunch事件<br>onLaunch事件会触发在页面onShow事件之前.获取小程序更新版本可以写在onLaunch里.</p><p><code>注意：在开发和体验版无法测试版本更新</code></p><p>需要在开发者工具里,编译时选择”模拟更新编译”<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/weixin-1.png" alt="图片.png"></p><p>(部分开发者工具版本, 每次update编译时都需要重新勾选此选项)<br>点击确定,重新编译.<br>页面会弹窗显示:<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/weixin-2.png" alt="图片.png"><br>点击确定后：<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/weixin-3.png" alt="图片.png"></p><p>随着小程序的不断更新, 部分功能可能需要最新版的微信客户端才能使用. 这时候可以弹窗提示用户更新到最新版本微信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  &#x2F;&#x2F; can&#39;t use getUpdateManager</span><br><span class="line">  wx.showModal(&#123;</span><br><span class="line">        title: &#39;提示&#39;,</span><br><span class="line">        content: &#39;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#39;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>完整版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">onLaunch () &#123;</span><br><span class="line">    if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class="line">      const updateManager &#x3D; wx.getUpdateManager()</span><br><span class="line">      updateManager.onCheckForUpdate(function (res) &#123;</span><br><span class="line">        if (res.hasUpdate) &#123;</span><br><span class="line">          updateManager.onUpdateReady(function () &#123;</span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              title: &#39;更新提示&#39;,</span><br><span class="line">              content: &#39;新版本已经准备好，是否重启应用？&#39;,</span><br><span class="line">              success: function (res) &#123;</span><br><span class="line">                if (res.confirm) &#123;</span><br><span class="line">                  updateManager.applyUpdate()</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          updateManager.onUpdateFailed(function () &#123;</span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              title: &#39;已经有新版本了哟~&#39;,</span><br><span class="line">              content: &#39;新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      wx.showModal(&#123;</span><br><span class="line">        title: &#39;提示&#39;,</span><br><span class="line">        content: &#39;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#39;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果在onLaunch里进行请求, 这是异步请求. 如果对交互顺序有要求, 如: 版本更新–重新获取数据– 用户展示, 那么需要考虑在callback里进行重获数据.小程序启动时，正常是会热更新，下载新版本的包，下一次启动就会使用新包。但发现有更新不成功的情况发生.<br>官方回答: 策略生效跟网络环境以及发布时间等若干因素有关，会尽可能让小程序快地更新，但无法保证每次都热更新成功。<br>小程序的异步更新发生在冷启动过程. 官方不建议热更新. 原因:<br><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/assert/weixin-4.png" alt="图片.png"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Weixin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Double为什么会失真？</title>
      <link href="/2020/01/07/Double%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%A4%B1%E7%9C%9F%EF%BC%9F/"/>
      <url>/2020/01/07/Double%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%A4%B1%E7%9C%9F%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/Jennifer-1.png" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先来看一个double失真的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class DoubleTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (double i &#x3D; 0; i &lt; 1; i &#x3D; (i * 10 + 1) &#x2F; 10) &#123;</span><br><span class="line">            for (double k &#x3D; 0; k &lt; i; k &#x3D; (k * 10 + 1) &#x2F; 10) &#123;</span><br><span class="line">                System.out.println(i + &quot;-&quot; + k + &quot;&#x3D;&quot; + (i - k));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>0.1-0.0=0.1<br>0.2-0.0=0.2<br>0.2-0.1=0.1<br>0.3-0.0=0.3<br>0.3-0.1=0.19999999999999998<br>0.3-0.2=0.09999999999999998<br>0.4-0.0=0.4<br>0.4-0.1=0.30000000000000004<br>0.4-0.2=0.2<br>0.4-0.3=0.10000000000000003<br>0.5-0.0=0.5<br>0.5-0.1=0.4<br>0.5-0.2=0.3<br>0.5-0.3=0.2<br>0.5-0.4=0.09999999999999998<br>0.6-0.0=0.6<br>0.6-0.1=0.5<br>0.6-0.2=0.39999999999999997<br>0.6-0.3=0.3<br>0.6-0.4=0.19999999999999996<br>0.6-0.5=0.09999999999999998<br>0.7-0.0=0.7<br>0.7-0.1=0.6<br>0.7-0.2=0.49999999999999994<br>0.7-0.3=0.39999999999999997<br>0.7-0.4=0.29999999999999993<br>0.7-0.5=0.19999999999999996<br>0.7-0.6=0.09999999999999998<br>0.8-0.0=0.8<br>0.8-0.1=0.7000000000000001<br>0.8-0.2=0.6000000000000001<br>0.8-0.3=0.5<br>0.8-0.4=0.4<br>0.8-0.5=0.30000000000000004<br>0.8-0.6=0.20000000000000007<br>0.8-0.7=0.10000000000000009<br>0.9-0.0=0.9<br>0.9-0.1=0.8<br>0.9-0.2=0.7<br>0.9-0.3=0.6000000000000001<br>0.9-0.4=0.5<br>0.9-0.5=0.4<br>0.9-0.6=0.30000000000000004<br>0.9-0.7=0.20000000000000007<br>0.9-0.8=0.09999999999999998</p></blockquote><h2 id="一、-什么是浮点数？"><a href="#一、-什么是浮点数？" class="headerlink" title="一、 什么是浮点数？"></a>一、 什么是浮点数？</h2><h3 id="1、小数"><a href="#1、小数" class="headerlink" title="1、小数"></a>1、小数</h3><p>一个小数的组成：在我国，小数表示由三部分组成，分别是整数+小数点（分隔符）+小数。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjFkNzM3YjM4ODEyZWEyLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h3 id="2、小数为什么会被称为浮点数"><a href="#2、小数为什么会被称为浮点数" class="headerlink" title="2、小数为什么会被称为浮点数"></a>2、小数为什么会被称为浮点数</h3><p>浮点数是属于有理数中某特定子集的数的数字表示，在计算机中用以近似表示任意某个实数。具体的说，这个实数由一个整数或定点数（即尾数）乘以某个基数（计算机中通常是2）的整数次幂得到，这种表示方法类似于基数为10的科学计数法。</p><p>对于浮点数可以这样简单的理解：浮点数就是小数点可以任意浮动的数字。</p><p>在计算机的机器语言中，只有二进制，机器语言只能识别0和1。所以，计算机也是不可能存储小数的，所以需要有另一种变通的存储方案。这种方案就是指数方案：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMmIxYjExOTM5NTYzOGJhLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>通过观察以上的图片不难发现，作为一个小数3.14。如果使用指数表现形式的话（3.14E0），其写法是多种多样的，这样写的话，小数点就可以任意浮动了。</p><h3 id="3、Java中浮点数的表示方法"><a href="#3、Java中浮点数的表示方法" class="headerlink" title="3、Java中浮点数的表示方法"></a>3、Java中浮点数的表示方法</h3><p>对于float来说，4个字节，32位，0-22位表示尾数，23-30(8位)表示指数，31位表示符号位。</p><p>对于double来说，8个字节，64位，0-51表示尾数，52-62(11位)表示指数，63位最高位表示符号位。</p><h2 id="二、浮点数在内存中是如何存储的？"><a href="#二、浮点数在内存中是如何存储的？" class="headerlink" title="二、浮点数在内存中是如何存储的？"></a>二、浮点数在内存中是如何存储的？</h2><p>我们知道，任何数据在计算机内存中都是用‘0\1’来存储的，浮点数亦是如此。因此十进制浮点数在存储时必定会转换为二进制的浮点数。</p><p>在内存中使用二进制的科学计数法来存储，因此分为阶码（即指数）和底数，由于也有正负之分，所以还有一位符号位。<br>以float为例，float在内存中的存储为：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMjUzMDkxZDZhOTQ4ZDdmLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>float 符号位(1bit) 指数(8 bit) 尾数(23 bit)</p><p>double 符号位(1bit) 指数(11 bit) 尾数(52 bit)</p><p>float在内存中占8位，由于阶码实际存储的是指数的移码，假设指数的真值是e,阶码为E，则有E=e+(2^n-1 -1)。其中 2^n-1 -1是IEEE754标准规定的指数偏移量，根据这个公式我们可以得到 2^8 -1=127。于是，float的指数范围为-128 +127，而double的指数范围为-1024 +1023。其中负指数决定了浮点数所能表达的绝对值最小的非零数；而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。</p><p>float的范围为-2^128 ~ +2^127，也即-3.40E+38 ~ +3.40E+38；</p><p>double的范围为-2^1024 ~ +2^1023，也即-1.79E+308 ~ +1.79E+308</p><p>这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)</p><p>移位存储本质上是为了保证+0和-0的一致性。</p><p>以float指数部分的这8位来分析，</p><p>那么这8位组成的新的字节，我们来用下面的一串数字表示：0000 0000</p><p>首先，我们假设不使用移位存储技术，而是单单看看这个 8位组成的新字节，到底能表示多少个数： 0000 0000 -1111 1111 即0-255，一共256个数。</p><p>但是我们知道这8位数既要表示正数也要表示负数。</p><p>所以将左边第一位拿出来表示正负的符号：</p><p>第一个区间：</p><blockquote><p>0 000 0000  -  0 111 1111<br>即+0 到127</p></blockquote><p>第二个区间：</p><blockquote><p>1 000 0000  -  1 111 1111<br>即 -0到-127</p></blockquote><p>这就是问题的所在:怎么会有两个0，一个正零，一个负零。</p><p>这时候使用移位存储：float使用127(0111 1111)</p><blockquote><p>表示0：0+127=127 即 0000 0000 +0111 1111=0111 1111<br>表示1：1+127=128 即 0000 0001 +0111 1111=1000 0000<br>表示128：128+127=255 即 1000 0000+0111 1111=1111 1111</p></blockquote><p>最大的正数，再大就要溢出了。</p><blockquote><p>表示-1： -1+127=126=127-1 即 0111 1111-0000 0001=0111 1110<br>表示-1： -2+127=125=127-2 即 0111 1111-0000 0010=0111 1101<br>表示-127： -127+127=0 即0111 1111-0111 1111=0000 0000</p></blockquote><p>最小的负数，在校就溢出了。</p><h2 id="三、浮点数的进制转换"><a href="#三、浮点数的进制转换" class="headerlink" title="三、浮点数的进制转换"></a>三、浮点数的进制转换</h2><h3 id="1、十进制转二进制"><a href="#1、十进制转二进制" class="headerlink" title="1、十进制转二进制"></a>1、十进制转二进制</h3><p>主要看看十进制转二进制，整数部分和小数部分分开处理</p><ul><li><p>整数部分：整数除以2，得到一个商和余数，得到的商继续除以2并得到一个商和一个余数，继续除以2操作直至商为0，上述操作得到一系列余数，从最后一个余数开始直至第一个余数，这一系列0\1即为转换后的二进制数。</p></li><li><p>小数部分：乘以2，然后取出整数部分，将剩下的小数部分继续乘以2，然后再取整数部分，一直取到小数部分为零为止。如果永远不为零，则按要求保留足够位数的小数，最后一位做0舍1入。将取出的整数顺序排列。</p></li></ul><p>从以上转换过程可以看出，并不是任何一个十进制小数都可以用二进制精确表示出来。一个在0到1之间的小数P可用如下形式表示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZjBlYTI1NWM2NDBjNDY3LnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>从这个式子中我们也可看出二进制表示出的小数是分段的，这也是为什么在Java中浮点数很多时候并不是十分精确的表示十进制小数的根本原因。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    float f1&#x3D;20f;</span><br><span class="line">    float f2&#x3D;20.3f;</span><br><span class="line">    float f3&#x3D;20.5f;</span><br><span class="line"></span><br><span class="line">    double d1&#x3D;20;</span><br><span class="line">    double d2&#x3D;20.3;</span><br><span class="line">    double d3&#x3D;20.5;</span><br><span class="line"></span><br><span class="line">    System.out.println(f1&#x3D;&#x3D;d1);</span><br><span class="line">    System.out.println(f2&#x3D;&#x3D;d2);</span><br><span class="line">    System.out.println(f3&#x3D;&#x3D;d3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>true<br>false<br>true</p></blockquote><p>以20.3举例：<br>20转换后变为 10100<br>0.3 要转换二进制，需要乘2, 乘完之后 取整数部分，然后用乘的结果减去整数部分， 然后 接着乘2, 直至最后没有小数或者小数出现循环, 即乘完.</p><blockquote><p>0.3 * 2 = 0.6 (0)<br>  0.6 * 2 = 1.2 (1)<br>  0.2 * 2 = 0.4 (0)<br>  0.4 * 2 = 0.8 (0)<br>  0.8 * 2 = 1.6 (1)</p></blockquote><p>计算到这里， 将再出现0.6,进入循环了，所以，结果<br>0.3 = 0.010011001…1001<br>所以20.3 = 10100.010011001…1001 (二进制).</p><h3 id="2、二进制的科学记数法表示"><a href="#2、二进制的科学记数法表示" class="headerlink" title="2、二进制的科学记数法表示"></a>2、二进制的科学记数法表示</h3><p>20.3 = 10100.010011001…1001 (二进制)=1.01000100110011E10…..（十进制科学计数）=1.01000100110011E100…..(二进制科学计数)</p><p>这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)</p><p>同时要注意一点，以float为例，最高位表示的是整个数的符号位，指数位一共8位，最高位表示的是指数位的正负，因为有可能是E-100这样的情况，所以虽然有8位，最高位只是符号位，剩下7位才是表示真正的数值，这也是使用移位存储的原因。</p><p>对于一个数字，只要不超过和float的范围，同时小数部分不是无限小数，就可以和对应的double类型相等。</p><h3 id="3、浮点数舍入规则"><a href="#3、浮点数舍入规则" class="headerlink" title="3、浮点数舍入规则"></a>3、浮点数舍入规则</h3><p>以52位尾数的双精度浮点数为例，舍入时需要重点参考第53位。</p><p>若第53位为1，而其后的位数都是0，此时就要使第52位为0；若第52位为0则不用再进行其他操作，若第52位为1，则第53位就要向52位进一位。</p><p>若第53位为1，但其后的位数不全为0，则第53为就要向第52位进一位。</p><p>若不是以上两种情况，也即53位为0，那么就直接舍弃不进位，称为下舍入。</p><p>浮点数舍入规则也就证明了为何在上文中提到的浮点数舍入中，相对舍入误差不能大于机器ε的一半。</p><p>对于java来说，一般float类型小数点后保留7位，而double类型小数点后保留15位。</p><p>这个原因也是因为尾数的数据宽度限制</p><p>对于float型来说，因为2^23 = 8388608</p><p>同时最左一位默认省略了，故实际能表示2^24 = 16777216个数，最多能表示8位，但绝对精确的只能表示7位。</p><p>而对于double型来说，2^52 = 4503599627370496，共16位。加上省略的一位，能表示2^53 = 9007199254740992。故double型最多能表示16位，而绝对精确的只能表示15位。</p><h3 id="4、机器ε"><a href="#4、机器ε" class="headerlink" title="4、机器ε"></a>4、机器ε</h3><p>机器ε表示1与大于1的最小浮点数之差。不同精度定义的机器ε不同。以双精度为例，</p><p>双精度表示1是</p><p>1.000……0000（52个0） × 2^0</p><p>而比1大的最小的双精度是（其实还能表示更小的范围，后文中会提到，但并不影响这里的机器ε）</p><p>1.000……0001 × 2^0</p><p>也即</p><p>2^-52 ≈ 2.220446049250313e-16。所以它就是双精度浮点数的机器ε。</p><p>在舍入中，相对舍入误差不能大于机器ε的一半。</p><p>对于双精度浮点数来说，这个值为0.00000005960464477539。</p><p>所以在Java中double类型中连续8个0.1相乘，就会出现表示不精确的情况。</p><p>参考：<br><a href="https://baijiahao.baidu.com/s?id=1618173300159774003&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1618173300159774003&amp;wfr=spider&amp;for=pc</a><br><a href="https://www.cnblogs.com/Vicebery/p/9997636.html" target="_blank" rel="noopener">https://www.cnblogs.com/Vicebery/p/9997636.html</a><br><a href="https://blog.csdn.net/Return_head/article/details/88623060" target="_blank" rel="noopener">https://blog.csdn.net/Return_head/article/details/88623060</a><br><a href="https://blog.csdn.net/u011277123/article/details/95774544" target="_blank" rel="noopener">https://blog.csdn.net/u011277123/article/details/95774544</a><br><a href="https://blog.csdn.net/endlessseaofcrow/article/details/81269079" target="_blank" rel="noopener">https://blog.csdn.net/endlessseaofcrow/article/details/81269079</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2020/01/06/Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2020/01/06/Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><h2 id="一、什么是反射？"><a href="#一、什么是反射？" class="headerlink" title="一、什么是反射？"></a>一、什么是反射？</h2><p><a href="https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990" target="_blank" rel="noopener">JAVA反射机制</a>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><blockquote><p>简单的来说：<br>1.通过new关键字创建对象操作对象，在编译时就已经确定。<br>2.通过反射可以在程序运行过程中动态的操作对象，可以获得编译期无法获得的信息，动态操作最大限度发挥了java扩展性。</p></blockquote><h2 id="二、反射原理"><a href="#二、反射原理" class="headerlink" title="二、反射原理"></a>二、反射原理</h2><p>Java反射的原理:java类的执行需要经历以下过程：</p><ul><li>编译：.java文件编译后生成.class字节码文件</li><li>加载：类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例</li><li>链接<br><code>验证</code>：格式（class文件规范） 语义（final类是否有子类） 操作<br><code>准备</code>：静态变量赋初值和内存空间，final修饰的内存空间直接赋原值，此处不是用户指定的初值。<br><code>解析</code>：符号引用转化为直接引用，分配地址</li><li>初始化：有父类先初始化父类，然后初始化自己；将static修饰代码执行一遍，如果是静态变量，则用用户指定值覆盖原有初值；如果是代码块，则执行一遍操作。</li></ul><p>Java的反射就是利用上面第二步加载到jvm中的.class文件来进行操作的。.class文件中包含java类的所有信息，当你不知道某个类具体信息时，可以使用反射获取class，然后进行各种操作。</p><p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。总结说：反射就是把java类中的各种成分映射成一个个的Java对象，并且可以进行操作。</p><h2 id="三、反射机制相关"><a href="#三、反射机制相关" class="headerlink" title="三、反射机制相关"></a>三、反射机制相关</h2><p>与Java反射相关的类如下：</p><table><thead><tr><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>Class类</td><td>代表类的实体，在运行的Java应用程序中表示类和接口</td></tr><tr><td>Field类</td><td>代表类的成员变量（成员变量也称为类的属性）</td></tr><tr><td>Method类</td><td>代表类的方法</td></tr><tr><td>Constructor类</td><td>代表类的构造方法</td></tr></tbody></table><p> 反射可访问的常用信息</p><table><thead><tr><th>类型</th><th>访问方法</th><th>返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>包路径</td><td>getPackage()</td><td>Package 对象</td><td>获取该类的存放路径</td></tr><tr><td>类名称</td><td>getName()</td><td>String 对象</td><td>获取该类的名称</td></tr><tr><td>继承类</td><td>getSuperclass()</td><td>Class 对象</td><td>获取该类继承的类</td></tr><tr><td>实现接口</td><td>getlnterfaces()</td><td>Class 型数组</td><td>获取该类实现的所有接口</td></tr><tr><td>构造方法</td><td>getConstructors()</td><td>Constructor 型数组</td><td>获取所有权限为 public 的构造方法</td></tr><tr><td>构造方法</td><td>getDeclaredContruectors()</td><td>Constructor 对象</td><td>获取当前对象的所有构造方法</td></tr><tr><td>方法</td><td>getMethods()</td><td>Methods 型数组</td><td>获取所有权限为 public 的方法</td></tr><tr><td>方法</td><td>getDeclaredMethods()</td><td>Methods 对象</td><td>获取当前对象的所有方法</td></tr><tr><td>成员变量</td><td>getFields()</td><td>Field 型数组</td><td>获取所有权限为 public 的成员变量</td></tr><tr><td>成员变量</td><td>getDeclareFileds()</td><td>Field 对象</td><td>获取当前对象的所有成员变量</td></tr><tr><td>内部类</td><td>getClasses()</td><td>Class 型数组</td><td>获取所有权限为 public 的内部类</td></tr><tr><td>内部类</td><td>getDeclaredClasses()</td><td>Class 型数组</td><td>获取所有内部类</td></tr><tr><td>内部类的声明类</td><td>getDeclaringClass()</td><td>Class 对象</td><td>如果该类为内部类，则返回它的成员类，否则返回 null</td></tr></tbody></table><p>Java 反射机制主要提供了以下功能，这些功能都位于java.lang.reflect包。</p><ul><li><p>在运行时判断任意一个对象所属的类。</p></li><li><p>在运行时构造任意一个类的对象。</p></li><li><p>在运行时判断任意一个类所具有的成员变量和方法。</p></li><li><p>在运行时调用任意一个对象的方法。</p></li><li><p>生成动态代理。</p></li></ul><h2 id="四、反射的使用"><a href="#四、反射的使用" class="headerlink" title="四、反射的使用"></a>四、反射的使用</h2><h3 id="1、java中的Class三种获取方式"><a href="#1、java中的Class三种获取方式" class="headerlink" title="1、java中的Class三种获取方式"></a>1、java中的Class三种获取方式</h3><p>　jdk提供了三种方式获取一个对象的Class，就Person person 来说</p><p>　　1.person .getClass()，这个是Object类里面的方法</p><p>　　2.Person .Class属性，任何的数据类型，基本数据类型或者抽象数据类型，都可以通过这种方式获取类</p><p>　　3.Class.forName(“”)，Class类提供了这样一个方法，让我们通过类名来获取到对象类</p><p>　说明：在运行期间，如果我们要产生某个类的对象，Java虚拟机(JVM)会检查该类型的Class对象是否已被加载。如果没有被加载，JVM会根据类的名称找到.class文件并加载它。一旦某个类型的Class对象已被加载到内存，就可以用它来产生该类型的所有对象。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;方式一</span><br><span class="line">Person person &#x3D; new Person();</span><br><span class="line">Class&lt;? extends Person&gt; personClazz01 &#x3D; person.getClass();</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;方式二</span><br><span class="line">try &#123;</span><br><span class="line">    Class&lt;?&gt; personClazz02 &#x3D; Class.forName(&quot;Person&quot;);</span><br><span class="line">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;方式三</span><br><span class="line">Class&lt;? extends Person&gt; personClazz03 &#x3D; Person.class;</span><br></pre></td></tr></table></figure><h3 id="2、如何通过反射获取私有成员变量和私有方法"><a href="#2、如何通过反射获取私有成员变量和私有方法" class="headerlink" title="2、如何通过反射获取私有成员变量和私有方法"></a>2、如何通过反射获取私有成员变量和私有方法</h3><p>Person类 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">private String name &#x3D; &quot;zhangsan&quot;;</span><br><span class="line">private String age;</span><br><span class="line"> </span><br><span class="line">public String getName() &#123;</span><br><span class="line">    return name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    Person person &#x3D; new Person();</span><br><span class="line">    &#x2F;&#x2F;打印没有改变属性之前的name值</span><br><span class="line">    System.out.println(&quot;before：&quot; + getPrivateValue(person, &quot;name&quot;));</span><br><span class="line">    person.setName(&quot;lisi&quot;);</span><br><span class="line">    &#x2F;&#x2F;打印修改之后的name值</span><br><span class="line">    System.out.println(&quot;after：&quot; + getPrivateValue(person, &quot;name&quot;));</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#x2F;**</span><br><span class="line"> * 通过反射获取私有的成员变量</span><br><span class="line"> *</span><br><span class="line"> * @param person</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">private Object getPrivateValue(Person person, String fieldName) &#123;</span><br><span class="line"> </span><br><span class="line">    try &#123;</span><br><span class="line">        Field field &#x3D; person.getClass().getDeclaredField(fieldName);</span><br><span class="line">        &#x2F;&#x2F; 参数值为true，打开禁用访问控制检查</span><br><span class="line">        &#x2F;&#x2F;setAccessible(true) 并不是将方法的访问权限改成了public，而是取消java的权限控制检查。</span><br><span class="line">        &#x2F;&#x2F;所以即使是public方法，其accessible 属相默认也是false</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        return field.get(person);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iNmRjM2Q1MWY1YTM5NzA1LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h3 id="3、demo"><a href="#3、demo" class="headerlink" title="3、demo"></a>3、demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br></pre></td><td class="code"><pre><span class="line">package cn.lee.demo;</span><br><span class="line"> </span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Modifier;</span><br><span class="line">import java.lang.reflect.TypeVariable;</span><br><span class="line"> </span><br><span class="line">public class Main &#123;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 为了看清楚Java反射部分代码，所有异常我都最后抛出来给虚拟机处理！</span><br><span class="line"> * @param args</span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> * @throws InstantiationException</span><br><span class="line"> * @throws IllegalAccessException</span><br><span class="line"> * @throws InvocationTargetException </span><br><span class="line"> * @throws IllegalArgumentException </span><br><span class="line"> * @throws NoSuchFieldException </span><br><span class="line"> * @throws SecurityException </span><br><span class="line"> * @throws NoSuchMethodException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, SecurityException, NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo1.  通过Java反射机制得到类的包名和类名</span><br><span class="line">Demo1();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo2.  验证所有的类都是Class类的实例对象</span><br><span class="line">Demo2();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo3.  通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]，无参构造</span><br><span class="line">Demo3();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo4:  通过Java反射机制得到一个类的构造函数，并实现构造带参实例对象</span><br><span class="line">Demo4();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo5:  通过Java反射机制操作成员变量, set 和 get</span><br><span class="line">Demo5();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等</span><br><span class="line">Demo6();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo7: 通过Java反射机制调用类中方法</span><br><span class="line">Demo7();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Demo8: 通过Java反射机制获得类加载器</span><br><span class="line">Demo8();</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo1: 通过Java反射机制得到类的包名和类名</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo1()</span><br><span class="line">&#123;</span><br><span class="line">Person person &#x3D; new Person();</span><br><span class="line">System.out.println(&quot;Demo1: 包名: &quot; + person.getClass().getPackage().getName() + &quot;，&quot; </span><br><span class="line">+ &quot;完整类名: &quot; + person.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo2: 验证所有的类都是Class类的实例对象</span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo2() throws ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;定义两个类型都未知的Class , 设置初值为null, 看看如何给它们赋值成Person类</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">        Class&lt;?&gt; class2 &#x3D; null;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;写法1, 可能抛出 ClassNotFoundException [多用这个写法]</span><br><span class="line">        class1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class="line">        System.out.println(&quot;Demo2:(写法1) 包名: &quot; + class1.getPackage().getName() + &quot;，&quot; </span><br><span class="line">+ &quot;完整类名: &quot; + class1.getName());</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;写法2</span><br><span class="line">        class2 &#x3D; Person.class;</span><br><span class="line">        System.out.println(&quot;Demo2:(写法2) 包名: &quot; + class2.getPackage().getName() + &quot;，&quot; </span><br><span class="line">+ &quot;完整类名: &quot; + class2.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo3: 通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]</span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> * @throws IllegalAccessException </span><br><span class="line"> * @throws InstantiationException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo3() throws ClassNotFoundException, InstantiationException, IllegalAccessException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class="line">&#x2F;&#x2F;由于这里不能带参数，所以你要实例化的这个类Person，一定要有无参构造函数哈～</span><br><span class="line">Person person &#x3D; (Person) class1.newInstance();</span><br><span class="line">person.setAge(20);</span><br><span class="line">person.setName(&quot;LeeFeng&quot;);</span><br><span class="line">System.out.println(&quot;Demo3: &quot; + person.getName() + &quot; : &quot; + person.getAge());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo4: 通过Java反射机制得到一个类的构造函数，并实现创建带参实例对象</span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> * @throws InvocationTargetException </span><br><span class="line"> * @throws IllegalAccessException </span><br><span class="line"> * @throws InstantiationException </span><br><span class="line"> * @throws IllegalArgumentException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo4() throws ClassNotFoundException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">Person person1 &#x3D; null;</span><br><span class="line">Person person2 &#x3D; null;</span><br><span class="line"></span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class="line">&#x2F;&#x2F;得到一系列构造函数集合</span><br><span class="line">Constructor&lt;?&gt;[] constructors &#x3D; class1.getConstructors();</span><br><span class="line"></span><br><span class="line">person1 &#x3D; (Person) constructors[0].newInstance();</span><br><span class="line">person1.setAge(30);</span><br><span class="line">person1.setName(&quot;leeFeng&quot;);</span><br><span class="line"></span><br><span class="line">person2 &#x3D; (Person) constructors[1].newInstance(20,&quot;leeFeng&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Demo4: &quot; + person1.getName() + &quot; : &quot; + person1.getAge()</span><br><span class="line">+ &quot;  ,   &quot; + person2.getName() + &quot; : &quot; + person2.getAge()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo5: 通过Java反射机制操作成员变量, set 和 get</span><br><span class="line"> * </span><br><span class="line"> * @throws IllegalAccessException </span><br><span class="line"> * @throws IllegalArgumentException </span><br><span class="line"> * @throws NoSuchFieldException </span><br><span class="line"> * @throws SecurityException </span><br><span class="line"> * @throws InstantiationException </span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo5() throws IllegalArgumentException, IllegalAccessException, SecurityException, NoSuchFieldException, InstantiationException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class="line">Object obj &#x3D; class1.newInstance();</span><br><span class="line"></span><br><span class="line">Field personNameField &#x3D; class1.getDeclaredField(&quot;name&quot;);</span><br><span class="line">personNameField.setAccessible(true);</span><br><span class="line">personNameField.set(obj, &quot;胖虎先森&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Demo5: 修改属性之后得到属性变量的值：&quot; + personNameField.get(obj));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等</span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo6() throws ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;取得父类名称</span><br><span class="line">Class&lt;?&gt;  superClass &#x3D; class1.getSuperclass();</span><br><span class="line">System.out.println(&quot;Demo6:  SuperMan类的父类名: &quot; + superClass.getName());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Field[] fields &#x3D; class1.getDeclaredFields();</span><br><span class="line">for (int i &#x3D; 0; i &lt; fields.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;类中的成员: &quot; + fields[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;取得类方法</span><br><span class="line">Method[] methods &#x3D; class1.getDeclaredMethods();</span><br><span class="line">for (int i &#x3D; 0; i &lt; methods.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;Demo6,取得SuperMan类的方法：&quot;);</span><br><span class="line">System.out.println(&quot;函数名：&quot; + methods[i].getName());</span><br><span class="line">System.out.println(&quot;函数返回类型：&quot; + methods[i].getReturnType());</span><br><span class="line">System.out.println(&quot;函数访问修饰符：&quot; + Modifier.toString(methods[i].getModifiers()));</span><br><span class="line">System.out.println(&quot;函数代码写法： &quot; + methods[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;取得类实现的接口,因为接口类也属于Class,所以得到接口中的方法也是一样的方法得到哈</span><br><span class="line">Class&lt;?&gt; interfaces[] &#x3D; class1.getInterfaces();</span><br><span class="line">for (int i &#x3D; 0; i &lt; interfaces.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;实现的接口类名: &quot; + interfaces[i].getName() );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo7: 通过Java反射机制调用类方法</span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> * @throws NoSuchMethodException </span><br><span class="line"> * @throws SecurityException </span><br><span class="line"> * @throws InvocationTargetException </span><br><span class="line"> * @throws IllegalAccessException </span><br><span class="line"> * @throws IllegalArgumentException </span><br><span class="line"> * @throws InstantiationException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo7() throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, InstantiationException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Demo7: \n调用无参方法fly()：&quot;);</span><br><span class="line">Method method &#x3D; class1.getMethod(&quot;fly&quot;);</span><br><span class="line">method.invoke(class1.newInstance());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;调用有参方法walk(int m)：&quot;);</span><br><span class="line">method &#x3D; class1.getMethod(&quot;walk&quot;,int.class);</span><br><span class="line">method.invoke(class1.newInstance(),100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Demo8: 通过Java反射机制得到类加载器信息</span><br><span class="line"> * </span><br><span class="line"> * 在java中有三种类类加载器。[这段资料网上截取]</span><br><span class="line">1）Bootstrap ClassLoader 此加载器采用c++编写，一般开发中很少见。</span><br><span class="line">2）Extension ClassLoader 用来进行扩展类的加载，一般对应的是jre\lib\ext目录中的类</span><br><span class="line">3）AppClassLoader 加载classpath指定的类，是最常用的加载器。同时也是java中默认的加载器。</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException </span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Demo8() throws ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">Class&lt;?&gt; class1 &#x3D; null;</span><br><span class="line">class1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class="line">String nameString &#x3D; class1.getClassLoader().getClass().getName();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Demo8: 类加载器类名: &quot; + nameString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * </span><br><span class="line"> * @author xiaoyaomeng</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">class  Person&#123;</span><br><span class="line">private int age;</span><br><span class="line">private String name;</span><br><span class="line">public Person()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public Person(int age, String name)&#123;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class SuperMan extends Person implements ActionInterface</span><br><span class="line">&#123;</span><br><span class="line">private boolean BlueBriefs;</span><br><span class="line"></span><br><span class="line">public void fly()</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;超人会飞耶～～&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean isBlueBriefs() &#123;</span><br><span class="line">return BlueBriefs;</span><br><span class="line">&#125;</span><br><span class="line">public void setBlueBriefs(boolean blueBriefs) &#123;</span><br><span class="line">BlueBriefs &#x3D; blueBriefs;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void walk(int m) &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;超人会走耶～～走了&quot; + m + &quot;米就走不动了！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">interface ActionInterface&#123;</span><br><span class="line">public void walk(int m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、java反射调用service或mapper中的接口"><a href="#五、java反射调用service或mapper中的接口" class="headerlink" title="五、java反射调用service或mapper中的接口"></a>五、java反射调用service或mapper中的接口</h2><p>java中的反射需要一个实例，但是接口无法提供这样的实例，但是JDK提供了一个叫做动态代理的东西，这个代理恰恰只能代理接口。所以我们想要反射接口需要使用这个动态代理来做。</p><p>在java的动态代理机制中，有两个重要的东西，一个是 InvocationHandler(接口)、另一个则是 Proxy(类)，这是我们动态代理必须用到的两个东西。</p><h3 id="1、静态代理"><a href="#1、静态代理" class="headerlink" title="1、静态代理"></a>1、静态代理</h3><p>先来看一下静态代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class TestStaticProxy &#123;</span><br><span class="line">    &#x2F;&#x2F;这里传入的是接口类型的对象，方便向上转型，实现多态</span><br><span class="line">    public static void consumer(ProxyInterface pi)&#123;</span><br><span class="line">        pi.say();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        consumer(new ProxyObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;代理接口</span><br><span class="line">interface ProxyInterface&#123;</span><br><span class="line">    public void say();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;被代理者</span><br><span class="line">class RealObject implements ProxyInterface&#123;</span><br><span class="line">    &#x2F;&#x2F;实现接口方法</span><br><span class="line">    @Override</span><br><span class="line">    public void say() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        System.out.println(&quot;say&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;代理者</span><br><span class="line">class ProxyObject implements ProxyInterface&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void say() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        &#x2F;&#x2F;dosomething for example</span><br><span class="line">        System.out.println(&quot;hello proxy&quot;);</span><br><span class="line">        new RealObject().say();</span><br><span class="line">        System.out.println(&quot;this is method end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line">hello proxy</span><br><span class="line">say</span><br><span class="line">this is method end</span><br></pre></td></tr></table></figure><h3 id="2、动态代理"><a href="#2、动态代理" class="headerlink" title="2、动态代理"></a>2、动态代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line">public class TestActiveProxy&#123;</span><br><span class="line">    static void customer(ProxyInterface pi)&#123;</span><br><span class="line">        pi.say();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        RealObject real &#x3D; new RealObject();</span><br><span class="line">        ProxyInterface proxy &#x3D; (ProxyInterface)Proxy.newProxyInstance(ProxyInterface.class.getClassLoader(),new Class[]&#123;ProxyInterface.class&#125;, new ProxyObject(real));</span><br><span class="line">        customer(proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface ProxyInterface&#123;</span><br><span class="line">    void say();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;被代理类</span><br><span class="line">class RealObject implements ProxyInterface&#123;</span><br><span class="line">    public void say()&#123;</span><br><span class="line">        System.out.println(&quot;i&#39;m talking&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;代理类，实现InvocationHandler 接口</span><br><span class="line">class ProxyObject implements InvocationHandler&#123;</span><br><span class="line">    private Object proxied &#x3D; null;</span><br><span class="line">    public ProxyObject()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public ProxyObject(Object proxied)&#123;</span><br><span class="line">        this.proxied  &#x3D; proxied;</span><br><span class="line">    &#125;</span><br><span class="line">    public Object invoke(Object arg0, Method arg1, Object[] arg2) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;hello&quot;);</span><br><span class="line">        return arg1.invoke(proxied, arg2);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、应用场景"><a href="#3、应用场景" class="headerlink" title="3、应用场景"></a>3、应用场景</h3><p>假如现在我们需要通过反射得到<code>TestMapper</code>接口，然后调用其中的一个<code>selectById</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface TestMapper&#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">        * 根据id查对象</span><br><span class="line">        *&#x2F;</span><br><span class="line">        User  selectById(@Param(&quot;id&quot;) Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在如果我们需要反射使用该接口根据用户ID获取用户对象是无法直接反射调取的，所以我们需要一个动态代理类。<br>创建一个<code>MyInvocationHandler</code>实现<code>InvocationHandler</code>接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    private Object target;</span><br><span class="line"></span><br><span class="line">    public MyInvocationHandler(Object target) &#123;</span><br><span class="line">        this.target &#x3D; target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        return method.invoke(target,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去生成代理对象并调用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> SqlSession sqlSession &#x3D; this.sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"> Class&lt;?&gt; clazz &#x3D; Class.forName(&quot;com.example.demo.mapper.TestMapper&quot;);</span><br><span class="line"></span><br><span class="line"> Object instance &#x3D; Proxy.newProxyInstance(</span><br><span class="line">                clazz.getClassLoader(),</span><br><span class="line">                new Class[]&#123;clazz&#125;,</span><br><span class="line">                new MyInvocationHandler(sqlSession.getMapper(clazz))</span><br><span class="line">        );</span><br><span class="line">&#x2F;&#x2F;这里我是通过sqlSession来获取Mapper的</span><br><span class="line"></span><br><span class="line"> Method method &#x3D; instance.getClass().getMethod(&quot;selectById&quot;,Integer.class);</span><br><span class="line"> method.invoke(instance, 1);</span><br><span class="line">&#x2F;&#x2F;object为mapper中传入的参数</span><br></pre></td></tr></table></figure><p>这里需要注意，newProxyInstance()方法中最后一个参数，即为我们创建的动态代理的类（因为我这里调用的接口为mybatis中mapper中的接口，所以需要从sqlSession中getMapper）。</p><p>参考：<br><a href="http://blog.qiji.tech/archives/4374" target="_blank" rel="noopener">http://blog.qiji.tech/archives/4374</a><br><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">https://www.jianshu.com/p/9be58ee20dee</a><br><a href="https://blog.csdn.net/ljphhj/article/details/12858767" target="_blank" rel="noopener">https://blog.csdn.net/ljphhj/article/details/12858767</a><br><a href="https://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zipkin</title>
      <link href="/2020/01/01/zipkin/"/>
      <url>/2020/01/01/zipkin/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="Waht-is-zipkin"><a href="#Waht-is-zipkin" class="headerlink" title="Waht is zipkin?"></a>Waht is zipkin?</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zYjQ1NTgzNDJhNWQ3NWVlLnBuZw?x-oss-process=image/format,png" alt="zipkin.png"><br>Zipkin是一种分布式跟踪系统。它有助于收集解决微服务架构中的延迟问题所需的时序数据。它管理这些数据的收集和查找。Zipkin的设计基于Google Dapper论文。</p><p>应用程序用于向Zipkin报告时序数据。Zipkin UI还提供了一个依赖关系图，显示了每个应用程序通过的跟踪请求数。如果要解决延迟问题或错误，可以根据应用程序，跟踪长度，注释或时间戳对所有跟踪进行筛选或排序。选择跟踪后，您可以看到每个跨度所需的总跟踪时间百分比，从而可以识别问题应用程序。</p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>下面我们将逐步构建并启动Zipkin实例，以便在本地检查Zipkin。有三个选项：使用Java，Docker或从源代码运行。</p><p>如果您熟悉Docker，这是首选的方法。如果您不熟悉Docker，请尝试通过Java或源代码运行。</p><blockquote><p>无论您如何启动Zipkin，请浏览http：// your_host：9411以查找跟踪！</p></blockquote><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p><a href="https://github.com/openzipkin/docker-zipkin" target="_blank" rel="noopener">Docker zipkin</a>工程可以创建docker 镜像, 提供脚本和一个<a href="https://github.com/openzipkin/docker-zipkin/blob/master/docker-compose.yml" target="_blank" rel="noopener">docker-compose.yml</a> 用于启动预建的镜像。最快的开始是直接运行最新的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9411:9411 openzipkin&#x2F;zipkin</span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>如果安装了Java 8或更高版本，最快的方法是获得最新版本后，通过java启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;curl -sSL https:&#x2F;&#x2F;zipkin.io&#x2F;quickstart.sh  |  bash -s</span><br><span class="line"></span><br><span class="line">&gt;java -jar zipkin.jar</span><br></pre></td></tr></table></figure><h4 id="Running-from-Source（源代码运行）"><a href="#Running-from-Source（源代码运行）" class="headerlink" title="Running from Source（源代码运行）"></a>Running from Source（源代码运行）</h4><p>Zipkin可以从源代码运行。要实现这一点，您需要获得<a href="https://github.com/openzipkin/zipkin" target="_blank" rel="noopener">zipkin源码</a></p><blockquote><p>get the latest source</p></blockquote><blockquote><p>git clone <a href="https://github.com/openzipkin/zipkin" target="_blank" rel="noopener">https://github.com/openzipkin/zipkin</a></p></blockquote><blockquote><p>cd zipkin</p></blockquote><blockquote><p>Build the server and also make its dependencies</p></blockquote><blockquote><p>./mvnw -DskipTests –also-make -pl zipkin-server clean install</p></blockquote><blockquote><p>Run the server</p></blockquote><blockquote><p>java -jar ./zipkin-server/target/zipkin-server-*exec.jar</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Tomcat8上传文件无可读权限问题</title>
      <link href="/2020/01/01/%E8%A7%A3%E5%86%B3Tomcat8%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%A0%E5%8F%AF%E8%AF%BB%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/01/%E8%A7%A3%E5%86%B3Tomcat8%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%A0%E5%8F%AF%E8%AF%BB%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/tomcat.png" alt=""></p><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>使用springmvc做了一个文件上传的功能，上传到nginx目录下的一个文件夹，但是通过目录访问的时候却报403的错误<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YTE5NGE0OTNmOTdmYzkxLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>去服务器查看了一下文件的权限，发现没有可读权限，于是定位了问题，上传的文件全都没有可读权限。</p><h3 id="为什么没有可读权限"><a href="#为什么没有可读权限" class="headerlink" title="为什么没有可读权限"></a>为什么没有可读权限</h3><p>网上查阅资料发现，linux默认umask为022，对应权限为755，其它用户可读可执行。可以<code>vim /etc/profile</code>，搜索umusk关键字查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ $UID -gt 199 ] &amp;&amp; [ &quot;&#96;&#x2F;usr&#x2F;bin&#x2F;id -gn&#96;&quot; &#x3D; &quot;&#96;&#x2F;usr&#x2F;bin&#x2F;id -un&#96;&quot; ]; then</span><br><span class="line">    umask 002</span><br><span class="line">else</span><br><span class="line">    umask 022</span><br></pre></td></tr></table></figure><p>而tomcat8默认umask为027，对应权限为750，也就是说其它用户连可读的权限都没有。<br>可打开catalina.sh文件，搜索umask查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Set UMASK unless it has been overridden</span><br><span class="line">if [ -z &quot;$UMASK&quot; ]; then</span><br><span class="line">    UMASK&#x3D;&quot;0027&quot;</span><br><span class="line">fi</span><br><span class="line">umask $UMASK</span><br></pre></td></tr></table></figure><p>在catalina.sh文件的开篇可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#   UMASK           (Optional) Override Tomcat&#39;s default UMASK of 0027</span><br></pre></td></tr></table></figure><p>于是问题有了答案<br>登录到服务器，进入到tomcat的bin目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim catalina.sh</span><br><span class="line">输入i,进入编辑模式，将umask改为0022</span><br><span class="line">：wq(保存退出)</span><br></pre></td></tr></table></figure><p>可以看到<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjU1N2JlN2UzMTVlMzE0LnBuZw?x-oss-process=image/format,png" alt="3b0b9d5dc0f2d2115073293aeee4331.png"><br>接下来重启tomcat，重新上传图片即可香油可读权限。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件版本命名规范及各阶段说明</title>
      <link href="/2020/01/01/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%8F%8A%E5%90%84%E9%98%B6%E6%AE%B5%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/01/01/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%8F%8A%E5%90%84%E9%98%B6%E6%AE%B5%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很多开发人员都没有经历过产品不断的迭代过程，基本上都是做完一套，至多经历一两个版本的迭代，基本上都会调入到另一个项目组或者离职，之后这样的事情不断地重复，直至离开这个行业。</p><p>开发人员3个月开发一个版本，定位version1，如果有bug，修复后该怎么升级这个版本号呢？可能是version2，修复这个bug后，如果还有bug呢，可能继续version3.，如果这样下去，还没到产品上线，你这个版本号都会很大，而且很难记得哪一版有什么功能。如果产品上线了以后，还会升级，大家可以想象一下，这样下去后，可能到达了version9999….</p><h3 id="命名格式"><a href="#命名格式" class="headerlink" title="命名格式"></a>命名格式</h3><p>版本控制比较普遍的 3 种命名格式 :GNU 风格的版本号命名格式、Windows 风格的版本号命名格式、.Net Framework 风格的版本号命名格式。</p><h5 id="GNU-风格的版本号命名格式"><a href="#GNU-风格的版本号命名格式" class="headerlink" title="GNU 风格的版本号命名格式"></a>GNU 风格的版本号命名格式</h5><p>主版本号 . 子版本号 [. 修正版本号 [. 编译版本号 ]]<br><code>Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]]</code><br>示例 :<code>1.2.1, 2.0, 5.0.0 build-13124</code></p><h5 id="Windows-风格的版本号命名格式"><a href="#Windows-风格的版本号命名格式" class="headerlink" title="Windows 风格的版本号命名格式"></a>Windows 风格的版本号命名格式</h5><p>主版本号 . 子版本号 [ 修正版本号 [. 编译版本号 ]]<br><code>Major_Version_Number.Minor_Version_Number[Revision_Number[.Build_Number]]</code><br>示例: <code>1.21, 2.0</code></p><h5 id="Net-Framework-风格的版本号命名格式"><a href="#Net-Framework-风格的版本号命名格式" class="headerlink" title=".Net Framework 风格的版本号命名格式"></a>.Net Framework 风格的版本号命名格式</h5><p>主版本号.子版本号[.编译版本号[.修正版本号]]<br><code>Major_Version_Number.Minor_Version_Number[.Build_Number[.Revision_Number]]</code><br>版本号由二至四个部分组成：主版本号、次版本号、内部版本号和修订号。主版本号和次版本号是必选的；内部版本号和修订号是可选的，但是如果定义了修订号部分，则内部版本号就是必选的。所有定义的部分都必须是大于或等于 0 的整数。</p><h5 id="应根据下面的约定使用这些部分："><a href="#应根据下面的约定使用这些部分：" class="headerlink" title="应根据下面的约定使用这些部分："></a>应根据下面的约定使用这些部分：</h5><p><code>Major</code> ：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。</p><p><code>Minor</code>：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。</p><p><code>Build</code> ：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。</p><p><code>Revision</code> ：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。</p><p>程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 (Hotfix) 更新。</p><p>因为目前市场上的软件基本上都是移动端化了，所以这里主要介绍GNU风格。</p><h3 id="软件版本阶段说明"><a href="#软件版本阶段说明" class="headerlink" title="软件版本阶段说明"></a>软件版本阶段说明</h3><ul><li><p>Base版: 此版本表示该软件仅仅是一个假页面链接，通常包括所有的功能和页面布局，但是页面中的功能都没有做完整的实现，只是做为整体网站的一个基础架构。</p></li><li><p>Alpha版: 此版本表示该软件在此阶段主要是以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改。</p></li><li><p>Beta版: 该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步消除，此版本主要的修改对像是软件的UI。</p></li><li><p>RC版: 该版本已经相当成熟了，基本上不存在导致错误的BUG，与即将发行的正式版相差无几。</p></li><li><p>Release版: 该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(Ｒ)。</p></li></ul><h3 id="版本命名规范"><a href="#版本命名规范" class="headerlink" title="版本命名规范"></a>版本命名规范</h3><p>软件版本号由四部分组成：</p><ul><li>第一部分为主版本号</li><li>第二部分为子版本号</li><li>第三部分为阶段版本号</li><li>第四部分为日期版本号加希腊字母版本号<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmJhMzQ1OWZhZWJlYzFhLnBuZw?x-oss-process=image/format,png" alt="版本命名规范.png"><h3 id="版本号修改规则"><a href="#版本号修改规则" class="headerlink" title="版本号修改规则"></a>版本号修改规则</h3></li><li><code>主版本号修改</code> 当功能模块有较大的变动，比如增加多个模块或者整体架构发生变化。此版本号由项目决定是否修改。</li><li><code>子版本号修改</code> 当功能有一定的增加或变化，比如增加了对权限控制、增加自定义视图等功能。此版本号由项目决定是否修改。</li><li><code>阶段版本号修改</code> 一般是 Bug 修复或是一些小的变动，要经常发布修订版，时间间隔不限，修复一个严重的bug即可发布一个修订版。此版本号由项目经理决定是否修改。</li><li><code>日期版本号</code> 用于记录修改项目的当前日期，每天对项目的修改都需要更改日期版本号。此版本号由开发人员决定是否修改。</li><li><code>希腊字母版本号</code> 此版本号用于标注当前版本的软件处于哪个开发阶段，当软件进入到另一个阶段时需要修改此版本号。此版本号由项目决定是否修改。<h3 id="版本号阶段标志"><a href="#版本号阶段标志" class="headerlink" title="版本号阶段标志"></a>版本号阶段标志</h3><table><thead><tr><th>阶段名称</th><th>阶段标识</th></tr></thead><tbody><tr><td>需求控制</td><td>a</td></tr><tr><td>设计阶段</td><td>b</td></tr><tr><td>编码阶段</td><td>c</td></tr><tr><td>单元测试</td><td>d</td></tr><tr><td>单元测试修改</td><td>e</td></tr><tr><td>集成测试</td><td>f</td></tr><tr><td>集成测试修改</td><td>g</td></tr><tr><td>系统测试</td><td>h</td></tr><tr><td>系统测试修改</td><td>i</td></tr><tr><td>验收测试</td><td>j</td></tr><tr><td>验收测试修改</td><td>k</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建Spring Boot项目及常用技术整合</title>
      <link href="/2020/01/01/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BASpring-Boot%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF%E6%95%B4%E5%90%88/"/>
      <url>/2020/01/01/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BASpring-Boot%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/springboot.jpg" alt=""></p><a id="more"></a><h3 id="Spring-Boot简介"><a href="#Spring-Boot简介" class="headerlink" title="Spring Boot简介"></a>Spring Boot简介</h3><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p><h3 id="Spring-Boot特点"><a href="#Spring-Boot特点" class="headerlink" title="Spring Boot特点"></a>Spring Boot特点</h3><ul><li><p>创建独立的Spring应用程序</p></li><li><p>嵌入的Tomcat，无需部署WAR文件</p></li><li><p>简化Maven配置</p></li><li><p>自动配置Spring</p></li><li><p>提供生产就绪型功能，如指标，健康检查和外部配置</p></li><li><p>绝对没有代码生成并且对XML也没有配置要求</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="1、访问http-start-spring-io-构建项目，也可在idea创建如下图："><a href="#1、访问http-start-spring-io-构建项目，也可在idea创建如下图：" class="headerlink" title="1、访问http://start.spring.io/构建项目，也可在idea创建如下图："></a>1、访问<a href="http://start.spring.io/构建项目，也可在idea创建如下图：" target="_blank" rel="noopener">http://start.spring.io/构建项目，也可在idea创建如下图：</a></h4><p><img src="https://img-blog.csdnimg.cn/20191218173310114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RldmlsbGkwMzEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05ZWMxNTkwMzg4MzE0ZWYxLnBuZw?x-oss-process=image/format,png" alt="step2.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xN2RlNDY2YTU4Yjk1YWQyLnBuZw?x-oss-process=image/format,png" alt="step3.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNzQwYWIyYzFiMTE2ZGYzLnBuZw?x-oss-process=image/format,png" alt="step4.png"></p><h4 id="2、-springboot默认生成三个文件"><a href="#2、-springboot默认生成三个文件" class="headerlink" title="2、 springboot默认生成三个文件"></a>2、 springboot默认生成三个文件</h4><h5 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.example&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;demo&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>重点就一个gav：spring-boot-starter-web，其他可以删除。</p><h5 id="2-2-application-properties"><a href="#2-2-application-properties" class="headerlink" title="2.2 application.properties"></a>2.2 application.properties</h5><p>该文件默认为空，springboot的默认启动端口号：8080，可以在改文件修改。建议用yml的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br></pre></td></tr></table></figure><h5 id="2-3-启动类文件"><a href="#2-3-启动类文件" class="headerlink" title="2.3 启动类文件"></a>2.3 启动类文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class JxcApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(JxcApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-验证springboot"><a href="#2-4-验证springboot" class="headerlink" title="2.4 验证springboot"></a>2.4 验证springboot</h5><p>在项目包路径下创建一个Controller，写一个<code>HelloController</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String getHello() &#123;</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器查看效果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMDhmZmU5ZDVjZWI5Nzg4LnBuZw?x-oss-process=image/format,png" alt="HelloController.png"></p></li></ul><h3 id="完成项目"><a href="#完成项目" class="headerlink" title="完成项目"></a>完成项目</h3><h4 id="完整项目目录"><a href="#完整项目目录" class="headerlink" title="完整项目目录"></a>完整项目目录</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZDM5ZWI1ZTRkOGU5ZjJjLnBuZw?x-oss-process=image/format,png" alt="project.png"></p><h4 id="1、项目依赖"><a href="#1、项目依赖" class="headerlink" title="1、项目依赖"></a>1、项目依赖</h4><ul><li>web <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;aspectjweaver.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>mysql<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>lombok(可选)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>pagehelper(可选)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;$&#123;pagehelper.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>JWT(可选)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;io.jsonwebtoken&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;jjwt&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;$&#123;jwt.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>mybatis<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>shiro<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;shiro-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.4.0&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>hutool(可选)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.0.7&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>druid<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.1.10&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.1.10&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>jdbc<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>fastjson<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;fastjson.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>tomcat<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.tomcat.embed&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;tomcat-embed-core&lt;&#x2F;artifactId&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>附上properties<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">        &lt;project.version&gt;1.0&lt;&#x2F;project.version&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">        &lt;mysql.version&gt;5.1.25&lt;&#x2F;mysql.version&gt;</span><br><span class="line">        &lt;pagehelper.version&gt;1.2.12&lt;&#x2F;pagehelper.version&gt;</span><br><span class="line">        &lt;jwt.version&gt;0.9.1&lt;&#x2F;jwt.version&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">        &lt;commons.lang.version&gt;3.9&lt;&#x2F;commons.lang.version&gt;</span><br><span class="line">        &lt;aspectjweaver.version&gt;1.9.4&lt;&#x2F;aspectjweaver.version&gt;</span><br><span class="line">        &lt;fastjson.version&gt;1.2.62&lt;&#x2F;fastjson.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure><h4 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h4><h5 id="2-1修改application-properties为application-yml"><a href="#2-1修改application-properties为application-yml" class="headerlink" title="2.1修改application.properties为application.yml"></a>2.1修改<code>application.properties</code>为<code>application.yml</code></h5>配置端口，项目根路径，spring配置，mybatis配置，分页插件配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8100</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: &#x2F;api</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-8</span><br><span class="line">      force: true</span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:&#x2F;mapper&#x2F;*.xml</span><br><span class="line">  type-aliases-package: com.example.jxc.domain.entity.*</span><br><span class="line">  configuration:</span><br><span class="line">    cache-enabled: true</span><br><span class="line">    lazy-loading-enabled: true</span><br><span class="line">    multiple-result-sets-enabled: true</span><br><span class="line">    use-column-label: true</span><br><span class="line">    call-setters-on-nulls: true</span><br><span class="line">    local-cache-scope: session</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    default-executor-type: BATCH</span><br><span class="line">    auto-mapping-behavior: PARTIAL</span><br><span class="line"></span><br><span class="line">pagehelper:</span><br><span class="line">  helperDialect: mysql</span><br><span class="line">  reasonable: true</span><br><span class="line">  supportMethodsArguments: true</span><br><span class="line">  params: count&#x3D;countSql</span><br></pre></td></tr></table></figure></li></ul><p>mybatis中的configuration配置，这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项的意图、默认值等。<br>| 设置名| 描述| 有效值|默认值|<br>|—–|—–|——|——|<br>| cacheEnabled | 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。 |  true  false |true|<br>| lazyLoadingEnabled| 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 |  true  false |false|<br>| aggressiveLazyLoading|      当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。 |  true  false |false （在 3.4.1 及之前的版本默认值为 true） |<br>| multipleResultSetsEnabled| 是否允许单一语句返回多结果集（需要驱动支持）。 |  true  false |true|<br>| useColumnLabel|      使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。  |  true  false |true|<br>| useGeneratedKeys| 允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。 |  true  false |false |<br>| autoMappingBehavior| 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 | NONE, PARTIAL, FULL  |PARTIAL|<br>| autoMappingUnknownColumnBehavior| 指定发现自动映射目标未知列（或者未知属性类型）的行为。NONE: 不做任何反应，WARNING: 输出提醒日志 (‘org.apache.ibatis.session.AutoMappingUnknownColumnBehavior’ 的日志等级必须设置为 WARN) ，FAILING: 映射失败 (抛出 SqlSessionException) |  NONE, WARNING, FAILING  |NONE|<br>| defaultExecutorType| 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。 |  SIMPLE REUSE BATCH  |SIMPLE|<br>| defaultStatementTimeout|      设置超时时间，它决定驱动等待数据库响应的秒数。  |  任意正整数 |未设置 (null) |<br>| defaultFetchSize|      为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。  |  任意正整数 |未设置 (null) |<br>| defaultResultSetType|      Specifies a scroll strategy when omit it per statement settings. (Since: 3.5.2)  |  FORWARD_ONLY SCROLL_SENSITIVE SCROLL_INSENSITIVE  DEFAULT(same behavior with ‘Not Set’)  |Not Set (null) |<br>| safeRowBoundsEnabled| 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。  |  true  false |false |<br>| safeResultHandlerEnabled|允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为 false。 |  true  false |false |<br>| mapUnderscoreToCamelCase|是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 |  true  false |false |<br>| localCacheScope| MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。  |  SESSION  STATEMENT |SESSION  |<br>| jdbcTypeForNull| 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 |  JdbcType 常量，常用值：NULL, VARCHAR 或 OTHER。|OTHER|<br>| lazyLoadTriggerMethods| 指定哪个对象的方法触发一次延迟加载。 | 用逗号分隔的方法列表 |equals,clone,hashCode,toString |<br>| defaultScriptingLanguage| 指定动态 SQL 生成的默认语言。 | 一个类型别名或完全限定类名 |org.apache.ibatis.scripting.xmltags.XMLLanguageDriver |<br>| defaultEnumTypeHandler|指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）  | 一个类型别名或完全限定类名 |org.apache.ibatis.type.EnumTypeHandler |<br>| callSettersOnNulls| 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值初始化的时候比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。 |  true  false |false |<br>| returnInstanceForEmptyRow| 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2）  |  true  false |false |<br>| logPrefix| 指定 MyBatis 增加到日志名称的前缀。 |  任何字符串 |未设置|<br>| logImpl| 指定 MyBatis      指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 |  SLF4J,LOG4J,LOG4J2,JDK_LOGGING,COMMONS_LOGGING,STDOUT_LOGGING,NO_LOGGING |未设置|<br>| proxyFactory|      指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。 |       CGLIB ,JAVASSIST |AVASSIST （MyBatis 3.3 以上） |<br>| vfsImpl| 指定 VFS 的实现  |       自定义 VFS 的实现的类全限定名，以逗号分隔。 |未设置|<br>| useActualParamName| 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）  |  true   false  |true|<br>| configurationFactory|      指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3）   |       类型别名或者全类名.  |未设置|</p><h5 id="2-2-新建application-dev-yml"><a href="#2-2-新建application-dev-yml" class="headerlink" title="2.2 新建application-dev.yml"></a>2.2 新建<code>application-dev.yml</code></h5><p>配置数据库信息,通过<code>application.yml</code>中的active来启用dev配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure><p><code>application-dev.yml</code>完整配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    #   数据源基本配置</span><br><span class="line">    username: root</span><br><span class="line">    password:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;fhshgl</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    #   数据源其他配置</span><br><span class="line">    initialSize: 5</span><br><span class="line">    minIdle: 5</span><br><span class="line">    maxActive: 20</span><br><span class="line">    maxWait: 60000</span><br><span class="line">    timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">    minEvictableIdleTimeMillis: 300000</span><br><span class="line">    validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">    testWhileIdle: true</span><br><span class="line">    testOnBorrow: false</span><br><span class="line">    testOnReturn: false</span><br><span class="line">    poolPreparedStatements: true</span><br><span class="line">    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#39;wall&#39;用于防火墙</span><br><span class="line">    filters: stat,wall</span><br><span class="line">    maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">    useGlobalDataSourceStat: true</span><br><span class="line">    connectionProperties: druid.stat.mergeSql&#x3D;true;druid.stat.slowSqlMillis&#x3D;500</span><br></pre></td></tr></table></figure><h4 id="3、数据库连接池"><a href="#3、数据库连接池" class="headerlink" title="3、数据库连接池"></a>3、数据库连接池</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjc5NGJmZjQ0ZDk3NjY4LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class DruidConfig &#123;</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(prefix &#x3D; &quot;spring.datasource&quot;)</span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource druid()&#123;</span><br><span class="line">        return  new DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 配置Druid的监控</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean statViewServlet()&#123;</span><br><span class="line">        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean(new StatViewServlet(), &quot;&#x2F;druid&#x2F;*&quot;);</span><br><span class="line">        Map&lt;String,String&gt; initParams &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);</span><br><span class="line">        initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);</span><br><span class="line">        &#x2F;&#x2F;默认就是允许所有访问</span><br><span class="line">        initParams.put(&quot;allow&quot;,&quot;&quot;);</span><br><span class="line">        initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 配置一个web监控的filter</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean webStatFilter()&#123;</span><br><span class="line">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(new WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; initParams &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,&#x2F;druid&#x2F;*&quot;);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(&quot;&#x2F;*&quot;));</span><br><span class="line"></span><br><span class="line">        return  bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、shiro"><a href="#4、shiro" class="headerlink" title="4、shiro"></a>4、shiro</h4><h5 id="4-1自定义realm"><a href="#4-1自定义realm" class="headerlink" title="4.1自定义realm"></a>4.1自定义realm</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMzlmZmVlNDViNzQxOWIzLnBuZw?x-oss-process=image/format,png" alt="realm.png"><br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class MyRealm extends AuthorizingRealm&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">        &#x2F;&#x2F;拿到封装好账户密码的token</span><br><span class="line">        UsernamePasswordToken token &#x3D; (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        String userName &#x3D; token.getUsername();</span><br><span class="line">        &#x2F;&#x2F;用户校验</span><br><span class="line">        User user &#x3D; this.userService.getUser(userName);</span><br><span class="line">        if (user &#x3D;&#x3D; null) &#123;</span><br><span class="line">            throw new AuthenticationException(&quot;用户名或密码错误！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;加盐 计算盐值 保证每个加密后的 MD5 不一样</span><br><span class="line">        ByteSource credentialsSalt &#x3D; ByteSource.Util.bytes(user.getUsername());</span><br><span class="line">        SimpleAuthenticationInfo info &#x3D; new SimpleAuthenticationInfo(user, user.getPassword(), credentialsSalt,</span><br><span class="line">                this.getName());</span><br><span class="line">        return info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2shiro配置"><a href="#4-2shiro配置" class="headerlink" title="4.2shiro配置"></a>4.2shiro配置</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kMmViZjdkM2UwOWExNzBlLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 主要配置一些相应的URL的规则和访问权限</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public ShiroFilterFactoryBean shiroFilter() &#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean &#x3D; new ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager());</span><br><span class="line">        &#x2F;&#x2F;拦截器.</span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionMap &#x3D; new LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">        &#x2F;&#x2F;配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了</span><br><span class="line">        filterChainDefinitionMap.put(&quot;&#x2F;system&#x2F;logout&quot;, &quot;anon&quot;);</span><br><span class="line">        &#x2F;&#x2F;过滤链定义，从上向下顺序执行，一般将&#x2F;**放在最为下边</span><br><span class="line">        &#x2F;&#x2F;authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问</span><br><span class="line">&#x2F;&#x2F;        filterChainDefinitionMap.put(&quot;&#x2F;static&#x2F;**&quot;, &quot;anon&quot;);</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(&quot;&#x2F;system&#x2F;login&quot;);</span><br><span class="line">        filterChainDefinitionMap.put(&quot;&#x2F;**&quot;, &quot;authc&quot;);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        return shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 注入 securityManager</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultWebSecurityManager securityManager() &#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager &#x3D; new DefaultWebSecurityManager();</span><br><span class="line">        &#x2F;&#x2F; 设置realm.</span><br><span class="line">        securityManager.setRealm(customRealm());</span><br><span class="line">        return securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 自定义身份认证 realm;</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 必须写这个类，并加上 @Bean 注解，目的是注入 MyRealm，</span><br><span class="line">     * 否则会影响 MyRealm 中其他类的依赖注入</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public MyRealm customRealm() &#123;</span><br><span class="line">        return new MyRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证</span><br><span class="line">     * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    @DependsOn(&#123;&quot;lifecycleBeanPostProcessor&quot;&#125;)</span><br><span class="line">    public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() &#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator &#x3D; new DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        advisorAutoProxyCreator.setProxyTargetClass(true);</span><br><span class="line">        return advisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor() &#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor &#x3D; new AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());</span><br><span class="line">        return authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Shiro生命周期处理器 ---可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123;</span><br><span class="line">        return new LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、过滤器-跨域过滤"><a href="#5、过滤器-跨域过滤" class="headerlink" title="5、过滤器-跨域过滤"></a>5、过滤器-跨域过滤</h4><h5 id="5-1跨域过滤"><a href="#5-1跨域过滤" class="headerlink" title="5.1跨域过滤"></a>5.1跨域过滤</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODEwMTBkMGZhZGEwYTcwLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class CostFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest req &#x3D; (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse resp &#x3D; (HttpServletResponse) response;</span><br><span class="line">        String origin &#x3D; req.getHeader(&quot;Origin&quot;);</span><br><span class="line">        if (origin &#x3D;&#x3D; null) &#123;</span><br><span class="line">            origin &#x3D; req.getHeader(&quot;Referer&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 允许指定域访问跨域资源</span><br><span class="line">        resp.setHeader(&quot;Access-Control-Allow-Origin&quot;, origin);</span><br><span class="line">        &#x2F;&#x2F; 允许客户端携带跨域cookie，此时origin值不能为“*”，只能为指定单一域名</span><br><span class="line">        resp.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class="line"></span><br><span class="line">        if (&quot;OPTIONS&quot;.equals(req.getMethod())) &#123;</span><br><span class="line">            String allowMethod &#x3D; req.getHeader(&quot;Access-Control-Request-Method&quot;);</span><br><span class="line">            String allowHeaders &#x3D; req.getHeader(&quot;Access-Control-Request-Headers&quot;);</span><br><span class="line">            &#x2F;&#x2F; 浏览器缓存预检请求结果时间,单位:秒</span><br><span class="line">            resp.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;86400&quot;);</span><br><span class="line">            &#x2F;&#x2F; 允许浏览器在预检请求成功之后发送的实际请求方法名</span><br><span class="line">            resp.setHeader(&quot;Access-Control-Allow-Methods&quot;, allowMethod);</span><br><span class="line">            &#x2F;&#x2F; 允许浏览器发送的请求消息头</span><br><span class="line">            resp.setHeader(&quot;Access-Control-Allow-Headers&quot;, allowHeaders);</span><br><span class="line">            resp.setHeader(&quot;Content-Type&quot;, &quot;application&#x2F;json;charset&#x3D;utf-8&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-过滤器配置"><a href="#5-2-过滤器配置" class="headerlink" title="5.2 过滤器配置"></a>5.2 过滤器配置</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZWU3NDQzY2JkMDg2MDVkLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class FilterConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean configureFilter()&#123;</span><br><span class="line">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        bean.setName(&quot;costFilter&quot;);</span><br><span class="line">        CostFilter costFilter &#x3D; new CostFilter();</span><br><span class="line">        bean.setFilter(costFilter);</span><br><span class="line">        bean.setOrder(1);</span><br><span class="line">        List&lt;String&gt; urlList &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">        urlList.add(&quot;&#x2F;*&quot;);</span><br><span class="line">        bean.setUrlPatterns(urlList);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、token拦截"><a href="#6、token拦截" class="headerlink" title="6、token拦截"></a>6、token拦截</h4><h5 id="6-1JWT"><a href="#6-1JWT" class="headerlink" title="6.1JWT"></a>6.1JWT</h5><p>jwt工具类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">public class JwtUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static SecretKey getBase64Key() &#123;</span><br><span class="line">        String stringKey &#x3D; &quot;MyJwtSecret&quot;;</span><br><span class="line">        byte[] encodeKey &#x3D; Base64.getDecoder().decode(stringKey);</span><br><span class="line">        SecretKey key &#x3D; new SecretKeySpec(encodeKey, 0, encodeKey.length, &quot;AES&quot;);</span><br><span class="line">        return key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 签发token</span><br><span class="line">     *</span><br><span class="line">     * @param userName 用户名</span><br><span class="line">     * @return token</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String create(String userName) &#123;</span><br><span class="line">        Date now &#x3D; new Date(System.currentTimeMillis());</span><br><span class="line">        String token &#x3D; Jwts.builder()</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .setSubject(userName)</span><br><span class="line">                .setExpiration(new Date(System.currentTimeMillis() + 60 * 60 * 1000))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, getBase64Key())</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解析token</span><br><span class="line">     *</span><br><span class="line">     * @param token token</span><br><span class="line">     * @return 用户名</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String parse(String token) &#123;</span><br><span class="line">        String username &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            username &#x3D; Jwts.parser()</span><br><span class="line">                    .setSigningKey(getBase64Key())</span><br><span class="line">                    .parseClaimsJws(token.replace(&quot;Bearer &quot;, &quot;&quot;))</span><br><span class="line">                    .getBody()</span><br><span class="line">                    .getSubject();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 检验token是否过期</span><br><span class="line">     *</span><br><span class="line">     * @param token</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static boolean verify(String token) &#123;</span><br><span class="line">        Date expiraDate &#x3D; null;</span><br><span class="line">        Date currentDate &#x3D; new Date();</span><br><span class="line">        try &#123;</span><br><span class="line">            expiraDate &#x3D; Jwts.parser()</span><br><span class="line">                    .setSigningKey(getBase64Key())</span><br><span class="line">                    .parseClaimsJws(token.replace(&quot;Bearer &quot;, &quot;&quot;))</span><br><span class="line">                    .getBody()</span><br><span class="line">                    .getExpiration();</span><br><span class="line">            if (currentDate.before(expiraDate)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2token拦截器"><a href="#6-2token拦截器" class="headerlink" title="6.2token拦截器"></a>6.2token拦截器</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01MzMwZjU3ZTVkNTcxOTYzLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TokenInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    public Log log &#x3D; LogFactory.getLog(TokenInterceptor.class);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)&#123;</span><br><span class="line">        if (request.getMethod().equals(&quot;OPTIONS&quot;)) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        String token &#x3D; request.getHeader(&quot;Authorization&quot;);</span><br><span class="line">        if (token !&#x3D; null) &#123;</span><br><span class="line">            boolean result &#x3D; JwtUtils.verify(token);</span><br><span class="line">            if (result) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.error(&quot;认证失败&quot;);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_NON_AUTHORITATIVE_INFORMATION);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3配置拦截器"><a href="#6-3配置拦截器" class="headerlink" title="6.3配置拦截器"></a>6.3配置拦截器</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjEyNWRjZWNhZjcyODA4LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class InterceptorConfig extends WebMvcConfigurationSupport &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TokenInterceptor tokenInterceptor;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        registry.addInterceptor(tokenInterceptor)</span><br><span class="line">                .addPathPatterns(&quot;&#x2F;**&quot;)</span><br><span class="line">                .excludePathPatterns(&quot;&#x2F;**&#x2F;login&quot;)</span><br><span class="line">                .excludePathPatterns(&quot;&#x2F;**&#x2F;logOut&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、完成一个登录接口LoginController"><a href="#7、完成一个登录接口LoginController" class="headerlink" title="7、完成一个登录接口LoginController"></a>7、完成一个登录接口<code>LoginController</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;system&quot;)</span><br><span class="line">public class LoginController extends BaseController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 浏览器点击登录</span><br><span class="line">     *</span><br><span class="line">     * @param user</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @PostMapping(&quot;&#x2F;login&quot;)</span><br><span class="line">    public R login(@RequestBody User user) &#123;</span><br><span class="line">        log.debug(&quot;------浏览器点击登录------&quot;);</span><br><span class="line">        String userName &#x3D; user.getUsername();</span><br><span class="line">        String passWord &#x3D; user.getPassword();</span><br><span class="line">        UsernamePasswordToken usernamePasswordToken &#x3D; new UsernamePasswordToken(userName, MD5.md5Salt(passWord, userName));</span><br><span class="line">        Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class="line">        try &#123;</span><br><span class="line">            subject.login(usernamePasswordToken);</span><br><span class="line">            String token &#x3D; JwtUtils.create(userName);</span><br><span class="line">            return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);</span><br><span class="line">        &#125; catch (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return R.error(R.MSG_LOGIN_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务网关 Spring Cloud Gateway</title>
      <link href="/2020/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-Spring-Cloud-Gateway/"/>
      <url>/2020/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-Spring-Cloud-Gateway/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/weifuwu.png" alt=""></p><a id="more"></a><h2 id="什么是网关"><a href="#什么是网关" class="headerlink" title="什么是网关"></a>什么是网关</h2><p>假设你现在要做一个电商应用，前端是移动端的APP，后端是各种微服务。那你可能某个页面需要调用多个服务的数据来展示。如果没有网关，你的系统看起来就是这个样子的：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01YTQ4NGE3ZTU4Y2M4ODk3LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p>而如果加上了网关，你的系统就会变成这个样子：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02MzQxNWM5YzY0YzViYWVmLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>#Spring Cloud Gateway<br>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><p>Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Netflix Zuul，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul><li>Route（路由）：这是网关的基本构建块。它由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。</li><li>Predicate（断言）：这是一个 Java 8 的 Predicate。输入类型是一个 ServerWebExchange。我们可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。</li><li>Filter（过滤器）：这是org.springframework.cloud.gateway.filter.GatewayFilter的实例，我们可以使用它修改请求和响应。<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNTlmNTA3MTU0NDBkNjdhLnBuZw?x-oss-process=image/format,png" alt="gateway.png"></li></ul><p>（PS：看到这张图是不是很熟悉，没错，很像SpringMVC的请求处理过程）</p><ul><li><p>请求发送到网关，DispatcherHandler是HTTP请求的中央分发器，接管请求并将请求匹配到相应的 HandlerMapping。</p></li><li><p>请求与处理器之间有一个映射关系，网关将会对请求进行路由，handler 此处会匹配到 RoutePredicateHandlerMapping，匹配请求对应的 Route。</p></li><li><p>随后到达网关的 web 处理器，该 WebHandler 代理了一系列网关过滤器和全局过滤器的实例，如对请求或者响应的 Header 处理（增加或者移除某个 Header）。</p></li><li><p>最后，转发到具体的代理服务。</p></li></ul><p>简而言之：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hMzVmNzhiZTMzNjJhN2EwLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br>客户端向 Spring Cloud Gateway 发出请求。如果 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。 过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="1-新建一个项目gatewayTest"><a href="#1-新建一个项目gatewayTest" class="headerlink" title="1.新建一个项目gatewayTest"></a>1.新建一个项目gatewayTest</h3><p>在项目中添加3个module<code>eureka,producer,gateway</code><br>项目结构<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWY0NWYzNWNhMjg2MTc0LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h3 id="2-rureka"><a href="#2-rureka" class="headerlink" title="2.rureka"></a>2.rureka</h3><p>新建module</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YzI0YjFlZWYwMjg3ZDEwLnBuZw?x-oss-process=image/format,png" alt="step1.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzMwMjIwY2ZhMGM2NjUzLnBuZw?x-oss-process=image/format,png" alt="step2.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iYjc4NmVmZjgxMGIwY2NjLnBuZw?x-oss-process=image/format,png" alt="step3.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZWU4NDdkZGZjOWNmY2M2LnBuZw?x-oss-process=image/format,png" alt="step4.png"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGQ0YTllM2RkOGFmZGE4LnBuZw?x-oss-process=image/format,png" alt="step5.png"></p><p>添加eureka依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>完整pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.example.eureka&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;eureka&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;name&gt;eureka&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    fetch-registry: false</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.example.eureka.eureka;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@EnableEurekaServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class EurekaApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序，访问<a href="http://localhost:8761/![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05NzY5NzhkMzZmOGM1NmJlLnBuZw?x-oss-process=image/format,png)" target="_blank" rel="noopener">http://localhost:8761/![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05NzY5NzhkMzZmOGM1NmJlLnBuZw?x-oss-process=image/format,png)</a><br>现在还没有服务进行注册</p><h3 id="3-producer"><a href="#3-producer" class="headerlink" title="3.producer"></a>3.producer</h3><p>新建producer的module，同创建rureka，不同处如下图，其他都一样。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZjY1YTg2Y2ZmZTM3NTI4LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p>完整pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.example.producer&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;producer&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;producer&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: producer</span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.example.producer.producer;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ProducerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建2个类控制器<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjk5MjM2Y2Y5MzQyOTMwLnBuZw?x-oss-process=image/format,png" alt="图片.png"><br><code>HelloController</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;say&quot;)</span><br><span class="line">    public String say() &#123;</span><br><span class="line">        return &quot;Hello Every Buddy&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GoodByeController</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;goodbye&quot;)</span><br><span class="line">public class GoodByeController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;say&quot;)</span><br><span class="line">    public String say() &#123;</span><br><span class="line">        return &quot;Bye Bye&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序，访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02NzU2N2M5NTNiM2VkMDIyLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h3 id="4-gateway"><a href="#4-gateway" class="headerlink" title="4.gateway"></a>4.gateway</h3><p>创建过程同eureka<br>完整pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.example.gateway&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gateway&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;gateway&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">test:</span><br><span class="line">  uri: lb:&#x2F;&#x2F;producer</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway</span><br><span class="line">#  cloud:</span><br><span class="line">#    gateway:</span><br><span class="line">#      routes:</span><br><span class="line">#        - id: route_producer_hello</span><br><span class="line">#          uri: $&#123;test.uri&#125; # uri以lb:&#x2F;&#x2F;开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称</span><br><span class="line">#          predicates:</span><br><span class="line">#            - Path&#x3D;&#x2F;api-hello&#x2F;**</span><br><span class="line">#          filters:</span><br><span class="line">#            - StripPrefix&#x3D;1 # 表示在转发时去掉api</span><br><span class="line">#</span><br><span class="line">#        - id: route_producer_goodbye</span><br><span class="line">#          uri: $&#123;test.uri&#125;</span><br><span class="line">#          predicates:</span><br><span class="line">#            - Path&#x3D;&#x2F;api-goodbye&#x2F;**</span><br><span class="line">#          filters:</span><br><span class="line">#            - StripPrefix&#x3D;1</span><br><span class="line">#            - name: Hystrix</span><br><span class="line">#              args:</span><br><span class="line">#                name: myfallbackcmd</span><br><span class="line">#                fallbackUri: forward:&#x2F;user&#x2F;fallback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org.springframework.cloud.gateway: TRACE</span><br><span class="line">    org.springframework.http.server.reactive: DEBUG</span><br><span class="line">    org.springframework.web.reactive: DEBUG</span><br><span class="line">    reactor.ipc.netty: DEBUG</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class="line">    enabled: true # 是否启用注册服务 默认为true, false是不启用</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.example.gateway.gateway;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line">import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class GatewayApplication &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;test.uri&#125;&quot;)</span><br><span class="line">    private String uri;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RouteLocator routeLocator(RouteLocatorBuilder builder)&#123;</span><br><span class="line">        return builder.routes()</span><br><span class="line">                .route(r -&gt;r.path(&quot;&#x2F;hello&#x2F;**&quot;).uri(uri))</span><br><span class="line">                .route(r -&gt;r.path(&quot;&#x2F;goodbye&#x2F;**&quot;).uri(uri)).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序，访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xODVjYTViMDA1MDI4YmU5LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><p>服务都已经注册到reureka,我们定义了hello和goodbye开头的请求都会转发到<code>lb://producer</code>服务，我们定义gateway的端口是8080，producer的端口是8081<br><code>直接请求producer服务</code><br><a href="http://localhost:8081/hello/say" target="_blank" rel="noopener">http://localhost:8081/hello/say</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04MzJmN2YxMGQ2MTZmN2U1LnBuZw?x-oss-process=image/format,png" alt="图片.png"><br><a href="http://localhost:8081/goodbye/say" target="_blank" rel="noopener">http://localhost:8081/goodbye/say</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYTcyNTA0MzBmODU1MzY0LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p><code>通过网关请求</code><br><a href="http://localhost:8080/hello/say" target="_blank" rel="noopener">http://localhost:8080/hello/say</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYzI3OTZlNWZjZDM0ZTFmLnBuZw?x-oss-process=image/format,png" alt="hello.png"><br><a href="http://localhost:8080/goodbye/say" target="_blank" rel="noopener">http://localhost:8080/goodbye/say</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGJhN2QwYTBjM2M2MGVhLnBuZw?x-oss-process=image/format,png" alt="goodbye.png"></p><h2 id="网关本身的负载均衡"><a href="#网关本身的负载均衡" class="headerlink" title="网关本身的负载均衡"></a>网关本身的负载均衡</h2><p>那所有微服务就只有一个网关，万一并发量上去了，网关承受不住怎么办？<br>Spring Cloud Gateway底层是Netty的，它本身就能承受比较大的并发。如果还是承受不了并发量，那可以注册多个Gateway实例，然后在前面弄一个Nginx或者F5等负载均衡器。大概图是这样：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjRlNTZkYjE2MzU4MjBkLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务注册中心为什么要使用Consul？</title>
      <link href="/2020/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8Consul%EF%BC%9F/"/>
      <url>/2020/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8Consul%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/weifuwu.png" alt=""></p><a id="more"></a><h3 id="一、Eureka不建议使用"><a href="#一、Eureka不建议使用" class="headerlink" title="一、Eureka不建议使用"></a>一、Eureka不建议使用</h3><p>在选型微服务注册中心时，一定要长远考虑，SpringCloud提供了Eureka作为服务注册中心，我们可以开箱即用，但是，对于服务注册中心随着业务需求的不断变化，对服务注册中心提出了更高要求，Eureka就不太适合了，看到“Eureka 2.0 开源工作宣告停止，继续使用风险自负”。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04ZjA4NGE5Y2VlMDM0OGM3LnBuZw?x-oss-process=image/format,png" alt="eureka.png"><br>这意味着如果开发者继续使用作为 2.x 分支上现有工作 repo 一部分发布的代码库和工件，则将自负风险，对此，专家建议开发者尽快将相关业务迁移到 <code>Consul/ZooKeeper/Etcd</code>等工具上。</p><h3 id="二、Consul与Zookeeper的区别"><a href="#二、Consul与Zookeeper的区别" class="headerlink" title="二、Consul与Zookeeper的区别"></a>二、Consul与Zookeeper的区别</h3><p>Consul是一个在国外流行的服务发现和配置共享的服务软件。本文翻译自Consul的官方文档，文中重点讲述：在与主流同类软件<code>ZooKeeper、Doozerd</code>以及<code>Etcd</code>比较时，Consul的优势所在。</p><p><code>ZooKeeper、Doozerd、Etcd</code>在架构上都非常相似，它们都有服务节点（<code>server node</code>），而这些服务节点的操作都要求达到节点的仲裁数（通常，节点的仲裁数遵循的是简单多数原则）。此外，它们都是强一致性的，并且提供各种原语。通过应用程序内部的客户端lib库，这些原语可以用来构建复杂的分布式系统。</p><p><code>Consul</code>在一个单一的数据中心内部使用服务节点。在每个数据中心中，为了<code>Consule</code>能够运行，并且保持强一致性，Consul服务端需要仲裁。然而，<code>Consul</code>原生支持多数据中心，就像一个丰富<code>gossip</code>系统连接服务器节点和客户端一样。</p><p>当提供K/V存储的时候，这些系统具有大致相同的语义，读取是强一致性的，并且在面对网络分区的时候，为了保持一致性，读取的可用性是可以牺牲的。然而，当系统应用于复杂情况时，这种差异会变得更加明显。</p><p>这些系统提供的语义对开发人员构建服务发现系统很有吸引力，但更重要的是，强调开发人员要构建这些特性。<code>ZooKeeper</code>只提供一个原始的K/V值存储，并要求开发人员构建他们自己的系统来提供服务发现功能。相反的是，<code>Consul</code>提供了一个坚固的框架，这不仅仅是为了提供服务发现功能，也是为了减少推测工作和开发工作量。客户端只需简单地完成服务注册工作，然后使用一个<code>DNS</code>接口或者<code>HTTP</code>接口就可以执行工作了，而其他系统则需要你定制自己的解决方案。</p><p>一个令人信服的服务发现框架必须包含健康检测功能，并且考虑失败的可能性。要是节点失败或者服务故障了，即使开发人员知道节点A提供Foo服务也是没用的。Navie系统利用的是心跳、周期性更新和TTLs，这些系统不仅需要工作量与节点数量成线性关系，并且对服务器的固定数量提出了要求。此外，故障检测窗口的存活时间至少要和TTL一样长。</p><p><code>ZooKeeper</code>提供了临时节点，这些临时节点就是K/V条目，当客户端断开连接时，这些条目会被删除。虽然这些临时节点比一个心跳系统更高级，但仍存在固有的扩展性问题，并且会增加客户端的复杂性。与<code>ZooKeeper</code>服务器端连接时，客户端必须保持活跃，并且去做持续性连接。此外，<code>ZooKeeper</code>还需要胖客户端，而胖客户端是很难编写，并且胖客户端会经常导致调试质询。</p><p><code>Consul</code>使用一个完全不同的架构进行健康检测。<code>Consul</code>客户端可以运行在集群中的每一个节点上，而不是拥有服务器节点，这些<code>Consul</code>客户端属于一个<code>gossip pool</code>，<code>gossip pool</code>提供了一些功能，包括分布式健康检测。<code>gossip</code>协议提供了一个高效的故障检测工具，这个故障检测工具可以应用到任意规模的集群，而不仅仅是作用于特定的服务器组。同时，这个故障检测工具也支持在本地进行多种健康检测。与此相反，ZooKeeper的临时节点只是一个非常原始的活跃度检测。因为有了<code>Consul</code>，客户端可以检测web服务器是否正在返回200状态码，内存利用率是否达到临界点，是否有足够的数据存储盘等。此外，<code>ZooKeeper</code>会暴露系统的复杂性给客户端，为了避免<code>ZooKeeper</code>出现的这种情况，<code>Consul</code>只提供一个简单HTTP接口。</p><p><code>Consul</code>为服务发现、健康检测、K/V存储和多数据中心提供了一流的支持。为了支持任意存储，而不仅仅是简单的K/V存储，其他系统都要求工具和lib库要率先建立。然而，通过使用客户端节点，<code>Consul</code>提供了一个简单的API，这个API的开发只需要瘦客户端就可以了， 而且，通过使用配置文件和DNS接口，开发人员可以建立完整的服务发现解决方案，最终，达到避免开发API的目的。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举真的比静态常量更占空间吗？</title>
      <link href="/2019/12/30/%E6%9E%9A%E4%B8%BE%E7%9C%9F%E7%9A%84%E6%AF%94%E9%9D%99%E6%80%81%E5%B8%B8%E9%87%8F%E6%9B%B4%E5%8D%A0%E7%A9%BA%E9%97%B4%E5%90%97%EF%BC%9F/"/>
      <url>/2019/12/30/%E6%9E%9A%E4%B8%BE%E7%9C%9F%E7%9A%84%E6%AF%94%E9%9D%99%E6%80%81%E5%B8%B8%E9%87%8F%E6%9B%B4%E5%8D%A0%E7%A9%BA%E9%97%B4%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><blockquote><p>前两天在网上看到一条信息：枚举比静态常量更占用空间。<br>这是真的吗？</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举类型是Java 5中新增特性的一部分，它是一种特殊的数据类型，之所以特殊是因为它既是一种类(class)类型却又比类类型多了些特殊的约束，但是这些约束的存在也造就了枚举类型的简洁性、安全性以及便捷性。</p><h3 id="枚举实现原理"><a href="#枚举实现原理" class="headerlink" title="枚举实现原理"></a>枚举实现原理</h3><p>在使用关键字enum创建枚举类型并编译后，编译器会为我们生成一个相关的类，这个类继承了Java API中的java.lang.Enum类，也就是说通过关键字enum创建枚举类型在编译后事实上也是一个类类型而且该类继承自java.lang.Enum类。</p><h2 id="枚举-1"><a href="#枚举-1" class="headerlink" title="枚举"></a>枚举</h2><p>新建一个枚举类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Author: 少年闰土</span><br><span class="line"> * @Date: 2019&#x2F;12&#x2F;27 0027 上午 9:23</span><br><span class="line"> * @Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public enum Season &#123;</span><br><span class="line"></span><br><span class="line">    SPRING(&quot;春天&quot;, &quot;趁春踏青&quot;),</span><br><span class="line">    SUMMER(&quot;夏天&quot;, &quot;夏日炎炎&quot;),</span><br><span class="line">    AUTUMN(&quot;秋天&quot;, &quot;秋高气爽&quot;),</span><br><span class="line">    WINTER(&quot;冬天&quot;, &quot;围炉赏雪&quot;);</span><br><span class="line"></span><br><span class="line">    private final String name;</span><br><span class="line">    private final String desc;</span><br><span class="line"></span><br><span class="line">    Season(String name, String desc) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.desc &#x3D; desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDesc() &#123;</span><br><span class="line">        return desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来使用javac命令进行编译：生成class文件，然后再通过javap反编译<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00OTUwMmE2NzY0NzNjMDQ0LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public final class com.example.demo.Season extends java.lang.Enum&lt;com.example.de</span><br><span class="line">mo.Season&gt; &#123;</span><br><span class="line">  public static final com.example.demo.Season SPRING;</span><br><span class="line">  public static final com.example.demo.Season SUMMER;</span><br><span class="line">  public static final com.example.demo.Season AUTUMN;</span><br><span class="line">  public static final com.example.demo.Season WINTER;</span><br><span class="line">  &#x2F;&#x2F;编译器为我们添加的静态的values()方法</span><br><span class="line">  public static com.example.demo.Season[] values();</span><br><span class="line">  &#x2F;&#x2F;编译器为我们添加的静态的valueOf()方法，注意间接调用了Enum也类的valueOf方法</span><br><span class="line">  public static com.example.demo.Season valueOf(java.lang.String);</span><br><span class="line">  &#x2F;&#x2F;构造方法</span><br><span class="line">  public java.lang.String getName();</span><br><span class="line">  public java.lang.String getDesc();</span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Author: 少年闰土</span><br><span class="line"> * @Date: 2019&#x2F;12&#x2F;27 0027 上午 10:49</span><br><span class="line"> * @Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Season &#123;</span><br><span class="line"></span><br><span class="line">    public static final String SPRING &#x3D;&quot;春天&quot;;</span><br><span class="line">    public static final String SUMMER &#x3D;&quot;夏天&quot;;</span><br><span class="line">    public static final String AUTUMN &#x3D;&quot;秋天&quot;;</span><br><span class="line">    public static final String WINTER &#x3D;&quot;冬天&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>javap反编译后：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kN2I0ZTRjYjhmMWM0YzJhLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class com.example.demo.Season &#123;</span><br><span class="line">  public static final java.lang.String SPRING;</span><br><span class="line">  public static final java.lang.String SUMMER;</span><br><span class="line">  public static final java.lang.String AUTUMN;</span><br><span class="line">  public static final java.lang.String WINTER;</span><br><span class="line">  public com.example.demo.Season();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>枚举<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZTI2Y2FkNjRhMjBiNTJjLnBuZw?x-oss-process=image/format,png" alt="枚举.png"></p><p>静态常量<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjcyN2QwMTRjYjcxNzliLnBuZw?x-oss-process=image/format,png" alt="静态常量.png"></p><p>编译后的枚举class文件大小为1471字节，静态常量class文件大小为400字节。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZWVkNGI4ZDFhM2IxYjAxLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p>用Chkdsk查看簇大小<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZGJjNTllYzA5NzMzOWRmLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><p>经过对比枚举类型文件大小更大一些。</p><p>枚举的实现原理就是定义一个类，然后实例化几个由final修饰的这个类的对象，每个实例都带有自己的元信息。而常量相比之下，没有这一层封装，只占用最基本的内存，包括引用，和它的值本身，要简单轻巧很多。如果值可以使用基本类型而不是包装类型，那更不用说了。       不过话又说回来，通常情况下我们没必要在意这种区别。如果用枚举可读性、可扩展性更好，用就是了，枚举占那点内存，沧海一粟。在性能与代码维护性之间，除个别情况，优先选后者。高级编程语言的诞生本身就是硬件提升的背景下，牺牲某些性能来降低开发门槛，提高开发效率的，相对于微小的性能损耗，人力成本更值钱</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Enum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT简介</title>
      <link href="/2019/12/21/JWT%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/12/21/JWT%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。<a href="https://www.jianshu.com/p/c007b8021d05" target="_blank" rel="noopener">微服务常见的认证方案</a></p><h2 id="一、跨域认证的问题"><a href="#一、跨域认证的问题" class="headerlink" title="一、跨域认证的问题"></a>一、跨域认证的问题</h2><p>互联网服务离不开用户认证。一般流程是下面这样。</p><ul><li><p>1、用户向服务器发送用户名和密码。</p></li><li><p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p></li><li><p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p></li><li><p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p></li><li><p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p></li></ul><p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p><p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</p><p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</p><p>什么是JWT：一句话概括就是（通过客户端保存数据，而服务器根本不保存会话数据，每个请求都被发送回服务器。）</p><h2 id="二、JWT"><a href="#二、JWT" class="headerlink" title="二、JWT"></a>二、JWT</h2><p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。</p><p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p><h3 id="1、JWT的原则"><a href="#1、JWT的原则" class="headerlink" title="1、JWT的原则"></a>1、JWT的原则</h3><p>JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户，如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">     &quot;UserName&quot;: &quot;少年闰土&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;Role&quot;: &quot;Admin&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;Expire&quot;: &quot;2019-12-21 09:15:56&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。</p><h3 id="2、JWT的数据结构"><a href="#2、JWT的数据结构" class="headerlink" title="2、JWT的数据结构"></a>2、JWT的数据结构</h3><p>样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1NTc5MDU4MDIsImV4cCI6MTU1NzkwNjgwMiwicm9sZXMiOiJhZG1pbiJ9.AS5Y2fNCwUzQQxXh_QQWMpaB75YqfuK-2P7VZiCXEJI</span><br></pre></td></tr></table></figure><p>他是一个长字符串，中间用<code>.</code>进行分割，代表JWT的三个组成部分，如下：</p><ul><li><p>Header（头部）</p></li><li><p>Payload（负载）</p></li><li><p>Signature（签名）<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xNGFkNzRiMDY3ZTI3YmQxLnBuZw?x-oss-process=image/format,png" alt="图片来自网络-仅供参考.png"></p><h4 id="2-1、头部（Header）"><a href="#2-1、头部（Header）" class="headerlink" title="2.1、头部（Header）"></a>2.1、头部（Header）</h4><p>头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。<br><code>{&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;}</code></p></li></ul><p>这个json中的typ属性，用来标识整个token字符串是一个JWT字符串；它的alg属性，用来说明这个JWT签发的时候所使用的签名和摘要算法。typ跟alg属性的全称其实是type跟algorithm，分别是类型跟算法的意思。之所以都用三个字母来表示，也是基于JWT最终字串大小的考虑，同时也是跟JWT这个名称保持一致，这样就都是三个字符了…typ跟alg是JWT中标准中规定的属性名称</p><p>在头部指明了签名算法是HS256算法。 我们进行BASE64编码<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fbase64.xpcha.com%2F" target="_blank" rel="noopener">http://base64.xpcha.com/</a>，编码后的字符串如下：<br><code>eyJhbGciOiJIUzI1NiJ9</code></p><h4 id="2-2、载荷（Playload）"><a href="#2-2、载荷（Playload）" class="headerlink" title="2.2、载荷（Playload）"></a>2.2、载荷（Playload）</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss: jwt签发者</span><br><span class="line">sub: jwt所面向的用户</span><br><span class="line">aud: 接收jwt的一方</span><br><span class="line">exp: jwt的过期时间，这个过期时间必须要大于签发时间</span><br><span class="line">nbf: 定义在什么时间之前，该jwt都是不可用的.</span><br><span class="line">iat: jwt的签发时间</span><br><span class="line">jti: jwt的唯一身份标识，主要用来作为一次性token。</span><br></pre></td></tr></table></figure><p>除了官方字段，你还可以在这个部分定义私有字段<br>样例：<br><code>{&quot;sub&quot;:&quot;1234567890&quot;,&quot;name&quot;:&quot;John Doe&quot;,&quot;admin&quot;:true}</code><br>然后将其进行base64加密，得到Jwt的第二部分。<br><code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNDM2MzY2NGU3ZTY3NjA1LnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h4 id="2-3、签名（Signature）"><a href="#2-3、签名（Signature）" class="headerlink" title="2.3、签名（Signature）"></a>2.3、签名（Signature）</h4><p>Signature 部分是对前两部分的签名，防止数据篡改。这个签证信息由三部分组成：</p><blockquote><p>header (base64后的)<br> payload (base64后的)<br>secret</p></blockquote><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><h3 id="3、Base64URL"><a href="#3、Base64URL" class="headerlink" title="3、Base64URL"></a>3、Base64URL</h3><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。 </p><h3 id="4、JWT-的使用方式"><a href="#4、JWT-的使用方式" class="headerlink" title="4、JWT 的使用方式"></a>4、JWT 的使用方式</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。<br><code>Authorization: Bearer &lt;token&gt;</code></p><p>下图显示了如何获取JWT并将其用于访问API或资源：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MDk3YjI4MDFlYTZjMTlmLnBuZw?x-oss-process=image/format,png" alt="图片.png"></p><h2 id="三、JWT使用"><a href="#三、JWT使用" class="headerlink" title="三、JWT使用"></a>三、JWT使用</h2><h3 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.auth0&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;java-jwt&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.2.0&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、工具类"><a href="#2、工具类" class="headerlink" title="2、工具类"></a>2、工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.utils;</span><br><span class="line"></span><br><span class="line">import com.auth0.jwt.JWT;</span><br><span class="line">import com.auth0.jwt.JWTVerifier;</span><br><span class="line">import com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line">import com.auth0.jwt.exceptions.JWTDecodeException;</span><br><span class="line">import com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Author: 少年闰土</span><br><span class="line"> * @Date: 2019&#x2F;12&#x2F;11 </span><br><span class="line"> * @Time: 下午 4:12</span><br><span class="line"> * @Version: v1.0</span><br><span class="line"> * jwt工具类</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">public class JwtUtils &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解析token</span><br><span class="line">     *</span><br><span class="line">     * @param token token</span><br><span class="line">     * @return 用户名</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String getUserName(String token) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            DecodedJWT jwt &#x3D; JWT.decode(token);</span><br><span class="line">            return jwt.getClaim(&quot;userName&quot;).asString();</span><br><span class="line">        &#125; catch (JWTDecodeException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 签发token</span><br><span class="line">     *</span><br><span class="line">     * @param userName 用户名</span><br><span class="line">     * @return token</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String sign(String userName,String secret) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;token过期时间</span><br><span class="line">            Date date &#x3D; new Date(System.currentTimeMillis() + (60 * 60 * 1000));</span><br><span class="line">            Algorithm algorithm &#x3D; Algorithm.HMAC256(secret);</span><br><span class="line">            &#x2F;&#x2F; 附带username信息</span><br><span class="line">            return JWT.create()</span><br><span class="line">                    .withClaim(&quot;userName&quot;, userName)</span><br><span class="line">                    .withExpiresAt(date)</span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 检验token是否过期</span><br><span class="line">     *</span><br><span class="line">     * @param token</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static Map verify(String token,String userName, String secret) &#123;</span><br><span class="line">        Map result &#x3D; new HashMap&lt;String, Object&gt;(2);</span><br><span class="line">        try &#123;</span><br><span class="line">            Algorithm algorithm &#x3D; Algorithm.HMAC256(secret);</span><br><span class="line">            JWTVerifier verifier &#x3D; JWT.require(algorithm)</span><br><span class="line">                    .withClaim(&quot;userName&quot;, userName)</span><br><span class="line">                    .build();</span><br><span class="line">            DecodedJWT jwt &#x3D; verifier.verify(token);</span><br><span class="line">            result.put(&quot;isSuccess&quot;, true);</span><br><span class="line">            result.put(&quot;exception&quot;, null);</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            result.put(&quot;isSuccess&quot;, false);</span><br><span class="line">            result.put(&quot;exception&quot;, exception);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value &#x3D; &quot;浏览器点击登录&quot;)</span><br><span class="line">@ApiImplicitParam(name &#x3D; &quot;user&quot;, value &#x3D; &quot;用户实体&quot;, required &#x3D; true, paramType &#x3D; &quot;User&quot;)</span><br><span class="line">@PostMapping(&quot;&#x2F;login&quot;)</span><br><span class="line">public R login(@RequestBody User user) &#123;</span><br><span class="line">    log.debug(&quot;------浏览器点击登录------&quot;);</span><br><span class="line">    String userName &#x3D; user.getUsername();</span><br><span class="line">    String passWord &#x3D; user.getPassword();</span><br><span class="line">    User u &#x3D; this.userService.getUser(userName);</span><br><span class="line">    String passWordSalt &#x3D; MD5.md5Salt(passWord, userName);</span><br><span class="line">    if (u !&#x3D; null &amp;&amp; u.getPassword().equals(passWordSalt)) &#123;</span><br><span class="line">        String token &#x3D; JwtUtils.sign(userName, passWordSalt);</span><br><span class="line">        return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return R.error(R.MSG_LOGIN_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 两种部署到服务器的方式</title>
      <link href="/2019/11/19/Spring-Boot-%E4%B8%A4%E7%A7%8D%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/11/19/Spring-Boot-%E4%B8%A4%E7%A7%8D%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/springboot.jpg" alt=""></p><a id="more"></a><h2 id="jar包-官方推荐"><a href="#jar包-官方推荐" class="headerlink" title="jar包(官方推荐)"></a>jar包(官方推荐)</h2><p>jar包方式启动，也就是使用spring boot内置的tomcat运行。服务器上面只要你配置了jdk1.8及以上，就ok。不需要外置tomcat </p><h3 id="1-打成jar包"><a href="#1-打成jar包" class="headerlink" title="1.打成jar包"></a>1.打成jar包</h3><h3 id="2-将jar包放到任意目录"><a href="#2-将jar包放到任意目录" class="headerlink" title="2.将jar包放到任意目录"></a>2.将jar包放到任意目录</h3><p>执行下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nohup java -jar test.jar &gt;temp.txt &amp;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这种方法会把日志文件输入到你指定的文件中，没有则会自动创建。进程会在后台运行。</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04NTNjYTcxMDAzNWQ4ZTg3LnBuZw?x-oss-process=image/format,png" alt=""></p><h3 id="3-放开端口"><a href="#3-放开端口" class="headerlink" title="3.放开端口"></a>3.放开端口</h3><p>阿里云服务器需要放开对应的端口<br>添加安全组：我的项目中配置的启动端口是18080，故这里需要放开18080端口，才能访问 </p><h2 id="war包"><a href="#war包" class="headerlink" title="war包"></a>war包</h2><p>传统的部署方式：将项目打成war包，放入tomcat 的webapps目录下面，启动tomcat，即可访问。</p><p>开发环境：jdk1.8 + IDEA</p><p>下面搭建一个demo演示如何打war包部署并且如何访问：spring boot + maven</p><h3 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmUzY2EwZjYyOTkyOTkzLnBuZw?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjhiMWRkYTIyYjU0ZDUyLnBuZw?x-oss-process=image/format,png" alt=""><br>这里我们默认打成jar包，不用修改。</p><h3 id="2-修改启动Application文件"><a href="#2-修改启动Application文件" class="headerlink" title="2.修改启动Application文件"></a>2.修改启动Application文件</h3><p>项目新建完成后，修改启动Application文件继承SpringBootServletInitializer,实现configure方法<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjA3MDQ3ZTI4ZTY3ZGI2LnBuZw?x-oss-process=image/format,png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@RestController</span><br><span class="line">public class Demo1Application extends SpringBootServletInitializer &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 用来测试访问</span><br><span class="line">    @RequestMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    public String home() &#123;</span><br><span class="line">        return &quot;hello 朋友&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Demo1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 继承SpringBootServletInitializer 实现configure 方便打war 外部服务器部署。</span><br><span class="line">    @Override</span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;</span><br><span class="line">        return application.sources(Demo1Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-修改pom-xml"><a href="#3-修改pom-xml" class="headerlink" title="3.修改pom.xml"></a>3.修改pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br></pre></td></tr></table></figure><p>完整pom.xml代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.example&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo1&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;!-- 这里打成war包 若打jar，需将war改为jar --&gt;</span><br><span class="line">    &lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;demo1&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;demo1&lt;&#x2F;finalName&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><h3 id="4-打包"><a href="#4-打包" class="headerlink" title="4.打包"></a>4.打包</h3><p>这里可以直接到项目根目录下面：运行 maven package命令，打包。</p><p>我这里直接使用idea打包，如下图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMWIzMDgwMTdhMWE5YWViLnBuZw?x-oss-process=image/format,png" alt=""><br>5.将war放入外部tomcat的webapps目录下<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWZkZjIzZWYwODRjNmM2LnBuZw?x-oss-process=image/format,png" alt=""><br>6.启动tomcat<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04Y2M1ZDFkMTZhNTljZDQ4LnBuZw?x-oss-process=image/format,png" alt=""></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="1-对比两种打包方式"><a href="#1-对比两种打包方式" class="headerlink" title="1.对比两种打包方式"></a>1.对比两种打包方式</h3><p>jar更加简单，方便。具体使用哪种方式，应视应用场景而定。</p><h3 id="2-注意"><a href="#2-注意" class="headerlink" title="2.注意"></a>2.注意</h3><p>再说一次，将项目打成war包，部署到外部的tomcat中，这个时候，不能直接访问spring boot 项目中配置文件配置的端口。application.yml中配置的server.port配置的是spring boot内置的tomcat的端口号, 打成war包部署在独立的tomcat上之后, 你配置的server.port是不起作用的。一定要注意这一点！！<br>其实我们从tomcat的启动界面，已经可以看出，是启动的哪个端口：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wNGQ3YzI2YmY0NTRiNDAzLnBuZw?x-oss-process=image/format,png" alt=""><br>很明显，日志告诉我们，我们应该访问8080端口。<br>下图是使用spring boot 内置tomcat启动日志，可以看出配置的server.port是生效了的！</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consul学习</title>
      <link href="/2019/11/19/Consul%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/11/19/Consul%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/Jennifer-3.png" alt=""></p><a id="more"></a><p>服务注册与服务发现是在分布式服务架构中常常会涉及到的东西，业界常用的服务注册与服务发现工具有 <a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">ZooKeeper</a>、<a href="https://coreos.com/etcd/" target="_blank" rel="noopener">etcd</a>、<a href="https://www.consul.io/" target="_blank" rel="noopener">Consul</a> 和 <a href="https://github.com/Netflix/eureka" target="_blank" rel="noopener">Eureka</a>。Consul 的主要功能有服务发现、健康检查、KV存储、安全服务沟通和多数据中心。Consul 与其他几个工具的区别可以在这里查看 <a href="https://www.consul.io/intro/vs/index.html" target="_blank" rel="noopener">Consul vs. Other Software</a>。<br>##为什么需要有服务注册与服务发现？<br>假设在分布式系统中有两个服务 Service-A （下文以“S-A”代称）和 Service-B（下文以“S-B”代称），当 S-A 想调用 S-B 时，我们首先想到的时直接在 S-A 中请求 S-B 所在服务器的 IP 地址和监听的端口，这在服务规模很小的情况下是没有任何问题的，但是在服务规模很大每个服务不止部署一个实例的情况下是存在一些问题的，比如 S-B 部署了三个实例 S-B-1、S-B-2 和 S-B-3，这时候 S-A 想调用 S-B 该请求哪一个服务实例的 IP 呢？还是将3个服务实例的 IP 都写在 S-A 的代码里，每次调用 S-B 时选择其中一个 IP？这样做显得很不灵活，这时我们想到了 Nginx 刚好就能很好的解决这个问题，引入 Nginx 后现在的架构变成了如下图这样：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYjBhZjFhOTgyNGIyMGRjLnBuZw?x-oss-process=image/format,png" alt=""></p><p>引入 Nginx 后就解决了 S-B 部署多个实例的问题，还做了 S-B 实例间的负载均衡。但现在的架构又面临了新的问题，分布式系统往往要保证高可用以及能做到动态伸缩，在引入 Nginx 的架构中，假如当 S-B-1 服务实例不可用时，Nginx 仍然会向 S-B-1 分配请求，这样服务就不可用，我们想要的是 S-B-1 挂掉后 Nginx 就不再向其分配请求，以及当我们新部署了 S-B-4 和 S-B-5 后，Nginx 也能将请求分配到 S-B-4 和 S-B-5，Nginx 要做到这样就要在每次有服务实例变动时去更新配置文件再重启 Nginx。这样看似乎用了 Nginx 也很不舒服以及还需要人工去观察哪些服务有没有挂掉，Nginx 要是有对服务的健康检查以及能够动态变更服务配置就是我们想要的工具，这就是服务注册与服务发现工具的用处。下面是引入服务注册与服务发现工具后的架构图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03ZTQxZmM4ZGQ5YTc0NmIxLnBuZw?x-oss-process=image/format,png" alt=""></p><p>在这个架构中：</p><ul><li>首先 S-B 的实例启动后将自身的服务信息（主要是服务所在的 IP 地址和端口号）注册到注册工具中。不同注册工具服务的注册方式各不相同，后文会讲 Consul 的具体注册方式。</li><li>服务将服务信息注册到注册工具后，注册工具就可以对服务做健康检查，以此来确定哪些服务实例可用哪些不可用。</li><li>S-A 启动后就可以通过服务注册和服务发现工具获取到所有健康的 S-B 实例的 IP 和端口，并将这些信息放入自己的内存中，S-A 就可用通过这些信息来调用 S-B。</li><li>S-A 可以通过监听（Watch）注册工具来更新存入内存中的 S-B 的服务信息。比如 S-B-1 挂了，健康检查机制就会将其标为不可用，这样的信息变动就被 S-A 监听到了，S-A 就更新自己内存中 S-B-1 的服务信息。</li></ul><p>所以务注册与服务发现工具除了服务本身的服务注册和发现功能外至少还需要有健康检查和状态变更通知的功能。</p><h2 id="Consul内部原理"><a href="#Consul内部原理" class="headerlink" title="Consul内部原理"></a>Consul内部原理</h2><p>Consul 作为一种分布式服务工具，为了避免单点故障常常以集群的方式进行部署，在 Consul 集群的节点中分为 Server 和 Client 两种节点（所有的节点也被称为Agent），Server 节点保存数据，Client 节点负责健康检查及转发数据请求到 Server；Server 节点有一个 Leader 节点和多个 Follower 节点，Leader 节点会将数据同步到 Follower 节点，在 Leader 节点挂掉的时候会启动选举机制产生一个新的 Leader。</p><p>Client 节点很轻量且无状态，它以 RPC 的方式向 Server 节点做读写请求的转发，此外也可以直接向 Server 节点发送读写请求。下面是 Consul 的架构图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWJlYzdiYmFlYWVhZDY3LnBuZw?x-oss-process=image/format,png" alt=""></p><p>首先Consul支持多数据中心，在上图中有两个DataCenter，他们通过Internet互联，同时请注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。</p><p>在单个数据中心中，Consul分为Client和Server两种节点（所有的节点也被称为Agent），Server节点保存数据，Client负责健康检查及转发数据请求到Server；Server节点有一个Leader和多个Follower，Leader节点会将数据同步到Follower，Server的数量推荐是3个或者5个，在Leader挂掉的时候会启动选举机制产生一个新的Leader。</p><p>集群内的Consul节点通过gossip协议（流言协议）维护成员关系，也就是说某个节点了解集群内现在还有哪些节点，这些节点是Client还是Server。单个数据中心的流言协议同时使用TCP和UDP通信，并且都使用8301端口。跨数据中心的流言协议也同时使用TCP和UDP通信，端口使用8302。</p><p>集群内数据的读写请求既可以直接发到Server，也可以通过Client使用RPC转发到Server，请求最终会到达Leader节点，在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过TCP的8300端口完成。</p><h2 id="Consul-的主要特点"><a href="#Consul-的主要特点" class="headerlink" title="Consul 的主要特点"></a>Consul 的主要特点</h2><p><code>Service Discovery</code> : 服务注册与发现，Consul 的客户端可以做为一个服务注册到 Consul，也可以通过 Consul 来查找特定的服务提供者，并且根据提供的信息进行调用。</p><p><code>Health Checking</code>: Consul 客户端会定期发送一些健康检查数据和服务端进行通讯，判断客户端的状态、内存使用情况是否正常，用来监控整个集群的状态，防止服务转发到故障的服务上面。</p><p><code>KV Store</code>: Consul 还提供了一个容易使用的键值存储。这可以用来保持动态配置，协助服务协调、建立 Leader 选举，以及开发者想构造的其它一些事务。</p><p><code>Secure Service Communication</code>: Consul 可以为服务生成分布式的 TLS 证书，以建立相互的 TLS 连接。 可以使用 intentions 定义允许哪些服务进行通信。 可以使用 intentions 轻松管理服务隔离，而不是使用复杂的网络拓扑和静态防火墙规则。</p><p><code>Multi Datacenter</code>: Consul 支持开箱即用的多数据中心，这意味着用户不需要担心需要建立额外的抽象层让业务扩展到多个区域。</p><p><code>Consul 角色</code></p><ul><li>Server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其它数据中心通讯。 每个数据中心的 Server 数量推荐为 3 个或是 5 个。</li><li>Client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。</li></ul><p>Consul 旨在对 DevOps 社区和应用程序开发人员友好，使其成为现代、弹性基础架构的理想选择。</p><h2 id="Consul-的调用过程"><a href="#Consul-的调用过程" class="headerlink" title="Consul 的调用过程"></a>Consul 的调用过程</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZGFmM2VjOThjMTk5ZWQwLnBuZw?x-oss-process=image/format,png" alt=""></p><p>1、当 Producer 启动的时候，会向 Consul 发送一个 post 请求，告诉 Consul 自己的 IP 和 Port；</p><p>2、Consul 接收到 Producer 的注册后，每隔 10s（默认）会向 Producer 发送一个健康检查的请求，检验 Producer 是否健康；</p><p>3、当 Consumer 发送 GET 方式请求 /api/address 到 Producer 时，会先从 Consul 中拿到一个存储服务 IP 和 Port 的临时表，从表中拿到 Producer 的 IP 和 Port 后再发送 GET 方式请求 /api/address；</p><p>4、该临时表每隔 10s 会更新，只包含有通过了健康检查的 Producer。</p><h2 id="Consul-和-eureka的对比"><a href="#Consul-和-eureka的对比" class="headerlink" title="Consul 和 eureka的对比"></a>Consul 和 eureka的对比</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZTEyNjI5Mzk4OTgxMmQxLnBuZw?x-oss-process=image/format,png" alt=""></p><h2 id="Consul服务发现原理"><a href="#Consul服务发现原理" class="headerlink" title="Consul服务发现原理"></a>Consul服务发现原理</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00MWJhNTZkMWU1NGQ3YzA4LmpwZw?x-oss-process=image/format,png" alt=""></p><p>首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server，假设他们选举了Server2上的Consul Server节点为Leader。这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定。</p><p>然后在服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。服务注册到Consul可以通过HTTP API（8500端口）的方式，也可以通过Consul配置文件的方式。Consul Client可以认为是无状态的，它将注册信息通过RPC转发到Consul Server，服务信息保存在Server的各个节点中，并且通过Raft实现了强一致性。</p><p>最后在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的所有部署的IP和端口，然后就可以选择Service B的其中一个部署并向其发起请求了。如果服务发现采用的是DNS方式，则Program D中直接使用Service B的服务发现域名，域名解析请求首先到达本机DNS代理，然后转发到本机Consul Client，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的某个部署的IP和端口。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务常见的认证方案</title>
      <link href="/2019/11/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/"/>
      <url>/2019/11/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/weifuwu.png" alt=""></p><a id="more"></a><h2 id="分布式Session"><a href="#分布式Session" class="headerlink" title="分布式Session"></a>分布式Session</h2><p>传统的单体应用的<code>session</code>，在<code>Spring cloud</code>微服务架构下，可以采用<code>分布式session机制</code>，可以将用户的认证信息存储在共享存储（如redis）中，用户会话作为key实现简单的分布式哈希映射，当用户访问微服务时，用户数据可以从共享存储中获取。<code>Spring Session</code>对分布式Session提供了支持，也与<code>Spring Boot/Cloud</code>无缝集成。</p><h2 id="API-Tokens"><a href="#API-Tokens" class="headerlink" title="API Tokens"></a>API Tokens</h2><p>随着 <code>Restful API</code>、<code>微服务</code>的兴起，基于 Token 的认证现在已经相当普遍了。</p><p><code>Token</code>一般会包含用户的相关信息，其它微服务可以从Token里提取出用户、权限等信息完成鉴权。</p><p>基于Token认证的典型流程：<br><img src="https://upload-images.jianshu.io/upload_images/12553249-134554ce479b7226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><ol><li>用户使用包含用户名和密码的credential从客户端发起资源请求。</li><li>后端接受请求，通过授权中心，生产有效token字符串，返回给客户端。</li><li>客户端获得token后，再次发出资源请求。</li><li>后端接受带token的请求，通过授权中心，获取相关资源，返回给客户端。</li></ol><p>优点：</p><ul><li>服务端无状态：服务端不需要存储Session，因为Token已携带用户的相关信息</li><li>性能好：校验Token不需要访问远程服务或数据库</li><li>支持移动端</li><li>支持跨程序、跨域调用</li></ul><p>缺点：</p><ul><li>每次用户请求需要携带有效token，与Auth服务进行交互验证</li><li>Auth服务可能需要处理大量的生产token的操作，可能存在性能问题</li></ul><p>　　基于Token的认证方案，业界推荐使用 <a href="https://jwt.io/" target="_blank" rel="noopener">JSON Web Tokens（JWT）</a>，它足够简单且支持程度也比较好</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Feign使用详解</title>
      <link href="/2019/11/19/Spring-Cloud-Feign%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/11/19/Spring-Cloud-Feign%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Feign是一个声明式的Web Service客户端，它的目的就是让Web Service调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。<br>而Feign则会完全代理HTTP请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关处理。Feign整合了Ribbon和Hystrix(关于Hystrix我们后面再讲)，可以让我们不再需要显式地使用这两个组件。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>总起来说，Feign具有如下特性：</p><ul><li><p>可插拔的注解支持，包括Feign注解和JAX-RS注解;</p></li><li><p>支持可插拔的HTTP编码器和解码器;</p></li><li><p>支持Hystrix和它的Fallback;</p></li><li><p>支持Ribbon的负载均衡;</p></li><li><p>支持HTTP请求和响应的压缩。</p></li></ul><h2 id="FeignClient注解的一些属性"><a href="#FeignClient注解的一些属性" class="headerlink" title="FeignClient注解的一些属性"></a>FeignClient注解的一些属性</h2><p><img src="/asset/2019-11-19/p15.png" alt=""></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="1-引入Feign"><a href="#1-引入Feign" class="headerlink" title="1.引入Feign"></a>1.引入Feign</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-FeignClient注解"><a href="#2-FeignClient注解" class="headerlink" title="2.@FeignClient注解"></a>2.@FeignClient注解</h3><p>SpringbootApplication启动类加上@FeignClient注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class ServiceFeignApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ServiceFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;@EnableDiscoveryClient 和@EnableEurekaClient是等效的</span><br></pre></td></tr></table></figure><h3 id="3-yaml配置"><a href="#3-yaml配置" class="headerlink" title="3.yaml配置"></a>3.yaml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class="line">server:</span><br><span class="line">  port: 8765</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-feign</span><br></pre></td></tr></table></figure><h3 id="4-Feign的使用"><a href="#4-Feign的使用" class="headerlink" title="4.Feign的使用"></a>4.Feign的使用</h3><p>feign接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(value &#x3D; &quot;service-hi&quot;)</span><br><span class="line">public interface SchedualServiceHi &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;hi&quot;, method &#x3D; RequestMethod.GET)</span><br><span class="line">    String sayHiFromClientOne(@RequestParam(&quot;name&quot;) String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HiController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    SchedualServiceHi schedualServiceHi;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value &#x3D; &quot;&#x2F;hi&quot;)</span><br><span class="line">    public String sayHi(@RequestParam String name)&#123;</span><br><span class="line">        return schedualServiceHi.sayHiFromClientOne(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><p>创建一个Maven项目feign，新建2个module <code>service-hi</code>和<code>service-feign</code></p><h3 id="2-service-hi"><a href="#2-service-hi" class="headerlink" title="2.service-hi"></a>2.service-hi</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yNDg5OTI4ZWIzMDA1OTZiLnBuZw?x-oss-process=image/format,png" alt=""></p><p>pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8763</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-hi</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>ServiceHiApplication</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@RestController</span><br><span class="line">public class ServiceHiApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run( ServiceHiApplication.class, args );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    String port;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;hi&quot;)</span><br><span class="line">    public String home(@RequestParam(value &#x3D; &quot;name&quot;, defaultValue &#x3D; &quot;forezp&quot;) String name) &#123;</span><br><span class="line">        return &quot;hi &quot; + name + &quot; ,i am from port:&quot; + port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-service-feign"><a href="#3-service-feign" class="headerlink" title="3.service-feign"></a>3.service-feign</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMTVkN2JkNjUwZDQzYzZmLnBuZw?x-oss-process=image/format,png" alt=""><br>pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class="line">server:</span><br><span class="line">  port: 8765</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-feign</span><br></pre></td></tr></table></figure><p>ServiceFeignApplication</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class ServiceFeignApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ServiceFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SchedualServiceHi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(value &#x3D; &quot;service-hi&quot;)</span><br><span class="line">public interface SchedualServiceHi &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;hi&quot;, method &#x3D; RequestMethod.GET)</span><br><span class="line">    String sayHiFromClientOne(@RequestParam(&quot;name&quot;) String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HiController</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HiController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    SchedualServiceHi schedualServiceHi;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value &#x3D; &quot;&#x2F;hi&quot;)</span><br><span class="line">    public String sayHi(@RequestParam String name)&#123;</span><br><span class="line">        return schedualServiceHi.sayHiFromClientOne(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动eureka<br>访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZDk3Y2M1MmExYzU2MzQ4LnBuZw?x-oss-process=image/format,png" alt=""><br>启动service-hi<br>刷新<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ODI5MzE5NWZhN2RhMjZhLnBuZw?x-oss-process=image/format,png" alt=""><br>访问service-hi<a href="http://localhost:8763/hi?name=kobe" target="_blank" rel="noopener">http://localhost:8763/hi?name=kobe</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjQ2NzE5MDFiYjgwNjg4LnBuZw?x-oss-process=image/format,png" alt=""><br>启动service-feign<br>刷新<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZmM1NTE0ZDZhZGU5ZGZhLnBuZw?x-oss-process=image/format,png" alt=""><br>同过feign访问接口<a href="http://localhost:8765/hi?name=KG" target="_blank" rel="noopener">http://localhost:8765/hi?name=KG</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWM4NGUzMDZhMDRmY2MyLnBuZw?x-oss-process=image/format,png" alt=""><br>可以看到去到了service-hi服务，端口8763</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java线程创建全家桶</title>
      <link href="/2019/09/16/Java%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
      <url>/2019/09/16/Java%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;继承Thread</span><br><span class="line">public class ExtendThread extends Thread&#123;</span><br><span class="line">   &#x2F;&#x2F;线程执行体</span><br><span class="line">   @Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">       &#x2F;&#x2F;do something</span><br><span class="line">       System.out.println(&quot;继承Thread创建线程&quot;);</span><br><span class="line">       &#x2F;&#x2F;无返回值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ThreadCreateDemo &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       &#x2F;&#x2F;创建一个线程</span><br><span class="line">       ExtendThread extendThread &#x3D; new ExtendThread();</span><br><span class="line">       &#x2F;&#x2F;调用start方法启动线程</span><br><span class="line">       extendThread.start();</span><br><span class="line">        &#x2F;&#x2F;没有返回值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>使用继承Thread类的方法来创建线程类时候，多个线程之间是无法共享线程类的实例变量的。</code></p><h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><p>覆写Runnable接口实现多线程可以避免单继承局限， 当子类实现Runnable接口，此时子类和Thread的代理模式（子类负责真实业务的操作，thread负责资源调度与线程创建辅助真实业务）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;实现Runnable接口</span><br><span class="line">public class ImplRunnable implements Runnable &#123;</span><br><span class="line">   &#x2F;&#x2F;线程实行体</span><br><span class="line">   @Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">       &#x2F;&#x2F;do something</span><br><span class="line">       System.out.println(&quot;实现Runnable创建线程&quot;);</span><br><span class="line">       &#x2F;&#x2F;没有返回值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ThreadCreateDemo &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       ImplRunnable implRunnable &#x3D; new ImplRunnable();</span><br><span class="line">       Thread thread &#x3D; new Thread(implRunnable);</span><br><span class="line">       &#x2F;&#x2F;启动线程</span><br><span class="line">       thread.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Runnable对象仅仅作为Thread对象的target，Runnable实现类里包含的run方法仅仅作为线程的执行体，而实际的线程对象依旧是Thread实例，只是该Thread线程负责执行器target的方法。</code></p><h2 id="覆写Callable接口"><a href="#覆写Callable接口" class="headerlink" title="覆写Callable接口"></a>覆写Callable接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;实现Callable返回值类型为Integer类型</span><br><span class="line">public class ImplCallable implements Callable&lt;Integer&gt; &#123;</span><br><span class="line">   &#x2F;&#x2F;该call()方法将作为线程执行体，并且有返回值</span><br><span class="line">   @Override</span><br><span class="line">   public Integer call() throws Exception &#123;</span><br><span class="line">       &#x2F;&#x2F;do something</span><br><span class="line">       System.out.println(&quot;实现Callable接口创建线程，返回类型为Integer类型&quot;);</span><br><span class="line">       return 999;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ThreadCreateDemo &#123;</span><br><span class="line">   public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">       Callable&lt;Integer&gt; callable &#x3D; new ImplCallable();</span><br><span class="line">       FutureTask&lt;Integer&gt; futureTask &#x3D; new FutureTask&lt;&gt;(callable);</span><br><span class="line">       Thread thread &#x3D; new Thread(futureTask);</span><br><span class="line">       thread.start();</span><br><span class="line">       &#x2F;&#x2F;获取返回值futureTask.get()</span><br><span class="line">       System.out.println(futureTask.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Callable接口有泛型限制，Callable接口里的泛型形参类型与call方法返回值类型相同，而且Callable接口是函数式接口，因此可以使用Lambda表达式创建Callable对象。</code></p><h2 id="三种方式的对比"><a href="#三种方式的对比" class="headerlink" title="三种方式的对比"></a>三种方式的对比</h2><p>通过继承Thread类或者实现Runnable接口、Callable接口都可以实现多线程，不过实现Runnable接口与实现Callable接口的方式基本相同，只是Callabl接口里定义的方法返回值，可以声明抛出异常而已。因此将实现Runnable接口和实现Callable接口归为一种方式。这种方式与继承Thread方式之间的主要差别如下。</p><h3 id="采用实现Runnable、Callable接口的方式创建线程的优缺点"><a href="#采用实现Runnable、Callable接口的方式创建线程的优缺点" class="headerlink" title="采用实现Runnable、Callable接口的方式创建线程的优缺点"></a>采用实现Runnable、Callable接口的方式创建线程的优缺点</h3><p><code>优点</code><br>线程类只是实现了Runnable或者Callable接口，还可以继承其他类。这种方式下，多个线程可以共享一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好的体现了面向对象的思想。<br><code>缺点</code><br>编程稍微复杂一些，如果需要访问当前线程，则必须使用<br>Thread.currentThread()方法</p><h3 id="采用继承Thread类的方式创建线程的优缺点"><a href="#采用继承Thread类的方式创建线程的优缺点" class="headerlink" title="采用继承Thread类的方式创建线程的优缺点"></a>采用继承Thread类的方式创建线程的优缺点</h3><p><code>缺点</code><br>因为线程类已经继承了Thread类，Java语言是单继承的，所以就不能再继承其他父类了。</p><p><code>优点</code><br>编写简单，如果需要访问当前线程，则无需使用<br>Thread.currentThread()方法，直接使用this即可获取当前线程</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java下载文件的几种方式 </title>
      <link href="/2019/09/12/Java%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/09/12/Java%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/java.png" alt=""></p><a id="more"></a><h2 id="以流的方式下载"><a href="#以流的方式下载" class="headerlink" title="以流的方式下载"></a>以流的方式下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public HttpServletResponse download(String path, HttpServletResponse response) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; path是指欲下载的文件的路径。</span><br><span class="line">            File file &#x3D; new File(path);</span><br><span class="line">            &#x2F;&#x2F; 取得文件名。</span><br><span class="line">            String filename &#x3D; file.getName();</span><br><span class="line">            &#x2F;&#x2F; 取得文件的后缀名。</span><br><span class="line">            String ext &#x3D; filename.substring(filename.lastIndexOf(&quot;.&quot;) + 1).toUpperCase();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 以流的形式下载文件。</span><br><span class="line">            InputStream fis &#x3D; new BufferedInputStream(new FileInputStream(path));</span><br><span class="line">            byte[] buffer &#x3D; new byte[fis.available()];</span><br><span class="line">            fis.read(buffer);</span><br><span class="line">            fis.close();</span><br><span class="line">            &#x2F;&#x2F; 清空response</span><br><span class="line">            response.reset();</span><br><span class="line">            &#x2F;&#x2F; 设置response的Header</span><br><span class="line">            response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename&#x3D;&quot; + new String(filename.getBytes()));</span><br><span class="line">            response.addHeader(&quot;Content-Length&quot;, &quot;&quot; + file.length());</span><br><span class="line">            OutputStream toClient &#x3D; new BufferedOutputStream(response.getOutputStream());</span><br><span class="line">            response.setContentType(&quot;application&#x2F;octet-stream&quot;);</span><br><span class="line">            toClient.write(buffer);</span><br><span class="line">            toClient.flush();</span><br><span class="line">            toClient.close();</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="下载本地文件"><a href="#下载本地文件" class="headerlink" title="下载本地文件"></a>下载本地文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void downloadLocal(HttpServletResponse response) throws FileNotFoundException &#123;</span><br><span class="line">        &#x2F;&#x2F; 下载本地文件</span><br><span class="line">        String fileName &#x3D; &quot;Operator.doc&quot;.toString(); &#x2F;&#x2F; 文件的默认保存名</span><br><span class="line">        &#x2F;&#x2F; 读到流中</span><br><span class="line">        InputStream inStream &#x3D; new FileInputStream(&quot;c:&#x2F;Operator.doc&quot;);&#x2F;&#x2F; 文件的存放路径</span><br><span class="line">        &#x2F;&#x2F; 设置输出的格式</span><br><span class="line">        response.reset();</span><br><span class="line">        response.setContentType(&quot;bin&quot;);</span><br><span class="line">        response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;\&quot;&quot; + fileName + &quot;\&quot;&quot;);</span><br><span class="line">        &#x2F;&#x2F; 循环取出流中的数据</span><br><span class="line">        byte[] b &#x3D; new byte[100];</span><br><span class="line">        int len;</span><br><span class="line">        try &#123;</span><br><span class="line">            while ((len &#x3D; inStream.read(b)) &gt; 0)</span><br><span class="line">                response.getOutputStream().write(b, 0, len);</span><br><span class="line">            inStream.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="下载网络文件"><a href="#下载网络文件" class="headerlink" title="下载网络文件"></a>下载网络文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void downloadNet(HttpServletResponse response) throws MalformedURLException &#123;</span><br><span class="line">        &#x2F;&#x2F; 下载网络文件</span><br><span class="line">        int bytesum &#x3D; 0;</span><br><span class="line">        int byteread &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        URL url &#x3D; new URL(&quot;windine.blogdriver.com&#x2F;logo.gif&quot;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            URLConnection conn &#x3D; url.openConnection();</span><br><span class="line">            InputStream inStream &#x3D; conn.getInputStream();</span><br><span class="line">            FileOutputStream fs &#x3D; new FileOutputStream(&quot;c:&#x2F;abc.gif&quot;);</span><br><span class="line"></span><br><span class="line">            byte[] buffer &#x3D; new byte[1204];</span><br><span class="line">            int length;</span><br><span class="line">            while ((byteread &#x3D; inStream.read(buffer)) !&#x3D; -1) &#123;</span><br><span class="line">                bytesum +&#x3D; byteread;</span><br><span class="line">                System.out.println(bytesum);</span><br><span class="line">                fs.write(buffer, 0, byteread);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="支持在线打开的方式"><a href="#支持在线打开的方式" class="headerlink" title="支持在线打开的方式"></a>支持在线打开的方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public void downLoad(String filePath, HttpServletResponse response, boolean isOnLine) throws Exception &#123;</span><br><span class="line">        File f &#x3D; new File(filePath);</span><br><span class="line">        if (!f.exists()) &#123;</span><br><span class="line">            response.sendError(404, &quot;File not found!&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedInputStream br &#x3D; new BufferedInputStream(new FileInputStream(f));</span><br><span class="line">        byte[] buf &#x3D; new byte[1024];</span><br><span class="line">        int len &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        response.reset(); &#x2F;&#x2F; 非常重要</span><br><span class="line">        if (isOnLine) &#123; &#x2F;&#x2F; 在线打开方式</span><br><span class="line">            URL u &#x3D; new URL(&quot;file:&#x2F;&#x2F;&#x2F;&quot; + filePath);</span><br><span class="line">            response.setContentType(u.openConnection().getContentType());</span><br><span class="line">            response.setHeader(&quot;Content-Disposition&quot;, &quot;inline; filename&#x3D;&quot; + f.getName());</span><br><span class="line">            &#x2F;&#x2F; 文件名应该编码成UTF-8</span><br><span class="line">        &#125; else &#123; &#x2F;&#x2F; 纯下载方式</span><br><span class="line">            response.setContentType(&quot;application&#x2F;x-msdownload&quot;);</span><br><span class="line">            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;&quot; + f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        OutputStream out &#x3D; response.getOutputStream();</span><br><span class="line">        while ((len &#x3D; br.read(buf)) &gt; 0)</span><br><span class="line">            out.write(buf, 0, len);</span><br><span class="line">        br.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> File </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC请求参数获取的几种方法</title>
      <link href="/2019/08/15/SpringMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/15/SpringMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/spring.jpg" alt=""></p><a id="more"></a><p>SpringMVC请求参数获取的几种方法</p><h2 id="通过-PathVariabl获取路径中的参数"><a href="#通过-PathVariabl获取路径中的参数" class="headerlink" title="通过@PathVariabl获取路径中的参数"></a>通过@PathVariabl获取路径中的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value&#x3D;&quot;user&#x2F;&#123;id&#125;&#x2F;&#123;name&#125;&quot;,method&#x3D;RequestMethod.GET)</span><br><span class="line">public String printMessage1(@PathVariable String id,@PathVariable String name, ModelMap model) &#123;</span><br><span class="line">    </span><br><span class="line">    System.out.println(id);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    model.addAttribute(&quot;message&quot;, &quot;111111&quot;);</span><br><span class="line">    return &quot;users&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，访问user/123/lei路径时，执行以上方法，其中，参数id=123，name=lei</p><h2 id="ModelAttribute获取POST请求的FORM表单数据"><a href="#ModelAttribute获取POST请求的FORM表单数据" class="headerlink" title="@ModelAttribute获取POST请求的FORM表单数据"></a>@ModelAttribute获取POST请求的FORM表单数据</h2><p>表单如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;hao.do&quot;&gt;</span><br><span class="line">   a: &lt;input id&#x3D;&quot;a&quot; type&#x3D;&quot;text&quot;   name&#x3D;&quot;a&quot;&#x2F;&gt;</span><br><span class="line">   b: &lt;input id&#x3D;&quot;b&quot; type&#x3D;&quot;text&quot;   name&#x3D;&quot;b&quot;&#x2F;&gt;</span><br><span class="line">   &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>Java  Pojo如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class Pojo&#123;</span><br><span class="line">    private String a;</span><br><span class="line">    private int b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java Controller如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(method &#x3D; RequestMethod.POST) </span><br><span class="line">public String processSubmit(@ModelAttribute(&quot;pojo&quot;) Pojo pojo) &#123; </span><br><span class="line">    </span><br><span class="line">    return &quot;helloWorld&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestBody获取POST请求的FORM表单数据"><a href="#RequestBody获取POST请求的FORM表单数据" class="headerlink" title="@RequestBody获取POST请求的FORM表单数据"></a>@RequestBody获取POST请求的FORM表单数据</h2><p><code>@RequestBody</code>接收的是一个Json对象的字符串，而不是一个<code>Json</code>对象。然而在<code>ajax</code>请求往往传的都是<code>Json</code>对象，后来发现用 <code>JSON.stringify(data)</code>的方式就能将对象变成字符串。同时<code>ajax</code>请求的时候也要指定<code>dataType: &quot;json&quot;,contentType:&quot;application/json&quot;</code>这样就可以轻易的将一个对象或者<code>List</code>传到<code>Java</code>端，使用<code>@RequestBody</code>即可绑定对象或者<code>List</code>.</p><p>js代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;  </span><br><span class="line">    $(document).ready(function()&#123;  </span><br><span class="line">        var saveDataAry&#x3D;[];  </span><br><span class="line">        var data1&#x3D;&#123;&quot;userName&quot;:&quot;test&quot;,&quot;address&quot;:&quot;gz&quot;&#125;;  </span><br><span class="line">        var data2&#x3D;&#123;&quot;userName&quot;:&quot;ququ&quot;,&quot;address&quot;:&quot;gr&quot;&#125;;  </span><br><span class="line">        saveDataAry.push(data1);  </span><br><span class="line">        saveDataAry.push(data2);         </span><br><span class="line">        $.ajax(&#123; </span><br><span class="line">            type:&quot;POST&quot;, </span><br><span class="line">            url:&quot;user&#x2F;saveUser&quot;, </span><br><span class="line">            dataType:&quot;json&quot;,      </span><br><span class="line">            contentType:&quot;application&#x2F;json&quot;,               </span><br><span class="line">            data:JSON.stringify(saveData), </span><br><span class="line">            success:function(data)&#123; </span><br><span class="line"></span><br><span class="line">            &#125; </span><br><span class="line">         &#125;); </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>java代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value &#x3D; &quot;saveUser&quot;, method &#x3D; &#123;RequestMethod.POST &#125;&#125;) </span><br><span class="line">@ResponseBody  </span><br><span class="line">public void saveUser(@RequestBody List&lt;User&gt; users) &#123; </span><br><span class="line">     userService.batchSave(users); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ModelAttribute</code>和<code>@RequestBody</code>注解不同之处在于<code>@ModelAttribute</code>注解可以在前端直接获取返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class Hello2ModelController extends BaseController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;helloWorld2&quot;)  </span><br><span class="line">    public String helloWorld(@ModelAttribute(&quot;myUser&quot;) User user) &#123;</span><br><span class="line">        user.setName(&quot;老王&quot;);</span><br><span class="line">       return &quot;helloWorld&quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>model</code>中<code>key</code>为<code>myUser</code> ,前台可以直接通过<code>${myUser.xx}</code>获取<code>user</code>相应属性</p><h2 id="直接用HttpServletRequest获取"><a href="#直接用HttpServletRequest获取" class="headerlink" title="直接用HttpServletRequest获取"></a>直接用HttpServletRequest获取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(method &#x3D; RequestMethod.GET) </span><br><span class="line">public String get(HttpServletRequest request, HttpServletResponse response) &#123; </span><br><span class="line">   System.out.println(request.getParameter(&quot;a&quot;)); </span><br><span class="line">    return &quot;helloWorld&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用注解-RequestParam绑定请求参数"><a href="#用注解-RequestParam绑定请求参数" class="headerlink" title="用注解@RequestParam绑定请求参数"></a>用注解@RequestParam绑定请求参数</h2><p>用注解<code>@RequestParam</code>绑定请求参数a到变量a</p><p>当请求参数a不存在时会有异常发生,可以通过设置属性<code>required=false</code>解决,</p><p>例如: <code>@RequestParam(value=&quot;a&quot;, required=false)</code></p><p>Controller如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value &#x3D; &quot;&#x2F;requestParam&quot;, method &#x3D; RequestMethod.GET) </span><br><span class="line">public String setupForm(@RequestParam(&quot;a&quot;) String a, ModelMap model) &#123; </span><br><span class="line">   System.out.println(a); </span><br><span class="line">return &quot;helloWorld&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用Undertow代替tomcat</title>
      <link href="/2019/08/14/SpringBoot%E4%BD%BF%E7%94%A8Undertow%E4%BB%A3%E6%9B%BFtomcat/"/>
      <url>/2019/08/14/SpringBoot%E4%BD%BF%E7%94%A8Undertow%E4%BB%A3%E6%9B%BFtomcat/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/springboot.jpg" alt=""></p><a id="more"></a><blockquote><p>Undertow 是基于java nio的web服务器，应用比较广泛，内置提供的PathResourceManager，可以用来直接访问文件系统；如果你有文件需要对外提供访问，除了ftp,nginx等，undertow 也是一个不错的选择，作为java开发，服务搭建非常简便</p></blockquote><h2 id="Undertow使用"><a href="#Undertow使用" class="headerlink" title="Undertow使用"></a>Undertow使用</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>spring boot内嵌容器默认为tomcat，想要换成undertow，非常容易，只需修改spring-boot-starter-web依赖，移除tomcat的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;  </span><br><span class="line">    &lt;exclusions&gt;  </span><br><span class="line">        &lt;exclusion&gt;  </span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;  </span><br><span class="line">        &lt;&#x2F;exclusion&gt;  </span><br><span class="line">    &lt;&#x2F;exclusions&gt;  </span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>然后，添加undertow依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;  </span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p> 这样即可，使用默认参数启动undertow服务器。如果需要修改undertow参数，继续往下看。</p><h3 id="undertow的参数设置："><a href="#undertow的参数设置：" class="headerlink" title="undertow的参数设置："></a>undertow的参数设置：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server:  </span><br><span class="line">    port: 8084  </span><br><span class="line">    http2:  </span><br><span class="line">        enabled: true  </span><br><span class="line">    undertow:  </span><br><span class="line">        io-threads: 16  </span><br><span class="line">        worker-threads: 256  </span><br><span class="line">        buffer-size: 1024  </span><br><span class="line">        buffers-per-region: 1024  </span><br><span class="line">        direct-buffers: true</span><br></pre></td></tr></table></figure><p>io-threads：IO线程数, 它主要执行非阻塞的任务，它们会负责多个连接，默认设置每个CPU核心一个线程，不可设置过大，否则启动项目会报错：打开文件数过多。</p><p>worker-threads：阻塞任务线程池，当执行类似servlet请求阻塞IO操作，undertow会从这个线程池中取得线程。它的值取决于系统线程执行任务的阻塞系数，默认值是 io-threads*8</p><p>以下配置会影响buffer，这些buffer会用于服务器连接的IO操作，有点类似netty的池化内存管理。</p><p>buffer-size：每块buffer的空间大小，越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可</p><p>buffers-per-region：每个区分配的buffer数量，所以pool的大小是buffer-size * buffers-per-region</p><p>direct-buffers：是否分配的直接内存(NIO直接分配的堆外内存)</p><h2 id="File-Server"><a href="#File-Server" class="headerlink" title="File Server"></a>File Server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">import io.undertow.Handlers;</span><br><span class="line">import io.undertow.Undertow;</span><br><span class="line">import io.undertow.server.handlers.resource.PathResourceManager;</span><br><span class="line"></span><br><span class="line">public class FileServer &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        File file &#x3D; new File(&quot;&#x2F;&quot;);</span><br><span class="line">        Undertow server &#x3D; Undertow.builder().addHttpListener(8080, &quot;localhost&quot;)</span><br><span class="line">                .setHandler(Handlers.resource(new PathResourceManager(file.toPath(), 100))</span><br><span class="line">                        .setDirectoryListingEnabled(true))</span><br><span class="line">                .build();</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了！运行main函数，打开浏览器访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot - Undertow容器启动</title>
      <link href="/2019/08/14/Spring-Boot-Undertow%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8/"/>
      <url>/2019/08/14/Spring-Boot-Undertow%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/springboot.jpg" alt=""></p><a id="more"></a><h2 id="Undertow简介"><a href="#Undertow简介" class="headerlink" title="Undertow简介"></a>Undertow简介</h2><ul><li><p>Undertow 是红帽公司开发的一款基于 NIO 的高性能 Web 嵌入式服务器</p></li><li><p>Untertow 的特点：<br><code>轻量级</code>：它是一个 Web 服务器，但不像传统的 Web 服务器有容器概念，它由两个核心 Jar 包组成，加载一个 Web 应 用可以小于 10MB 内存</p><p><code>Servlet3.1 支持</code>：它提供了对 Servlet3.1 的支持</p><p><code>WebSocket 支持</code>：对 Web Socket 完全支持，用以满足 Web 应用巨大数量的客户端</p><p><code>嵌套性</code>：它不需要容器，只需通过 API 即可快速搭建 Web 服务器</p></li><li><p>默认情况下 Spring Cloud 使用 Tomcat 作为内嵌 Servlet 容器，可启动一个 Tomcat 的 Spring Boot 程序与一个 Undertow 的 Spring Boot 程序，通过 VisualVM 工具进行比较，可看到 Undertow 性能优于 Tomcat</p></li></ul><h2 id="使用-Undertow"><a href="#使用-Undertow" class="headerlink" title="使用 Undertow"></a>使用 Undertow</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">    &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="支持-HTTP2"><a href="#支持-HTTP2" class="headerlink" title="支持 HTTP2"></a>支持 HTTP2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在@Configuration的类中添加@bean</span><br><span class="line">@Bean</span><br><span class="line">UndertowEmbeddedServletContainerFactory embeddedServletContainerFactory() &#123;</span><br><span class="line">    </span><br><span class="line">    UndertowEmbeddedServletContainerFactory factory &#x3D; new UndertowEmbeddedServletContainerFactory();</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 这里也可以做其他配置</span><br><span class="line">    factory.addBuilderCustomizers(builder -&gt; builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true));</span><br><span class="line">    </span><br><span class="line">    return factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-Undertow"><a href="#配置-Undertow" class="headerlink" title="配置 Undertow"></a>配置 Undertow</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Undertow 日志存放目录</span><br><span class="line">server.undertow.accesslog.dir</span><br><span class="line"># 是否启动日志</span><br><span class="line">server.undertow.accesslog.enabled&#x3D;false </span><br><span class="line"># 日志格式</span><br><span class="line">server.undertow.accesslog.pattern&#x3D;common</span><br><span class="line"># 日志文件名前缀</span><br><span class="line">server.undertow.accesslog.prefix&#x3D;access_log</span><br><span class="line"># 日志文件名后缀</span><br><span class="line">server.undertow.accesslog.suffix&#x3D;log</span><br><span class="line"># HTTP POST请求最大的大小</span><br><span class="line">server.undertow.max-http-post-size&#x3D;0 </span><br><span class="line"># 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程</span><br><span class="line">server.undertow.io-threads&#x3D;4</span><br><span class="line"># 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载</span><br><span class="line">server.undertow.worker-threads&#x3D;20</span><br><span class="line"># 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理</span><br><span class="line"># 每块buffer的空间大小,越小的空间被利用越充分</span><br><span class="line">server.undertow.buffer-size&#x3D;1024</span><br><span class="line"># 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region</span><br><span class="line">server.undertow.buffers-per-region&#x3D;1024</span><br><span class="line"># 是否分配的直接内存</span><br><span class="line">server.undertow.direct-buffers&#x3D;true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离后的优雅部署</title>
      <link href="/2019/08/12/%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%90%8E%E7%9A%84%E4%BC%98%E9%9B%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/08/12/%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%90%8E%E7%9A%84%E4%BC%98%E9%9B%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Web项目部署容器的选取"><a href="#Web项目部署容器的选取" class="headerlink" title="Web项目部署容器的选取"></a>Web项目部署容器的选取</h2><p>目前常用的部署Web项目的容器用Tomcat、Apache、Nginx等，那我们前后端分离后的前端Html静态项目到底部署在那个应用容器呢？我们先看看这几个应用容器的区别。</p><p><strong>Nginx,Apache,Tomcat的区别：</strong></p><p>Nginx常用做静态内容服务和代理服务器，直接外来请求转发给后面的应用服务器（如tomcat）,而tomcat更多用来做一个应用容器。</p><ul><li>Apache和nginx应该叫做HTTP Server，而tomcat是一个Application Server是一个Servlet/JSO应用的容器。</li><li>HTTP Server访问服务器上存储的资源（HTML文件，图片文件等），HTTP Server是中只是把服务器上的文件如实通过HTTP协议传输给客户端。</li><li>Application Server（应用服务器）往往是运行在HTTP Server的背后并执行应用，将动态的内容转化为静态的内容之后，通过HTTP Server分发到客户端。</li><li>Apache是同步多进程模型，一个连接对应一个进程，而nginx是一步的，多个连接（万级别）可以对应一个进程。nginx轻量级，抗并发，处理静态文件好。</li></ul><p>根据对比，我们不难发现Nginx是较好的选择，它是由俄罗斯人（伊戈尔·赛索耶夫）开发的一款高性能的HTTP和反向代理web服务器。本身是轻量级、抗并发、能实现万级的连接等。同时它也是一个反向代理服务器。因此，我们不仅可以用它部署静态的html应用，还可以实现域名及访问地址的代理。</p><h2 id="Nginx部署前端Web项目"><a href="#Nginx部署前端Web项目" class="headerlink" title="Nginx部署前端Web项目"></a>Nginx部署前端Web项目</h2><p>Nginx的安装这里不做介绍，只说配置及部署相关内容。首先进入linux系统中Nginx的安装录的conf目录下，找到nginx.config配置文件，vim nginx.config进入编辑模式，在http下的server对应的同级编辑或添加如下代码，然后在root对应的目录下上传对应的html今天项目文件。注意：这里上传的如果是压缩包就需要解压，目录下要有index.html。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name www.xxxx.com;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">      root html&#x2F;; #html访问路径  </span><br><span class="line">      index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我们的实际项目中，经常有多个Web端需要部署，如前面图中的例子，Web端有PC商城和Web后台系统，甚至可能更多，这些多个Web静态项目我们都放在nginx的html目录下的不同文件夹里，然后通过域名或ip+port代理到对应目录。下面就是多个Web项目在Nginx里的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">##商城Html页面</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name www.xxxx.com;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">      root html&#x2F;pc&#x2F;; #html访问路径  </span><br><span class="line">      index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">##后台系统Html页面</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name admin.xxxx.com;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">      root html&#x2F;admin&#x2F;; #html访问路径  </span><br><span class="line">      index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑完成后保存，并重启nginx服务 service nginx restart。<br>注：server_name 这里可配置域名或ip+端口号。</p><h2 id="后端项目的部署"><a href="#后端项目的部署" class="headerlink" title="后端项目的部署"></a>后端项目的部署</h2><p>大家应该都知道，SpringBoot里集成了Tomcat容器，所有Springboot的项目部署，很是容易，根本不需要你还安装什么Tomcat、JBoss等应用。我们只需打成jar文件，上传到服务器，然后通过执行<br>java -jar xxx.jar &amp;命令即可。<br>但有没有人遇到过，你通过java -jar xxx.jar &amp;刚刚部署的服务，在你断开linux服务器的shell连接后服务就没了。大家有知道这是什么原因吗？这里给大家说说部署java jar文件命令的那点事。</p><ul><li><p>java -jar xxx.jar &amp;</p><blockquote><p>此命令可直接启动jar文件，是在当前会话进程中开启一个子进程来运行程序，这个子进程会随着会话进程的结束而结束。也就是说在你端口Shell连接回话结束，服务就跟着结束了。这种情况适合短时间测试用。</p></blockquote></li><li><p>nohup java -jar xxx.jar &amp;</p><blockquote><p>这里在说这个命令前先说两个名词，即：<br>hangup (挂断)，终端退出时会发送 hangup 信号来通知关闭所有子进程。<br>nohup(不挂断，忽略挂断信号)</p></blockquote></li></ul><p>nohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上”&amp;”来将命令同时放入后台运行，也可用”&gt;filename2&gt;&amp;1”来更改缺省的重定向文件名。这种情况适合在生产环境长时间运行。</p><p>在生产环境如果你只用简单的jar部署，那一定得用nohup java 命令启动应用。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot逆向工程</title>
      <link href="/2019/07/27/springboot%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
      <url>/2019/07/27/springboot%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/springboot.jpg" alt=""></p><a id="more"></a><p>通过逆向工程少写很多代码</p><h2 id="generatorConfig-xml"><a href="#generatorConfig-xml" class="headerlink" title="generatorConfig.xml"></a>generatorConfig.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!--mysql 连接数据库jar 这里选择自己本地位置--&gt;</span><br><span class="line">    &lt;classPathEntry location&#x3D;&quot;C:\Users\Administrator\.m2\repository\mysql\mysql-connector-java\5.1.21\mysql-connector-java-5.1.21.jar&quot; &#x2F;&gt;</span><br><span class="line">    &lt;context id&#x3D;&quot;testTables&quot; targetRuntime&#x3D;&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;suppressAllComments&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;commentGenerator&gt;</span><br><span class="line">        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;oa&quot; userId&#x3D;&quot;root&quot;</span><br><span class="line">                        password&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;&#x2F;jdbcConnection&gt;</span><br><span class="line">        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span><br><span class="line">           NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;forceBigDecimals&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- targetProject:生成PO类的位置 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage&#x3D;&quot;com.yj.oa.project.po&quot;</span><br><span class="line">                            targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;trimStrings&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaModelGenerator&gt;</span><br><span class="line">        &lt;!-- targetProject:mapper映射文件生成的位置</span><br><span class="line">           如果maven工程只是单独的一个工程，targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;</span><br><span class="line">           若果maven工程是分模块的工程，targetProject&#x3D;&quot;所属模块的名称&quot;，例如：</span><br><span class="line">           targetProject&#x3D;&quot;ecps-manager-mapper&quot;，下同--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage&#x3D;&quot;mapper&quot;</span><br><span class="line">                         targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;sqlMapGenerator&gt;</span><br><span class="line">        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type&#x3D;&quot;XMLMAPPER&quot;</span><br><span class="line">                             targetPackage&#x3D;&quot;com.yj.oa.project.mapper&quot;</span><br><span class="line">                             targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaClientGenerator&gt;</span><br><span class="line">        &lt;!-- 指定数据库表 --&gt;</span><br><span class="line">        &lt;table tableName&#x3D;&quot;t_overtimeform&quot; domainObjectName&#x3D;&quot;OvertimeForm&quot; enableCountByExample&#x3D;&quot;false&quot;</span><br><span class="line">               enableUpdateByExample&#x3D;&quot;false&quot; enableDeleteByExample&#x3D;&quot;false&quot; enableSelectByExample&#x3D;&quot;false&quot;</span><br><span class="line">               selectByExampleQueryId&#x3D;&quot;false&quot;&gt;&lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;context&gt;</span><br><span class="line">&lt;&#x2F;generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;configuration&gt; &lt;!--配置文件的位置--&gt;</span><br><span class="line">                    &lt;configurationFile&gt;src&#x2F;main&#x2F;resources&#x2F;generatorConfig.xml&lt;&#x2F;configurationFile&gt;</span><br><span class="line">                    &lt;verbose&gt;true&lt;&#x2F;verbose&gt;</span><br><span class="line">                    &lt;overwrite&gt;true&lt;&#x2F;overwrite&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;Generate MyBatis Artifacts&lt;&#x2F;id&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;generate&lt;&#x2F;goal&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;mybatis-generator-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">                        &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">                    &lt;&#x2F;dependency&gt;</span><br><span class="line">                &lt;&#x2F;dependencies&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己实现一个简单版的HashMap</title>
      <link href="/2019/07/26/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%89%88%E7%9A%84HashMap/"/>
      <url>/2019/07/26/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%89%88%E7%9A%84HashMap/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h2><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br>HashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。<br>HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。</p><p>HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。容量 是哈希表中桶的数量，初始容量 只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。<br>通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。</p><h2 id="简单版，只实现put和get"><a href="#简单版，只实现put和get" class="headerlink" title="简单版，只实现put和get"></a>简单版，只实现put和get</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">public class MyHashMap&lt;K, V&gt; &#123;</span><br><span class="line">    private static int default_length &#x3D; 16;</span><br><span class="line">    private MyEntry&lt;K, V&gt;[] entries;</span><br><span class="line"></span><br><span class="line">    public MyHashMap() &#123;</span><br><span class="line">        super();</span><br><span class="line">        entries &#x3D; new MyEntry[default_length];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public V put(K key, V value) &#123;</span><br><span class="line">        int index &#x3D; key.hashCode() % default_length;&#x2F;&#x2F; hascode值除map大小取余</span><br><span class="line">        MyEntry&lt;K, V&gt; prevoius &#x3D; entries[index];</span><br><span class="line">        for (MyEntry&lt;K, V&gt; entry &#x3D; entries[index]; entry !&#x3D; null; entry &#x3D; entry.next) &#123;</span><br><span class="line">            if (entry.getKey().equals(key)) &#123;</span><br><span class="line">                V oldValue &#x3D; (V) entry.getValue();</span><br><span class="line">                entry.setValue(value);</span><br><span class="line">                return oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        MyEntry&lt;K, V&gt; entry &#x3D; new MyEntry&lt;&gt;(key, value);</span><br><span class="line">        entry.next &#x3D; prevoius;</span><br><span class="line">        entries[index] &#x3D; entry;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public K get(K key)&#123;</span><br><span class="line">        int index&#x3D; key.hashCode()%default_length;</span><br><span class="line">        for (MyEntry&lt;K,V&gt; entry&#x3D; entries[index];entry!&#x3D;null;entry&#x3D;entry.next)&#123;</span><br><span class="line">            if(entry.getKey().equals(key))&#123;</span><br><span class="line">                return (K)entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private final class MyEntry&lt;K, V&gt; &#123;</span><br><span class="line">        private K key;</span><br><span class="line">        private V value;</span><br><span class="line">        private MyEntry next;</span><br><span class="line"></span><br><span class="line">        public MyEntry() &#123;</span><br><span class="line">            super();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public MyEntry(K key, V value) &#123;</span><br><span class="line">            super();</span><br><span class="line">            this.key &#x3D; key;</span><br><span class="line">            this.value &#x3D; value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public MyEntry(K key, V value, MyEntry next) &#123;</span><br><span class="line">            super();</span><br><span class="line">            this.key &#x3D; key;</span><br><span class="line">            this.value &#x3D; value;</span><br><span class="line">            this.next &#x3D; next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public K getKey() &#123;</span><br><span class="line">            return key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setKey(K key) &#123;</span><br><span class="line">            this.key &#x3D; key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public V getValue() &#123;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setValue(V value) &#123;</span><br><span class="line">            this.value &#x3D; value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public MyEntry getNext() &#123;</span><br><span class="line">            return next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setNext(MyEntry next) &#123;</span><br><span class="line">            this.next &#x3D; next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂版"><a href="#复杂版" class="headerlink" title="复杂版"></a>复杂版</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">public class MyHashMap &#123;</span><br><span class="line">    &#x2F;&#x2F;默认初始化大小 16</span><br><span class="line">    private static final int DEFAULT_INITIAL_CAPACITY &#x3D; 16;</span><br><span class="line">    &#x2F;&#x2F;默认负载因子 0.75</span><br><span class="line">    private static final float DEFAULT_LOAD_FACTOR &#x3D; 0.75f;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;临界值</span><br><span class="line">    private int threshold;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;元素个数</span><br><span class="line">    private int size;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;扩容次数</span><br><span class="line">    private int resize;</span><br><span class="line"></span><br><span class="line">    private MyEntry[] table;</span><br><span class="line"></span><br><span class="line">    public MyHashMap() &#123;</span><br><span class="line">        table &#x3D; new MyEntry[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">        threshold &#x3D; (int) (DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</span><br><span class="line">        size &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int index(Object key) &#123;</span><br><span class="line">        &#x2F;&#x2F;根据key的hashcode和entry长度取模计算key在entry中的位置</span><br><span class="line">        return key.hashCode() % table.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void put(Object key, Object value) &#123;</span><br><span class="line">        &#x2F;&#x2F;key为null时需要特殊处理，为简化实现忽略null值</span><br><span class="line">        if (key &#x3D;&#x3D; null) return;</span><br><span class="line">        int index &#x3D; index(key);</span><br><span class="line">        &#x2F;&#x2F;遍历index位置的entry，若找到重复key则更新对应entry的值，然后返回</span><br><span class="line">        MyEntry entry &#x3D; table[index];</span><br><span class="line">        while (entry !&#x3D; null) &#123;</span><br><span class="line">            if (entry.getKey().hashCode() &#x3D;&#x3D; key.hashCode() &amp;&amp; (entry.getKey() &#x3D;&#x3D; key || entry.getKey().equals(key))) &#123;</span><br><span class="line">                entry.setValue(value);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            entry &#x3D; entry.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;若index位置没有entry或者未找到重复的key，则将新key添加到table的index位置</span><br><span class="line">        add(index, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void add(int index, Object key, Object value) &#123;</span><br><span class="line">        &#x2F;&#x2F;将新的entry放到table的index位置第一个，若原来有值则以链表形式存放</span><br><span class="line">        MyEntry entry &#x3D; new MyEntry(key, value, table[index]);</span><br><span class="line">        table[index] &#x3D; entry;</span><br><span class="line">        &#x2F;&#x2F;判断size是否达到临界值，若已达到则进行扩容，将table的capacicy翻倍</span><br><span class="line">        if (size++ &gt;&#x3D; threshold) &#123;</span><br><span class="line">            resize(table.length * 2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void resize(int capacity) &#123;</span><br><span class="line">        if (capacity &lt;&#x3D; table.length) return;</span><br><span class="line"></span><br><span class="line">        MyEntry[] newTable &#x3D; new MyEntry[capacity];</span><br><span class="line">        &#x2F;&#x2F;遍历原table，将每个entry都重新计算hash放入newTable中</span><br><span class="line">        for (int i &#x3D; 0; i &lt; table.length; i++) &#123;</span><br><span class="line">            MyEntry old &#x3D; table[i];</span><br><span class="line">            while (old!&#x3D;null)&#123;</span><br><span class="line">                MyEntry next &#x3D; old.getNext();</span><br><span class="line">                int index &#x3D; index(old.getKey());</span><br><span class="line">                old.setNext(newTable[index]);</span><br><span class="line">                newTable[index] &#x3D; old;</span><br><span class="line">                old&#x3D;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;用newTable替table</span><br><span class="line">        table &#x3D; newTable;</span><br><span class="line">        &#x2F;&#x2F;修改临界值</span><br><span class="line">        threshold &#x3D; (int) (table.length * DEFAULT_LOAD_FACTOR);</span><br><span class="line">        resize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object get(Object key)&#123;</span><br><span class="line">        &#x2F;&#x2F;这里简化处理，忽略null值</span><br><span class="line">        if (key &#x3D;&#x3D; null) return null;</span><br><span class="line">        MyEntry entry&#x3D; getEntry(key);</span><br><span class="line">        return entry &#x3D;&#x3D; null ? null : entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyEntry getEntry(Object key)&#123;</span><br><span class="line">        MyEntry entry &#x3D;table[index(key)];</span><br><span class="line">        while (entry!&#x3D;null)&#123;</span><br><span class="line">            if (entry.getKey().hashCode()&#x3D;&#x3D;key.hashCode()&amp;&amp;(entry.getKey()&#x3D;&#x3D;key||entry.getKey().equals(key)))&#123;</span><br><span class="line">                return entry;</span><br><span class="line">            &#125;</span><br><span class="line">            entry &#x3D; entry.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        return entry;</span><br><span class="line">    &#125;</span><br><span class="line">    public void remove(Object key) &#123;</span><br><span class="line">        if (key &#x3D;&#x3D; null) return;</span><br><span class="line">        int index &#x3D; index(key);</span><br><span class="line">        MyEntry pre &#x3D; null;</span><br><span class="line">        MyEntry entry &#x3D; table[index];</span><br><span class="line">        while (entry !&#x3D; null) &#123;</span><br><span class="line">            if (entry.getKey().hashCode() &#x3D;&#x3D; key.hashCode() &amp;&amp; (entry.getKey() &#x3D;&#x3D; key || entry.getKey().equals(key))) &#123;</span><br><span class="line">                if (pre &#x3D;&#x3D; null) table[index] &#x3D; entry.getNext();</span><br><span class="line">                else pre.setNext(entry.getNext());</span><br><span class="line">                &#x2F;&#x2F;如果成功找到并删除，修改size</span><br><span class="line">                size--;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            pre &#x3D; entry;</span><br><span class="line">            entry &#x3D; entry.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean containsKey(Object key) &#123;</span><br><span class="line">        if (key &#x3D;&#x3D; null) return false;</span><br><span class="line">        return getEntry(key) !&#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int size() &#123;</span><br><span class="line">        return this.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; table.length; i++) &#123;</span><br><span class="line">            table[i] &#x3D; null;</span><br><span class="line">        &#125;</span><br><span class="line">        this.size &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">        sb.append(String.format(&quot;size:%s capacity:%s resize:%s\n\n&quot;, size, table.length, resize));</span><br><span class="line">        for (MyEntry entry : table) &#123;</span><br><span class="line">            while (entry !&#x3D; null) &#123;</span><br><span class="line">                sb.append(entry.getKey() + &quot;:&quot; + entry.getValue() + &quot;\n&quot;);</span><br><span class="line">                entry &#x3D; entry.getNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    final class MyEntry &#123;</span><br><span class="line">        private Object key;</span><br><span class="line">        private Object value;</span><br><span class="line">        private MyEntry next;</span><br><span class="line"></span><br><span class="line">        public MyEntry(Object key, Object value, MyEntry next) &#123;</span><br><span class="line">            this.key &#x3D; key;</span><br><span class="line">            this.value &#x3D; value;</span><br><span class="line">            this.next &#x3D; next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Object getKey() &#123;</span><br><span class="line">            return key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setKey(Object key) &#123;</span><br><span class="line">            this.key &#x3D; key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Object getValue() &#123;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setValue(Object value) &#123;</span><br><span class="line">            this.value &#x3D; value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public MyEntry getNext() &#123;</span><br><span class="line">            return next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setNext(MyEntry next) &#123;</span><br><span class="line">            this.next &#x3D; next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSON搞定任何JSON数据</title>
      <link href="/2019/07/26/GSON%E6%90%9E%E5%AE%9A%E4%BB%BB%E4%BD%95JSON%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/07/26/GSON%E6%90%9E%E5%AE%9A%E4%BB%BB%E4%BD%95JSON%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/coder-lida/CDN/img/Jennifer-2.png" alt=""></p><a id="more"></a><h2 id="一、Gson介绍"><a href="#一、Gson介绍" class="headerlink" title="一、Gson介绍"></a>一、Gson介绍</h2><p>GSON是Google提供的用来在Java对象和JSON数据之间进行映射的Java类库。可以将一个Json字符转成一个Java对象，或者将一个Java转化为Json字符串。</p><blockquote><p><em>特点:</em></p></blockquote><ul><li>快速、高效    </li><li>代码量少、简洁</li><li>面向对象</li><li>数据传递和解析</li></ul><h2 id="二、Gson的pom依赖"><a href="#二、Gson的pom依赖" class="headerlink" title="二、Gson的pom依赖"></a>二、Gson的pom依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.8.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="三、Gson的创建方式"><a href="#三、Gson的创建方式" class="headerlink" title="三、Gson的创建方式"></a>三、Gson的创建方式</h2><ul><li><p>Gson gson = new gson();</p></li><li><p>通过GsonBuilder()，可以配置多种配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Gson gson &#x3D; new GsonBuilder()</span><br><span class="line">                        .setLenient()&#x2F;&#x2F; json宽松  </span><br><span class="line">                        .enableComplexMapKeySerialization()&#x2F;&#x2F;支持Map的key为复杂对象的形式  </span><br><span class="line">                        .serializeNulls() &#x2F;&#x2F;智能null  </span><br><span class="line">                        .setPrettyPrinting()&#x2F;&#x2F; 调教格式  </span><br><span class="line">                        .disableHtmlEscaping() &#x2F;&#x2F;默认是GSON把HTML 转义的</span><br><span class="line">                        .create();</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、Gson的基本用法"><a href="#四、Gson的基本用法" class="headerlink" title="四、Gson的基本用法"></a>四、Gson的基本用法</h2><p>之前写过一个获取天气参数的API,就需要去解析返回的json数据，就以此为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String url &#x3D; &quot;http:&#x2F;&#x2F;t.weather.sojson.com&#x2F;api&#x2F;weather&#x2F;city&#x2F;101010100&quot;;</span><br><span class="line">String resultStr &#x3D; HttpClientUtil.sendGetRequest(url, &quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure><h2 id="五、进行解析"><a href="#五、进行解析" class="headerlink" title="五、进行解析"></a>五、进行解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson &#x3D;new Gson();</span><br><span class="line">Map m&#x3D; gson.fromJson(resultStr,Map.class);</span><br><span class="line">System.out.println(m.get(&quot;data&quot;));</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;shidu&#x3D;15%, pm25&#x3D;15.0, pm10&#x3D;35.0, quality&#x3D;优, wendu&#x3D;3, ganmao&#x3D;各类人群可自由活动, </span><br><span class="line">yesterday&#x3D;&#123;date&#x3D;06, sunrise&#x3D;07:36, high&#x3D;高温 3.0℃, low&#x3D;低温 -7.0℃, sunset&#x3D;17:03, </span><br><span class="line">aqi&#x3D;58.0, ymd&#x3D;2019-01-06, week&#x3D;星期日, fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;晴, </span><br><span class="line">notice&#x3D;愿你拥有比阳光明媚的心情&#125;, forecast&#x3D;[&#123;date&#x3D;07, sunrise&#x3D;07:36, high&#x3D;高温 2.0℃, </span><br><span class="line">low&#x3D;低温 -7.0℃, sunset&#x3D;17:04, aqi&#x3D;48.0, ymd&#x3D;2019-01-07, week&#x3D;星期一, fx&#x3D;北风, </span><br><span class="line">fl&#x3D;3-4级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;, &#123;date&#x3D;08, sunrise&#x3D;07:36, </span><br><span class="line">high&#x3D;高温 1.0℃, low&#x3D;低温 -9.0℃, sunset&#x3D;17:05, aqi&#x3D;28.0, ymd&#x3D;2019-01-08, week&#x3D;星期二, </span><br><span class="line">fx&#x3D;北风, fl&#x3D;3-4级, type&#x3D;晴, notice&#x3D;愿你拥有比阳光明媚的心情&#125;, &#123;date&#x3D;09, sunrise&#x3D;07:36,</span><br><span class="line"> high&#x3D;高温 2.0℃, low&#x3D;低温 -8.0℃, sunset&#x3D;17:06, aqi&#x3D;83.0, ymd&#x3D;2019-01-09, week&#x3D;星期三, </span><br><span class="line">fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;, &#123;date&#x3D;10, sunrise&#x3D;07:36, </span><br><span class="line">high&#x3D;高温 4.0℃, low&#x3D;低温 -7.0℃, sunset&#x3D;17:07, aqi&#x3D;128.0, ymd&#x3D;2019-01-10, week&#x3D;星期四,</span><br><span class="line"> fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;晴, notice&#x3D;愿你拥有比阳光明媚的心情&#125;, &#123;date&#x3D;11, sunrise&#x3D;07:36, </span><br><span class="line">high&#x3D;高温 5.0℃, low&#x3D;低温 -6.0℃, sunset&#x3D;17:08, aqi&#x3D;238.0, ymd&#x3D;2019-01-11, week&#x3D;星期五,</span><br><span class="line"> fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;]&#125;</span><br><span class="line">可以新建一个天气的Bean，将返回的json数据转换成对象</span><br></pre></td></tr></table></figure><h2 id="六、GSON直接解析成对象"><a href="#六、GSON直接解析成对象" class="headerlink" title="六、GSON直接解析成对象"></a>六、GSON直接解析成对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultBean resultBean &#x3D; new Gson().fromJson(resultStr,ResultBean.class);</span><br></pre></td></tr></table></figure><h2 id="七、解析简单的json"><a href="#七、解析简单的json" class="headerlink" title="七、解析简单的json"></a>七、解析简单的json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">      shidu &#x3D; 15 % , </span><br><span class="line">      pm25 &#x3D; 15.0,</span><br><span class="line">      pm10 &#x3D; 35.0, </span><br><span class="line">      quality &#x3D; 优, </span><br><span class="line">      wendu &#x3D; 3, </span><br><span class="line">      ganmao &#x3D; 各类人群可自由活动,</span><br><span class="line">     &#125;</span><br><span class="line">JsonObject jsonObject &#x3D;(JsonObject) new JsonParser().parse(resultStr);</span><br><span class="line">Int wendu &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;wendu&quot;).getAsInt();</span><br><span class="line">String quality&#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;quality&quot;).getAsString();</span><br></pre></td></tr></table></figure><h2 id="八、解析多层对象"><a href="#八、解析多层对象" class="headerlink" title="八、解析多层对象"></a>八、解析多层对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> data:&#123;</span><br><span class="line">     shidu &#x3D; 15 % , </span><br><span class="line">     pm25 &#x3D; 15.0, </span><br><span class="line">     pm10 &#x3D; 35.0, </span><br><span class="line">     quality &#x3D; 优, </span><br><span class="line">     wendu &#x3D; 3, </span><br><span class="line">     ganmao &#x3D; 各类人群可自由活动, </span><br><span class="line">     yesterday :&#123;</span><br><span class="line">                   date &#x3D; 06,</span><br><span class="line">                   sunrise &#x3D; 07: 36,</span><br><span class="line">                   high &#x3D; 高温 3.0℃,</span><br><span class="line">                   low &#x3D; 低温 - 7.0℃,</span><br><span class="line">                   sunset &#x3D; 17: 03,</span><br><span class="line">                   aqi &#x3D; 58.0,</span><br><span class="line">                   ymd &#x3D; 2019 - 01 - 06,</span><br><span class="line">                   week &#x3D; 星期日,</span><br><span class="line">                   fx &#x3D; 西南风,</span><br><span class="line">                   fl &#x3D; &lt; 3 级,</span><br><span class="line">                   type &#x3D; 晴,</span><br><span class="line">                   notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class="line">                &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">JsonObject jsonObject &#x3D; (JsonObject) new JsonParser().parse(resultStr);</span><br><span class="line">JsonObject yesterday &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;yesterday &quot;).getAsJsonObject();</span><br><span class="line">String type  &#x3D; yesterday.get(&quot;type&quot;).getAsString();</span><br></pre></td></tr></table></figure><h2 id="九、解析带数组的json"><a href="#九、解析带数组的json" class="headerlink" title="九、解析带数组的json"></a>九、解析带数组的json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">shidu &#x3D; 15 % , pm25 &#x3D; 15.0, pm10 &#x3D; 35.0, quality &#x3D; 优, wendu &#x3D; 3, ganmao &#x3D; 各类人群可自由活动, </span><br><span class="line">yesterday &#x3D; &#123;</span><br><span class="line">        date &#x3D; 06,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 3.0℃,</span><br><span class="line">        low &#x3D; 低温 - 7.0℃,</span><br><span class="line">        sunset &#x3D; 17: 03,</span><br><span class="line">        aqi &#x3D; 58.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 06,</span><br><span class="line">        week &#x3D; 星期日,</span><br><span class="line">        fx &#x3D; 西南风,</span><br><span class="line">        fl &#x3D; &lt; 3 级,</span><br><span class="line">        type &#x3D; 晴,</span><br><span class="line">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class="line">    &#125;, </span><br><span class="line">forecast &#x3D; [&#123;</span><br><span class="line">        date &#x3D; 07,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 2.0℃,</span><br><span class="line">        low &#x3D; 低温 - 7.0℃,</span><br><span class="line">        sunset &#x3D; 17: 04,</span><br><span class="line">        aqi &#x3D; 48.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 07,</span><br><span class="line">        week &#x3D; 星期一,</span><br><span class="line">        fx &#x3D; 北风,</span><br><span class="line">        fl &#x3D; 3 - 4 级,</span><br><span class="line">        type &#x3D; 多云,</span><br><span class="line">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        date &#x3D; 08,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 1.0℃,</span><br><span class="line">        low &#x3D; 低温 - 9.0℃,</span><br><span class="line">        sunset &#x3D; 17: 05,</span><br><span class="line">        aqi &#x3D; 28.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 08,</span><br><span class="line">        week &#x3D; 星期二,</span><br><span class="line">        fx &#x3D; 北风,</span><br><span class="line">        fl &#x3D; 3 - 4 级,</span><br><span class="line">        type &#x3D; 晴,</span><br><span class="line">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        date &#x3D; 09,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 2.0℃,</span><br><span class="line">        low &#x3D; 低温 - 8.0℃,</span><br><span class="line">        sunset &#x3D; 17: 06,</span><br><span class="line">        aqi &#x3D; 83.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 09,</span><br><span class="line">        week &#x3D; 星期三,</span><br><span class="line">        fx &#x3D; 西南风,</span><br><span class="line">        fl &#x3D; &lt; 3 级,</span><br><span class="line">        type &#x3D; 多云,</span><br><span class="line">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        date &#x3D; 10,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 4.0℃,</span><br><span class="line">        low &#x3D; 低温 - 7.0℃,</span><br><span class="line">        sunset &#x3D; 17: 07,</span><br><span class="line">        aqi &#x3D; 128.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 10,</span><br><span class="line">        week &#x3D; 星期四,</span><br><span class="line">        fx &#x3D; 西南风,</span><br><span class="line">        fl &#x3D; &lt; 3 级,</span><br><span class="line">        type &#x3D; 晴,</span><br><span class="line">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        date &#x3D; 11,</span><br><span class="line">        sunrise &#x3D; 07: 36,</span><br><span class="line">        high &#x3D; 高温 5.0℃,</span><br><span class="line">        low &#x3D; 低温 - 6.0℃,</span><br><span class="line">        sunset &#x3D; 17: 08,</span><br><span class="line">        aqi &#x3D; 238.0,</span><br><span class="line">        ymd &#x3D; 2019 - 01 - 11,</span><br><span class="line">        week &#x3D; 星期五,</span><br><span class="line">        fx &#x3D; 西南风,</span><br><span class="line">        fl &#x3D; &lt; 3 级,</span><br><span class="line">        type &#x3D; 多云,</span><br><span class="line">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JsonObject jsonObject &#x3D;(JsonObject) new JsonParser().parse(resultStr);</span><br><span class="line">&#x2F;&#x2F;获取data</span><br><span class="line">JsonObject data &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject();</span><br><span class="line">&#x2F;&#x2F;获取数组</span><br><span class="line">JsonArray forecast &#x3D; data.getAsJsonObject().get(&quot;forecast&quot;).getAsJsonArray();</span><br><span class="line">String type  &#x3D; forecast.get(0).getAsJsonObject().get(&quot;type&quot;).getAsString();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发中常用的 25 个JavaScript 单行代码</title>
      <link href="/2019/07/26/%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84-25-%E4%B8%AAJavaScript-%E5%8D%95%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
      <url>/2019/07/26/%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84-25-%E4%B8%AAJavaScript-%E5%8D%95%E8%A1%8C%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="1-强制布尔值"><a href="#1-强制布尔值" class="headerlink" title="1.强制布尔值"></a>1.强制布尔值</h3><p>要将变量强制转换为布尔值而不更改其值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const myBoolean &#x3D; !! myVariable;!!null &#x2F;&#x2F; false !!undefined &#x2F;&#x2F; false !!false &#x2F;&#x2F; false !!ture &#x2F;&#x2F; ture !!&quot;&quot; &#x2F;&#x2F; false !!&quot;string&quot; &#x2F;&#x2F; true !!0 &#x2F;&#x2F; false !!1 &#x2F;&#x2F; true !!&#123;&#125; &#x2F;&#x2F; true !![] &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="2-基于某个条件为对象设置属性"><a href="#2-基于某个条件为对象设置属性" class="headerlink" title="2.基于某个条件为对象设置属性"></a>2.基于某个条件为对象设置属性</h3><p>要使用spread运算符有条件地在对象上设置属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const myObject &#x3D; &#123;... myProperty &amp;&amp; &#123;propName：myPoperty&#125;&#125;;</span><br><span class="line">let myProperty &#x3D; &#39;Jhon&#39; const myObject &#x3D; &#123;...myProperty &amp;&amp; &#123;propName: myProperty&#125;&#125;; </span><br><span class="line">&#x2F;&#x2F; &#123;propName: &quot;Jhon&quot;&#125; </span><br><span class="line">let myProperty &#x3D; &#39;&#39; </span><br><span class="line">const myObject &#x3D; &#123;...myProperty &amp;&amp; &#123;propName: myProperty&#125;&#125;; </span><br><span class="line">&#x2F;&#x2F; &#123;&#125;</span><br></pre></td></tr></table></figure><p>如果myProperty结果为false，则 &amp;&amp; 失败并且不设置新属性; 否则，如果不为空，&amp;&amp; 将设置新属性并覆盖原来的值。</p><h3 id="3-合并对象"><a href="#3-合并对象" class="headerlink" title="3.合并对象"></a>3.合并对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mergedObject &#x3D; &#123; ...objectOne, ...objectTwo &#125;; </span><br><span class="line">const mergedObject &#x3D; &#123; ...&#123;name: &#39;Jhon&#39;, age: &#39;18&#39;&#125;, ...&#123;name1: &#39;jhon1&#39;, age1: &#39;12&#39;&#125;&#125;;</span><br><span class="line"> &#x2F;&#x2F; &#123;name: &quot;Jhon&quot;, age: &quot;18&quot;, name1: &quot;jhon1&quot;, age1: &quot;12&quot;&#125; </span><br><span class="line">const mergedObject &#x3D; &#123; ...&#123;name: &#39;Jhon&#39;, age: &#39;18&#39;&#125;, ...&#123;name: &#39;jhon1&#39;, age:&#39;12&#39;&#125;&#125;; </span><br><span class="line">&#x2F;&#x2F; &#123;name: &quot;jhon1&quot;, age: &quot;12&quot;&#125;</span><br></pre></td></tr></table></figure><p>支持无限制合并，但如果对象之间存在相同属性，则后面属性会覆盖前面属性。*请注意，这仅适用于浅层合并。</p><h3 id="4-交换变量"><a href="#4-交换变量" class="headerlink" title="4.交换变量"></a>4.交换变量</h3><p>要在不使用中间变量的情况下交换两个变量的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[varA，varB] &#x3D; [varB，varA]; </span><br><span class="line">let a &#x3D; 1; let b &#x3D; 2; </span><br><span class="line">[a, b] &#x3D; [b, a] &#x2F;&#x2F; a &#x3D; 2 b &#x3D; 1</span><br></pre></td></tr></table></figure><h3 id="5-删除Boolean-为-false-值"><a href="#5-删除Boolean-为-false-值" class="headerlink" title="5.删除Boolean 为 false 值"></a>5.删除Boolean 为 false 值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const clean &#x3D; dirty.filter(Boolean); </span><br><span class="line">const clean &#x3D; [0, false, true, undefined, null, &#39;&#39;, 12, 15].filter(Boolean); &#x2F;&#x2F; [true, 12, 15]</span><br></pre></td></tr></table></figure><p>这将删除值等于：null，undefined，false，0 和空字符串(‘’)。</p><h3 id="6-转换元素类型"><a href="#6-转换元素类型" class="headerlink" title="6.转换元素类型"></a>6.转换元素类型</h3><p>要将Number元素转换为String元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const stringArray &#x3D; numberArray.map(String); </span><br><span class="line">const stringArray &#x3D; [1, 2, 3].map(String); [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span><br></pre></td></tr></table></figure><p>如果数组包含字符串，字符串原样保留。 这也可以用于将String元素转换为Number类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const numberArray &#x3D; stringArray.map(Number); </span><br><span class="line">const stringArray &#x3D; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(String); &#x2F;&#x2F; [1, 2, 3]</span><br></pre></td></tr></table></figure><h3 id="7-格式化对象为JSON代码"><a href="#7-格式化对象为JSON代码" class="headerlink" title="7.格式化对象为JSON代码"></a>7.格式化对象为JSON代码</h3><p>要以可读的格式显示JSON代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const formatted &#x3D; JSON.stringify(myObj, null, 4); </span><br><span class="line">const formatted &#x3D; JSON.stringify(&#123;name: &#39;Jhon&#39;, age: 18, address: &#39;sz&#39;&#125;, null, 4); </span><br><span class="line">&#x2F;* &#123;  &quot;name&quot;: &quot;Jhon&quot;,  &quot;age&quot;: 18,  &quot;address&quot;: &quot;sz&quot; &#125; *&#x2F;</span><br></pre></td></tr></table></figure><p>该字符串化命令有三个参数。第一个是Javascript对象。第二个是可选函数，可用于在JSON进行字符串化时对其执行操作。最后一个参数指示要添加多少空格作为缩进以格式化JSON。省略最后一个参数，JSON将返回一个长行。如果myObj中存在循环引用，则会格式失败。</p><h3 id="8-快速创建数字数组"><a href="#8-快速创建数字数组" class="headerlink" title="8.快速创建数字数组"></a>8.快速创建数字数组</h3><p>要创建一个数组并用数字填充它，索引为零：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const numArray &#x3D; Array.from(new Array(10), (x, i)&#x3D;&gt; i);</span><br><span class="line"> &#x2F;&#x2F; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><h3 id="9-随机生成六位数字验证码"><a href="#9-随机生成六位数字验证码" class="headerlink" title="9.随机生成六位数字验证码"></a>9.随机生成六位数字验证码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const code &#x3D; Math.floor(Math.random() * 1000000).toString().padStart(6, &quot;0&quot;); </span><br><span class="line">&#x2F;&#x2F; 942377</span><br></pre></td></tr></table></figure><h3 id="10-身份证正则"><a href="#10-身份证正则" class="headerlink" title="10.身份证正则"></a>10.身份证正则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const IDReg&#x3D; &#x2F;(^[1-9]d&#123;5&#125;(18|19|</span><br><span class="line">              ([23]d))d&#123;2&#125;((0[1-9])|</span><br><span class="line">              (10|11|12))(([0-2][1-9])|10|20|30|31)d&#123;3&#125;[0-9Xx]$)|</span><br><span class="line">              (^[1-9]d&#123;5&#125;d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)d&#123;2&#125;[0-9Xx]$)&#x2F;;</span><br></pre></td></tr></table></figure><h3 id="11-window-location-search-转-JS-对象"><a href="#11-window-location-search-转-JS-对象" class="headerlink" title="11.window.location.search 转 JS 对象"></a>11.window.location.search 转 JS 对象</h3><p>有时候我们会对url的查询参数即从问号 (?)后 开始的 URL（查询部分）进行转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const searchObj &#x3D; search </span><br><span class="line">                &#x3D;&gt; JSON.parse(</span><br><span class="line">                   &#96;&#123;&quot;$&#123;decodeURIComponent(search</span><br><span class="line">                       .substring(1))</span><br><span class="line">                       .replace(&#x2F;&quot;&#x2F;g, &#39;\&quot;&#39;)</span><br><span class="line">                       .replace(&#x2F;&amp;&#x2F;g,&#39;&quot;,&quot;&#39;)</span><br><span class="line">                       .replace(&#x2F;&#x3D;&#x2F;g, &#39;&quot;:&quot;&#39;)</span><br><span class="line">                    &#125;&quot;&#125;&#96;</span><br><span class="line">                ); </span><br><span class="line">&#x2F;&#x2F; 假如请求url为 &#x2F;&#x2F; &#39;https:&#x2F;&#x2F;www.baidu.com?ie&#x3D;utf-8&amp;f&#x3D;8&amp;rsv_bp&#x3D;1&amp;rsv_idx&#x3D;1&amp;tn&#x3D;baidu&amp;wd&#x3D;js&amp;rsv_pq&#x3D;a86b5e5f0007bceb&amp;rsv_t&#x3D;1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&amp;rqlang&#x3D;cn&amp;rsv_enter&#x3D;0&amp;inputT&#x3D;1287&amp;rsv_sug3&#x3D;5&amp;rsv_sug1&#x3D;3&amp;rsv_sug7&#x3D;101&amp;rsv_sug2&#x3D;0&amp;rsv_sug4&#x3D;1907&#39; </span><br><span class="line">&#x2F;&#x2F; 那么 window.location.search 就为： let search &#x3D; &#39;?ie&#x3D;utf-8&amp;f&#x3D;8&amp;rsv_bp&#x3D;1&amp;rsv_idx&#x3D;1&amp;tn&#x3D;baidu&amp;wd&#x3D;js&amp;rsv_pq&#x3D;a86b5e5f0007bceb&amp;rsv_t&#x3D;1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&amp;rqlang&#x3D;cn&amp;rsv_enter&#x3D;0&amp;inputT&#x3D;1287&amp;rsv_sug3&#x3D;5&amp;rsv_sug1&#x3D;3&amp;rsv_sug7&#x3D;101&amp;rsv_sug2&#x3D;0&amp;rsv_sug4&#x3D;1907&#39; searchObj(search)</span><br></pre></td></tr></table></figure><h3 id="12-JS-对象转-url-查询字符串"><a href="#12-JS-对象转-url-查询字符串" class="headerlink" title="12.JS 对象转 url 查询字符串"></a>12.JS 对象转 url 查询字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const objectToQueryString &#x3D; (obj)</span><br><span class="line">                         &#x3D;&gt; Object.keys(obj).map((key)                          </span><br><span class="line">                         &#x3D;&gt;&#96;$&#123;encodeURIComponent(key)&#125;</span><br><span class="line">                         &#x3D;$&#123;encodeURIComponent(obj[key])&#125;&#96;).join(&#39;&amp;&#39;); </span><br><span class="line">objectToQueryString(&#123;name: &#39;Jhon&#39;, age: 18, address: &#39;beijing&#39;&#125;) </span><br><span class="line">&#x2F;&#x2F; name&#x3D;Jhon&amp;age&#x3D;18&amp;address&#x3D;beijing</span><br></pre></td></tr></table></figure><h3 id="13-获取数组交集"><a href="#13-获取数组交集" class="headerlink" title="13.获取数组交集"></a>13.获取数组交集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const similarity &#x3D; (arr, values) &#x3D;&gt; arr.filter(v &#x3D;&gt; values.includes(v)); </span><br><span class="line">similarity([1, 2, 3], [1, 2, 4]); </span><br><span class="line">&#x2F;&#x2F; [1,2]</span><br></pre></td></tr></table></figure><h3 id="14-检测设备类型"><a href="#14-检测设备类型" class="headerlink" title="14.检测设备类型"></a>14.检测设备类型</h3><p>使用正则表达式来检测 navigator.userAgent 属性判断设备是在移动设备还是在台式机/笔记本电脑打开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const detectDeviceType &#x3D; () </span><br><span class="line">                       &#x3D;&gt;&#x2F;Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|</span><br><span class="line">                         OperaMini&#x2F;i.test(navigator.userAgent) ? &#39;Mobile&#39; : &#39;Desktop&#39;;</span><br></pre></td></tr></table></figure><h3 id="15-将数字转化为千分位格式"><a href="#15-将数字转化为千分位格式" class="headerlink" title="15.将数字转化为千分位格式"></a>15.将数字转化为千分位格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const toDecimalMark &#x3D; num &#x3D;&gt; num.toLocaleString(&#39;en-US&#39;); </span><br><span class="line">toDecimalMark(12305030388.9087); </span><br><span class="line">&#x2F;&#x2F; &quot;12,305,030,388.909&quot;</span><br></pre></td></tr></table></figure><h3 id="16-多维数组转一维数组"><a href="#16-多维数组转一维数组" class="headerlink" title="16.多维数组转一维数组"></a>16.多维数组转一维数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const deepFlatten &#x3D; arr </span><br><span class="line">                 &#x3D;&gt; [].concat(</span><br><span class="line">                              ...arr.map(</span><br><span class="line">                                         v &#x3D;&gt; (Array.isArray(v) ? deepFlatten(v) : v))); </span><br><span class="line">deepFlatten([1, [2], [[3], 4], 5]); &#x2F;&#x2F; [1,2,3,4,5]</span><br></pre></td></tr></table></figure><h3 id="17-过滤对象数组"><a href="#17-过滤对象数组" class="headerlink" title="17.过滤对象数组"></a>17.过滤对象数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const reducedFilter &#x3D; (data, keys, fn)</span><br><span class="line">                    &#x3D;&gt;data.filter(fn)</span><br><span class="line">                    .map(</span><br><span class="line">                        el &#x3D;&gt;keys.reduce(</span><br><span class="line">                            (acc, key) &#x3D;&gt; &#123;acc[key] &#x3D;el[key];return acc;&#125;, &#123;&#125;)</span><br><span class="line">                        );</span><br><span class="line">const data &#x3D; [  &#123;  id: 1,  name: &#39;john&#39;,  age: 24  &#125;,  &#123;  id: 2,  name: &#39;mike&#39;,  age: 50  &#125; ]; </span><br><span class="line">let a &#x3D; reducedFilter(data, [&#39;id&#39;, &#39;name&#39;], item &#x3D;&gt; item.age &gt; 24);</span><br><span class="line"> &#x2F;&#x2F; [&#123; id: 2, name: &#39;mike&#39;&#125;]</span><br></pre></td></tr></table></figure><h3 id="18-驼峰字字符串格式化"><a href="#18-驼峰字字符串格式化" class="headerlink" title="18.驼峰字字符串格式化"></a>18.驼峰字字符串格式化</h3><p>转换驼峰拼写的字符串为特定格式。</p><p>使用 String.replace() 去除下划线，连字符和空格，并将驼峰拼写格式的单词转换为全小写。省略第二个参数 separator ，默认使用 _ 分隔符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const fromCamelCase &#x3D; (str, separator &#x3D; &#39;_&#39;) &#x3D;&gt;str.replace(&#x2F;([a-zd])([A-Z])&#x2F;g, &#39;$1&#39; + separator + &#39;$2&#39;).replace(&#x2F;([A-Z]+)([A-Z][a-zd]+)&#x2F;g, &#39;$1&#39; + separator + &#39;$2&#39;).toLowerCase();</span><br><span class="line">fromCamelCase(&#39;someDatabaseFieldName&#39;, &#39; &#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#39;some database field name&#39; fromCamelCase(&#39;someLabelThatNeedsToBeCamelized&#39;, &#39;-&#39;); </span><br><span class="line">&#x2F;&#x2F; &#39;some-label-that-needs-to-be-camelized&#39; fromCamelCase(&#39;someJavascriptProperty&#39;, &#39;_&#39;);</span><br><span class="line">&#x2F;&#x2F; &#39;some_javascript_property&#39;</span><br></pre></td></tr></table></figure><h3 id="19-是否为绝对地址"><a href="#19-是否为绝对地址" class="headerlink" title="19.是否为绝对地址"></a>19.是否为绝对地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const isAbsoluteURL &#x3D; str &#x3D;&gt; &#x2F;^[a-z][a-z0-9+.-]*:&#x2F;.test(str); </span><br><span class="line">isAbsoluteURL(&#39;https:&#x2F;&#x2F;google.com&#39;); &#x2F;&#x2F; true </span><br><span class="line">isAbsoluteURL(&#39;ftp:&#x2F;&#x2F;www.myserver.net&#39;);&#x2F;&#x2F; true </span><br><span class="line">isAbsoluteURL(&#39;&#x2F;foo&#x2F;bar&#39;); &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><h3 id="20-获取两个日期相差天数"><a href="#20-获取两个日期相差天数" class="headerlink" title="20.获取两个日期相差天数"></a>20.获取两个日期相差天数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const getDaysDiffBetweenDates &#x3D; </span><br><span class="line">    (dateInitial, dateFinal) &#x3D;&gt; (dateFinal - dateInitial) &#x2F; (1000 * 3600 * 24); </span><br><span class="line">getDaysDiffBetweenDates(new Date(&#39;2017-12-13&#39;), new Date(&#39;2017-12-22&#39;)); &#x2F;&#x2F; 9</span><br></pre></td></tr></table></figure><h3 id="21-数组去重"><a href="#21-数组去重" class="headerlink" title="21.数组去重"></a>21.数组去重</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const deDupe &#x3D; (myArray) &#x3D;&gt; [... new Set(myArray)];</span><br><span class="line"> deDupe([1, 1, 2, 1, 3, 3, 4]) &#x2F;&#x2F; [1, 2, 3, 4]</span><br></pre></td></tr></table></figure><h3 id="22-数组对象去重"><a href="#22-数组对象去重" class="headerlink" title="22.数组对象去重"></a>22.数组对象去重</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const uniqueElementsBy &#x3D; </span><br><span class="line">             (arr, fn) &#x3D;&gt;arr.reduce((acc, v)</span><br><span class="line">                       &#x3D;&gt; &#123;</span><br><span class="line">                          if (!acc.some(x &#x3D;&gt; fn(v, x))) acc.push(v);</span><br><span class="line">                          return acc;</span><br><span class="line">                          &#125;, []); </span><br><span class="line">uniqueElementsBy([&#123;id: 1, name: &#39;Jhon&#39;&#125;, </span><br><span class="line">                  &#123;id: 2, name: &#39;sss&#39;&#125;,</span><br><span class="line">                  &#123;id: 1, name: &#39;Jhon&#39;&#125;], (a, b)       </span><br><span class="line">             &#x3D;&gt; a.id &#x3D;&#x3D; b.id) </span><br><span class="line">&#x2F;&#x2F; [&#123;id: 1, name: &#39;Jhon&#39;&#125;, &#123;id: 2, name: &#39;sss&#39;&#125;]</span><br></pre></td></tr></table></figure><h3 id="23-RGB-颜色转-16进制颜色"><a href="#23-RGB-颜色转-16进制颜色" class="headerlink" title="23.RGB 颜色转 16进制颜色"></a>23.RGB 颜色转 16进制颜色</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const RGBToHex &#x3D; (r, g, b)</span><br><span class="line">               &#x3D;&gt; ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b).toString(16).padStart(6, &#39;0&#39;); </span><br><span class="line">RGBToHex(255, 165, 1); &#x2F;&#x2F; &#39;ffa501&#39;</span><br></pre></td></tr></table></figure><h3 id="24-常用密码组合正则"><a href="#24-常用密码组合正则" class="headerlink" title="24.常用密码组合正则"></a>24.常用密码组合正则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const passwordReg &#x3D; &#x2F;(?!^(d+|[a-zA-Z]+|[~!@#$%^&amp;*?]+)$)^[w~!@#$%^&amp;*?]&#123;8,20&#125;$&#x2F;; </span><br><span class="line">&#x2F;&#x2F; -长度8~20位字符，支持大小写字母、数字、符号三种字符中任意两种字符的组合</span><br></pre></td></tr></table></figure><h3 id="25-判断dom元素是否具有某个className"><a href="#25-判断dom元素是否具有某个className" class="headerlink" title="25.判断dom元素是否具有某个className"></a>25.判断dom元素是否具有某个className</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const hasClass &#x3D; (el, className)</span><br><span class="line">               &#x3D;&gt; new RegExp(&#96;(^|\s)$&#123;className&#125;(\s|$)&#96;).test(el.className);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro 加密登录 密码加盐处理</title>
      <link href="/2019/07/26/shiro-%E5%8A%A0%E5%AF%86%E7%99%BB%E5%BD%95-%E5%AF%86%E7%A0%81%E5%8A%A0%E7%9B%90%E5%A4%84%E7%90%86/"/>
      <url>/2019/07/26/shiro-%E5%8A%A0%E5%AF%86%E7%99%BB%E5%BD%95-%E5%AF%86%E7%A0%81%E5%8A%A0%E7%9B%90%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="http://q6pznk9ej.bkt.clouddn.com/img%20%2814%29.jpeg" alt=""></p><a id="more"></a><p>密码加密登录是为了提高系统安全性，即使是管理员查看数据库也得不到密码<br>使用shiro可以很轻松的完成加密及登录操作</p><h2 id="1-加密工具"><a href="#1-加密工具" class="headerlink" title="1.加密工具"></a>1.加密工具</h2><p><code>此工具用于注册时对密码进行加密</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static final String md5(String password, String salt)&#123;</span><br><span class="line">    &#x2F;&#x2F;加密方式</span><br><span class="line">    String hashAlgorithmName &#x3D; &quot;MD5&quot;;</span><br><span class="line">    &#x2F;&#x2F;盐：为了即使相同的密码不同的盐加密后的结果也不同</span><br><span class="line">    ByteSource byteSalt &#x3D; ByteSource.Util.bytes(salt);</span><br><span class="line">    &#x2F;&#x2F;密码</span><br><span class="line">    Object source &#x3D; password;</span><br><span class="line">    &#x2F;&#x2F;加密次数</span><br><span class="line">    int hashIterations &#x3D; 1024;</span><br><span class="line">    SimpleHash result &#x3D; new SimpleHash(hashAlgorithmName, source, byteSalt, hashIterations);</span><br><span class="line">    return result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>测试一下</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String password &#x3D; md5(&quot;123456&quot;, &quot;WHLH&quot;);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    &#x2F;&#x2F;加密后的结果</span><br><span class="line">    &#x2F;&#x2F;3bcbb857c763d1429a24959cb8de2593</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-使用shiro登录"><a href="#2-使用shiro登录" class="headerlink" title="2.使用shiro登录"></a>2.使用shiro登录</h2><p><code>Realm类</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) &#123;</span><br><span class="line">    UsernamePasswordToken token&#x3D;(UsernamePasswordToken) authenticationToken;</span><br><span class="line">    String username &#x3D; token.getUsername();</span><br><span class="line">    &#x2F;&#x2F;查询用户信息</span><br><span class="line">    User user&#x3D;userService.findByUsername(username);</span><br><span class="line">    &#x2F;&#x2F;取出盐并编码</span><br><span class="line">    ByteSource salt &#x3D; ByteSource.Util.bytes(user.getSalt());</span><br><span class="line">    return new SimpleAuthenticationInfo(username, user.getPassword(),salt, getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-修改自定义realm配置"><a href="#3-修改自定义realm配置" class="headerlink" title="3.修改自定义realm配置"></a>3.修改自定义realm配置</h2><p><code>加密算法和加密次数要和加密工具参数保持一致</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;myRealm&quot; class&#x3D;&quot;cn.jaffreyen.web.shiro.MyRealm&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;credentialsMatcher&quot;&gt;</span><br><span class="line">        &lt;bean class&#x3D;&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;&gt;</span><br><span class="line">            &lt;!-- 加密算法 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hashAlgorithmName&quot; value&#x3D;&quot;MD5&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">            &lt;!-- 加密次数 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hashIterations&quot; value&#x3D;&quot;1024&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次jsoup的使用</title>
      <link href="/2019/07/06/%E8%AE%B0%E4%B8%80%E6%AC%A1jsoup%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/06/%E8%AE%B0%E4%B8%80%E6%AC%A1jsoup%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>Jsoup是用于解析HTML，就类似XML解析器用于解析XML。 Jsoup它解析HTML成为真实世界的HTML。 它与jquery选择器的语法非常相似，并且非常灵活容易使用以获得所需的结果。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;!-- jsoup HTML parser library @ http:&#x2F;&#x2F;jsoup.org&#x2F; --&gt;</span><br><span class="line">  &lt;groupId&gt;org.jsoup&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jsoup&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.10.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="从URL获取HTML来解析"><a href="#从URL获取HTML来解析" class="headerlink" title="从URL获取HTML来解析"></a>从URL获取HTML来解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;).get();</span><br><span class="line">String title &#x3D; doc.title();</span><br></pre></td></tr></table></figure><p>connect(String url) 方法创建一个新的 Connection, 和 get() 取得和解析一个HTML文件。如果从该URL获取HTML时发生错误，便会抛出 IOException，应适当处理。<br>Connection 接口还提供一个方法链来解决特殊请求，具体如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;example.com&quot;;)</span><br><span class="line">.data(&quot;query&quot;, &quot;Java&quot;)</span><br><span class="line">.userAgent(&quot;Mozilla&quot;)</span><br><span class="line">.cookie(&quot;auth&quot;, &quot;token&quot;)</span><br><span class="line">.timeout(3000)</span><br><span class="line">.post();</span><br></pre></td></tr></table></figure><h3 id="查看元素"><a href="#查看元素" class="headerlink" title="查看元素"></a>查看元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getElementById(String id);</span><br><span class="line">getElementsByTag(String tag);</span><br><span class="line">getElementsByClass(String className);</span><br><span class="line">getElementsByAttribute(String key) (and related methods);</span><br><span class="line">Element siblings: siblingElements(), firstElementSibling(), lastElementSibling(); nextElementSibling(), previousElementSibling();</span><br><span class="line">Graph: parent(), children(), child(int index);</span><br></pre></td></tr></table></figure><h3 id="元素数据"><a href="#元素数据" class="headerlink" title="元素数据"></a>元素数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">attr(String key)获取属性attr(String key, String value)设置属性</span><br><span class="line">attributes()获取所有属性</span><br><span class="line">id(), className() and classNames()</span><br><span class="line">text()获取文本内容text(String value) 设置文本内容</span><br><span class="line">html()获取元素内HTMLhtml(String value)设置元素内的HTML内容</span><br><span class="line">outerHtml()获取元素外HTML内容</span><br><span class="line">data()获取数据内容（例如：script和style标签)</span><br><span class="line">tag() and tagName()</span><br></pre></td></tr></table></figure><h3 id="操作HTML和文本"><a href="#操作HTML和文本" class="headerlink" title="操作HTML和文本"></a>操作HTML和文本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">append(String html), prepend(String html)</span><br><span class="line">appendText(String text), prependText(String text)</span><br><span class="line">appendElement(String tagName), prependElement(String tagName)</span><br><span class="line">html(String value)</span><br></pre></td></tr></table></figure><h3 id="通过类似于css或jQuery的选择器来查找元素"><a href="#通过类似于css或jQuery的选择器来查找元素" class="headerlink" title="通过类似于css或jQuery的选择器来查找元素"></a>通过类似于css或jQuery的选择器来查找元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Elements trs &#x3D; doc.select(&quot;.kuang&quot;).select(&quot;tbody&quot;).get(5).select(&quot;tr&quot;);</span><br><span class="line">        StringBuilder controlTarget &#x3D; new StringBuilder();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; trs.size(); i++) &#123;</span><br><span class="line">            if (i &gt;&#x3D; 1 &amp;&amp; i &lt; trs.size() - 1) &#123;</span><br><span class="line">                Elements tds &#x3D; trs.get(i).select(&quot;td&quot;);</span><br><span class="line">                res.setCropRange(tds.get(0).text());</span><br><span class="line">                res.setDosage(tds.get(2).text());</span><br><span class="line">                res.setMethod(tds.get(3).text());</span><br><span class="line">                controlTarget.append(tds.get(1).text()).append(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="Selector选择器概述"><a href="#Selector选择器概述" class="headerlink" title="Selector选择器概述"></a>Selector选择器概述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tagname: 通过标签查找元素，比如：a;</span><br><span class="line">ns|tag: 通过标签在命名空间查找元素，比如：可以用 fb|name 语法来查找 &lt;fb:name&gt; 元素;</span><br><span class="line">&#39;#id&#39;: 通过ID查找元素，比如：#logo;</span><br><span class="line">.class: 通过class名称查找元素，比如：.masthead;</span><br><span class="line">[attribute]: 利用属性查找元素，比如：[href];</span><br><span class="line">[^attr]: 利用属性名前缀来查找元素，比如：可以用[^data-] 来查找带有HTML5 Dataset属性的元素;</span><br><span class="line">[attr&#x3D;value]: 利用属性值来查找元素，比如：[width&#x3D;500];</span><br><span class="line">[attr^&#x3D;value], [attr$&#x3D;value], [attr*&#x3D;value]: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：[href*&#x3D;&#x2F;path&#x2F;];</span><br><span class="line">[attr~&#x3D;regex]: 利用属性值匹配正则表达式来查找元素，比如： img[src~&#x3D;(?i)\.(png|jpe?g)];</span><br><span class="line">*: 这个符号将匹配所有元素;</span><br></pre></td></tr></table></figure><h3 id="Selector选择器组合使用"><a href="#Selector选择器组合使用" class="headerlink" title="Selector选择器组合使用"></a>Selector选择器组合使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">el#id: 元素+ID，比如： div#logo;</span><br><span class="line">el.class: 元素+class，比如： div.masthead;</span><br><span class="line">el[attr]: 元素+class，比如： a[href];</span><br><span class="line">任意组合，比如：a[href].highlight;</span><br><span class="line">ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在&quot;body&quot;元素下的所有 p元素;</span><br><span class="line">parent &gt; child: 查找某个父元素下的直接子元素，比如：可以用div.content &gt; p 查找 p 元素，也可以用body &gt; * 查找body标签下所有直接子元素;</span><br><span class="line">siblingA + siblingB: 查找在A元素之前第一个同级元素B，比如：div.head + div;</span><br><span class="line">siblingA ~ siblingX: 查找A元素之前的同级X元素，比如：h1 ~ p;</span><br><span class="line">el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo;</span><br></pre></td></tr></table></figure><h3 id="伪选择器selectors"><a href="#伪选择器selectors" class="headerlink" title="伪选择器selectors"></a>伪选择器selectors</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小   于三列的元素</span><br><span class="line">   :gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素</span><br><span class="line">   :eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素</span><br><span class="line">   :has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素</span><br><span class="line">   :not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class&#x3D;&quot;logo&quot; 元素的所有 div 列表</span><br><span class="line">   :contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)</span><br><span class="line">   :containsOwn(text): 查找直接包含给定文本的元素</span><br><span class="line">   :matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)</span><br><span class="line">   :matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素</span><br></pre></td></tr></table></figure><h3 id="提取给定URL中的链接"><a href="#提取给定URL中的链接" class="headerlink" title="提取给定URL中的链接"></a>提取给定URL中的链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class="line">Elements links &#x3D; doc.select(&quot;a[href]&quot;);  </span><br><span class="line">for (Element link : links) &#123;  </span><br><span class="line">    System.out.println(&quot;\nlink : &quot; + link.attr(&quot;href&quot;));  </span><br><span class="line">    System.out.println(&quot;text : &quot; + link.text());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提取URL中的元数据"><a href="#提取URL中的元数据" class="headerlink" title="提取URL中的元数据"></a>提取URL中的元数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class="line">String keywords &#x3D; doc.select(&quot;meta[name&#x3D;keywords]&quot;).first().attr(&quot;content&quot;);  </span><br><span class="line">System.out.println(&quot;Meta keyword : &quot; + keywords);  </span><br><span class="line">String description &#x3D; doc.select(&quot;meta[name&#x3D;description]&quot;).get(0).attr(&quot;content&quot;);  </span><br><span class="line">System.out.println(&quot;Meta description : &quot; + description);</span><br></pre></td></tr></table></figure><h3 id="提取URL中的图像"><a href="#提取URL中的图像" class="headerlink" title="提取URL中的图像"></a>提取URL中的图像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class="line">Elements images &#x3D; doc.select(&quot;img[src~&#x3D;(?i)\\.(png|jpe?g|gif)]&quot;);  </span><br><span class="line">for (Element image : images) &#123;  </span><br><span class="line">    System.out.println(&quot;src : &quot; + image.attr(&quot;src&quot;));  </span><br><span class="line">    System.out.println(&quot;height : &quot; + image.attr(&quot;height&quot;));  </span><br><span class="line">    System.out.println(&quot;width : &quot; + image.attr(&quot;width&quot;));  </span><br><span class="line">    System.out.println(&quot;alt : &quot; + image.attr(&quot;alt&quot;));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
