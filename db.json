{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/material-x/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"source/asset/2019-11-19/p15.png","path":"asset/2019-11-19/p15.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p12.png","path":"asset/2019-11-19/p12.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p16.png","path":"asset/2019-11-19/p16.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p14.png","path":"asset/2019-11-19/p14.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p20.png","path":"asset/2019-11-19/p20.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p17.png","path":"asset/2019-11-19/p17.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p22.png","path":"asset/2019-11-19/p22.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p2.png","path":"asset/2019-11-19/p2.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p5.png","path":"asset/2019-11-19/p5.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p4.png","path":"asset/2019-11-19/p4.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p9.png","path":"asset/2019-11-19/p9.png","modified":0,"renderable":0},{"_id":"source/asset/bg/bg12.jpg","path":"asset/bg/bg12.jpg","modified":0,"renderable":0},{"_id":"source/asset/bg/bg14.jpg","path":"asset/bg/bg14.jpg","modified":0,"renderable":0},{"_id":"source/asset/bg/bg2.png","path":"asset/bg/bg2.png","modified":0,"renderable":0},{"_id":"source/asset/wx/wx.jpg","path":"asset/wx/wx.jpg","modified":0,"renderable":0},{"_id":"themes/material-x/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/Monaco.ttf","path":"fonts/Monaco.ttf","modified":0,"renderable":1},{"_id":"source/asset/2019-11-19/p1.png","path":"asset/2019-11-19/p1.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p13.png","path":"asset/2019-11-19/p13.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p18.png","path":"asset/2019-11-19/p18.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p19.png","path":"asset/2019-11-19/p19.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p21.png","path":"asset/2019-11-19/p21.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p6.jpg","path":"asset/2019-11-19/p6.jpg","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p8.png","path":"asset/2019-11-19/p8.png","modified":0,"renderable":0},{"_id":"source/asset/bg/bg11.jpg","path":"asset/bg/bg11.jpg","modified":0,"renderable":0},{"_id":"source/asset/bg/bg7.jpg","path":"asset/bg/bg7.jpg","modified":0,"renderable":0},{"_id":"source/asset/bg/bg8.jpg","path":"asset/bg/bg8.jpg","modified":0,"renderable":0},{"_id":"source/asset/bg/bg16.jpg","path":"asset/bg/bg16.jpg","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p10.png","path":"asset/2019-11-19/p10.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p3.png","path":"asset/2019-11-19/p3.png","modified":0,"renderable":0},{"_id":"source/asset/bg/bg10.jpg","path":"asset/bg/bg10.jpg","modified":0,"renderable":0},{"_id":"source/asset/bg/bg3.jpg","path":"asset/bg/bg3.jpg","modified":0,"renderable":0},{"_id":"themes/material-x/source/js/volantis.js","path":"js/volantis.js","modified":0,"renderable":1},{"_id":"source/asset/bg/bg13.jpg","path":"asset/bg/bg13.jpg","modified":0,"renderable":0},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","path":"fonts/Skranji-Regular.ttf","modified":0,"renderable":1},{"_id":"source/asset/2019-11-19/p11.png","path":"asset/2019-11-19/p11.png","modified":0,"renderable":0},{"_id":"source/asset/bg/bg15.jpg","path":"asset/bg/bg15.jpg","modified":0,"renderable":0},{"_id":"source/asset/bg/bg9.jpg","path":"asset/bg/bg9.jpg","modified":0,"renderable":0},{"_id":"source/asset/bg/bg5.png","path":"asset/bg/bg5.png","modified":0,"renderable":0},{"_id":"source/asset/bg/bg6.png","path":"asset/bg/bg6.png","modified":0,"renderable":0},{"_id":"source/asset/2019-11-19/p7.png","path":"asset/2019-11-19/p7.png","modified":0,"renderable":0},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","path":"fonts/Ubuntu-Regular.ttf","modified":0,"renderable":1},{"_id":"source/asset/bg/bg4.png","path":"asset/bg/bg4.png","modified":0,"renderable":0},{"_id":"source/asset/bg/bg1.jpg","path":"asset/bg/bg1.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"3bf14a3ddaa9c3f56a7e7b5c0ed756fd0f83c0c0","modified":1577674803868},{"_id":"themes/material-x/.gitignore","hash":"4b5e4eb66070da8433cd43d75af0de341e04a2ed","modified":1576136551385},{"_id":"themes/material-x/_config.yml","hash":"121a6eaccc0ad1bfd592ba4a9687416a26f5aff7","modified":1578622437131},{"_id":"themes/material-x/LICENSE","hash":"e0cbf6906cab5926a34f17852db6c05187ee1f68","modified":1576136551386},{"_id":"themes/material-x/README.md","hash":"842a273e7a26245062b1627c1a634b715d31e56a","modified":1576136551387},{"_id":"source/_posts/Consul学习.md","hash":"de2a978af986a306d1ebf880a4967b9ba50d7cff","modified":1576912184496},{"_id":"source/_posts/Double为什么会失真？.md","hash":"e775c381d2bb57ea29bee796e1d3ba9d4a3f8ca1","modified":1578377196911},{"_id":"source/_posts/JWT简介.md","hash":"399e4ad59d0c1ddc5f9589abedc0d24622782ff3","modified":1576912171125},{"_id":"source/_posts/GSON搞定任何JSON数据.md","hash":"a89a36f25c1d7beae0fa405b5ee0afefde82d7e7","modified":1576912291577},{"_id":"source/_posts/Java下载文件的几种方式.md","hash":"6b598804c9ae3359847442f297f81db69f1672ba","modified":1576912311658},{"_id":"source/_posts/Spring-Boot-Undertow容器启动.md","hash":"da74e25f9bd6f83b34080512f4c001d721ae71a0","modified":1577845879307},{"_id":"source/_posts/Java反射.md","hash":"f993ff53ef292f98a3155d6b61c13cab3d3bb2e6","modified":1578269500137},{"_id":"source/_posts/Spring-Boot-两种部署到服务器的方式.md","hash":"3fa8d0ead101fa096095a4ab072587bf5adc276e","modified":1578389222159},{"_id":"source/_posts/Spring-Cloud-Feign使用详解.md","hash":"378c6e23aae3ab0cfee13070128b29f275bd1055","modified":1577845903687},{"_id":"source/_posts/Java线程创建全家桶.md","hash":"0da9d48740067281dd045a0ba2348bbfb5167a92","modified":1577845863845},{"_id":"source/_posts/shiro-加密登录-密码加盐处理.md","hash":"e7ca9823fd733d65566976dd03611971499a8593","modified":1577845871429},{"_id":"source/_posts/SpringBoot使用Undertow代替tomcat.md","hash":"5d16d7b1186484bbcda778b7454489a6ad3a4694","modified":1577845895451},{"_id":"source/_posts/springboot逆向工程.md","hash":"422aaaad181ed535d552dd0dd14b4546fb36bd93","modified":1577845887845},{"_id":"source/_posts/后端分离后的优雅部署.md","hash":"c7fca4ff5bd780d42c01850e68ad6da36bc50169","modified":1577850824158},{"_id":"source/_posts/SpringMVC请求参数获取的几种方法.md","hash":"7ea8ad8abd6da89720e09c4ee375097caadba4e2","modified":1577850691244},{"_id":"source/_posts/开发中常用的-25-个JavaScript-单行代码.md","hash":"924f6a89db8d7a31e2d7a4a30e71dafdd4c548a6","modified":1577850988870},{"_id":"source/_posts/微服务常见的认证方案.md","hash":"b370af507b66ef42d9cc34d135b541e8b43f9d4b","modified":1577848443700},{"_id":"source/_posts/zipkin.md","hash":"ab63b576ab5f89186d7d37c4bfc47c36e7ad0aff","modified":1577857378440},{"_id":"source/_posts/微信小程序版本自动更新.md","hash":"fec9be43ede3073ade2b50231fcaf63595771d7b","modified":1578563595236},{"_id":"source/_posts/微服务网关-Spring-Cloud-Gateway.md","hash":"f9a63bc03d0ffdf2f889b118c21ab35bdb5f16a2","modified":1577856890539},{"_id":"source/_posts/微服务注册中心为什么要使用Consul？.md","hash":"1d2f8b7bc789a6e1b653c73ef6a5e04d6bfacfde","modified":1577847959332},{"_id":"source/_posts/枚举真的比静态常量更占空间吗？.md","hash":"683f935fbc15a0b9aaebb70e810466cf9ee61d4b","modified":1577845826540},{"_id":"source/_posts/快速搭建Spring-Boot项目及常用技术整合.md","hash":"4b9351dd401327efbc6848e9681e1743eb7bc293","modified":1577848850907},{"_id":"source/_posts/记一次jsoup的使用.md","hash":"0ac7dc6d06b8dccba40a3c2cd01e96b02bf19c9d","modified":1577845913515},{"_id":"source/_posts/自己实现一个简单版的HashMap.md","hash":"71e8e2989dc7e7ca0ddec6ca47d3a37f028539f4","modified":1577845922681},{"_id":"source/_drafts/枚举真的比静态常量更占空间吗？.md","hash":"3c6620bfdd7c75201fe68b4bca733731637d5b0f","modified":1577672451915},{"_id":"source/_posts/软件版本命名规范及各阶段说明.md","hash":"3f496080d74cbd72062a0a536d0fca906ff40028","modified":1577849496313},{"_id":"source/_posts/解决Tomcat8上传文件无可读权限问题.md","hash":"78b2190b913dfda73755a4ffffad1d30ee9aa5bd","modified":1577849856280},{"_id":"source/about/index.md","hash":"2e990859c5b48b1a179054a9c2f1ac885c9b9aec","modified":1576196503222},{"_id":"source/categories/index.md","hash":"bcbd5f0ff024207da43bd32b4b58cb8998f4db4c","modified":1576196547336},{"_id":"source/tags/index.md","hash":"c611dc2ac446dcc83a01ccd88bc1148bca4fe9cf","modified":1576196570140},{"_id":"source/mylist/index.md","hash":"95185932f6aba05374f93ce45e8c1e7878083c2e","modified":1576196628029},{"_id":"themes/material-x/.git/COMMIT_EDITMSG","hash":"6fef518cae0d137fe12f23b2dd65938528d5d855","modified":1578987710292},{"_id":"source/links/index.md","hash":"bd91ce101e00de4c8ff5ca8a1963c2a9d9fd4345","modified":1578622380548},{"_id":"themes/material-x/.git/config","hash":"a61022c0d50e012a03e2befeebc8a37dd9383b9f","modified":1578622899481},{"_id":"themes/material-x/.git/index","hash":"697f3c687c4bc3287e0f3e39383054afbf9b23d7","modified":1578987710288},{"_id":"themes/material-x/languages/zh-CN.yml","hash":"8024298bf216ec3dee4904c503e140b943b5c762","modified":1576136551390},{"_id":"themes/material-x/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1578622768862},{"_id":"themes/material-x/languages/en.yml","hash":"6e77c4f79928171a4707c3f0805d2c845e1df38d","modified":1576136551389},{"_id":"themes/material-x/languages/zh-HK.yml","hash":"16f552054fdf01a5dff1ba98d565d364f33d9208","modified":1576136551392},{"_id":"themes/material-x/languages/zh-TW.yml","hash":"1c27b6715a0027b90d716a98c3b7481f2a3b4b5f","modified":1576136551393},{"_id":"themes/material-x/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1578622768875},{"_id":"themes/material-x/layout/archive.ejs","hash":"a23fcae00da7f64f38647fb9512670a74399cf03","modified":1576136551437},{"_id":"themes/material-x/layout/category.ejs","hash":"ef7b8f73351625877312305e0bc09b52d6dcbb53","modified":1576136551438},{"_id":"themes/material-x/layout/index.ejs","hash":"004a2d7e0fff53cb7907e4acd76d1d8a88385fbd","modified":1576136551439},{"_id":"themes/material-x/layout/layout.ejs","hash":"50cc4da4228f1538c4483670c281005c21030ddd","modified":1578563091267},{"_id":"themes/material-x/layout/links.ejs","hash":"32f783d05a3cc91f29672d98bf78b95da7349037","modified":1576136551441},{"_id":"themes/material-x/layout/list.ejs","hash":"b1cdf7bf3328c6864730b7f96745485d0c53c73f","modified":1576136551442},{"_id":"themes/material-x/layout/page.ejs","hash":"460679d01c1ede4a8cb951150bc15cb69a285638","modified":1576136551443},{"_id":"themes/material-x/layout/post.ejs","hash":"460679d01c1ede4a8cb951150bc15cb69a285638","modified":1576136551450},{"_id":"themes/material-x/layout/tag.ejs","hash":"3a33a23f7a80984cec9548d00ab084853cba6f74","modified":1576136551451},{"_id":"themes/material-x/source/style.less","hash":"ad83c432a6093d8c66998fa211192076943372be","modified":1576136551486},{"_id":"source/asset/2019-11-19/p15.png","hash":"f7c061a84b70603c9809e575fbad371c16abd412","modified":1576217315683},{"_id":"source/asset/2019-11-19/p12.png","hash":"3208e290e9061c9fa440a536b5b88b77edca8b58","modified":1576216781958},{"_id":"source/asset/2019-11-19/p16.png","hash":"bab26585d958308d34a99b8faff4f0d4cd63c66c","modified":1576217364019},{"_id":"source/asset/2019-11-19/p14.png","hash":"8b2698b5d927f6ccbf52c359030694ebfc1eb5dc","modified":1576216836046},{"_id":"source/asset/2019-11-19/p20.png","hash":"f6cefd1c260fb52b7785d6cd205b43b4316385c8","modified":1576217464890},{"_id":"source/asset/2019-11-19/p17.png","hash":"2858dae45edc4ad846757804273b833b41e43e9a","modified":1576217386796},{"_id":"source/asset/2019-11-19/p22.png","hash":"910db22d21d6a976cf7b45f8d37508807c408150","modified":1576217519970},{"_id":"source/asset/2019-11-19/p2.png","hash":"afe618ae5ad260ee58337f4803b0ed75f24f6eb1","modified":1576206747806},{"_id":"source/asset/2019-11-19/p5.png","hash":"69945763a2e82f461b3cae186468ebcab00b54f7","modified":1576206838150},{"_id":"source/asset/2019-11-19/p4.png","hash":"16da9fa3c76ea32596dbdfad435405e2ca87c107","modified":1576206805098},{"_id":"source/asset/2019-11-19/p9.png","hash":"3a363c54a40e55943b0db2dec25d6619f41d2c89","modified":1576216443727},{"_id":"source/asset/bg/bg12.jpg","hash":"b1f6b486da0136edd466f573dc5bb80a184348ff","modified":1576217191453},{"_id":"source/asset/bg/bg14.jpg","hash":"3f9378b932aa4d23f0bbd0f8ad414b0ce2951c9a","modified":1576131984228},{"_id":"source/asset/bg/bg2.png","hash":"7eb3d40f6919f9d49bfeb0055a1c9ed6b89afe72","modified":1576207237079},{"_id":"themes/material-x/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1578622768864},{"_id":"themes/material-x/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1578622768867},{"_id":"themes/material-x/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1578622768867},{"_id":"source/asset/wx/wx.jpg","hash":"990241310deed9a5ba72df71b882463ecaf3733e","modified":1576208362837},{"_id":"themes/material-x/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1578622768869},{"_id":"themes/material-x/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1578622768866},{"_id":"themes/material-x/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1578622768870},{"_id":"themes/material-x/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1578622768870},{"_id":"themes/material-x/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1578622768874},{"_id":"themes/material-x/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1578622768871},{"_id":"themes/material-x/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1578622768872},{"_id":"themes/material-x/.git/logs/HEAD","hash":"49351a30f23dbb79f2f08fe50266404571db7c48","modified":1578987710297},{"_id":"themes/material-x/layout/_cover/search.ejs","hash":"05814a2f4b0867d811988eefdd4900f522146c6c","modified":1576136551395},{"_id":"themes/material-x/layout/_meta/categories.ejs","hash":"f2ad0cda938967adc5b1e39df3a4aec957d2eb04","modified":1576136551397},{"_id":"themes/material-x/layout/_meta/date.ejs","hash":"d6d4f289112635ea09666194346ef490996f3649","modified":1576136551400},{"_id":"themes/material-x/layout/_meta/counter.ejs","hash":"ea502a888621527bc29f354309045d6c1dacdccb","modified":1576136551398},{"_id":"themes/material-x/layout/_meta/music.ejs","hash":"a7e2b092a0f393642eb5c5802f24ec77ea205e74","modified":1576136551401},{"_id":"themes/material-x/layout/_meta/share.ejs","hash":"aab1d38c29a430aaaa65646b4d675759cf38c411","modified":1576136551402},{"_id":"themes/material-x/layout/_meta/title.ejs","hash":"ac91fc41d59a7e93ab6f30a13ea5dd05c33e6131","modified":1576136551405},{"_id":"themes/material-x/layout/_meta/top.ejs","hash":"2f323ca76d6bacd14e4799bcf3b6e0c2ffe2f8c5","modified":1576136551406},{"_id":"themes/material-x/layout/_meta/tags.ejs","hash":"7b10d74a8166e6a31fc3306eb0d8c2e16c175524","modified":1576136551403},{"_id":"themes/material-x/layout/_meta/thumbnail.ejs","hash":"8b64ad50296ba8cbf629fed9c2943ea32439114f","modified":1576136551403},{"_id":"themes/material-x/layout/_partial/archive.ejs","hash":"2ce63582ac3b9730aa7f62acee992df04c080d44","modified":1576136551409},{"_id":"themes/material-x/layout/_partial/article.ejs","hash":"188f389fddbc3e83628b8ae5188832018b8ea9c4","modified":1576136551410},{"_id":"themes/material-x/layout/_meta/wordcount.ejs","hash":"e1c8e3295512ce283f296c0ee868fadea2449055","modified":1576136551408},{"_id":"themes/material-x/layout/_partial/categories.ejs","hash":"7c7b6cc39e1aa8d01cc2e94d1195bb7620bb68ea","modified":1576136551411},{"_id":"themes/material-x/layout/_partial/cover.ejs","hash":"324bcfe643a8aceaf8044c3295643a0bbee4671b","modified":1576136551412},{"_id":"themes/material-x/layout/_meta/updated.ejs","hash":"ba49cba21102dd77b0e6dd68787dc153163fe8cf","modified":1576136551407},{"_id":"themes/material-x/layout/_partial/footer.ejs","hash":"d16fdb532c6dfb7325b29dd0d4196ade6ec14bae","modified":1576223658784},{"_id":"themes/material-x/layout/_partial/header.ejs","hash":"6b3c544d208803fe6f0b1f8ebda08fed7eba44d7","modified":1576136551416},{"_id":"themes/material-x/.github/ISSUE_TEMPLATE/------.md","hash":"d547f4e8717cae6a566b1c150c249711aa4f52c1","modified":1576136551384},{"_id":"themes/material-x/layout/_partial/head.ejs","hash":"ab885fb6ddd33bf226f10536e168e4c1863b3368","modified":1576136551415},{"_id":"themes/material-x/layout/_partial/mathjax.ejs","hash":"25f3253d4bcfe32bc0d291901f00213b199dd635","modified":1576136551417},{"_id":"themes/material-x/layout/_partial/scripts.ejs","hash":"70cad1e02c016d3136036e7418a8976cf285de09","modified":1576136551420},{"_id":"themes/material-x/layout/_partial/meta.ejs","hash":"8a0761ec829c13d1b9a03c1ab7ef0942412e2ed3","modified":1576136551418},{"_id":"themes/material-x/layout/_partial/side.ejs","hash":"82213aff4ce9b4e9929728151353df20a1503d4a","modified":1576136551421},{"_id":"themes/material-x/layout/_third-party/comments.ejs","hash":"dbfdd2d6c4982f805fef517f933576cb4887f793","modified":1576136551424},{"_id":"themes/material-x/layout/_third-party/fancybox.ejs","hash":"b60b8006bbcf31223c6cc28d9794f101c492a1c0","modified":1576136551425},{"_id":"themes/material-x/layout/_third-party/aplayer.ejs","hash":"5f555babdf7ea58e536c203f1351536598e68e7f","modified":1576136551422},{"_id":"themes/material-x/layout/_third-party/clipboard.ejs","hash":"b160a4f594421409ad2fcd81b79746664e85cfe9","modified":1576136551423},{"_id":"themes/material-x/layout/_third-party/share.ejs","hash":"b553039a4fb38c9dfbe87fe61034a81f685bd590","modified":1576136551426},{"_id":"themes/material-x/layout/_widget/grid.ejs","hash":"a025672a7095c758f546d336c8d62f7c3e6e92a0","modified":1576136551430},{"_id":"themes/material-x/layout/_widget/category.ejs","hash":"7a6b395793ec15199b439ee64284d34e9305389c","modified":1576136551429},{"_id":"themes/material-x/layout/_widget/header.ejs","hash":"546f7aa5206f2b88229653926bbec49c84cc17e3","modified":1576136551431},{"_id":"themes/material-x/layout/_widget/music.ejs","hash":"1e252f962126d233adff8645d47f372bda7f8439","modified":1576136551433},{"_id":"themes/material-x/layout/_widget/author.ejs","hash":"25d814d6f689319fd54c8b4cb64acc80782e7320","modified":1576136551428},{"_id":"themes/material-x/layout/_widget/list.ejs","hash":"c137ee3ef1c5233d724dc84ab7543e88391656f5","modified":1576136551432},{"_id":"themes/material-x/layout/_widget/related_posts.ejs","hash":"ba7a6c17ed2518fda0af30ae7f5c32836909505a","modified":1576136551434},{"_id":"themes/material-x/layout/_widget/tagcloud.ejs","hash":"3a8fd8e97e4cd968ead707971c38d8b26d979962","modified":1576136551435},{"_id":"themes/material-x/layout/_widget/toc.ejs","hash":"79c7329cc161b9409d5cac6ccd1158827db7ca68","modified":1576136551436},{"_id":"themes/material-x/layout/_meta/author.ejs","hash":"e247ac1e617d43dc76f1b01339e0c141941398ab","modified":1576136551396},{"_id":"themes/material-x/layout/_widget/plain.ejs","hash":"0e93657baa1ff8afde49cf2b7cb2d148c047f5a7","modified":1576136551434},{"_id":"themes/material-x/source/js/app.js","hash":"9effa2ff626244de1418c6ecbe3fdf39cde5f3f8","modified":1576136551462},{"_id":"themes/material-x/source/less/_archive.less","hash":"92ee041cd04880475986552fddc2147d35603f5c","modified":1576136551468},{"_id":"themes/material-x/source/js/search.js","hash":"8ed18241a931a2e9903105383fcb2c281c3a7640","modified":1576136551464},{"_id":"themes/material-x/source/less/_article.less","hash":"7878580264bb34ed841a66cdaa8d113d936848e3","modified":1576136551469},{"_id":"themes/material-x/source/less/_base.less","hash":"f89d99608f03585e1bee629e97bd969cb21c87f5","modified":1578987434792},{"_id":"themes/material-x/source/less/_color.less","hash":"da4b3e735a54402a82120a591c496dffc2142c2c","modified":1576136551472},{"_id":"themes/material-x/source/less/_defines.less","hash":"27ab83f24d2241e324a7fa285b0928d20775a014","modified":1576136551473},{"_id":"themes/material-x/source/less/_fonts.less","hash":"aeeccfcd96fc7deeb51f04667d77c93126719bc1","modified":1576136551474},{"_id":"themes/material-x/layout/_partial/post.ejs","hash":"2944538147734e9388ca9ffc384d423d47a196b5","modified":1576136551419},{"_id":"themes/material-x/source/less/_footer.less","hash":"cab4b448dd6e03979a40205b0f99ff6656c2b32d","modified":1576136551474},{"_id":"themes/material-x/source/less/_layout.less","hash":"081ef4c14d7069ea8bb2fb9f939176c21781ac54","modified":1576136551476},{"_id":"themes/material-x/source/less/_links.less","hash":"3856603337a346be4d5df7fed7a3d5452548ece9","modified":1576136551477},{"_id":"themes/material-x/source/less/_main.less","hash":"beed7757dace83f453bf844c6f9367183a1c7313","modified":1578561821640},{"_id":"themes/material-x/source/less/_normalize.less","hash":"f57304bd524144596c8bfb9778575f934a89d230","modified":1576136551479},{"_id":"themes/material-x/source/less/_header.less","hash":"080e46f696ee81065b7d80c4169dc29c55f9c309","modified":1576136551475},{"_id":"themes/material-x/source/less/_pagination.less","hash":"616db8447e79e902bf7b207d1fe3c2fd6a4785b9","modified":1576136551480},{"_id":"themes/material-x/source/less/_search.less","hash":"80e252a3c0a91a42b764475396f26c92cfe98f4c","modified":1576136551481},{"_id":"themes/material-x/source/less/_side.less","hash":"efe0ab97470dd16cea368acf7223382d29e972cf","modified":1576136551482},{"_id":"themes/material-x/source/less/_toc.less","hash":"f803a7ac45be8f929b824a44caedddd0c3e0237e","modified":1576136551483},{"_id":"themes/material-x/source/less/_tog.less","hash":"142a6697abe2f423aae365e7c799a4a78b519a28","modified":1576136551484},{"_id":"themes/material-x/source/less/_typo.less","hash":"f597c0213ff6d10d86f1bd8d71018a2a604dde71","modified":1576136551485},{"_id":"themes/material-x/source/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1576136551453},{"_id":"source/asset/2019-11-19/p1.png","hash":"cc790f9e4122b96c681f3c09fbf2eb1d6e480820","modified":1576206614545},{"_id":"source/asset/2019-11-19/p13.png","hash":"5a89a083f8d4e2db70eb79a57e5d90542a487aef","modified":1576216810996},{"_id":"source/asset/2019-11-19/p18.png","hash":"2ccf5028ea798b79f9e282b15058f0e7fd3c6e18","modified":1576217417402},{"_id":"source/asset/2019-11-19/p19.png","hash":"bb8e008cd6dc6059409835df4b5917fc72abc3ca","modified":1576217439446},{"_id":"source/asset/2019-11-19/p21.png","hash":"320d9ddd1fada80c92aa952c62391cd16479017c","modified":1576217495022},{"_id":"source/asset/2019-11-19/p6.jpg","hash":"7ef61dae3fb38af318165b1d35e307a7e25ef8d9","modified":1576206877266},{"_id":"source/asset/2019-11-19/p8.png","hash":"5fc2880e697977b29f04caca1cca3886833a9d35","modified":1576216398361},{"_id":"source/asset/bg/bg11.jpg","hash":"db550f9a0ad8d88a78529866e3c20354bcb09de1","modified":1576217029990},{"_id":"source/asset/bg/bg7.jpg","hash":"b2717e6a814ca6a69d6a41cc2d6741fd03246126","modified":1576215661038},{"_id":"source/asset/bg/bg8.jpg","hash":"e2f6e06e19ccf244fedbe6483b0f7dbc08ff9441","modified":1576215823740},{"_id":"source/asset/bg/bg16.jpg","hash":"4af5cb8d969e6e86bc4a7d36670f4b199e7362c5","modified":1576908283604},{"_id":"source/asset/2019-11-19/p10.png","hash":"c21fc520c61ee2d861032ea0f3bdfd55a3e68183","modified":1576216714230},{"_id":"source/asset/2019-11-19/p3.png","hash":"a6108c2bc2d9029e3c90da655adf6586de72deae","modified":1576206774312},{"_id":"source/asset/bg/bg10.jpg","hash":"44e5167c571cae05ffe1dd5b4a57a2ebdfec5ffe","modified":1576216945640},{"_id":"source/asset/bg/bg3.jpg","hash":"1ccdf2099fd221d15b7b8c6a49670c7601a65527","modified":1576207517945},{"_id":"themes/material-x/.git/objects/11/ef3c83e13b8e96d30e8a7487a30aa77ec727a3","hash":"6cc11512d9ebc438620ce71079737dae3eea6225","modified":1578622810576},{"_id":"themes/material-x/.git/objects/01/333c8f5c41f26fc9c404c4adc79376626e431d","hash":"fa77b428f3f30ee3d842d49d3457d65b4763743b","modified":1578622810425},{"_id":"themes/material-x/.git/objects/09/7bab97ebf8f577317a65d03a33fe4551286c8e","hash":"a07dd3c4af812846fad6474dceebe179fa5c44d9","modified":1578622810454},{"_id":"themes/material-x/.git/objects/01/3e942ef5745e06e06571c0ebe4caec42090f0b","hash":"30c856910d22a81a093923ac0e0dc840abd6ae8d","modified":1578622810651},{"_id":"themes/material-x/.git/objects/13/ca480ac8b0d9ff71d3d8e20aaec374c9e3f20a","hash":"5fd52928bb00b3aa97dd48675d03eb1181170762","modified":1578622810596},{"_id":"themes/material-x/.git/objects/16/8e892a086d3670149c213545a181f6f848a583","hash":"000db7daae1725e1f45c6054a0cbf2344ac386c4","modified":1578622810678},{"_id":"themes/material-x/.git/objects/29/acf0caff36ce161d25615f455264cf3d870033","hash":"3da0ba2619abcb9c49f47bdef1211ec7ab4e1f7f","modified":1578622810579},{"_id":"themes/material-x/.git/objects/2f/510ccd7df3499fa7a1f09103491c5ad9e5b743","hash":"c2aa2160e886a9f472c49fc98ab26f6bc77270e0","modified":1578622810547},{"_id":"themes/material-x/.git/objects/17/45948a71528d6419d35a11d7599cad8a90abfc","hash":"7c51e781a9cfc673aceef2db13b356053f5ec077","modified":1578622810504},{"_id":"themes/material-x/.git/objects/35/6a697bc9b6a505cc4f5c48fa1e730d774b1fc6","hash":"aa198cff150b4406f29937230f7cf028817c0cfd","modified":1578622814297},{"_id":"themes/material-x/.git/objects/18/837e1339d5eccd37f253ce7ead3fabda673f71","hash":"22f91c02e05e36943dca32226297293c247386ca","modified":1578622814314},{"_id":"themes/material-x/.git/objects/40/9d1592ae589d89c1c36b0aae5ac9d5dec8c7f2","hash":"95b27583af752f81a8e94c6a1d85ecf1463452ba","modified":1578622810445},{"_id":"themes/material-x/.git/objects/1f/378268f38574dd9b1495e5c59533fdd6ebb92d","hash":"95a9ce586c19ddec1ba35304e84762d60a42063e","modified":1578622810642},{"_id":"themes/material-x/.git/objects/36/625f217a19ff29a40a8ba6fb503966df856aea","hash":"18ffadfa2a8d0c26f6929e9387bb9e10b89825ca","modified":1578622814284},{"_id":"themes/material-x/.git/objects/43/7a42d26c9ad0edd466a4c47f9bc40467d2763b","hash":"c0247adfaadc19ac97ea81f7907f0671f055ca54","modified":1578622814299},{"_id":"themes/material-x/.git/objects/44/a9e6c80fac1a95f2d53b5b443a4c55aa66a27c","hash":"b127d692435a0e5450cd88c9a97aa62bbe6893f8","modified":1578622810526},{"_id":"themes/material-x/.git/objects/32/c0c29f2aaa0cbaa99f06045ae82e03f021413e","hash":"29acae2edd26966b6e6a15b9767244a3720b7400","modified":1578622810435},{"_id":"themes/material-x/.git/objects/3d/b1a6388b2f5e01fbde10899caf371e3a55194f","hash":"99d840cdacfb140070f3e986a2c4dff7ac889e24","modified":1578622810000},{"_id":"themes/material-x/.git/objects/3e/d2dce55984a30dcee97ea0e281fc27268f7e60","hash":"83f7cfdf612985f550d62b096723a47e98ef8698","modified":1578622810490},{"_id":"themes/material-x/.git/objects/4b/825dc642cb6eb9a060e54bf8d69288fbee4904","hash":"f9acaead3e977c3d0fb7ad604631d5d838950772","modified":1578622789904},{"_id":"themes/material-x/.git/objects/50/2881552dec96c52ff0e30c724d74163a8be977","hash":"12c58cfea315506c1396161379ad9d03663dfc80","modified":1578622810563},{"_id":"themes/material-x/.git/objects/47/97143239427bd1fa8879498ecdd6cb53b141a1","hash":"0f2fc5784193929f120cd82cca7fe6a952f92952","modified":1578622810542},{"_id":"themes/material-x/.git/objects/52/fbf4bb57201d957b7696bae26ca0e30620ce20","hash":"b024a61071c8ddabf4d826b62fc411b13eda5923","modified":1578622810484},{"_id":"themes/material-x/.git/objects/53/3b993b030e3f19bf5c95c3f5e310a5882c23b7","hash":"7109b449ec58e3977d5828592979c8f90425265b","modified":1578622810582},{"_id":"themes/material-x/.git/objects/59/579ec10af460d67a6b7a0312ed2dd9d95f39bc","hash":"2768cddfef5d05d3027f49d1b76225c80a40c701","modified":1578622810452},{"_id":"themes/material-x/.git/objects/55/0307249873074e5134a0dd0db240b06ca7ec6d","hash":"2852a1a45cc22668a727bca836b62acf4d5a473d","modified":1578622810668},{"_id":"themes/material-x/.git/objects/56/82c49f9eb5ae7c1671053f8fba9e6eb9bc34e2","hash":"01135d56b13c13e97b18cfae31d8a2b3c9c233b0","modified":1578622810421},{"_id":"themes/material-x/.git/objects/62/bc147720f29db5d9ea8db0f96eed97909a961d","hash":"c41a577585c38d331db365db08e6ca9bba335d9f","modified":1578622810545},{"_id":"themes/material-x/.git/objects/6a/e2a77f3195abfdda11152dfee4982ec851b700","hash":"da7af7c57358fc02a83d71ae82249252137a7588","modified":1578622814308},{"_id":"themes/material-x/.git/objects/6e/dfdb2546c79b3a922d9c1c01a9c33706ab715b","hash":"85a96a75119ee292639f76bd03e1e47991ffe7af","modified":1578622814319},{"_id":"themes/material-x/.git/objects/70/ced6d31be80b3153c01b24990eed9611d4fb3a","hash":"76ddf9515a1fe80a42cb01f7ec214bb48f637427","modified":1578622810555},{"_id":"themes/material-x/.git/objects/71/268feed5ec25d372f172378067d72ccedc0058","hash":"c04d2351c8e2ff735811ff5f2b612d00e6bfd1eb","modified":1578622810458},{"_id":"themes/material-x/.git/objects/56/656ca54bcb8e00f1f837db16f2ea346246f677","hash":"c4793efd3e567648dc19bef8b5581af6fac42ad2","modified":1578622810511},{"_id":"themes/material-x/.git/objects/75/061c8bb4fb594cb417b114b0b4d756f863179f","hash":"c5c59302b3c85a012a2a171705404e2e29b09517","modified":1578622814291},{"_id":"themes/material-x/.git/objects/60/c080d41febcdb47361c4807d119ceb042e4e1a","hash":"73030ab201a3eacadc57f280995e77b4f2480c1d","modified":1578622810432},{"_id":"themes/material-x/.git/objects/60/f0fd47c036a408e1e5f5711122ed4ddc9ded50","hash":"e163399daf62f03df3c5d4ddb5fb3725c195a1ec","modified":1578622810500},{"_id":"themes/material-x/.git/objects/77/08b282c59222db5397cc29e54e62398de89f89","hash":"2384d0b2832565a5cce62a8765fea6db3a5c1a1a","modified":1578622810648},{"_id":"themes/material-x/.git/objects/76/4ebdff7cbab1bfcbcb932e3ddeeb886692edae","hash":"2ab6390796d8c5a257919f593492a99eab8b8b0c","modified":1578622810622},{"_id":"themes/material-x/.git/objects/7a/1e1fdbe891cfa9cd5c132f963ec3aa8d6f43b1","hash":"b27761ab5035655add1a36226e211d4eb016402d","modified":1578622810632},{"_id":"themes/material-x/.git/objects/8c/d47623cb7efb47b8561b9221e347d03a306077","hash":"abaef49b127ea9f8c2dce4399671b9dae2d025ec","modified":1578622810468},{"_id":"themes/material-x/.git/objects/8c/d86296f2a52e755d4b8506b6fd199b79340c35","hash":"da4774a5f3c276ebbaf54e106b6ae9a920b0a3ad","modified":1578622810550},{"_id":"themes/material-x/.git/objects/91/2d0b7ec7bb7a806d1d53196ac2e67640bf579a","hash":"2812ad1d5c27802755d73f15b38ea57530d5b847","modified":1578622810480},{"_id":"themes/material-x/.git/objects/7a/65698a70fa83809451b4123bb6384fc560789e","hash":"395ed6d4b3d2aad4545f8de9cd44195a05a5b415","modified":1578622810656},{"_id":"themes/material-x/.git/objects/95/c577c1fbc67a31bff87b84038028879fb5e865","hash":"8a5978d2a09d01b7c9cf5d59095d3920ce0407bc","modified":1578622814281},{"_id":"themes/material-x/.git/objects/88/8c07d73955120eaf1a37495c5339afed2d9073","hash":"a70509eda870f5f2efede5845c7a6d85f38569e9","modified":1578622810645},{"_id":"themes/material-x/.git/objects/8d/6ecb166612f4266f328cdcbaaaca1ef409d355","hash":"da58fe25b6ef9daa031bb68f3be58b44ccbd770e","modified":1578622814302},{"_id":"themes/material-x/.git/objects/96/7dee24a1c98b5cb3c495cfc3aa69a95df275dc","hash":"454a475b47ce6acf20c59d95767290deba501aa8","modified":1578622810539},{"_id":"themes/material-x/.git/objects/89/5d29a0beae2e56b8a0b1ede2ba17cef5db395d","hash":"dd8fdea16325915a834b630c92fe34543afb38a3","modified":1578622810662},{"_id":"themes/material-x/.git/objects/ab/b74c0f32adbfa7ae75812b049dd105b38aae8a","hash":"8a500825c3f7072e364fa6f920691f66a858c894","modified":1578622814317},{"_id":"themes/material-x/.git/objects/a7/3aaf7f5aeb2df9242a36c9a25cc6241a7b59b2","hash":"a51f042388ea1f01dd54a3f0af43d21748c9104e","modified":1578622810449},{"_id":"themes/material-x/.git/objects/b1/bb99d6a8c1157ee465d5696253cae15d166c08","hash":"7fe32b906e514bc85577c20447018b25a4150264","modified":1578622814287},{"_id":"themes/material-x/.git/objects/aa/b2f39e744aaaadf9acb1bbb95e1538f22d7ed1","hash":"ed6c160f4b79852841755beacd022286d92c50b0","modified":1578622810691},{"_id":"themes/material-x/.git/objects/b2/19bbe5dff762d0f8c2f79a2870e0f00095bb57","hash":"6041783612c9d9c1debf56767d1bb7e0e22f54f1","modified":1578622810465},{"_id":"themes/material-x/.git/objects/b0/b035d4739af71f90cc6d3395bca2901583ea85","hash":"f4f5c5fd6315b4186f34273eede4379aa361abd1","modified":1578622810515},{"_id":"themes/material-x/.git/objects/b3/b9b3d728c35d54c0adbb8415b1bb027842917d","hash":"07c852f03ec2392a5dfdc63dbb08ebdc06b35a9e","modified":1578622810474},{"_id":"themes/material-x/.git/objects/b8/3e799801ce07fe605a79dd8c3ac16a9cb4fdc2","hash":"856fa1a59ca826afffeae30f52ccfcc39c20d1db","modified":1578622814294},{"_id":"themes/material-x/.git/objects/9d/a102d0495dd44c7f0e0a0586c6e3d2adc42663","hash":"8acc5a976aa271a541717b2cbc563ae03e93f2f6","modified":1578622810626},{"_id":"themes/material-x/.git/objects/bc/8d03d68314e2da180f70dc1076835b299b9c2f","hash":"59d518c2243c78509c8ecc4f0a41c85a22bc7b4c","modified":1578622814326},{"_id":"themes/material-x/.git/objects/bd/3e973d585be9035e1f7958e5a8846bf134b3e2","hash":"c321dfda07723689267381002523ebe3ceeca89a","modified":1578622810414},{"_id":"themes/material-x/.git/objects/be/03ffb0ad2b403200948d7b18595b95877ff519","hash":"a7eca7916692506751a55ecc5bb9ce62a548e9f5","modified":1578622810471},{"_id":"themes/material-x/.git/objects/c1/cf813c49f870c9b7cf12345cf08b9ad662d001","hash":"af80cf5844ed7f05e763ed03fdf11ac86dd4254e","modified":1578622810529},{"_id":"themes/material-x/.git/objects/b9/229be113b1891aba89567354c9f7aacec8ff86","hash":"60739db1c3966fb5a0127367dd5385cc822a7019","modified":1578622810418},{"_id":"themes/material-x/.git/objects/c6/c84f46a47a8900b3a712daded36614b16e395a","hash":"bce3eca563e5bb652aa51c968e7b3acf79b20ef0","modified":1578622810497},{"_id":"themes/material-x/.git/objects/c4/1d87ef34d0c940b6731ee275ffe6ca9434ff15","hash":"15f6386fd12d1e602a9d137c8677c37bf0ce5e01","modified":1578622810585},{"_id":"themes/material-x/.git/objects/cb/515b39281e6e65a7b25f4314f9168130df1f88","hash":"0c9dff44dcffcf375e9945066cf81c6b3001e657","modified":1578622810461},{"_id":"themes/material-x/.git/objects/bc/0ac90877d69b0ddf0b2deef2f8e4a13c3917e8","hash":"0d1ade124e6b672120d9f2ed162897fc695b6fbe","modified":1578622810639},{"_id":"themes/material-x/.git/objects/c5/7b19c396a7d8dc7adbebad99f55e26325ba6ae","hash":"ccfa9755e7615002d7c9470eaf449698028a1aac","modified":1578622810570},{"_id":"themes/material-x/.git/objects/cf/d430ceb6a2d0f4191ee9a7e2a0f3bb6cc234c8","hash":"f96717e8c2a705bec2e6d8f635942340177d8fd0","modified":1578622814305},{"_id":"themes/material-x/.git/objects/ce/5cfd17feb078e34f56320d001cb796ade2966d","hash":"2c22d4981d669705b2cf0420991b1c2a3baa3608","modified":1578622810553},{"_id":"themes/material-x/.git/objects/ca/b17d68d06b534d244d2bc9960efaa3a7594d48","hash":"5cfeb9e0c4899e98fed8f908b9952fe00c045454","modified":1578622810688},{"_id":"themes/material-x/.git/objects/d0/467d8b1edc0cf312d288b498b282620b3466c8","hash":"9dee44b5371a345dbbc39db6624612f559598c8d","modified":1578622810568},{"_id":"themes/material-x/.git/objects/b6/5a4473f926b7cf93cf728ed99edf0526a8e9f7","hash":"1d4d33f9230d1b98f015086c4c508870e8095a30","modified":1578622814311},{"_id":"themes/material-x/.git/objects/dc/58c1ab34f47f5770863794e5bbed0238d6b6dd","hash":"0875fb9f1d50297d013cbfcea844b35455374485","modified":1578622810476},{"_id":"themes/material-x/.git/objects/e5/58cffad72663c9328f37b8963d1c1a5a1b68d5","hash":"dec6864b6f3358b978fd8bea2253a1ff99cef512","modified":1578622810654},{"_id":"themes/material-x/.git/objects/d8/b5777a80222ec561e9afa89d45773c19b538e6","hash":"a715481952db81baf5e4a958309fe42669253e8f","modified":1578622810665},{"_id":"themes/material-x/.git/objects/e5/6d708b16673747cd47cdddd7c5167bea7ef6f5","hash":"5ba8e53c1ceb5b83f0d878ca412987085aaa8ca3","modified":1578622810519},{"_id":"themes/material-x/.git/objects/dc/fdfb729d4328fa04dd6f1fe9d3e44ceb7b9682","hash":"edb13585f3220b450412754f6d400aecc2a8c620","modified":1578622810507},{"_id":"themes/material-x/.git/objects/e5/ad09d8b66a084aea2b50e69a2c50b549ab5334","hash":"3439e1ef35468517f44b5bdec6625f9e0048f501","modified":1578622810684},{"_id":"themes/material-x/.git/objects/e7/42dfe3ac0ac46b60edb3a33c04827e3bcf5fee","hash":"fe6612937bc53602de87de48fee925437cf0d0f3","modified":1578622810443},{"_id":"themes/material-x/.git/objects/d5/3e3e6ce2a4fa1b96ee1dd15cc9799160ab470e","hash":"3df376df95d3b03693577258b8a0e9bb41273060","modified":1578622810439},{"_id":"themes/material-x/.git/objects/e7/fbdab1ab07b72cfb45c2e4b2744cb5be43d9f4","hash":"d96b206ca3da5af66eb74e940215f34e50b70add","modified":1578622810560},{"_id":"themes/material-x/.git/objects/df/685f280852e5d1f73f1d7cfe1de23d44622ba0","hash":"516ee707cc656e029d38340e196c2788c52ad75e","modified":1578622810681},{"_id":"themes/material-x/.git/objects/e6/737ab5507b0851b3b6f2f510197cde2d4423da","hash":"049782512a5b5a030ae9e0d09d2dffeb15cff150","modified":1578622810671},{"_id":"themes/material-x/.git/objects/ea/ab7decac71c83d707f58d7d7ecef97cb13803b","hash":"dd52968b44ab66ba1bdfdeaa48991fb93596fc7f","modified":1578622810558},{"_id":"themes/material-x/.git/objects/d5/e42ee1452933ba1b08fcaa7e2c83d600f2d1f8","hash":"fd3da922f9ce2fe7a771216aeede46045b01e53b","modified":1578622810658},{"_id":"themes/material-x/.git/objects/ed/37435db88e8b45f032ebc18cfd9e1f715513f7","hash":"086e6c0abe1f919bf68db27b2e638cc9888ff24f","modified":1578622810565},{"_id":"themes/material-x/.git/objects/e9/4de59ffdcbe5c648b0f333d4ef1cf9cbf28106","hash":"0446aff639f2bb9e884dc64e77e99facfc4d4b8a","modified":1578622810522},{"_id":"themes/material-x/.git/objects/f1/ddc849cb99ed837a0bdad925fee3ffb756afc1","hash":"b773e696a1a2d8d15a5e4467a9892817e8ef7dbb","modified":1578622810636},{"_id":"themes/material-x/.git/objects/ee/b07bdd0c79d8102047120bb6c16850bdd2e91b","hash":"c9c22ca5e1050f321af1b64ab9064d4497b6e707","modified":1578622810674},{"_id":"themes/material-x/.git/objects/ec/1df04eedce107e14e0a92ec082c85638b15b61","hash":"7304758caffcc2ca96811eff6a11bf88b7b10caf","modified":1578622810532},{"_id":"themes/material-x/.git/objects/ec/24df97b4b485021753a1a292159e147bd9d38b","hash":"420096646e93458499c7ce9f5c7378b1366b651a","modified":1578622810535},{"_id":"themes/material-x/.git/objects/f9/f33f488302624a99df3510e319a65f6c0985c8","hash":"30b73827c777e9ffeccf544e4a79d3d7ac566590","modified":1578622810493},{"_id":"themes/material-x/.git/objects/ff/82096acc8c419d59683b0ca9ad726509b538ca","hash":"2e621e6d04bf96041a5fcf6a1c199f288338f686","modified":1578622810411},{"_id":"themes/material-x/.git/objects/fc/1ea2a3592957ed6edce82e993f7b2b2c9eacff","hash":"13eba8d0c3bff785a5a45763ab348972ef9b7dc4","modified":1578622810573},{"_id":"themes/material-x/.git/refs/heads/master","hash":"de5e03e6f83e22e085911c9e15151fd89a5bc589","modified":1578987710296},{"_id":"themes/material-x/.git/objects/fc/257805db41271ebfc08a02dd9529426bffd03e","hash":"4b687605bc9bafe6f7699cb72639af02368de302","modified":1578622810428},{"_id":"themes/material-x/.git/objects/f9/28c1a99f5b6397f2dc9da430aa646cecbde25b","hash":"0b681736a71efc11655e89b180749c0e22e43239","modified":1578622810591},{"_id":"themes/material-x/source/js/volantis.js","hash":"396309a8c4a137eb704928a85b3d3dad9ef12129","modified":1576136551467},{"_id":"source/asset/bg/bg13.jpg","hash":"a24155b0475b9ff25fabcb3f87fab5d7ce29d219","modified":1576132001483},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1576136551456},{"_id":"source/asset/2019-11-19/p11.png","hash":"1f55e257405bd63a9ce04c8a6522ba53a8b25e97","modified":1576216747378},{"_id":"source/asset/bg/bg15.jpg","hash":"1df0cadd4baf000957a2311f46f3d410ae36d129","modified":1576135576218},{"_id":"source/asset/bg/bg9.jpg","hash":"a864efc5c4c6187167dfc42d79836bebde7b12d2","modified":1576216127005},{"_id":"themes/material-x/.git/objects/43/01e7fcfb8c5bb94d2e3816a67d9a9d76c4a8f5","hash":"e514b31cc873a4870ed79a43298285afd1a7605a","modified":1578622810605},{"_id":"themes/material-x/.git/logs/refs/heads/master","hash":"49351a30f23dbb79f2f08fe50266404571db7c48","modified":1578987710296},{"_id":"themes/material-x/.git/refs/remotes/origin/master","hash":"de5e03e6f83e22e085911c9e15151fd89a5bc589","modified":1578987729871},{"_id":"source/asset/bg/bg5.png","hash":"3b4bcaa7055c734ba641ad2d01cbf63fefa9050a","modified":1576215313295},{"_id":"source/asset/bg/bg6.png","hash":"cea2d1a550ebcd4274e5cf1d00b646da9de5a4ff","modified":1576215516919},{"_id":"themes/material-x/.git/objects/42/1ab0b32933755c8c511348a92752c4443f29d9","hash":"c493faf9e723bdd500d2e93ac276a4af3082c4e0","modified":1578622810618},{"_id":"themes/material-x/.git/logs/refs/remotes/origin/master","hash":"def00fbe64838b715f80a437fd4e9d5042daf6dd","modified":1578987729874},{"_id":"source/asset/2019-11-19/p7.png","hash":"eb7ca6c1a42b942f10f49cb3ae94688d7dad5101","modified":1576216308358},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1576136551460},{"_id":"source/asset/bg/bg4.png","hash":"e4c880f8deaddea47ca97929a182a3fd61fce8a7","modified":1576215179815},{"_id":"source/asset/bg/bg1.jpg","hash":"351270506598c7216bf5d69f134bbd1c204485d8","modified":1576206387132},{"_id":"source/_posts/Java中的clone.md","hash":"6179baaae803e36bd1daf88a8c78d0d46b254cbc","modified":1578873565371},{"_id":"public/atom.xml","hash":"bfb5ae5f3caefb60b4d37a93b67a6e9b964121fe","modified":1578873624966},{"_id":"public/content.json","hash":"1ede4fe87906e9d91d1f9c8b4db3cc60d1d3227e","modified":1578873624966},{"_id":"public/search.xml","hash":"3abea87d16fd0a060b61b09ef7256c031b372242","modified":1578873624966},{"_id":"public/about/index.html","hash":"ea005d93f283de38be427da41ac357870549f610","modified":1578873624966},{"_id":"public/tags/index.html","hash":"78e481c23f95c794d6de7ebd5a50bb0aee720186","modified":1578873624966},{"_id":"public/categories/index.html","hash":"9e179ac1be9945fb1db6b17644a4e7afd563ebb1","modified":1578873624966},{"_id":"public/mylist/index.html","hash":"02cba1b35dbd0c44735c405f47eb15eaff83d5d0","modified":1578873624966},{"_id":"public/links/index.html","hash":"121893a9c939dab47b3e34b74d9eed6847773409","modified":1578873624966},{"_id":"public/2020/01/13/Java中的clone/index.html","hash":"9ce2274c5ef30621f5ff94c43bdc3dadcfe088ed","modified":1578873624966},{"_id":"public/2020/01/07/微信小程序版本自动更新/index.html","hash":"fe2f475d27f7636821d0c6da5aa8cb4ac7fb9a26","modified":1578873624966},{"_id":"public/2020/01/07/Double为什么会失真？/index.html","hash":"f401c2d70c89e8a5feed7ada5b6eeb7ace6b1f4d","modified":1578873624966},{"_id":"public/2020/01/06/Java反射/index.html","hash":"e3e55f848c13b0325bbc6c42b4836b9322f772ab","modified":1578873624966},{"_id":"public/2020/01/01/zipkin/index.html","hash":"abc815efb658d36d235dd0ba638df88ea228be4e","modified":1578873624966},{"_id":"public/2020/01/01/解决Tomcat8上传文件无可读权限问题/index.html","hash":"961c8349835714f3581657391f8e97984c1749e5","modified":1578873624966},{"_id":"public/2020/01/01/软件版本命名规范及各阶段说明/index.html","hash":"38c8b792398d9b9de7ebf602457e75fcf3ff5c25","modified":1578873624966},{"_id":"public/2020/01/01/快速搭建Spring-Boot项目及常用技术整合/index.html","hash":"cf4b7dd26c871377419bc20a3123c4bf083abe33","modified":1578873624966},{"_id":"public/2020/01/01/微服务网关-Spring-Cloud-Gateway/index.html","hash":"51855b32a9dca34557bd7117ac5f4db0ee1fd30a","modified":1578873624966},{"_id":"public/2020/01/01/微服务注册中心为什么要使用Consul？/index.html","hash":"b4bcafadb74ba56f1e1af40e6359a19deabcf22d","modified":1578873624966},{"_id":"public/2019/12/30/枚举真的比静态常量更占空间吗？/index.html","hash":"0436aab64ed4cd5d49e5c0d9e8dc2da76eeeca6a","modified":1578873624966},{"_id":"public/2019/12/21/JWT简介/index.html","hash":"a2400a1422c1bcbb237b0907278574eb581cbe70","modified":1578873624966},{"_id":"public/2019/11/19/Spring-Boot-两种部署到服务器的方式/index.html","hash":"3f6ee9181471c88b8674fea22695b43fad881c3b","modified":1578873624966},{"_id":"public/2019/11/19/Consul学习/index.html","hash":"cbcb91f1b3cce79f89b56c60547d04edc1e6c35e","modified":1578873624966},{"_id":"public/2019/11/19/微服务常见的认证方案/index.html","hash":"858f3577cc2357891ac9278b4c8162aeafe41dac","modified":1578873624966},{"_id":"public/2019/11/19/Spring-Cloud-Feign使用详解/index.html","hash":"fdf7aded3ee57fd0062ba5ab14d6aa0bd5f48a6b","modified":1578873624966},{"_id":"public/2019/09/16/Java线程创建全家桶/index.html","hash":"ee3c9d6d04b924ba64bc86ac87e4690b99aa7304","modified":1578873624966},{"_id":"public/2019/09/12/Java下载文件的几种方式/index.html","hash":"da37fa311f9266578501690360758b2e180e15b1","modified":1578873624966},{"_id":"public/2019/08/15/SpringMVC请求参数获取的几种方法/index.html","hash":"e693036f4b98554ed3db9efbc5b92660df3e95e5","modified":1578873624966},{"_id":"public/2019/08/14/SpringBoot使用Undertow代替tomcat/index.html","hash":"5dbda405604463a76a4d526e6d8332f48ed136f8","modified":1578873624966},{"_id":"public/2019/08/14/Spring-Boot-Undertow容器启动/index.html","hash":"1371c18fe0a6bdc118701e873c8e0b0d4acdbf8f","modified":1578873624966},{"_id":"public/2019/08/12/后端分离后的优雅部署/index.html","hash":"fb24e7f1a73c7cda859fe892674d420cfc0a5079","modified":1578873624966},{"_id":"public/2019/07/27/springboot逆向工程/index.html","hash":"c9778c033e365d12d1b92b62930f9dbd1121199e","modified":1578873624966},{"_id":"public/2019/07/26/自己实现一个简单版的HashMap/index.html","hash":"b0675dc0850314f766fa091a85614d22f7034fcc","modified":1578873624966},{"_id":"public/2019/07/26/GSON搞定任何JSON数据/index.html","hash":"2ffe6c4d272e9bcc0879ebccbb133782714f516f","modified":1578873624966},{"_id":"public/2019/07/26/开发中常用的-25-个JavaScript-单行代码/index.html","hash":"cbcf50898676b91744fab4d82c63d5b59629d402","modified":1578873624966},{"_id":"public/2019/07/26/shiro-加密登录-密码加盐处理/index.html","hash":"e7a3e1bbc3488ee2800575082fc90f04b079c933","modified":1578873624966},{"_id":"public/2019/07/06/记一次jsoup的使用/index.html","hash":"e4c25f5ed0b85b749d9362ebd1ccdd746c0abd65","modified":1578873624966},{"_id":"public/categories/Java/index.html","hash":"7a0cdb9f1458a34c7dd099c9f2f20b0663f52dc8","modified":1578873624966},{"_id":"public/categories/Java/page/2/index.html","hash":"849d047b932abc82c700da209df00997b306fad8","modified":1578873624966},{"_id":"public/categories/Java/page/3/index.html","hash":"e5bac1248a50bab2e153200bd15481c77c64117a","modified":1578873624966},{"_id":"public/categories/SpringBoot/index.html","hash":"90deedb876865697d7318f17002df01d72d3f4bd","modified":1578873624966},{"_id":"public/categories/微服务/index.html","hash":"003c375e7031e17bfe90437bcd44d47e242990a7","modified":1578873624966},{"_id":"public/categories/JavaScript/index.html","hash":"1a2455a34439d51894155b290b47db8cf4ba3451","modified":1578873624966},{"_id":"public/archives/index.html","hash":"e0a820e84b5acf1089bdfb482b3dfea4323feef7","modified":1578873624966},{"_id":"public/archives/page/2/index.html","hash":"e0a820e84b5acf1089bdfb482b3dfea4323feef7","modified":1578873624966},{"_id":"public/archives/page/3/index.html","hash":"e0a820e84b5acf1089bdfb482b3dfea4323feef7","modified":1578873624966},{"_id":"public/archives/2019/index.html","hash":"c3c1ba2f2738c05c9438d610e0c5365190f86ffe","modified":1578873624966},{"_id":"public/archives/2019/page/2/index.html","hash":"41b1d1aba5b5bd42ba113a49e00f4b487c95b5bd","modified":1578873624966},{"_id":"public/archives/2019/07/index.html","hash":"0152d7b3b7fadb60bf6425addc7fc30e7216eb14","modified":1578873624966},{"_id":"public/archives/2019/08/index.html","hash":"426fef980cabd0609cb5d5a6ab728dff66532faa","modified":1578873624966},{"_id":"public/archives/2019/09/index.html","hash":"51495c8af9fac2a79809adf115a9e1d9b82b9b22","modified":1578873624966},{"_id":"public/archives/2019/11/index.html","hash":"6b58143743c3b706b5d11363c037ce94dddebb59","modified":1578873624966},{"_id":"public/archives/2019/12/index.html","hash":"80c6db5072c7b0a7937f1e9ede2d37e0aaf9c3f2","modified":1578873624966},{"_id":"public/archives/2020/index.html","hash":"b5f7b506a0219acab8de5b8d74d58c325c829749","modified":1578873624966},{"_id":"public/archives/2020/01/index.html","hash":"d9f6b21ba9d4b75fa6a63bffddbf7ed4e1be1bfe","modified":1578873624966},{"_id":"public/index.html","hash":"5b961ee15171b5548e048d53e7deb12fd9591758","modified":1578873624966},{"_id":"public/page/2/index.html","hash":"45e9bc462abf4c19883570bdd1af924ebfa83417","modified":1578873624966},{"_id":"public/page/3/index.html","hash":"55ea5487d2dd088f2e7aa6f3a7de5a9c5b127dbb","modified":1578873624966},{"_id":"public/tags/json/index.html","hash":"86535e7b1a270978ca38e44aa682e7d2fcdd09db","modified":1578873624966},{"_id":"public/tags/file/index.html","hash":"f1fef7e6e0f631da6178b878acfd2d01f43b6dd3","modified":1578873624966},{"_id":"public/tags/SpringBoot/index.html","hash":"b88d5eaf659a68efe53a446c62a9ce635fb8cf44","modified":1578873624966},{"_id":"public/tags/打包部署/index.html","hash":"ffb6ec0cc4c20220742392087dc5cc56d58dc4bc","modified":1578873624966},{"_id":"public/tags/SpringCloud/index.html","hash":"988b4c800e32448f7162e5691b57e08e2499fdca","modified":1578873624966},{"_id":"public/tags/Thread/index.html","hash":"32ee7ca759846a132272a4f2eb64591b037d78f3","modified":1578873624966},{"_id":"public/tags/shiro/index.html","hash":"7fb68d598f0d4e4b8b61f15d010c7ec888e11b77","modified":1578873624966},{"_id":"public/tags/部署/index.html","hash":"19e21c0f82393fe704e0a9a5b9b06299b7cdcbae","modified":1578873624966},{"_id":"public/tags/Spring/index.html","hash":"3623b123dc22f448ed192911e6d7c4a30e45c1c1","modified":1578873624966},{"_id":"public/tags/token/index.html","hash":"5974c7b1fa9ff409d53be9e53fa4f13e378fecd4","modified":1578873624966},{"_id":"public/tags/小程序/index.html","hash":"2497ec40763c8e4a4c344aa007758b9127f21e6f","modified":1578873624966},{"_id":"public/tags/微服务/index.html","hash":"09ead6dcf7a9265647a4769e4a8ead57325bb411","modified":1578873624966},{"_id":"public/tags/enum/index.html","hash":"d8767b204d0555004ffbfd373478ce545833d157","modified":1578873624966},{"_id":"public/tags/爬虫/index.html","hash":"cd1b4a1f4a15b8ae8fc5e6259e17df93bb7deb7d","modified":1578873624966},{"_id":"public/tags/Tomcat/index.html","hash":"02c40f6db254c144fd55a3c45df8ed7d40f4ee90","modified":1578873624966},{"_id":"public/tags/规范/index.html","hash":"169f0d85c58f4d879ff944d74f1786a988d898fd","modified":1578873624966},{"_id":"public/tags/数据类型/index.html","hash":"c5d2c133989aacd36f57f8c431814e4e1e8aeed8","modified":1578873624966},{"_id":"public/tags/Consul/index.html","hash":"44bb5ad95205c1c2a37ffff14de16aa992e7e08c","modified":1578873624966},{"_id":"public/tags/JWT/index.html","hash":"7d825d0907accc4484cf59ddeb990fd23d4f041a","modified":1578873624966},{"_id":"public/tags/javaScript/index.html","hash":"a52e1c6e44dd191fcb5c9cea5b7113ecd10ce8af","modified":1578873624966},{"_id":"public/tags/HashMap/index.html","hash":"45f1a005f8658042ae8c4a8ad480704198e7d12e","modified":1578873624966},{"_id":"public/tags/反射/index.html","hash":"f18b23bf60a5aa6f759c8188d46515eb3205642d","modified":1578873624966},{"_id":"public/tags/Java/index.html","hash":"0ddb6b01a288212511ccc40c56cc70d487a84ef0","modified":1578873624966},{"_id":"public/CNAME","hash":"3bf14a3ddaa9c3f56a7e7b5c0ed756fd0f83c0c0","modified":1578873624966},{"_id":"public/asset/2019-11-19/p12.png","hash":"3208e290e9061c9fa440a536b5b88b77edca8b58","modified":1578873624966},{"_id":"public/asset/2019-11-19/p15.png","hash":"f7c061a84b70603c9809e575fbad371c16abd412","modified":1578873624966},{"_id":"public/asset/2019-11-19/p20.png","hash":"f6cefd1c260fb52b7785d6cd205b43b4316385c8","modified":1578873624966},{"_id":"public/asset/2019-11-19/p14.png","hash":"8b2698b5d927f6ccbf52c359030694ebfc1eb5dc","modified":1578873624966},{"_id":"public/asset/2019-11-19/p17.png","hash":"2858dae45edc4ad846757804273b833b41e43e9a","modified":1578873624966},{"_id":"public/asset/2019-11-19/p22.png","hash":"910db22d21d6a976cf7b45f8d37508807c408150","modified":1578873624966},{"_id":"public/asset/2019-11-19/p2.png","hash":"afe618ae5ad260ee58337f4803b0ed75f24f6eb1","modified":1578873624966},{"_id":"public/asset/2019-11-19/p5.png","hash":"69945763a2e82f461b3cae186468ebcab00b54f7","modified":1578873624966},{"_id":"public/asset/2019-11-19/p4.png","hash":"16da9fa3c76ea32596dbdfad435405e2ca87c107","modified":1578873624966},{"_id":"public/asset/2019-11-19/p9.png","hash":"3a363c54a40e55943b0db2dec25d6619f41d2c89","modified":1578873624966},{"_id":"public/asset/bg/bg12.jpg","hash":"b1f6b486da0136edd466f573dc5bb80a184348ff","modified":1578873624966},{"_id":"public/asset/wx/wx.jpg","hash":"990241310deed9a5ba72df71b882463ecaf3733e","modified":1578873624966},{"_id":"public/asset/bg/bg2.png","hash":"7eb3d40f6919f9d49bfeb0055a1c9ed6b89afe72","modified":1578873624966},{"_id":"public/asset/bg/bg14.jpg","hash":"3f9378b932aa4d23f0bbd0f8ad414b0ce2951c9a","modified":1578873624966},{"_id":"public/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1578873624966},{"_id":"public/asset/2019-11-19/p8.png","hash":"5fc2880e697977b29f04caca1cca3886833a9d35","modified":1578873624966},{"_id":"public/asset/2019-11-19/p16.png","hash":"bab26585d958308d34a99b8faff4f0d4cd63c66c","modified":1578873624966},{"_id":"public/asset/2019-11-19/p1.png","hash":"cc790f9e4122b96c681f3c09fbf2eb1d6e480820","modified":1578873624966},{"_id":"public/asset/2019-11-19/p13.png","hash":"5a89a083f8d4e2db70eb79a57e5d90542a487aef","modified":1578873624966},{"_id":"public/asset/2019-11-19/p18.png","hash":"2ccf5028ea798b79f9e282b15058f0e7fd3c6e18","modified":1578873624966},{"_id":"public/asset/2019-11-19/p21.png","hash":"320d9ddd1fada80c92aa952c62391cd16479017c","modified":1578873624966},{"_id":"public/asset/2019-11-19/p19.png","hash":"bb8e008cd6dc6059409835df4b5917fc72abc3ca","modified":1578873624966},{"_id":"public/asset/2019-11-19/p6.jpg","hash":"7ef61dae3fb38af318165b1d35e307a7e25ef8d9","modified":1578873624966},{"_id":"public/asset/bg/bg11.jpg","hash":"db550f9a0ad8d88a78529866e3c20354bcb09de1","modified":1578873624966},{"_id":"public/asset/bg/bg8.jpg","hash":"e2f6e06e19ccf244fedbe6483b0f7dbc08ff9441","modified":1578873624966},{"_id":"public/asset/bg/bg16.jpg","hash":"4af5cb8d969e6e86bc4a7d36670f4b199e7362c5","modified":1578873624966},{"_id":"public/asset/bg/bg7.jpg","hash":"b2717e6a814ca6a69d6a41cc2d6741fd03246126","modified":1578873624966},{"_id":"public/asset/bg/bg10.jpg","hash":"44e5167c571cae05ffe1dd5b4a57a2ebdfec5ffe","modified":1578873624966},{"_id":"public/asset/bg/bg3.jpg","hash":"1ccdf2099fd221d15b7b8c6a49670c7601a65527","modified":1578873624966},{"_id":"public/asset/bg/bg13.jpg","hash":"a24155b0475b9ff25fabcb3f87fab5d7ce29d219","modified":1578873624966},{"_id":"public/asset/bg/bg15.jpg","hash":"1df0cadd4baf000957a2311f46f3d410ae36d129","modified":1578873624966},{"_id":"public/js/app.js","hash":"20ba53cc54035dd091605508155ce54f8491f34e","modified":1578873624966},{"_id":"public/asset/2019-11-19/p3.png","hash":"a6108c2bc2d9029e3c90da655adf6586de72deae","modified":1578873624966},{"_id":"public/asset/2019-11-19/p10.png","hash":"c21fc520c61ee2d861032ea0f3bdfd55a3e68183","modified":1578873624966},{"_id":"public/asset/bg/bg9.jpg","hash":"a864efc5c4c6187167dfc42d79836bebde7b12d2","modified":1578873624966},{"_id":"public/js/search.js","hash":"603215c3ae9d2f3c019753dd6c9d228302505bb3","modified":1578873624966},{"_id":"public/asset/bg/bg6.png","hash":"cea2d1a550ebcd4274e5cf1d00b646da9de5a4ff","modified":1578873624966},{"_id":"public/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1578873624966},{"_id":"public/asset/bg/bg5.png","hash":"3b4bcaa7055c734ba641ad2d01cbf63fefa9050a","modified":1578873624966},{"_id":"public/asset/2019-11-19/p7.png","hash":"eb7ca6c1a42b942f10f49cb3ae94688d7dad5101","modified":1578873624966},{"_id":"public/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1578873624966},{"_id":"public/asset/2019-11-19/p11.png","hash":"1f55e257405bd63a9ce04c8a6522ba53a8b25e97","modified":1578873624966},{"_id":"public/style.css","hash":"3b80ee294a196ac0396d5e15f916be66191f08b0","modified":1578873624966},{"_id":"public/asset/bg/bg4.png","hash":"e4c880f8deaddea47ca97929a182a3fd61fce8a7","modified":1578873624966},{"_id":"public/asset/bg/bg1.jpg","hash":"351270506598c7216bf5d69f134bbd1c204485d8","modified":1578873624966},{"_id":"public/js/volantis.js","hash":"da06cd7b94873ed3036d825ae5a985ae6dde66e6","modified":1578873624966},{"_id":"themes/material-x/.git/objects/30/76505d8ae35af49a3c25d2c4f2a03627265287","hash":"fab6254964a81a7bee92dace4eb1bcef2fef27bd","modified":1578987710287},{"_id":"themes/material-x/.git/objects/34/9bc149d2cc094e5a6484b81b2b33a646ad1ad4","hash":"5380d8c54c95e56fcb5ad33aacbe132c9e896b6a","modified":1578987710283},{"_id":"themes/material-x/.git/objects/81/69ae243be1be7eb6922a795edd8deacfa9ed51","hash":"c6aa3202806984c4fb88a4b52fa3e6fa4685f32e","modified":1578987710294},{"_id":"themes/material-x/.git/objects/aa/32ff9e4ad4c8c778aa7e3a6e8da4ee1d5638d1","hash":"0579cc28addc0dd7e01126e5e4c69161d0f4ce8d","modified":1578987659937},{"_id":"themes/material-x/.git/objects/da/1b25438e9e341c54beb54d6ab2010ddb02e24c","hash":"c9a066dcfcda0a722de6425204401dbea20cd04d","modified":1578987710285}],"Category":[{"name":"Java","_id":"ck58tmwja0002sops71ap5hhi"},{"name":"SpringBoot","_id":"ck58tmwjx000jsopsad513043"},{"name":"微服务","_id":"ck58tmwk0000rsops48jea378"},{"name":"JavaScript","_id":"ck58tmwlh002msopscuxt9f1p"}],"Data":[],"Page":[{"layout":"page","title":"关于","body":["article","grid","comments"],"valine":{"placeholder":"有什么想对我说的呢？"},"sidebar":false,"_content":"","source":"about/index.md","raw":"---\nlayout: page\ntitle: 关于\nbody: [article, grid, comments]\nvaline:\n  placeholder: 有什么想对我说的呢？\nsidebar: false\n---","date":"2019-12-13T00:21:43.222Z","updated":"2019-12-13T00:21:43.222Z","path":"about/index.html","comments":1,"_id":"ck58tmwl70028sopsf7k264ja","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tag","index":true,"title":"所有标签","_content":"","source":"tags/index.md","raw":"---\nlayout: tag\nindex: true\ntitle: 所有标签\n---","date":"2019-12-13T00:22:50.140Z","updated":"2019-12-13T00:22:50.140Z","path":"tags/index.html","comments":1,"_id":"ck58tmwl8002asopsafbe6u4h","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"category","index":true,"title":"所有分类","_content":"","source":"categories/index.md","raw":"---\nlayout: category\nindex: true\ntitle: 所有分类\n---","date":"2019-12-13T00:22:27.336Z","updated":"2019-12-13T00:22:27.336Z","path":"categories/index.html","comments":1,"_id":"ck58tmwla002dsopsh2pn5crb","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"list","type":"mylist","index":true,"_content":"","source":"mylist/index.md","raw":"---\nlayout: list\ntype: mylist\nindex: true\n---","date":"2019-12-13T00:23:48.029Z","updated":"2019-12-13T00:23:48.029Z","path":"mylist/index.html","title":"","comments":1,"_id":"ck58tmwlc002fsops5khw2mrt","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","title":"友链","body":["article","grid","comments"],"valine":{"placeholder":"大佬"},"sidebar":false,"_content":"","source":"links/index.md","raw":"---\nlayout: page\ntitle: 友链\nbody: [article, grid, comments]\nvaline:\n  placeholder: 大佬\nsidebar: false\n---","date":"2020-01-10T02:13:00.548Z","updated":"2020-01-10T02:13:00.548Z","path":"links/index.html","comments":1,"_id":"ck58tmwle002isops2q9e3hi3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"GSON搞定任何JSON数据","date":"2019-07-26T03:41:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZmFhOTJlNDU4OTBlMmQyLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n## 一、Gson介绍\n\nGSON是Google提供的用来在Java对象和JSON数据之间进行映射的Java类库。可以将一个Json字符转成一个Java对象，或者将一个Java转化为Json字符串。\n>*特点:*\n* 快速、高效    \n* 代码量少、简洁\n* 面向对象\n* 数据传递和解析\n\n## 二、Gson的pom依赖\n```\n <dependency>\n    <groupId>com.google.code.gson</groupId>\n    <artifactId>gson</artifactId>\n    <version>2.8.0</version>\n </dependency>\n```\n## 三、Gson的创建方式\n\n* Gson gson = new gson();\n\n* 通过GsonBuilder()，可以配置多种配置。\n```\nGson gson = new GsonBuilder()\n                        .setLenient()// json宽松  \n                        .enableComplexMapKeySerialization()//支持Map的key为复杂对象的形式  \n                        .serializeNulls() //智能null  \n                        .setPrettyPrinting()// 调教格式  \n                        .disableHtmlEscaping() //默认是GSON把HTML 转义的\n                        .create(); \n```\n\n## 四、Gson的基本用法\n\n之前写过一个获取天气参数的API,就需要去解析返回的json数据，就以此为例。\n```\n String url = \"http://t.weather.sojson.com/api/weather/city/101010100\";\n String resultStr = HttpClientUtil.sendGetRequest(url, \"UTF-8\");\n ```\n\n## 五、进行解析\n```\n Gson gson =new Gson();\n Map m= gson.fromJson(resultStr,Map.class);\n System.out.println(m.get(\"data\"));\n```\n结果\n```\n{shidu=15%, pm25=15.0, pm10=35.0, quality=优, wendu=3, ganmao=各类人群可自由活动, \nyesterday={date=06, sunrise=07:36, high=高温 3.0℃, low=低温 -7.0℃, sunset=17:03, \naqi=58.0, ymd=2019-01-06, week=星期日, fx=西南风, fl=<3级, type=晴, \nnotice=愿你拥有比阳光明媚的心情}, forecast=[{date=07, sunrise=07:36, high=高温 2.0℃, \nlow=低温 -7.0℃, sunset=17:04, aqi=48.0, ymd=2019-01-07, week=星期一, fx=北风, \nfl=3-4级, type=多云, notice=阴晴之间，谨防紫外线侵扰}, {date=08, sunrise=07:36, \nhigh=高温 1.0℃, low=低温 -9.0℃, sunset=17:05, aqi=28.0, ymd=2019-01-08, week=星期二, \nfx=北风, fl=3-4级, type=晴, notice=愿你拥有比阳光明媚的心情}, {date=09, sunrise=07:36,\n high=高温 2.0℃, low=低温 -8.0℃, sunset=17:06, aqi=83.0, ymd=2019-01-09, week=星期三, \nfx=西南风, fl=<3级, type=多云, notice=阴晴之间，谨防紫外线侵扰}, {date=10, sunrise=07:36, \nhigh=高温 4.0℃, low=低温 -7.0℃, sunset=17:07, aqi=128.0, ymd=2019-01-10, week=星期四,\n fx=西南风, fl=<3级, type=晴, notice=愿你拥有比阳光明媚的心情}, {date=11, sunrise=07:36, \nhigh=高温 5.0℃, low=低温 -6.0℃, sunset=17:08, aqi=238.0, ymd=2019-01-11, week=星期五,\n fx=西南风, fl=<3级, type=多云, notice=阴晴之间，谨防紫外线侵扰}]}\n可以新建一个天气的Bean，将返回的json数据转换成对象\n```\n## 六、GSON直接解析成对象\n```\nResultBean resultBean = new Gson().fromJson(resultStr,ResultBean.class);\n```\n## 七、解析简单的json\n```\ndata:{\n      shidu = 15 % , \n      pm25 = 15.0,\n      pm10 = 35.0, \n      quality = 优, \n      wendu = 3, \n      ganmao = 各类人群可自由活动,\n     }\nJsonObject jsonObject =(JsonObject) new JsonParser().parse(resultStr);\nInt wendu = jsonObject.get(\"data\").getAsJsonObject().get(\"wendu\").getAsInt();\nString quality= jsonObject.get(\"data\").getAsJsonObject().get(\"quality\").getAsString();\n```\n## 八、解析多层对象\n```\n  data:{\n      shidu = 15 % , \n      pm25 = 15.0, \n      pm10 = 35.0, \n      quality = 优, \n      wendu = 3, \n      ganmao = 各类人群可自由活动, \n      yesterday :{\n                    date = 06,\n                    sunrise = 07: 36,\n                    high = 高温 3.0℃,\n                    low = 低温 - 7.0℃,\n                    sunset = 17: 03,\n                    aqi = 58.0,\n                    ymd = 2019 - 01 - 06,\n                    week = 星期日,\n                    fx = 西南风,\n                    fl = < 3 级,\n                    type = 晴,\n                    notice = 愿你拥有比阳光明媚的心情\n                 }\n        }\n\n JsonObject jsonObject = (JsonObject) new JsonParser().parse(resultStr);\n JsonObject yesterday = jsonObject.get(\"data\").getAsJsonObject().get(\"yesterday \").getAsJsonObject();\n String type  = yesterday.get(\"type\").getAsString();\n```\n## 九、解析带数组的json\n```\n{\nshidu = 15 % , pm25 = 15.0, pm10 = 35.0, quality = 优, wendu = 3, ganmao = 各类人群可自由活动, \nyesterday = {\n        date = 06,\n        sunrise = 07: 36,\n        high = 高温 3.0℃,\n        low = 低温 - 7.0℃,\n        sunset = 17: 03,\n        aqi = 58.0,\n        ymd = 2019 - 01 - 06,\n        week = 星期日,\n        fx = 西南风,\n        fl = < 3 级,\n        type = 晴,\n        notice = 愿你拥有比阳光明媚的心情\n    }, \nforecast = [{\n        date = 07,\n        sunrise = 07: 36,\n        high = 高温 2.0℃,\n        low = 低温 - 7.0℃,\n        sunset = 17: 04,\n        aqi = 48.0,\n        ymd = 2019 - 01 - 07,\n        week = 星期一,\n        fx = 北风,\n        fl = 3 - 4 级,\n        type = 多云,\n        notice = 阴晴之间， 谨防紫外线侵扰\n    }, {\n        date = 08,\n        sunrise = 07: 36,\n        high = 高温 1.0℃,\n        low = 低温 - 9.0℃,\n        sunset = 17: 05,\n        aqi = 28.0,\n        ymd = 2019 - 01 - 08,\n        week = 星期二,\n        fx = 北风,\n        fl = 3 - 4 级,\n        type = 晴,\n        notice = 愿你拥有比阳光明媚的心情\n    }, {\n        date = 09,\n        sunrise = 07: 36,\n        high = 高温 2.0℃,\n        low = 低温 - 8.0℃,\n        sunset = 17: 06,\n        aqi = 83.0,\n        ymd = 2019 - 01 - 09,\n        week = 星期三,\n        fx = 西南风,\n        fl = < 3 级,\n        type = 多云,\n        notice = 阴晴之间， 谨防紫外线侵扰\n    }, {\n        date = 10,\n        sunrise = 07: 36,\n        high = 高温 4.0℃,\n        low = 低温 - 7.0℃,\n        sunset = 17: 07,\n        aqi = 128.0,\n        ymd = 2019 - 01 - 10,\n        week = 星期四,\n        fx = 西南风,\n        fl = < 3 级,\n        type = 晴,\n        notice = 愿你拥有比阳光明媚的心情\n    }, {\n        date = 11,\n        sunrise = 07: 36,\n        high = 高温 5.0℃,\n        low = 低温 - 6.0℃,\n        sunset = 17: 08,\n        aqi = 238.0,\n        ymd = 2019 - 01 - 11,\n        week = 星期五,\n        fx = 西南风,\n        fl = < 3 级,\n        type = 多云,\n        notice = 阴晴之间， 谨防紫外线侵扰\n    }]\n}\n\nJsonObject jsonObject =(JsonObject) new JsonParser().parse(resultStr);\n//获取data\nJsonObject data = jsonObject.get(\"data\").getAsJsonObject();\n//获取数组\nJsonArray forecast = data.getAsJsonObject().get(\"forecast\").getAsJsonArray();\nString type  = forecast.get(0).getAsJsonObject().get(\"type\").getAsString();\n```","source":"_posts/GSON搞定任何JSON数据.md","raw":"---\ntitle: GSON搞定任何JSON数据\ntags:\n  - json\ncategories:\n  - Java\ndate: 2019-07-26 11:41:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZmFhOTJlNDU4OTBlMmQyLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n## 一、Gson介绍\n\nGSON是Google提供的用来在Java对象和JSON数据之间进行映射的Java类库。可以将一个Json字符转成一个Java对象，或者将一个Java转化为Json字符串。\n>*特点:*\n* 快速、高效    \n* 代码量少、简洁\n* 面向对象\n* 数据传递和解析\n\n## 二、Gson的pom依赖\n```\n <dependency>\n    <groupId>com.google.code.gson</groupId>\n    <artifactId>gson</artifactId>\n    <version>2.8.0</version>\n </dependency>\n```\n## 三、Gson的创建方式\n\n* Gson gson = new gson();\n\n* 通过GsonBuilder()，可以配置多种配置。\n```\nGson gson = new GsonBuilder()\n                        .setLenient()// json宽松  \n                        .enableComplexMapKeySerialization()//支持Map的key为复杂对象的形式  \n                        .serializeNulls() //智能null  \n                        .setPrettyPrinting()// 调教格式  \n                        .disableHtmlEscaping() //默认是GSON把HTML 转义的\n                        .create(); \n```\n\n## 四、Gson的基本用法\n\n之前写过一个获取天气参数的API,就需要去解析返回的json数据，就以此为例。\n```\n String url = \"http://t.weather.sojson.com/api/weather/city/101010100\";\n String resultStr = HttpClientUtil.sendGetRequest(url, \"UTF-8\");\n ```\n\n## 五、进行解析\n```\n Gson gson =new Gson();\n Map m= gson.fromJson(resultStr,Map.class);\n System.out.println(m.get(\"data\"));\n```\n结果\n```\n{shidu=15%, pm25=15.0, pm10=35.0, quality=优, wendu=3, ganmao=各类人群可自由活动, \nyesterday={date=06, sunrise=07:36, high=高温 3.0℃, low=低温 -7.0℃, sunset=17:03, \naqi=58.0, ymd=2019-01-06, week=星期日, fx=西南风, fl=<3级, type=晴, \nnotice=愿你拥有比阳光明媚的心情}, forecast=[{date=07, sunrise=07:36, high=高温 2.0℃, \nlow=低温 -7.0℃, sunset=17:04, aqi=48.0, ymd=2019-01-07, week=星期一, fx=北风, \nfl=3-4级, type=多云, notice=阴晴之间，谨防紫外线侵扰}, {date=08, sunrise=07:36, \nhigh=高温 1.0℃, low=低温 -9.0℃, sunset=17:05, aqi=28.0, ymd=2019-01-08, week=星期二, \nfx=北风, fl=3-4级, type=晴, notice=愿你拥有比阳光明媚的心情}, {date=09, sunrise=07:36,\n high=高温 2.0℃, low=低温 -8.0℃, sunset=17:06, aqi=83.0, ymd=2019-01-09, week=星期三, \nfx=西南风, fl=<3级, type=多云, notice=阴晴之间，谨防紫外线侵扰}, {date=10, sunrise=07:36, \nhigh=高温 4.0℃, low=低温 -7.0℃, sunset=17:07, aqi=128.0, ymd=2019-01-10, week=星期四,\n fx=西南风, fl=<3级, type=晴, notice=愿你拥有比阳光明媚的心情}, {date=11, sunrise=07:36, \nhigh=高温 5.0℃, low=低温 -6.0℃, sunset=17:08, aqi=238.0, ymd=2019-01-11, week=星期五,\n fx=西南风, fl=<3级, type=多云, notice=阴晴之间，谨防紫外线侵扰}]}\n可以新建一个天气的Bean，将返回的json数据转换成对象\n```\n## 六、GSON直接解析成对象\n```\nResultBean resultBean = new Gson().fromJson(resultStr,ResultBean.class);\n```\n## 七、解析简单的json\n```\ndata:{\n      shidu = 15 % , \n      pm25 = 15.0,\n      pm10 = 35.0, \n      quality = 优, \n      wendu = 3, \n      ganmao = 各类人群可自由活动,\n     }\nJsonObject jsonObject =(JsonObject) new JsonParser().parse(resultStr);\nInt wendu = jsonObject.get(\"data\").getAsJsonObject().get(\"wendu\").getAsInt();\nString quality= jsonObject.get(\"data\").getAsJsonObject().get(\"quality\").getAsString();\n```\n## 八、解析多层对象\n```\n  data:{\n      shidu = 15 % , \n      pm25 = 15.0, \n      pm10 = 35.0, \n      quality = 优, \n      wendu = 3, \n      ganmao = 各类人群可自由活动, \n      yesterday :{\n                    date = 06,\n                    sunrise = 07: 36,\n                    high = 高温 3.0℃,\n                    low = 低温 - 7.0℃,\n                    sunset = 17: 03,\n                    aqi = 58.0,\n                    ymd = 2019 - 01 - 06,\n                    week = 星期日,\n                    fx = 西南风,\n                    fl = < 3 级,\n                    type = 晴,\n                    notice = 愿你拥有比阳光明媚的心情\n                 }\n        }\n\n JsonObject jsonObject = (JsonObject) new JsonParser().parse(resultStr);\n JsonObject yesterday = jsonObject.get(\"data\").getAsJsonObject().get(\"yesterday \").getAsJsonObject();\n String type  = yesterday.get(\"type\").getAsString();\n```\n## 九、解析带数组的json\n```\n{\nshidu = 15 % , pm25 = 15.0, pm10 = 35.0, quality = 优, wendu = 3, ganmao = 各类人群可自由活动, \nyesterday = {\n        date = 06,\n        sunrise = 07: 36,\n        high = 高温 3.0℃,\n        low = 低温 - 7.0℃,\n        sunset = 17: 03,\n        aqi = 58.0,\n        ymd = 2019 - 01 - 06,\n        week = 星期日,\n        fx = 西南风,\n        fl = < 3 级,\n        type = 晴,\n        notice = 愿你拥有比阳光明媚的心情\n    }, \nforecast = [{\n        date = 07,\n        sunrise = 07: 36,\n        high = 高温 2.0℃,\n        low = 低温 - 7.0℃,\n        sunset = 17: 04,\n        aqi = 48.0,\n        ymd = 2019 - 01 - 07,\n        week = 星期一,\n        fx = 北风,\n        fl = 3 - 4 级,\n        type = 多云,\n        notice = 阴晴之间， 谨防紫外线侵扰\n    }, {\n        date = 08,\n        sunrise = 07: 36,\n        high = 高温 1.0℃,\n        low = 低温 - 9.0℃,\n        sunset = 17: 05,\n        aqi = 28.0,\n        ymd = 2019 - 01 - 08,\n        week = 星期二,\n        fx = 北风,\n        fl = 3 - 4 级,\n        type = 晴,\n        notice = 愿你拥有比阳光明媚的心情\n    }, {\n        date = 09,\n        sunrise = 07: 36,\n        high = 高温 2.0℃,\n        low = 低温 - 8.0℃,\n        sunset = 17: 06,\n        aqi = 83.0,\n        ymd = 2019 - 01 - 09,\n        week = 星期三,\n        fx = 西南风,\n        fl = < 3 级,\n        type = 多云,\n        notice = 阴晴之间， 谨防紫外线侵扰\n    }, {\n        date = 10,\n        sunrise = 07: 36,\n        high = 高温 4.0℃,\n        low = 低温 - 7.0℃,\n        sunset = 17: 07,\n        aqi = 128.0,\n        ymd = 2019 - 01 - 10,\n        week = 星期四,\n        fx = 西南风,\n        fl = < 3 级,\n        type = 晴,\n        notice = 愿你拥有比阳光明媚的心情\n    }, {\n        date = 11,\n        sunrise = 07: 36,\n        high = 高温 5.0℃,\n        low = 低温 - 6.0℃,\n        sunset = 17: 08,\n        aqi = 238.0,\n        ymd = 2019 - 01 - 11,\n        week = 星期五,\n        fx = 西南风,\n        fl = < 3 级,\n        type = 多云,\n        notice = 阴晴之间， 谨防紫外线侵扰\n    }]\n}\n\nJsonObject jsonObject =(JsonObject) new JsonParser().parse(resultStr);\n//获取data\nJsonObject data = jsonObject.get(\"data\").getAsJsonObject();\n//获取数组\nJsonArray forecast = data.getAsJsonObject().get(\"forecast\").getAsJsonArray();\nString type  = forecast.get(0).getAsJsonObject().get(\"type\").getAsString();\n```","slug":"GSON搞定任何JSON数据","published":1,"updated":"2019-12-21T07:11:31.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwiy0000sopshukhecrr","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZmFhOTJlNDU4OTBlMmQyLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"一、Gson介绍\"><a href=\"#一、Gson介绍\" class=\"headerlink\" title=\"一、Gson介绍\"></a>一、Gson介绍</h2><p>GSON是Google提供的用来在Java对象和JSON数据之间进行映射的Java类库。可以将一个Json字符转成一个Java对象，或者将一个Java转化为Json字符串。</p>\n<blockquote>\n<p><em>特点:</em></p>\n</blockquote>\n<ul>\n<li>快速、高效    </li>\n<li>代码量少、简洁</li>\n<li>面向对象</li>\n<li>数据传递和解析</li>\n</ul>\n<h2 id=\"二、Gson的pom依赖\"><a href=\"#二、Gson的pom依赖\" class=\"headerlink\" title=\"二、Gson的pom依赖\"></a>二、Gson的pom依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;2.8.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、Gson的创建方式\"><a href=\"#三、Gson的创建方式\" class=\"headerlink\" title=\"三、Gson的创建方式\"></a>三、Gson的创建方式</h2><ul>\n<li><p>Gson gson = new gson();</p>\n</li>\n<li><p>通过GsonBuilder()，可以配置多种配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gson gson &#x3D; new GsonBuilder()</span><br><span class=\"line\">                        .setLenient()&#x2F;&#x2F; json宽松  </span><br><span class=\"line\">                        .enableComplexMapKeySerialization()&#x2F;&#x2F;支持Map的key为复杂对象的形式  </span><br><span class=\"line\">                        .serializeNulls() &#x2F;&#x2F;智能null  </span><br><span class=\"line\">                        .setPrettyPrinting()&#x2F;&#x2F; 调教格式  </span><br><span class=\"line\">                        .disableHtmlEscaping() &#x2F;&#x2F;默认是GSON把HTML 转义的</span><br><span class=\"line\">                        .create();</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"四、Gson的基本用法\"><a href=\"#四、Gson的基本用法\" class=\"headerlink\" title=\"四、Gson的基本用法\"></a>四、Gson的基本用法</h2><p>之前写过一个获取天气参数的API,就需要去解析返回的json数据，就以此为例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String url &#x3D; &quot;http:&#x2F;&#x2F;t.weather.sojson.com&#x2F;api&#x2F;weather&#x2F;city&#x2F;101010100&quot;;</span><br><span class=\"line\">String resultStr &#x3D; HttpClientUtil.sendGetRequest(url, &quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、进行解析\"><a href=\"#五、进行解析\" class=\"headerlink\" title=\"五、进行解析\"></a>五、进行解析</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gson gson &#x3D;new Gson();</span><br><span class=\"line\">Map m&#x3D; gson.fromJson(resultStr,Map.class);</span><br><span class=\"line\">System.out.println(m.get(&quot;data&quot;));</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;shidu&#x3D;15%, pm25&#x3D;15.0, pm10&#x3D;35.0, quality&#x3D;优, wendu&#x3D;3, ganmao&#x3D;各类人群可自由活动, </span><br><span class=\"line\">yesterday&#x3D;&#123;date&#x3D;06, sunrise&#x3D;07:36, high&#x3D;高温 3.0℃, low&#x3D;低温 -7.0℃, sunset&#x3D;17:03, </span><br><span class=\"line\">aqi&#x3D;58.0, ymd&#x3D;2019-01-06, week&#x3D;星期日, fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;晴, </span><br><span class=\"line\">notice&#x3D;愿你拥有比阳光明媚的心情&#125;, forecast&#x3D;[&#123;date&#x3D;07, sunrise&#x3D;07:36, high&#x3D;高温 2.0℃, </span><br><span class=\"line\">low&#x3D;低温 -7.0℃, sunset&#x3D;17:04, aqi&#x3D;48.0, ymd&#x3D;2019-01-07, week&#x3D;星期一, fx&#x3D;北风, </span><br><span class=\"line\">fl&#x3D;3-4级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;, &#123;date&#x3D;08, sunrise&#x3D;07:36, </span><br><span class=\"line\">high&#x3D;高温 1.0℃, low&#x3D;低温 -9.0℃, sunset&#x3D;17:05, aqi&#x3D;28.0, ymd&#x3D;2019-01-08, week&#x3D;星期二, </span><br><span class=\"line\">fx&#x3D;北风, fl&#x3D;3-4级, type&#x3D;晴, notice&#x3D;愿你拥有比阳光明媚的心情&#125;, &#123;date&#x3D;09, sunrise&#x3D;07:36,</span><br><span class=\"line\"> high&#x3D;高温 2.0℃, low&#x3D;低温 -8.0℃, sunset&#x3D;17:06, aqi&#x3D;83.0, ymd&#x3D;2019-01-09, week&#x3D;星期三, </span><br><span class=\"line\">fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;, &#123;date&#x3D;10, sunrise&#x3D;07:36, </span><br><span class=\"line\">high&#x3D;高温 4.0℃, low&#x3D;低温 -7.0℃, sunset&#x3D;17:07, aqi&#x3D;128.0, ymd&#x3D;2019-01-10, week&#x3D;星期四,</span><br><span class=\"line\"> fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;晴, notice&#x3D;愿你拥有比阳光明媚的心情&#125;, &#123;date&#x3D;11, sunrise&#x3D;07:36, </span><br><span class=\"line\">high&#x3D;高温 5.0℃, low&#x3D;低温 -6.0℃, sunset&#x3D;17:08, aqi&#x3D;238.0, ymd&#x3D;2019-01-11, week&#x3D;星期五,</span><br><span class=\"line\"> fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;]&#125;</span><br><span class=\"line\">可以新建一个天气的Bean，将返回的json数据转换成对象</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、GSON直接解析成对象\"><a href=\"#六、GSON直接解析成对象\" class=\"headerlink\" title=\"六、GSON直接解析成对象\"></a>六、GSON直接解析成对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResultBean resultBean &#x3D; new Gson().fromJson(resultStr,ResultBean.class);</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、解析简单的json\"><a href=\"#七、解析简单的json\" class=\"headerlink\" title=\"七、解析简单的json\"></a>七、解析简单的json</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:&#123;</span><br><span class=\"line\">      shidu &#x3D; 15 % , </span><br><span class=\"line\">      pm25 &#x3D; 15.0,</span><br><span class=\"line\">      pm10 &#x3D; 35.0, </span><br><span class=\"line\">      quality &#x3D; 优, </span><br><span class=\"line\">      wendu &#x3D; 3, </span><br><span class=\"line\">      ganmao &#x3D; 各类人群可自由活动,</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">JsonObject jsonObject &#x3D;(JsonObject) new JsonParser().parse(resultStr);</span><br><span class=\"line\">Int wendu &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;wendu&quot;).getAsInt();</span><br><span class=\"line\">String quality&#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;quality&quot;).getAsString();</span><br></pre></td></tr></table></figure>\n<h2 id=\"八、解析多层对象\"><a href=\"#八、解析多层对象\" class=\"headerlink\" title=\"八、解析多层对象\"></a>八、解析多层对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> data:&#123;</span><br><span class=\"line\">     shidu &#x3D; 15 % , </span><br><span class=\"line\">     pm25 &#x3D; 15.0, </span><br><span class=\"line\">     pm10 &#x3D; 35.0, </span><br><span class=\"line\">     quality &#x3D; 优, </span><br><span class=\"line\">     wendu &#x3D; 3, </span><br><span class=\"line\">     ganmao &#x3D; 各类人群可自由活动, </span><br><span class=\"line\">     yesterday :&#123;</span><br><span class=\"line\">                   date &#x3D; 06,</span><br><span class=\"line\">                   sunrise &#x3D; 07: 36,</span><br><span class=\"line\">                   high &#x3D; 高温 3.0℃,</span><br><span class=\"line\">                   low &#x3D; 低温 - 7.0℃,</span><br><span class=\"line\">                   sunset &#x3D; 17: 03,</span><br><span class=\"line\">                   aqi &#x3D; 58.0,</span><br><span class=\"line\">                   ymd &#x3D; 2019 - 01 - 06,</span><br><span class=\"line\">                   week &#x3D; 星期日,</span><br><span class=\"line\">                   fx &#x3D; 西南风,</span><br><span class=\"line\">                   fl &#x3D; &lt; 3 级,</span><br><span class=\"line\">                   type &#x3D; 晴,</span><br><span class=\"line\">                   notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">JsonObject jsonObject &#x3D; (JsonObject) new JsonParser().parse(resultStr);</span><br><span class=\"line\">JsonObject yesterday &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;yesterday &quot;).getAsJsonObject();</span><br><span class=\"line\">String type  &#x3D; yesterday.get(&quot;type&quot;).getAsString();</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、解析带数组的json\"><a href=\"#九、解析带数组的json\" class=\"headerlink\" title=\"九、解析带数组的json\"></a>九、解析带数组的json</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">shidu &#x3D; 15 % , pm25 &#x3D; 15.0, pm10 &#x3D; 35.0, quality &#x3D; 优, wendu &#x3D; 3, ganmao &#x3D; 各类人群可自由活动, </span><br><span class=\"line\">yesterday &#x3D; &#123;</span><br><span class=\"line\">        date &#x3D; 06,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 3.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 7.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 03,</span><br><span class=\"line\">        aqi &#x3D; 58.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 06,</span><br><span class=\"line\">        week &#x3D; 星期日,</span><br><span class=\"line\">        fx &#x3D; 西南风,</span><br><span class=\"line\">        fl &#x3D; &lt; 3 级,</span><br><span class=\"line\">        type &#x3D; 晴,</span><br><span class=\"line\">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">forecast &#x3D; [&#123;</span><br><span class=\"line\">        date &#x3D; 07,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 2.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 7.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 04,</span><br><span class=\"line\">        aqi &#x3D; 48.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 07,</span><br><span class=\"line\">        week &#x3D; 星期一,</span><br><span class=\"line\">        fx &#x3D; 北风,</span><br><span class=\"line\">        fl &#x3D; 3 - 4 级,</span><br><span class=\"line\">        type &#x3D; 多云,</span><br><span class=\"line\">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        date &#x3D; 08,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 1.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 9.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 05,</span><br><span class=\"line\">        aqi &#x3D; 28.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 08,</span><br><span class=\"line\">        week &#x3D; 星期二,</span><br><span class=\"line\">        fx &#x3D; 北风,</span><br><span class=\"line\">        fl &#x3D; 3 - 4 级,</span><br><span class=\"line\">        type &#x3D; 晴,</span><br><span class=\"line\">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        date &#x3D; 09,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 2.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 8.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 06,</span><br><span class=\"line\">        aqi &#x3D; 83.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 09,</span><br><span class=\"line\">        week &#x3D; 星期三,</span><br><span class=\"line\">        fx &#x3D; 西南风,</span><br><span class=\"line\">        fl &#x3D; &lt; 3 级,</span><br><span class=\"line\">        type &#x3D; 多云,</span><br><span class=\"line\">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        date &#x3D; 10,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 4.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 7.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 07,</span><br><span class=\"line\">        aqi &#x3D; 128.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 10,</span><br><span class=\"line\">        week &#x3D; 星期四,</span><br><span class=\"line\">        fx &#x3D; 西南风,</span><br><span class=\"line\">        fl &#x3D; &lt; 3 级,</span><br><span class=\"line\">        type &#x3D; 晴,</span><br><span class=\"line\">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        date &#x3D; 11,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 5.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 6.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 08,</span><br><span class=\"line\">        aqi &#x3D; 238.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 11,</span><br><span class=\"line\">        week &#x3D; 星期五,</span><br><span class=\"line\">        fx &#x3D; 西南风,</span><br><span class=\"line\">        fl &#x3D; &lt; 3 级,</span><br><span class=\"line\">        type &#x3D; 多云,</span><br><span class=\"line\">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">JsonObject jsonObject &#x3D;(JsonObject) new JsonParser().parse(resultStr);</span><br><span class=\"line\">&#x2F;&#x2F;获取data</span><br><span class=\"line\">JsonObject data &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject();</span><br><span class=\"line\">&#x2F;&#x2F;获取数组</span><br><span class=\"line\">JsonArray forecast &#x3D; data.getAsJsonObject().get(&quot;forecast&quot;).getAsJsonArray();</span><br><span class=\"line\">String type  &#x3D; forecast.get(0).getAsJsonObject().get(&quot;type&quot;).getAsString();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZmFhOTJlNDU4OTBlMmQyLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"一、Gson介绍\"><a href=\"#一、Gson介绍\" class=\"headerlink\" title=\"一、Gson介绍\"></a>一、Gson介绍</h2><p>GSON是Google提供的用来在Java对象和JSON数据之间进行映射的Java类库。可以将一个Json字符转成一个Java对象，或者将一个Java转化为Json字符串。</p>\n<blockquote>\n<p><em>特点:</em></p>\n</blockquote>\n<ul>\n<li>快速、高效    </li>\n<li>代码量少、简洁</li>\n<li>面向对象</li>\n<li>数据传递和解析</li>\n</ul>\n<h2 id=\"二、Gson的pom依赖\"><a href=\"#二、Gson的pom依赖\" class=\"headerlink\" title=\"二、Gson的pom依赖\"></a>二、Gson的pom依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;2.8.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、Gson的创建方式\"><a href=\"#三、Gson的创建方式\" class=\"headerlink\" title=\"三、Gson的创建方式\"></a>三、Gson的创建方式</h2><ul>\n<li><p>Gson gson = new gson();</p>\n</li>\n<li><p>通过GsonBuilder()，可以配置多种配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gson gson &#x3D; new GsonBuilder()</span><br><span class=\"line\">                        .setLenient()&#x2F;&#x2F; json宽松  </span><br><span class=\"line\">                        .enableComplexMapKeySerialization()&#x2F;&#x2F;支持Map的key为复杂对象的形式  </span><br><span class=\"line\">                        .serializeNulls() &#x2F;&#x2F;智能null  </span><br><span class=\"line\">                        .setPrettyPrinting()&#x2F;&#x2F; 调教格式  </span><br><span class=\"line\">                        .disableHtmlEscaping() &#x2F;&#x2F;默认是GSON把HTML 转义的</span><br><span class=\"line\">                        .create();</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"四、Gson的基本用法\"><a href=\"#四、Gson的基本用法\" class=\"headerlink\" title=\"四、Gson的基本用法\"></a>四、Gson的基本用法</h2><p>之前写过一个获取天气参数的API,就需要去解析返回的json数据，就以此为例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String url &#x3D; &quot;http:&#x2F;&#x2F;t.weather.sojson.com&#x2F;api&#x2F;weather&#x2F;city&#x2F;101010100&quot;;</span><br><span class=\"line\">String resultStr &#x3D; HttpClientUtil.sendGetRequest(url, &quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、进行解析\"><a href=\"#五、进行解析\" class=\"headerlink\" title=\"五、进行解析\"></a>五、进行解析</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gson gson &#x3D;new Gson();</span><br><span class=\"line\">Map m&#x3D; gson.fromJson(resultStr,Map.class);</span><br><span class=\"line\">System.out.println(m.get(&quot;data&quot;));</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;shidu&#x3D;15%, pm25&#x3D;15.0, pm10&#x3D;35.0, quality&#x3D;优, wendu&#x3D;3, ganmao&#x3D;各类人群可自由活动, </span><br><span class=\"line\">yesterday&#x3D;&#123;date&#x3D;06, sunrise&#x3D;07:36, high&#x3D;高温 3.0℃, low&#x3D;低温 -7.0℃, sunset&#x3D;17:03, </span><br><span class=\"line\">aqi&#x3D;58.0, ymd&#x3D;2019-01-06, week&#x3D;星期日, fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;晴, </span><br><span class=\"line\">notice&#x3D;愿你拥有比阳光明媚的心情&#125;, forecast&#x3D;[&#123;date&#x3D;07, sunrise&#x3D;07:36, high&#x3D;高温 2.0℃, </span><br><span class=\"line\">low&#x3D;低温 -7.0℃, sunset&#x3D;17:04, aqi&#x3D;48.0, ymd&#x3D;2019-01-07, week&#x3D;星期一, fx&#x3D;北风, </span><br><span class=\"line\">fl&#x3D;3-4级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;, &#123;date&#x3D;08, sunrise&#x3D;07:36, </span><br><span class=\"line\">high&#x3D;高温 1.0℃, low&#x3D;低温 -9.0℃, sunset&#x3D;17:05, aqi&#x3D;28.0, ymd&#x3D;2019-01-08, week&#x3D;星期二, </span><br><span class=\"line\">fx&#x3D;北风, fl&#x3D;3-4级, type&#x3D;晴, notice&#x3D;愿你拥有比阳光明媚的心情&#125;, &#123;date&#x3D;09, sunrise&#x3D;07:36,</span><br><span class=\"line\"> high&#x3D;高温 2.0℃, low&#x3D;低温 -8.0℃, sunset&#x3D;17:06, aqi&#x3D;83.0, ymd&#x3D;2019-01-09, week&#x3D;星期三, </span><br><span class=\"line\">fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;, &#123;date&#x3D;10, sunrise&#x3D;07:36, </span><br><span class=\"line\">high&#x3D;高温 4.0℃, low&#x3D;低温 -7.0℃, sunset&#x3D;17:07, aqi&#x3D;128.0, ymd&#x3D;2019-01-10, week&#x3D;星期四,</span><br><span class=\"line\"> fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;晴, notice&#x3D;愿你拥有比阳光明媚的心情&#125;, &#123;date&#x3D;11, sunrise&#x3D;07:36, </span><br><span class=\"line\">high&#x3D;高温 5.0℃, low&#x3D;低温 -6.0℃, sunset&#x3D;17:08, aqi&#x3D;238.0, ymd&#x3D;2019-01-11, week&#x3D;星期五,</span><br><span class=\"line\"> fx&#x3D;西南风, fl&#x3D;&lt;3级, type&#x3D;多云, notice&#x3D;阴晴之间，谨防紫外线侵扰&#125;]&#125;</span><br><span class=\"line\">可以新建一个天气的Bean，将返回的json数据转换成对象</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、GSON直接解析成对象\"><a href=\"#六、GSON直接解析成对象\" class=\"headerlink\" title=\"六、GSON直接解析成对象\"></a>六、GSON直接解析成对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResultBean resultBean &#x3D; new Gson().fromJson(resultStr,ResultBean.class);</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、解析简单的json\"><a href=\"#七、解析简单的json\" class=\"headerlink\" title=\"七、解析简单的json\"></a>七、解析简单的json</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:&#123;</span><br><span class=\"line\">      shidu &#x3D; 15 % , </span><br><span class=\"line\">      pm25 &#x3D; 15.0,</span><br><span class=\"line\">      pm10 &#x3D; 35.0, </span><br><span class=\"line\">      quality &#x3D; 优, </span><br><span class=\"line\">      wendu &#x3D; 3, </span><br><span class=\"line\">      ganmao &#x3D; 各类人群可自由活动,</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">JsonObject jsonObject &#x3D;(JsonObject) new JsonParser().parse(resultStr);</span><br><span class=\"line\">Int wendu &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;wendu&quot;).getAsInt();</span><br><span class=\"line\">String quality&#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;quality&quot;).getAsString();</span><br></pre></td></tr></table></figure>\n<h2 id=\"八、解析多层对象\"><a href=\"#八、解析多层对象\" class=\"headerlink\" title=\"八、解析多层对象\"></a>八、解析多层对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> data:&#123;</span><br><span class=\"line\">     shidu &#x3D; 15 % , </span><br><span class=\"line\">     pm25 &#x3D; 15.0, </span><br><span class=\"line\">     pm10 &#x3D; 35.0, </span><br><span class=\"line\">     quality &#x3D; 优, </span><br><span class=\"line\">     wendu &#x3D; 3, </span><br><span class=\"line\">     ganmao &#x3D; 各类人群可自由活动, </span><br><span class=\"line\">     yesterday :&#123;</span><br><span class=\"line\">                   date &#x3D; 06,</span><br><span class=\"line\">                   sunrise &#x3D; 07: 36,</span><br><span class=\"line\">                   high &#x3D; 高温 3.0℃,</span><br><span class=\"line\">                   low &#x3D; 低温 - 7.0℃,</span><br><span class=\"line\">                   sunset &#x3D; 17: 03,</span><br><span class=\"line\">                   aqi &#x3D; 58.0,</span><br><span class=\"line\">                   ymd &#x3D; 2019 - 01 - 06,</span><br><span class=\"line\">                   week &#x3D; 星期日,</span><br><span class=\"line\">                   fx &#x3D; 西南风,</span><br><span class=\"line\">                   fl &#x3D; &lt; 3 级,</span><br><span class=\"line\">                   type &#x3D; 晴,</span><br><span class=\"line\">                   notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">JsonObject jsonObject &#x3D; (JsonObject) new JsonParser().parse(resultStr);</span><br><span class=\"line\">JsonObject yesterday &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject().get(&quot;yesterday &quot;).getAsJsonObject();</span><br><span class=\"line\">String type  &#x3D; yesterday.get(&quot;type&quot;).getAsString();</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、解析带数组的json\"><a href=\"#九、解析带数组的json\" class=\"headerlink\" title=\"九、解析带数组的json\"></a>九、解析带数组的json</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">shidu &#x3D; 15 % , pm25 &#x3D; 15.0, pm10 &#x3D; 35.0, quality &#x3D; 优, wendu &#x3D; 3, ganmao &#x3D; 各类人群可自由活动, </span><br><span class=\"line\">yesterday &#x3D; &#123;</span><br><span class=\"line\">        date &#x3D; 06,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 3.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 7.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 03,</span><br><span class=\"line\">        aqi &#x3D; 58.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 06,</span><br><span class=\"line\">        week &#x3D; 星期日,</span><br><span class=\"line\">        fx &#x3D; 西南风,</span><br><span class=\"line\">        fl &#x3D; &lt; 3 级,</span><br><span class=\"line\">        type &#x3D; 晴,</span><br><span class=\"line\">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">forecast &#x3D; [&#123;</span><br><span class=\"line\">        date &#x3D; 07,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 2.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 7.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 04,</span><br><span class=\"line\">        aqi &#x3D; 48.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 07,</span><br><span class=\"line\">        week &#x3D; 星期一,</span><br><span class=\"line\">        fx &#x3D; 北风,</span><br><span class=\"line\">        fl &#x3D; 3 - 4 级,</span><br><span class=\"line\">        type &#x3D; 多云,</span><br><span class=\"line\">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        date &#x3D; 08,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 1.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 9.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 05,</span><br><span class=\"line\">        aqi &#x3D; 28.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 08,</span><br><span class=\"line\">        week &#x3D; 星期二,</span><br><span class=\"line\">        fx &#x3D; 北风,</span><br><span class=\"line\">        fl &#x3D; 3 - 4 级,</span><br><span class=\"line\">        type &#x3D; 晴,</span><br><span class=\"line\">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        date &#x3D; 09,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 2.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 8.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 06,</span><br><span class=\"line\">        aqi &#x3D; 83.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 09,</span><br><span class=\"line\">        week &#x3D; 星期三,</span><br><span class=\"line\">        fx &#x3D; 西南风,</span><br><span class=\"line\">        fl &#x3D; &lt; 3 级,</span><br><span class=\"line\">        type &#x3D; 多云,</span><br><span class=\"line\">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        date &#x3D; 10,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 4.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 7.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 07,</span><br><span class=\"line\">        aqi &#x3D; 128.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 10,</span><br><span class=\"line\">        week &#x3D; 星期四,</span><br><span class=\"line\">        fx &#x3D; 西南风,</span><br><span class=\"line\">        fl &#x3D; &lt; 3 级,</span><br><span class=\"line\">        type &#x3D; 晴,</span><br><span class=\"line\">        notice &#x3D; 愿你拥有比阳光明媚的心情</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        date &#x3D; 11,</span><br><span class=\"line\">        sunrise &#x3D; 07: 36,</span><br><span class=\"line\">        high &#x3D; 高温 5.0℃,</span><br><span class=\"line\">        low &#x3D; 低温 - 6.0℃,</span><br><span class=\"line\">        sunset &#x3D; 17: 08,</span><br><span class=\"line\">        aqi &#x3D; 238.0,</span><br><span class=\"line\">        ymd &#x3D; 2019 - 01 - 11,</span><br><span class=\"line\">        week &#x3D; 星期五,</span><br><span class=\"line\">        fx &#x3D; 西南风,</span><br><span class=\"line\">        fl &#x3D; &lt; 3 级,</span><br><span class=\"line\">        type &#x3D; 多云,</span><br><span class=\"line\">        notice &#x3D; 阴晴之间， 谨防紫外线侵扰</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">JsonObject jsonObject &#x3D;(JsonObject) new JsonParser().parse(resultStr);</span><br><span class=\"line\">&#x2F;&#x2F;获取data</span><br><span class=\"line\">JsonObject data &#x3D; jsonObject.get(&quot;data&quot;).getAsJsonObject();</span><br><span class=\"line\">&#x2F;&#x2F;获取数组</span><br><span class=\"line\">JsonArray forecast &#x3D; data.getAsJsonObject().get(&quot;forecast&quot;).getAsJsonArray();</span><br><span class=\"line\">String type  &#x3D; forecast.get(0).getAsJsonObject().get(&quot;type&quot;).getAsString();</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZmFhOTJlNDU4OTBlMmQyLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Sat Dec 21 2019 15:11:31 GMT+0800 (GMT+08:00)","title":"GSON搞定任何JSON数据","path":"2019/07/26/GSON搞定任何JSON数据/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZmFhOTJlNDU4OTBlMmQyLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZmFhOTJlNDU4OTBlMmQyLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-07-26T03:41:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["json"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java下载文件的几种方式 ","date":"2019-09-12T01:54:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjJiNTNlYTNjOWZlM2I3LmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n## 以流的方式下载\n```\npublic HttpServletResponse download(String path, HttpServletResponse response) {\n        try {\n            // path是指欲下载的文件的路径。\n            File file = new File(path);\n            // 取得文件名。\n            String filename = file.getName();\n            // 取得文件的后缀名。\n            String ext = filename.substring(filename.lastIndexOf(\".\") + 1).toUpperCase();\n\n            // 以流的形式下载文件。\n            InputStream fis = new BufferedInputStream(new FileInputStream(path));\n            byte[] buffer = new byte[fis.available()];\n            fis.read(buffer);\n            fis.close();\n            // 清空response\n            response.reset();\n            // 设置response的Header\n            response.addHeader(\"Content-Disposition\", \"attachment;filename=\" + new String(filename.getBytes()));\n            response.addHeader(\"Content-Length\", \"\" + file.length());\n            OutputStream toClient = new BufferedOutputStream(response.getOutputStream());\n            response.setContentType(\"application/octet-stream\");\n            toClient.write(buffer);\n            toClient.flush();\n            toClient.close();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        return response;\n    }\n```\n## 下载本地文件\n```\npublic void downloadLocal(HttpServletResponse response) throws FileNotFoundException {\n        // 下载本地文件\n        String fileName = \"Operator.doc\".toString(); // 文件的默认保存名\n        // 读到流中\n        InputStream inStream = new FileInputStream(\"c:/Operator.doc\");// 文件的存放路径\n        // 设置输出的格式\n        response.reset();\n        response.setContentType(\"bin\");\n        response.addHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + fileName + \"\\\"\");\n        // 循环取出流中的数据\n        byte[] b = new byte[100];\n        int len;\n        try {\n            while ((len = inStream.read(b)) > 0)\n                response.getOutputStream().write(b, 0, len);\n            inStream.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n```\n## 下载网络文件\n```\npublic void downloadNet(HttpServletResponse response) throws MalformedURLException {\n        // 下载网络文件\n        int bytesum = 0;\n        int byteread = 0;\n\n        URL url = new URL(\"windine.blogdriver.com/logo.gif\");\n\n        try {\n            URLConnection conn = url.openConnection();\n            InputStream inStream = conn.getInputStream();\n            FileOutputStream fs = new FileOutputStream(\"c:/abc.gif\");\n\n            byte[] buffer = new byte[1204];\n            int length;\n            while ((byteread = inStream.read(buffer)) != -1) {\n                bytesum += byteread;\n                System.out.println(bytesum);\n                fs.write(buffer, 0, byteread);\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n```\n## 支持在线打开的方式\n```\npublic void downLoad(String filePath, HttpServletResponse response, boolean isOnLine) throws Exception {\n        File f = new File(filePath);\n        if (!f.exists()) {\n            response.sendError(404, \"File not found!\");\n            return;\n        }\n        BufferedInputStream br = new BufferedInputStream(new FileInputStream(f));\n        byte[] buf = new byte[1024];\n        int len = 0;\n\n        response.reset(); // 非常重要\n        if (isOnLine) { // 在线打开方式\n            URL u = new URL(\"file:///\" + filePath);\n            response.setContentType(u.openConnection().getContentType());\n            response.setHeader(\"Content-Disposition\", \"inline; filename=\" + f.getName());\n            // 文件名应该编码成UTF-8\n        } else { // 纯下载方式\n            response.setContentType(\"application/x-msdownload\");\n            response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + f.getName());\n        }\n        OutputStream out = response.getOutputStream();\n        while ((len = br.read(buf)) > 0)\n            out.write(buf, 0, len);\n        br.close();\n        out.close();\n    }\n```","source":"_posts/Java下载文件的几种方式.md","raw":"---\ntitle: 'Java下载文件的几种方式 '\ntags:\n  - file\ncategories:\n  - Java\ndate: 2019-09-12 09:54:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjJiNTNlYTNjOWZlM2I3LmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n## 以流的方式下载\n```\npublic HttpServletResponse download(String path, HttpServletResponse response) {\n        try {\n            // path是指欲下载的文件的路径。\n            File file = new File(path);\n            // 取得文件名。\n            String filename = file.getName();\n            // 取得文件的后缀名。\n            String ext = filename.substring(filename.lastIndexOf(\".\") + 1).toUpperCase();\n\n            // 以流的形式下载文件。\n            InputStream fis = new BufferedInputStream(new FileInputStream(path));\n            byte[] buffer = new byte[fis.available()];\n            fis.read(buffer);\n            fis.close();\n            // 清空response\n            response.reset();\n            // 设置response的Header\n            response.addHeader(\"Content-Disposition\", \"attachment;filename=\" + new String(filename.getBytes()));\n            response.addHeader(\"Content-Length\", \"\" + file.length());\n            OutputStream toClient = new BufferedOutputStream(response.getOutputStream());\n            response.setContentType(\"application/octet-stream\");\n            toClient.write(buffer);\n            toClient.flush();\n            toClient.close();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        return response;\n    }\n```\n## 下载本地文件\n```\npublic void downloadLocal(HttpServletResponse response) throws FileNotFoundException {\n        // 下载本地文件\n        String fileName = \"Operator.doc\".toString(); // 文件的默认保存名\n        // 读到流中\n        InputStream inStream = new FileInputStream(\"c:/Operator.doc\");// 文件的存放路径\n        // 设置输出的格式\n        response.reset();\n        response.setContentType(\"bin\");\n        response.addHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + fileName + \"\\\"\");\n        // 循环取出流中的数据\n        byte[] b = new byte[100];\n        int len;\n        try {\n            while ((len = inStream.read(b)) > 0)\n                response.getOutputStream().write(b, 0, len);\n            inStream.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n```\n## 下载网络文件\n```\npublic void downloadNet(HttpServletResponse response) throws MalformedURLException {\n        // 下载网络文件\n        int bytesum = 0;\n        int byteread = 0;\n\n        URL url = new URL(\"windine.blogdriver.com/logo.gif\");\n\n        try {\n            URLConnection conn = url.openConnection();\n            InputStream inStream = conn.getInputStream();\n            FileOutputStream fs = new FileOutputStream(\"c:/abc.gif\");\n\n            byte[] buffer = new byte[1204];\n            int length;\n            while ((byteread = inStream.read(buffer)) != -1) {\n                bytesum += byteread;\n                System.out.println(bytesum);\n                fs.write(buffer, 0, byteread);\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n```\n## 支持在线打开的方式\n```\npublic void downLoad(String filePath, HttpServletResponse response, boolean isOnLine) throws Exception {\n        File f = new File(filePath);\n        if (!f.exists()) {\n            response.sendError(404, \"File not found!\");\n            return;\n        }\n        BufferedInputStream br = new BufferedInputStream(new FileInputStream(f));\n        byte[] buf = new byte[1024];\n        int len = 0;\n\n        response.reset(); // 非常重要\n        if (isOnLine) { // 在线打开方式\n            URL u = new URL(\"file:///\" + filePath);\n            response.setContentType(u.openConnection().getContentType());\n            response.setHeader(\"Content-Disposition\", \"inline; filename=\" + f.getName());\n            // 文件名应该编码成UTF-8\n        } else { // 纯下载方式\n            response.setContentType(\"application/x-msdownload\");\n            response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + f.getName());\n        }\n        OutputStream out = response.getOutputStream();\n        while ((len = br.read(buf)) > 0)\n            out.write(buf, 0, len);\n        br.close();\n        out.close();\n    }\n```","slug":"Java下载文件的几种方式","published":1,"updated":"2019-12-21T07:11:51.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwj80001sopsb8f6f219","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjJiNTNlYTNjOWZlM2I3LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"以流的方式下载\"><a href=\"#以流的方式下载\" class=\"headerlink\" title=\"以流的方式下载\"></a>以流的方式下载</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public HttpServletResponse download(String path, HttpServletResponse response) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; path是指欲下载的文件的路径。</span><br><span class=\"line\">            File file &#x3D; new File(path);</span><br><span class=\"line\">            &#x2F;&#x2F; 取得文件名。</span><br><span class=\"line\">            String filename &#x3D; file.getName();</span><br><span class=\"line\">            &#x2F;&#x2F; 取得文件的后缀名。</span><br><span class=\"line\">            String ext &#x3D; filename.substring(filename.lastIndexOf(&quot;.&quot;) + 1).toUpperCase();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 以流的形式下载文件。</span><br><span class=\"line\">            InputStream fis &#x3D; new BufferedInputStream(new FileInputStream(path));</span><br><span class=\"line\">            byte[] buffer &#x3D; new byte[fis.available()];</span><br><span class=\"line\">            fis.read(buffer);</span><br><span class=\"line\">            fis.close();</span><br><span class=\"line\">            &#x2F;&#x2F; 清空response</span><br><span class=\"line\">            response.reset();</span><br><span class=\"line\">            &#x2F;&#x2F; 设置response的Header</span><br><span class=\"line\">            response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename&#x3D;&quot; + new String(filename.getBytes()));</span><br><span class=\"line\">            response.addHeader(&quot;Content-Length&quot;, &quot;&quot; + file.length());</span><br><span class=\"line\">            OutputStream toClient &#x3D; new BufferedOutputStream(response.getOutputStream());</span><br><span class=\"line\">            response.setContentType(&quot;application&#x2F;octet-stream&quot;);</span><br><span class=\"line\">            toClient.write(buffer);</span><br><span class=\"line\">            toClient.flush();</span><br><span class=\"line\">            toClient.close();</span><br><span class=\"line\">        &#125; catch (IOException ex) &#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载本地文件\"><a href=\"#下载本地文件\" class=\"headerlink\" title=\"下载本地文件\"></a>下载本地文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void downloadLocal(HttpServletResponse response) throws FileNotFoundException &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 下载本地文件</span><br><span class=\"line\">        String fileName &#x3D; &quot;Operator.doc&quot;.toString(); &#x2F;&#x2F; 文件的默认保存名</span><br><span class=\"line\">        &#x2F;&#x2F; 读到流中</span><br><span class=\"line\">        InputStream inStream &#x3D; new FileInputStream(&quot;c:&#x2F;Operator.doc&quot;);&#x2F;&#x2F; 文件的存放路径</span><br><span class=\"line\">        &#x2F;&#x2F; 设置输出的格式</span><br><span class=\"line\">        response.reset();</span><br><span class=\"line\">        response.setContentType(&quot;bin&quot;);</span><br><span class=\"line\">        response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;\\&quot;&quot; + fileName + &quot;\\&quot;&quot;);</span><br><span class=\"line\">        &#x2F;&#x2F; 循环取出流中的数据</span><br><span class=\"line\">        byte[] b &#x3D; new byte[100];</span><br><span class=\"line\">        int len;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            while ((len &#x3D; inStream.read(b)) &gt; 0)</span><br><span class=\"line\">                response.getOutputStream().write(b, 0, len);</span><br><span class=\"line\">            inStream.close();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载网络文件\"><a href=\"#下载网络文件\" class=\"headerlink\" title=\"下载网络文件\"></a>下载网络文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void downloadNet(HttpServletResponse response) throws MalformedURLException &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 下载网络文件</span><br><span class=\"line\">        int bytesum &#x3D; 0;</span><br><span class=\"line\">        int byteread &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        URL url &#x3D; new URL(&quot;windine.blogdriver.com&#x2F;logo.gif&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            URLConnection conn &#x3D; url.openConnection();</span><br><span class=\"line\">            InputStream inStream &#x3D; conn.getInputStream();</span><br><span class=\"line\">            FileOutputStream fs &#x3D; new FileOutputStream(&quot;c:&#x2F;abc.gif&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            byte[] buffer &#x3D; new byte[1204];</span><br><span class=\"line\">            int length;</span><br><span class=\"line\">            while ((byteread &#x3D; inStream.read(buffer)) !&#x3D; -1) &#123;</span><br><span class=\"line\">                bytesum +&#x3D; byteread;</span><br><span class=\"line\">                System.out.println(bytesum);</span><br><span class=\"line\">                fs.write(buffer, 0, byteread);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"支持在线打开的方式\"><a href=\"#支持在线打开的方式\" class=\"headerlink\" title=\"支持在线打开的方式\"></a>支持在线打开的方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void downLoad(String filePath, HttpServletResponse response, boolean isOnLine) throws Exception &#123;</span><br><span class=\"line\">        File f &#x3D; new File(filePath);</span><br><span class=\"line\">        if (!f.exists()) &#123;</span><br><span class=\"line\">            response.sendError(404, &quot;File not found!&quot;);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        BufferedInputStream br &#x3D; new BufferedInputStream(new FileInputStream(f));</span><br><span class=\"line\">        byte[] buf &#x3D; new byte[1024];</span><br><span class=\"line\">        int len &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        response.reset(); &#x2F;&#x2F; 非常重要</span><br><span class=\"line\">        if (isOnLine) &#123; &#x2F;&#x2F; 在线打开方式</span><br><span class=\"line\">            URL u &#x3D; new URL(&quot;file:&#x2F;&#x2F;&#x2F;&quot; + filePath);</span><br><span class=\"line\">            response.setContentType(u.openConnection().getContentType());</span><br><span class=\"line\">            response.setHeader(&quot;Content-Disposition&quot;, &quot;inline; filename&#x3D;&quot; + f.getName());</span><br><span class=\"line\">            &#x2F;&#x2F; 文件名应该编码成UTF-8</span><br><span class=\"line\">        &#125; else &#123; &#x2F;&#x2F; 纯下载方式</span><br><span class=\"line\">            response.setContentType(&quot;application&#x2F;x-msdownload&quot;);</span><br><span class=\"line\">            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;&quot; + f.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        OutputStream out &#x3D; response.getOutputStream();</span><br><span class=\"line\">        while ((len &#x3D; br.read(buf)) &gt; 0)</span><br><span class=\"line\">            out.write(buf, 0, len);</span><br><span class=\"line\">        br.close();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjJiNTNlYTNjOWZlM2I3LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"以流的方式下载\"><a href=\"#以流的方式下载\" class=\"headerlink\" title=\"以流的方式下载\"></a>以流的方式下载</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public HttpServletResponse download(String path, HttpServletResponse response) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; path是指欲下载的文件的路径。</span><br><span class=\"line\">            File file &#x3D; new File(path);</span><br><span class=\"line\">            &#x2F;&#x2F; 取得文件名。</span><br><span class=\"line\">            String filename &#x3D; file.getName();</span><br><span class=\"line\">            &#x2F;&#x2F; 取得文件的后缀名。</span><br><span class=\"line\">            String ext &#x3D; filename.substring(filename.lastIndexOf(&quot;.&quot;) + 1).toUpperCase();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 以流的形式下载文件。</span><br><span class=\"line\">            InputStream fis &#x3D; new BufferedInputStream(new FileInputStream(path));</span><br><span class=\"line\">            byte[] buffer &#x3D; new byte[fis.available()];</span><br><span class=\"line\">            fis.read(buffer);</span><br><span class=\"line\">            fis.close();</span><br><span class=\"line\">            &#x2F;&#x2F; 清空response</span><br><span class=\"line\">            response.reset();</span><br><span class=\"line\">            &#x2F;&#x2F; 设置response的Header</span><br><span class=\"line\">            response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename&#x3D;&quot; + new String(filename.getBytes()));</span><br><span class=\"line\">            response.addHeader(&quot;Content-Length&quot;, &quot;&quot; + file.length());</span><br><span class=\"line\">            OutputStream toClient &#x3D; new BufferedOutputStream(response.getOutputStream());</span><br><span class=\"line\">            response.setContentType(&quot;application&#x2F;octet-stream&quot;);</span><br><span class=\"line\">            toClient.write(buffer);</span><br><span class=\"line\">            toClient.flush();</span><br><span class=\"line\">            toClient.close();</span><br><span class=\"line\">        &#125; catch (IOException ex) &#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载本地文件\"><a href=\"#下载本地文件\" class=\"headerlink\" title=\"下载本地文件\"></a>下载本地文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void downloadLocal(HttpServletResponse response) throws FileNotFoundException &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 下载本地文件</span><br><span class=\"line\">        String fileName &#x3D; &quot;Operator.doc&quot;.toString(); &#x2F;&#x2F; 文件的默认保存名</span><br><span class=\"line\">        &#x2F;&#x2F; 读到流中</span><br><span class=\"line\">        InputStream inStream &#x3D; new FileInputStream(&quot;c:&#x2F;Operator.doc&quot;);&#x2F;&#x2F; 文件的存放路径</span><br><span class=\"line\">        &#x2F;&#x2F; 设置输出的格式</span><br><span class=\"line\">        response.reset();</span><br><span class=\"line\">        response.setContentType(&quot;bin&quot;);</span><br><span class=\"line\">        response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;\\&quot;&quot; + fileName + &quot;\\&quot;&quot;);</span><br><span class=\"line\">        &#x2F;&#x2F; 循环取出流中的数据</span><br><span class=\"line\">        byte[] b &#x3D; new byte[100];</span><br><span class=\"line\">        int len;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            while ((len &#x3D; inStream.read(b)) &gt; 0)</span><br><span class=\"line\">                response.getOutputStream().write(b, 0, len);</span><br><span class=\"line\">            inStream.close();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载网络文件\"><a href=\"#下载网络文件\" class=\"headerlink\" title=\"下载网络文件\"></a>下载网络文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void downloadNet(HttpServletResponse response) throws MalformedURLException &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 下载网络文件</span><br><span class=\"line\">        int bytesum &#x3D; 0;</span><br><span class=\"line\">        int byteread &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        URL url &#x3D; new URL(&quot;windine.blogdriver.com&#x2F;logo.gif&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            URLConnection conn &#x3D; url.openConnection();</span><br><span class=\"line\">            InputStream inStream &#x3D; conn.getInputStream();</span><br><span class=\"line\">            FileOutputStream fs &#x3D; new FileOutputStream(&quot;c:&#x2F;abc.gif&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            byte[] buffer &#x3D; new byte[1204];</span><br><span class=\"line\">            int length;</span><br><span class=\"line\">            while ((byteread &#x3D; inStream.read(buffer)) !&#x3D; -1) &#123;</span><br><span class=\"line\">                bytesum +&#x3D; byteread;</span><br><span class=\"line\">                System.out.println(bytesum);</span><br><span class=\"line\">                fs.write(buffer, 0, byteread);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"支持在线打开的方式\"><a href=\"#支持在线打开的方式\" class=\"headerlink\" title=\"支持在线打开的方式\"></a>支持在线打开的方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void downLoad(String filePath, HttpServletResponse response, boolean isOnLine) throws Exception &#123;</span><br><span class=\"line\">        File f &#x3D; new File(filePath);</span><br><span class=\"line\">        if (!f.exists()) &#123;</span><br><span class=\"line\">            response.sendError(404, &quot;File not found!&quot;);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        BufferedInputStream br &#x3D; new BufferedInputStream(new FileInputStream(f));</span><br><span class=\"line\">        byte[] buf &#x3D; new byte[1024];</span><br><span class=\"line\">        int len &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        response.reset(); &#x2F;&#x2F; 非常重要</span><br><span class=\"line\">        if (isOnLine) &#123; &#x2F;&#x2F; 在线打开方式</span><br><span class=\"line\">            URL u &#x3D; new URL(&quot;file:&#x2F;&#x2F;&#x2F;&quot; + filePath);</span><br><span class=\"line\">            response.setContentType(u.openConnection().getContentType());</span><br><span class=\"line\">            response.setHeader(&quot;Content-Disposition&quot;, &quot;inline; filename&#x3D;&quot; + f.getName());</span><br><span class=\"line\">            &#x2F;&#x2F; 文件名应该编码成UTF-8</span><br><span class=\"line\">        &#125; else &#123; &#x2F;&#x2F; 纯下载方式</span><br><span class=\"line\">            response.setContentType(&quot;application&#x2F;x-msdownload&quot;);</span><br><span class=\"line\">            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;&quot; + f.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        OutputStream out &#x3D; response.getOutputStream();</span><br><span class=\"line\">        while ((len &#x3D; br.read(buf)) &gt; 0)</span><br><span class=\"line\">            out.write(buf, 0, len);</span><br><span class=\"line\">        br.close();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjJiNTNlYTNjOWZlM2I3LmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Sat Dec 21 2019 15:11:51 GMT+0800 (GMT+08:00)","title":"Java下载文件的几种方式 ","path":"2019/09/12/Java下载文件的几种方式/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjJiNTNlYTNjOWZlM2I3LmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjJiNTNlYTNjOWZlM2I3LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-09-12T01:54:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["file"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Spring Boot - Undertow容器启动","date":"2019-08-14T07:00:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MmJmNTNhYmFhZTM2OGI4LmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n## Undertow简介\n* Undertow 是红帽公司开发的一款基于 NIO 的高性能 Web 嵌入式服务器\n* Untertow 的特点： \n  `轻量级`：它是一个 Web 服务器，但不像传统的 Web 服务器有容器概念，它由两个核心 Jar 包组成，加载一个 Web 应 用可以小于 10MB 内存\n  \n `Servlet3.1 支持`：它提供了对 Servlet3.1 的支持\n\n `WebSocket 支持`：对 Web Socket 完全支持，用以满足 Web 应用巨大数量的客户端\n\n `嵌套性`：它不需要容器，只需通过 API 即可快速搭建 Web 服务器\n \n* 默认情况下 Spring Cloud 使用 Tomcat 作为内嵌 Servlet 容器，可启动一个 Tomcat 的 Spring Boot 程序与一个 Undertow 的 Spring Boot 程序，通过 VisualVM 工具进行比较，可看到 Undertow 性能优于 Tomcat\n\n## 使用 Undertow\n\n### 添加依赖\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-undertow</artifactId>\n</dependency>\n```\n### 支持 HTTP2\n```\n// 在@Configuration的类中添加@bean\n@Bean\nUndertowEmbeddedServletContainerFactory embeddedServletContainerFactory() {\n    \n    UndertowEmbeddedServletContainerFactory factory = new UndertowEmbeddedServletContainerFactory();\n    \n    // 这里也可以做其他配置\n    factory.addBuilderCustomizers(builder -> builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true));\n    \n    return factory;\n}\n```\n### 配置 Undertow\n```\n    # Undertow 日志存放目录\n    server.undertow.accesslog.dir\n    # 是否启动日志\n    server.undertow.accesslog.enabled=false \n    # 日志格式\n    server.undertow.accesslog.pattern=common\n    # 日志文件名前缀\n    server.undertow.accesslog.prefix=access_log\n    # 日志文件名后缀\n    server.undertow.accesslog.suffix=log\n    # HTTP POST请求最大的大小\n    server.undertow.max-http-post-size=0 \n    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程\n    server.undertow.io-threads=4\n    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载\n    server.undertow.worker-threads=20\n    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理\n    # 每块buffer的空间大小,越小的空间被利用越充分\n    server.undertow.buffer-size=1024\n    # 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region\n    server.undertow.buffers-per-region=1024\n    # 是否分配的直接内存\n    server.undertow.direct-buffers=true\n```","source":"_posts/Spring-Boot-Undertow容器启动.md","raw":"title: Spring Boot - Undertow容器启动\ntags:\n  - SpringBoot\ncategories:\n  - Java\ndate: 2019-08-14 15:00:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MmJmNTNhYmFhZTM2OGI4LmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n## Undertow简介\n* Undertow 是红帽公司开发的一款基于 NIO 的高性能 Web 嵌入式服务器\n* Untertow 的特点： \n  `轻量级`：它是一个 Web 服务器，但不像传统的 Web 服务器有容器概念，它由两个核心 Jar 包组成，加载一个 Web 应 用可以小于 10MB 内存\n  \n `Servlet3.1 支持`：它提供了对 Servlet3.1 的支持\n\n `WebSocket 支持`：对 Web Socket 完全支持，用以满足 Web 应用巨大数量的客户端\n\n `嵌套性`：它不需要容器，只需通过 API 即可快速搭建 Web 服务器\n \n* 默认情况下 Spring Cloud 使用 Tomcat 作为内嵌 Servlet 容器，可启动一个 Tomcat 的 Spring Boot 程序与一个 Undertow 的 Spring Boot 程序，通过 VisualVM 工具进行比较，可看到 Undertow 性能优于 Tomcat\n\n## 使用 Undertow\n\n### 添加依赖\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-undertow</artifactId>\n</dependency>\n```\n### 支持 HTTP2\n```\n// 在@Configuration的类中添加@bean\n@Bean\nUndertowEmbeddedServletContainerFactory embeddedServletContainerFactory() {\n    \n    UndertowEmbeddedServletContainerFactory factory = new UndertowEmbeddedServletContainerFactory();\n    \n    // 这里也可以做其他配置\n    factory.addBuilderCustomizers(builder -> builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true));\n    \n    return factory;\n}\n```\n### 配置 Undertow\n```\n    # Undertow 日志存放目录\n    server.undertow.accesslog.dir\n    # 是否启动日志\n    server.undertow.accesslog.enabled=false \n    # 日志格式\n    server.undertow.accesslog.pattern=common\n    # 日志文件名前缀\n    server.undertow.accesslog.prefix=access_log\n    # 日志文件名后缀\n    server.undertow.accesslog.suffix=log\n    # HTTP POST请求最大的大小\n    server.undertow.max-http-post-size=0 \n    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程\n    server.undertow.io-threads=4\n    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载\n    server.undertow.worker-threads=20\n    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理\n    # 每块buffer的空间大小,越小的空间被利用越充分\n    server.undertow.buffer-size=1024\n    # 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region\n    server.undertow.buffers-per-region=1024\n    # 是否分配的直接内存\n    server.undertow.direct-buffers=true\n```","slug":"Spring-Boot-Undertow容器启动","published":1,"updated":"2020-01-01T02:31:19.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwjm0004sops5ixwam14","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MmJmNTNhYmFhZTM2OGI4LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"Undertow简介\"><a href=\"#Undertow简介\" class=\"headerlink\" title=\"Undertow简介\"></a>Undertow简介</h2><ul>\n<li><p>Undertow 是红帽公司开发的一款基于 NIO 的高性能 Web 嵌入式服务器</p>\n</li>\n<li><p>Untertow 的特点：<br><code>轻量级</code>：它是一个 Web 服务器，但不像传统的 Web 服务器有容器概念，它由两个核心 Jar 包组成，加载一个 Web 应 用可以小于 10MB 内存</p>\n<p><code>Servlet3.1 支持</code>：它提供了对 Servlet3.1 的支持</p>\n<p><code>WebSocket 支持</code>：对 Web Socket 完全支持，用以满足 Web 应用巨大数量的客户端</p>\n<p><code>嵌套性</code>：它不需要容器，只需通过 API 即可快速搭建 Web 服务器</p>\n</li>\n<li><p>默认情况下 Spring Cloud 使用 Tomcat 作为内嵌 Servlet 容器，可启动一个 Tomcat 的 Spring Boot 程序与一个 Undertow 的 Spring Boot 程序，通过 VisualVM 工具进行比较，可看到 Undertow 性能优于 Tomcat</p>\n</li>\n</ul>\n<h2 id=\"使用-Undertow\"><a href=\"#使用-Undertow\" class=\"headerlink\" title=\"使用 Undertow\"></a>使用 Undertow</h2><h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;exclusions&gt;</span><br><span class=\"line\">        &lt;exclusion&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;exclusion&gt;</span><br><span class=\"line\">    &lt;&#x2F;exclusions&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持-HTTP2\"><a href=\"#支持-HTTP2\" class=\"headerlink\" title=\"支持 HTTP2\"></a>支持 HTTP2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 在@Configuration的类中添加@bean</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">UndertowEmbeddedServletContainerFactory embeddedServletContainerFactory() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UndertowEmbeddedServletContainerFactory factory &#x3D; new UndertowEmbeddedServletContainerFactory();</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; 这里也可以做其他配置</span><br><span class=\"line\">    factory.addBuilderCustomizers(builder -&gt; builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true));</span><br><span class=\"line\">    </span><br><span class=\"line\">    return factory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-Undertow\"><a href=\"#配置-Undertow\" class=\"headerlink\" title=\"配置 Undertow\"></a>配置 Undertow</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Undertow 日志存放目录</span><br><span class=\"line\">server.undertow.accesslog.dir</span><br><span class=\"line\"># 是否启动日志</span><br><span class=\"line\">server.undertow.accesslog.enabled&#x3D;false </span><br><span class=\"line\"># 日志格式</span><br><span class=\"line\">server.undertow.accesslog.pattern&#x3D;common</span><br><span class=\"line\"># 日志文件名前缀</span><br><span class=\"line\">server.undertow.accesslog.prefix&#x3D;access_log</span><br><span class=\"line\"># 日志文件名后缀</span><br><span class=\"line\">server.undertow.accesslog.suffix&#x3D;log</span><br><span class=\"line\"># HTTP POST请求最大的大小</span><br><span class=\"line\">server.undertow.max-http-post-size&#x3D;0 </span><br><span class=\"line\"># 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程</span><br><span class=\"line\">server.undertow.io-threads&#x3D;4</span><br><span class=\"line\"># 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载</span><br><span class=\"line\">server.undertow.worker-threads&#x3D;20</span><br><span class=\"line\"># 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理</span><br><span class=\"line\"># 每块buffer的空间大小,越小的空间被利用越充分</span><br><span class=\"line\">server.undertow.buffer-size&#x3D;1024</span><br><span class=\"line\"># 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region</span><br><span class=\"line\">server.undertow.buffers-per-region&#x3D;1024</span><br><span class=\"line\"># 是否分配的直接内存</span><br><span class=\"line\">server.undertow.direct-buffers&#x3D;true</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MmJmNTNhYmFhZTM2OGI4LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"Undertow简介\"><a href=\"#Undertow简介\" class=\"headerlink\" title=\"Undertow简介\"></a>Undertow简介</h2><ul>\n<li><p>Undertow 是红帽公司开发的一款基于 NIO 的高性能 Web 嵌入式服务器</p>\n</li>\n<li><p>Untertow 的特点：<br><code>轻量级</code>：它是一个 Web 服务器，但不像传统的 Web 服务器有容器概念，它由两个核心 Jar 包组成，加载一个 Web 应 用可以小于 10MB 内存</p>\n<p><code>Servlet3.1 支持</code>：它提供了对 Servlet3.1 的支持</p>\n<p><code>WebSocket 支持</code>：对 Web Socket 完全支持，用以满足 Web 应用巨大数量的客户端</p>\n<p><code>嵌套性</code>：它不需要容器，只需通过 API 即可快速搭建 Web 服务器</p>\n</li>\n<li><p>默认情况下 Spring Cloud 使用 Tomcat 作为内嵌 Servlet 容器，可启动一个 Tomcat 的 Spring Boot 程序与一个 Undertow 的 Spring Boot 程序，通过 VisualVM 工具进行比较，可看到 Undertow 性能优于 Tomcat</p>\n</li>\n</ul>\n<h2 id=\"使用-Undertow\"><a href=\"#使用-Undertow\" class=\"headerlink\" title=\"使用 Undertow\"></a>使用 Undertow</h2><h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;exclusions&gt;</span><br><span class=\"line\">        &lt;exclusion&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;exclusion&gt;</span><br><span class=\"line\">    &lt;&#x2F;exclusions&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持-HTTP2\"><a href=\"#支持-HTTP2\" class=\"headerlink\" title=\"支持 HTTP2\"></a>支持 HTTP2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 在@Configuration的类中添加@bean</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">UndertowEmbeddedServletContainerFactory embeddedServletContainerFactory() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UndertowEmbeddedServletContainerFactory factory &#x3D; new UndertowEmbeddedServletContainerFactory();</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; 这里也可以做其他配置</span><br><span class=\"line\">    factory.addBuilderCustomizers(builder -&gt; builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true));</span><br><span class=\"line\">    </span><br><span class=\"line\">    return factory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-Undertow\"><a href=\"#配置-Undertow\" class=\"headerlink\" title=\"配置 Undertow\"></a>配置 Undertow</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Undertow 日志存放目录</span><br><span class=\"line\">server.undertow.accesslog.dir</span><br><span class=\"line\"># 是否启动日志</span><br><span class=\"line\">server.undertow.accesslog.enabled&#x3D;false </span><br><span class=\"line\"># 日志格式</span><br><span class=\"line\">server.undertow.accesslog.pattern&#x3D;common</span><br><span class=\"line\"># 日志文件名前缀</span><br><span class=\"line\">server.undertow.accesslog.prefix&#x3D;access_log</span><br><span class=\"line\"># 日志文件名后缀</span><br><span class=\"line\">server.undertow.accesslog.suffix&#x3D;log</span><br><span class=\"line\"># HTTP POST请求最大的大小</span><br><span class=\"line\">server.undertow.max-http-post-size&#x3D;0 </span><br><span class=\"line\"># 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程</span><br><span class=\"line\">server.undertow.io-threads&#x3D;4</span><br><span class=\"line\"># 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载</span><br><span class=\"line\">server.undertow.worker-threads&#x3D;20</span><br><span class=\"line\"># 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理</span><br><span class=\"line\"># 每块buffer的空间大小,越小的空间被利用越充分</span><br><span class=\"line\">server.undertow.buffer-size&#x3D;1024</span><br><span class=\"line\"># 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region</span><br><span class=\"line\">server.undertow.buffers-per-region&#x3D;1024</span><br><span class=\"line\"># 是否分配的直接内存</span><br><span class=\"line\">server.undertow.direct-buffers&#x3D;true</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MmJmNTNhYmFhZTM2OGI4LmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 10:31:19 GMT+0800 (GMT+08:00)","title":"Spring Boot - Undertow容器启动","path":"2019/08/14/Spring-Boot-Undertow容器启动/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MmJmNTNhYmFhZTM2OGI4LmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MmJmNTNhYmFhZTM2OGI4LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-08-14T07:00:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["SpringBoot"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Spring Boot 两种部署到服务器的方式","date":"2019-11-19T00:46:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zOTkzMjE4ZjcwZmU0YzNjLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n## jar包(官方推荐)\n\njar包方式启动，也就是使用spring boot内置的tomcat运行。服务器上面只要你配置了jdk1.8及以上，就ok。不需要外置tomcat \n\n### 1.打成jar包\n\n### 2.将jar包放到任意目录\n执行下面的命令\n```\n$ nohup java -jar test.jar >temp.txt &\n\n//这种方法会把日志文件输入到你指定的文件中，没有则会自动创建。进程会在后台运行。\n```\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04NTNjYTcxMDAzNWQ4ZTg3LnBuZw?x-oss-process=image/format,png )\n### 3.放开端口\n阿里云服务器需要放开对应的端口\n添加安全组：我的项目中配置的启动端口是18080，故这里需要放开18080端口，才能访问 \n\n## war包\n传统的部署方式：将项目打成war包，放入tomcat 的webapps目录下面，启动tomcat，即可访问。\n\n开发环境：jdk1.8 + IDEA\n\n下面搭建一个demo演示如何打war包部署并且如何访问：spring boot + maven\n\n### 1.新建项目\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmUzY2EwZjYyOTkyOTkzLnBuZw?x-oss-process=image/format,png )\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjhiMWRkYTIyYjU0ZDUyLnBuZw?x-oss-process=image/format,png )\n这里我们默认打成jar包，不用修改。\n\n### 2.修改启动Application文件\n项目新建完成后，修改启动Application文件继承SpringBootServletInitializer,实现configure方法 \n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjA3MDQ3ZTI4ZTY3ZGI2LnBuZw?x-oss-process=image/format,png )\n```\n@SpringBootApplication\n@RestController\npublic class Demo1Application extends SpringBootServletInitializer {\n\n    // 用来测试访问\n    @RequestMapping(\"/\")\n    public String home() {\n        return \"hello 朋友\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(Demo1Application.class, args);\n    }\n\n    // 继承SpringBootServletInitializer 实现configure 方便打war 外部服务器部署。\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Demo1Application.class);\n    }\n}\n\n```\n### 3.修改pom.xml\n```\n<packaging>war</packaging>\n```\n完整pom.xml代码如下\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>demo1</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <!-- 这里打成war包 若打jar，需将war改为jar -->\n    <packaging>war</packaging>\n\n    <name>demo1</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.4.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <finalName>demo1</finalName>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n### 4.打包\n\n这里可以直接到项目根目录下面：运行 maven package命令，打包。\n\n我这里直接使用idea打包，如下图： \n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMWIzMDgwMTdhMWE5YWViLnBuZw?x-oss-process=image/format,png)\n5.将war放入外部tomcat的webapps目录下 \n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWZkZjIzZWYwODRjNmM2LnBuZw?x-oss-process=image/format,png)\n6.启动tomcat \n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04Y2M1ZDFkMTZhNTljZDQ4LnBuZw?x-oss-process=image/format,png )\n## 小结 \n\n### 1.对比两种打包方式\njar更加简单，方便。具体使用哪种方式，应视应用场景而定。\n\n### 2.注意\n再说一次，将项目打成war包，部署到外部的tomcat中，这个时候，不能直接访问spring boot 项目中配置文件配置的端口。application.yml中配置的server.port配置的是spring boot内置的tomcat的端口号, 打成war包部署在独立的tomcat上之后, 你配置的server.port是不起作用的。一定要注意这一点！！\n其实我们从tomcat的启动界面，已经可以看出，是启动的哪个端口： \n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wNGQ3YzI2YmY0NTRiNDAzLnBuZw?x-oss-process=image/format,png )\n很明显，日志告诉我们，我们应该访问8080端口。\n下图是使用spring boot 内置tomcat启动日志，可以看出配置的server.port是生效了的！","source":"_posts/Spring-Boot-两种部署到服务器的方式.md","raw":"---\ntitle: Spring Boot 两种部署到服务器的方式\ntags:\n  - 打包部署\ncategories:\n  - SpringBoot\ndate: 2019-11-19 08:46:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zOTkzMjE4ZjcwZmU0YzNjLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n## jar包(官方推荐)\n\njar包方式启动，也就是使用spring boot内置的tomcat运行。服务器上面只要你配置了jdk1.8及以上，就ok。不需要外置tomcat \n\n### 1.打成jar包\n\n### 2.将jar包放到任意目录\n执行下面的命令\n```\n$ nohup java -jar test.jar >temp.txt &\n\n//这种方法会把日志文件输入到你指定的文件中，没有则会自动创建。进程会在后台运行。\n```\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04NTNjYTcxMDAzNWQ4ZTg3LnBuZw?x-oss-process=image/format,png )\n### 3.放开端口\n阿里云服务器需要放开对应的端口\n添加安全组：我的项目中配置的启动端口是18080，故这里需要放开18080端口，才能访问 \n\n## war包\n传统的部署方式：将项目打成war包，放入tomcat 的webapps目录下面，启动tomcat，即可访问。\n\n开发环境：jdk1.8 + IDEA\n\n下面搭建一个demo演示如何打war包部署并且如何访问：spring boot + maven\n\n### 1.新建项目\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmUzY2EwZjYyOTkyOTkzLnBuZw?x-oss-process=image/format,png )\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjhiMWRkYTIyYjU0ZDUyLnBuZw?x-oss-process=image/format,png )\n这里我们默认打成jar包，不用修改。\n\n### 2.修改启动Application文件\n项目新建完成后，修改启动Application文件继承SpringBootServletInitializer,实现configure方法 \n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjA3MDQ3ZTI4ZTY3ZGI2LnBuZw?x-oss-process=image/format,png )\n```\n@SpringBootApplication\n@RestController\npublic class Demo1Application extends SpringBootServletInitializer {\n\n    // 用来测试访问\n    @RequestMapping(\"/\")\n    public String home() {\n        return \"hello 朋友\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(Demo1Application.class, args);\n    }\n\n    // 继承SpringBootServletInitializer 实现configure 方便打war 外部服务器部署。\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Demo1Application.class);\n    }\n}\n\n```\n### 3.修改pom.xml\n```\n<packaging>war</packaging>\n```\n完整pom.xml代码如下\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>demo1</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <!-- 这里打成war包 若打jar，需将war改为jar -->\n    <packaging>war</packaging>\n\n    <name>demo1</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.4.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <finalName>demo1</finalName>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n### 4.打包\n\n这里可以直接到项目根目录下面：运行 maven package命令，打包。\n\n我这里直接使用idea打包，如下图： \n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMWIzMDgwMTdhMWE5YWViLnBuZw?x-oss-process=image/format,png)\n5.将war放入外部tomcat的webapps目录下 \n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWZkZjIzZWYwODRjNmM2LnBuZw?x-oss-process=image/format,png)\n6.启动tomcat \n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04Y2M1ZDFkMTZhNTljZDQ4LnBuZw?x-oss-process=image/format,png )\n## 小结 \n\n### 1.对比两种打包方式\njar更加简单，方便。具体使用哪种方式，应视应用场景而定。\n\n### 2.注意\n再说一次，将项目打成war包，部署到外部的tomcat中，这个时候，不能直接访问spring boot 项目中配置文件配置的端口。application.yml中配置的server.port配置的是spring boot内置的tomcat的端口号, 打成war包部署在独立的tomcat上之后, 你配置的server.port是不起作用的。一定要注意这一点！！\n其实我们从tomcat的启动界面，已经可以看出，是启动的哪个端口： \n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wNGQ3YzI2YmY0NTRiNDAzLnBuZw?x-oss-process=image/format,png )\n很明显，日志告诉我们，我们应该访问8080端口。\n下图是使用spring boot 内置tomcat启动日志，可以看出配置的server.port是生效了的！","slug":"Spring-Boot-两种部署到服务器的方式","published":1,"updated":"2020-01-07T09:27:02.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwjn0005sops7fnp2ahl","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zOTkzMjE4ZjcwZmU0YzNjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"jar包-官方推荐\"><a href=\"#jar包-官方推荐\" class=\"headerlink\" title=\"jar包(官方推荐)\"></a>jar包(官方推荐)</h2><p>jar包方式启动，也就是使用spring boot内置的tomcat运行。服务器上面只要你配置了jdk1.8及以上，就ok。不需要外置tomcat </p>\n<h3 id=\"1-打成jar包\"><a href=\"#1-打成jar包\" class=\"headerlink\" title=\"1.打成jar包\"></a>1.打成jar包</h3><h3 id=\"2-将jar包放到任意目录\"><a href=\"#2-将jar包放到任意目录\" class=\"headerlink\" title=\"2.将jar包放到任意目录\"></a>2.将jar包放到任意目录</h3><p>执行下面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nohup java -jar test.jar &gt;temp.txt &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;这种方法会把日志文件输入到你指定的文件中，没有则会自动创建。进程会在后台运行。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04NTNjYTcxMDAzNWQ4ZTg3LnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<h3 id=\"3-放开端口\"><a href=\"#3-放开端口\" class=\"headerlink\" title=\"3.放开端口\"></a>3.放开端口</h3><p>阿里云服务器需要放开对应的端口<br>添加安全组：我的项目中配置的启动端口是18080，故这里需要放开18080端口，才能访问 </p>\n<h2 id=\"war包\"><a href=\"#war包\" class=\"headerlink\" title=\"war包\"></a>war包</h2><p>传统的部署方式：将项目打成war包，放入tomcat 的webapps目录下面，启动tomcat，即可访问。</p>\n<p>开发环境：jdk1.8 + IDEA</p>\n<p>下面搭建一个demo演示如何打war包部署并且如何访问：spring boot + maven</p>\n<h3 id=\"1-新建项目\"><a href=\"#1-新建项目\" class=\"headerlink\" title=\"1.新建项目\"></a>1.新建项目</h3><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmUzY2EwZjYyOTkyOTkzLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjhiMWRkYTIyYjU0ZDUyLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>这里我们默认打成jar包，不用修改。</p>\n<h3 id=\"2-修改启动Application文件\"><a href=\"#2-修改启动Application文件\" class=\"headerlink\" title=\"2.修改启动Application文件\"></a>2.修改启动Application文件</h3><p>项目新建完成后，修改启动Application文件继承SpringBootServletInitializer,实现configure方法<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjA3MDQ3ZTI4ZTY3ZGI2LnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class Demo1Application extends SpringBootServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 用来测试访问</span><br><span class=\"line\">    @RequestMapping(&quot;&#x2F;&quot;)</span><br><span class=\"line\">    public String home() &#123;</span><br><span class=\"line\">        return &quot;hello 朋友&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Demo1Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 继承SpringBootServletInitializer 实现configure 方便打war 外部服务器部署。</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;</span><br><span class=\"line\">        return application.sources(Demo1Application.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改pom-xml\"><a href=\"#3-修改pom-xml\" class=\"headerlink\" title=\"3.修改pom.xml\"></a>3.修改pom.xml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br></pre></td></tr></table></figure>\n<p>完整pom.xml代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.example&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;demo1&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;!-- 这里打成war包 若打jar，需将war改为jar --&gt;</span><br><span class=\"line\">    &lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;demo1&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;finalName&gt;demo1&lt;&#x2F;finalName&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-打包\"><a href=\"#4-打包\" class=\"headerlink\" title=\"4.打包\"></a>4.打包</h3><p>这里可以直接到项目根目录下面：运行 maven package命令，打包。</p>\n<p>我这里直接使用idea打包，如下图：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMWIzMDgwMTdhMWE5YWViLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>5.将war放入外部tomcat的webapps目录下<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWZkZjIzZWYwODRjNmM2LnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>6.启动tomcat<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04Y2M1ZDFkMTZhNTljZDQ4LnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h3 id=\"1-对比两种打包方式\"><a href=\"#1-对比两种打包方式\" class=\"headerlink\" title=\"1.对比两种打包方式\"></a>1.对比两种打包方式</h3><p>jar更加简单，方便。具体使用哪种方式，应视应用场景而定。</p>\n<h3 id=\"2-注意\"><a href=\"#2-注意\" class=\"headerlink\" title=\"2.注意\"></a>2.注意</h3><p>再说一次，将项目打成war包，部署到外部的tomcat中，这个时候，不能直接访问spring boot 项目中配置文件配置的端口。application.yml中配置的server.port配置的是spring boot内置的tomcat的端口号, 打成war包部署在独立的tomcat上之后, 你配置的server.port是不起作用的。一定要注意这一点！！<br>其实我们从tomcat的启动界面，已经可以看出，是启动的哪个端口：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wNGQ3YzI2YmY0NTRiNDAzLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>很明显，日志告诉我们，我们应该访问8080端口。<br>下图是使用spring boot 内置tomcat启动日志，可以看出配置的server.port是生效了的！</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zOTkzMjE4ZjcwZmU0YzNjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"jar包-官方推荐\"><a href=\"#jar包-官方推荐\" class=\"headerlink\" title=\"jar包(官方推荐)\"></a>jar包(官方推荐)</h2><p>jar包方式启动，也就是使用spring boot内置的tomcat运行。服务器上面只要你配置了jdk1.8及以上，就ok。不需要外置tomcat </p>\n<h3 id=\"1-打成jar包\"><a href=\"#1-打成jar包\" class=\"headerlink\" title=\"1.打成jar包\"></a>1.打成jar包</h3><h3 id=\"2-将jar包放到任意目录\"><a href=\"#2-将jar包放到任意目录\" class=\"headerlink\" title=\"2.将jar包放到任意目录\"></a>2.将jar包放到任意目录</h3><p>执行下面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nohup java -jar test.jar &gt;temp.txt &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;这种方法会把日志文件输入到你指定的文件中，没有则会自动创建。进程会在后台运行。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04NTNjYTcxMDAzNWQ4ZTg3LnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<h3 id=\"3-放开端口\"><a href=\"#3-放开端口\" class=\"headerlink\" title=\"3.放开端口\"></a>3.放开端口</h3><p>阿里云服务器需要放开对应的端口<br>添加安全组：我的项目中配置的启动端口是18080，故这里需要放开18080端口，才能访问 </p>\n<h2 id=\"war包\"><a href=\"#war包\" class=\"headerlink\" title=\"war包\"></a>war包</h2><p>传统的部署方式：将项目打成war包，放入tomcat 的webapps目录下面，启动tomcat，即可访问。</p>\n<p>开发环境：jdk1.8 + IDEA</p>\n<p>下面搭建一个demo演示如何打war包部署并且如何访问：spring boot + maven</p>\n<h3 id=\"1-新建项目\"><a href=\"#1-新建项目\" class=\"headerlink\" title=\"1.新建项目\"></a>1.新建项目</h3><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmUzY2EwZjYyOTkyOTkzLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjhiMWRkYTIyYjU0ZDUyLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>这里我们默认打成jar包，不用修改。</p>\n<h3 id=\"2-修改启动Application文件\"><a href=\"#2-修改启动Application文件\" class=\"headerlink\" title=\"2.修改启动Application文件\"></a>2.修改启动Application文件</h3><p>项目新建完成后，修改启动Application文件继承SpringBootServletInitializer,实现configure方法<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjA3MDQ3ZTI4ZTY3ZGI2LnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class Demo1Application extends SpringBootServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 用来测试访问</span><br><span class=\"line\">    @RequestMapping(&quot;&#x2F;&quot;)</span><br><span class=\"line\">    public String home() &#123;</span><br><span class=\"line\">        return &quot;hello 朋友&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Demo1Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 继承SpringBootServletInitializer 实现configure 方便打war 外部服务器部署。</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;</span><br><span class=\"line\">        return application.sources(Demo1Application.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改pom-xml\"><a href=\"#3-修改pom-xml\" class=\"headerlink\" title=\"3.修改pom.xml\"></a>3.修改pom.xml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br></pre></td></tr></table></figure>\n<p>完整pom.xml代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.example&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;demo1&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;!-- 这里打成war包 若打jar，需将war改为jar --&gt;</span><br><span class=\"line\">    &lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;demo1&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;finalName&gt;demo1&lt;&#x2F;finalName&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-打包\"><a href=\"#4-打包\" class=\"headerlink\" title=\"4.打包\"></a>4.打包</h3><p>这里可以直接到项目根目录下面：运行 maven package命令，打包。</p>\n<p>我这里直接使用idea打包，如下图：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMWIzMDgwMTdhMWE5YWViLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>5.将war放入外部tomcat的webapps目录下<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWZkZjIzZWYwODRjNmM2LnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>6.启动tomcat<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04Y2M1ZDFkMTZhNTljZDQ4LnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h3 id=\"1-对比两种打包方式\"><a href=\"#1-对比两种打包方式\" class=\"headerlink\" title=\"1.对比两种打包方式\"></a>1.对比两种打包方式</h3><p>jar更加简单，方便。具体使用哪种方式，应视应用场景而定。</p>\n<h3 id=\"2-注意\"><a href=\"#2-注意\" class=\"headerlink\" title=\"2.注意\"></a>2.注意</h3><p>再说一次，将项目打成war包，部署到外部的tomcat中，这个时候，不能直接访问spring boot 项目中配置文件配置的端口。application.yml中配置的server.port配置的是spring boot内置的tomcat的端口号, 打成war包部署在独立的tomcat上之后, 你配置的server.port是不起作用的。一定要注意这一点！！<br>其实我们从tomcat的启动界面，已经可以看出，是启动的哪个端口：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wNGQ3YzI2YmY0NTRiNDAzLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>很明显，日志告诉我们，我们应该访问8080端口。<br>下图是使用spring boot 内置tomcat启动日志，可以看出配置的server.port是生效了的！</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zOTkzMjE4ZjcwZmU0YzNjLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Tue Jan 07 2020 17:27:02 GMT+0800 (GMT+08:00)","title":"Spring Boot 两种部署到服务器的方式","path":"2019/11/19/Spring-Boot-两种部署到服务器的方式/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zOTkzMjE4ZjcwZmU0YzNjLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zOTkzMjE4ZjcwZmU0YzNjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-11-19T00:46:00.000Z","pv":0,"totalPV":0,"categories":"SpringBoot","tags":["打包部署"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Spring Cloud Feign使用详解","date":"2019-11-19T00:35:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00NWUyZTA5MmY3MGVmYzY2LmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n## 背景\nFeign是一个声明式的Web Service客户端，它的目的就是让Web Service调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。\n而Feign则会完全代理HTTP请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关处理。Feign整合了Ribbon和Hystrix(关于Hystrix我们后面再讲)，可以让我们不再需要显式地使用这两个组件。\n\n## 特点\n总起来说，Feign具有如下特性：\n\n* 可插拔的注解支持，包括Feign注解和JAX-RS注解;\n\n* 支持可插拔的HTTP编码器和解码器;\n\n* 支持Hystrix和它的Fallback;\n\n* 支持Ribbon的负载均衡;\n\n* 支持HTTP请求和响应的压缩。\n\n## FeignClient注解的一些属性\n![](/asset/2019-11-19/p15.png)\n## 快速开始\n### 1.引入Feign\n```\n     <dependency>\n          <groupId>org.springframework.cloud</groupId>\n          <artifactId>spring-cloud-starter-openfeign</artifactId>\n     </dependency>\n```\n### 2.@FeignClient注解\nSpringbootApplication启动类加上@FeignClient注解\n```\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@SpringBootApplication\n@EnableEurekaClient\n@EnableFeignClients\npublic class ServiceFeignApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ServiceFeignApplication.class, args);\n    }\n\n}\n//@EnableDiscoveryClient 和@EnableEurekaClient是等效的\n```\n### 3.yaml配置\n```\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\nserver:\n  port: 8765\nspring:\n  application:\n    name: service-feign\n```\n### 4.Feign的使用\nfeign接口\n```\n@FeignClient(value = \"service-hi\")\npublic interface SchedualServiceHi {\n\n    @RequestMapping(value = \"/hi\", method = RequestMethod.GET)\n    String sayHiFromClientOne(@RequestParam(\"name\") String name);\n}\n```\n访问接口\n```\n@RestController\npublic class HiController {\n\n    @Autowired\n    SchedualServiceHi schedualServiceHi;\n\n    @GetMapping(value = \"/hi\")\n    public String sayHi(@RequestParam String name){\n        return schedualServiceHi.sayHiFromClientOne(name);\n\n    }\n}\n```\n## 实战\n### 1.创建项目\n创建一个Maven项目feign，新建2个module `service-hi`和`service-feign`\n### 2.service-hi\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yNDg5OTI4ZWIzMDA1OTZiLnBuZw?x-oss-process=image/format,png)\n\npom\n```\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n```\nyml\n```\nserver:\n  port: 8763\n\nspring:\n  application:\n    name: service-hi\n\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n```\nServiceHiApplication\n```\n@SpringBootApplication\n@EnableEurekaClient\n@EnableDiscoveryClient\n@RestController\npublic class ServiceHiApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run( ServiceHiApplication.class, args );\n    }\n\n    @Value(\"${server.port}\")\n    String port;\n\n    @RequestMapping(\"/hi\")\n    public String home(@RequestParam(value = \"name\", defaultValue = \"forezp\") String name) {\n        return \"hi \" + name + \" ,i am from port:\" + port;\n    }\n\n}\n```\n### 3.service-feign\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMTVkN2JkNjUwZDQzYzZmLnBuZw?x-oss-process=image/format,png)\npom\n```\n <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n    </dependencies>\n```\nyml\n```\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\nserver:\n  port: 8765\nspring:\n  application:\n    name: service-feign\n```\nServiceFeignApplication\n```\n@SpringBootApplication\n@EnableEurekaClient\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class ServiceFeignApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ServiceFeignApplication.class, args);\n    }\n\n}\n```\nSchedualServiceHi\n```\n@FeignClient(value = \"service-hi\")\npublic interface SchedualServiceHi {\n\n    @RequestMapping(value = \"/hi\", method = RequestMethod.GET)\n    String sayHiFromClientOne(@RequestParam(\"name\") String name);\n}\n```\nHiController\n```\n@RestController\npublic class HiController {\n\n    @Autowired\n    SchedualServiceHi schedualServiceHi;\n\n    @GetMapping(value = \"/hi\")\n    public String sayHi(@RequestParam String name){\n        return schedualServiceHi.sayHiFromClientOne(name);\n\n    }\n}\n\n```\n## 测试\n启动eureka\n访问http://localhost:8761/\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZDk3Y2M1MmExYzU2MzQ4LnBuZw?x-oss-process=image/format,png)\n启动service-hi\n刷新http://localhost:8761/\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ODI5MzE5NWZhN2RhMjZhLnBuZw?x-oss-process=image/format,png)\n访问service-hihttp://localhost:8763/hi?name=kobe\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjQ2NzE5MDFiYjgwNjg4LnBuZw?x-oss-process=image/format,png)\n启动service-feign\n刷新http://localhost:8761/\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZmM1NTE0ZDZhZGU5ZGZhLnBuZw?x-oss-process=image/format,png)\n同过feign访问接口http://localhost:8765/hi?name=KG\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWM4NGUzMDZhMDRmY2MyLnBuZw?x-oss-process=image/format,png)\n可以看到去到了service-hi服务，端口8763","source":"_posts/Spring-Cloud-Feign使用详解.md","raw":"---\ntitle: Spring Cloud Feign使用详解\ntags:\n  - SpringCloud\ncategories:\n  - 微服务\ndate: 2019-11-19 08:35:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00NWUyZTA5MmY3MGVmYzY2LmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n## 背景\nFeign是一个声明式的Web Service客户端，它的目的就是让Web Service调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。\n而Feign则会完全代理HTTP请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关处理。Feign整合了Ribbon和Hystrix(关于Hystrix我们后面再讲)，可以让我们不再需要显式地使用这两个组件。\n\n## 特点\n总起来说，Feign具有如下特性：\n\n* 可插拔的注解支持，包括Feign注解和JAX-RS注解;\n\n* 支持可插拔的HTTP编码器和解码器;\n\n* 支持Hystrix和它的Fallback;\n\n* 支持Ribbon的负载均衡;\n\n* 支持HTTP请求和响应的压缩。\n\n## FeignClient注解的一些属性\n![](/asset/2019-11-19/p15.png)\n## 快速开始\n### 1.引入Feign\n```\n     <dependency>\n          <groupId>org.springframework.cloud</groupId>\n          <artifactId>spring-cloud-starter-openfeign</artifactId>\n     </dependency>\n```\n### 2.@FeignClient注解\nSpringbootApplication启动类加上@FeignClient注解\n```\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@SpringBootApplication\n@EnableEurekaClient\n@EnableFeignClients\npublic class ServiceFeignApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ServiceFeignApplication.class, args);\n    }\n\n}\n//@EnableDiscoveryClient 和@EnableEurekaClient是等效的\n```\n### 3.yaml配置\n```\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\nserver:\n  port: 8765\nspring:\n  application:\n    name: service-feign\n```\n### 4.Feign的使用\nfeign接口\n```\n@FeignClient(value = \"service-hi\")\npublic interface SchedualServiceHi {\n\n    @RequestMapping(value = \"/hi\", method = RequestMethod.GET)\n    String sayHiFromClientOne(@RequestParam(\"name\") String name);\n}\n```\n访问接口\n```\n@RestController\npublic class HiController {\n\n    @Autowired\n    SchedualServiceHi schedualServiceHi;\n\n    @GetMapping(value = \"/hi\")\n    public String sayHi(@RequestParam String name){\n        return schedualServiceHi.sayHiFromClientOne(name);\n\n    }\n}\n```\n## 实战\n### 1.创建项目\n创建一个Maven项目feign，新建2个module `service-hi`和`service-feign`\n### 2.service-hi\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yNDg5OTI4ZWIzMDA1OTZiLnBuZw?x-oss-process=image/format,png)\n\npom\n```\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n```\nyml\n```\nserver:\n  port: 8763\n\nspring:\n  application:\n    name: service-hi\n\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n```\nServiceHiApplication\n```\n@SpringBootApplication\n@EnableEurekaClient\n@EnableDiscoveryClient\n@RestController\npublic class ServiceHiApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run( ServiceHiApplication.class, args );\n    }\n\n    @Value(\"${server.port}\")\n    String port;\n\n    @RequestMapping(\"/hi\")\n    public String home(@RequestParam(value = \"name\", defaultValue = \"forezp\") String name) {\n        return \"hi \" + name + \" ,i am from port:\" + port;\n    }\n\n}\n```\n### 3.service-feign\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMTVkN2JkNjUwZDQzYzZmLnBuZw?x-oss-process=image/format,png)\npom\n```\n <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n    </dependencies>\n```\nyml\n```\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\nserver:\n  port: 8765\nspring:\n  application:\n    name: service-feign\n```\nServiceFeignApplication\n```\n@SpringBootApplication\n@EnableEurekaClient\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class ServiceFeignApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ServiceFeignApplication.class, args);\n    }\n\n}\n```\nSchedualServiceHi\n```\n@FeignClient(value = \"service-hi\")\npublic interface SchedualServiceHi {\n\n    @RequestMapping(value = \"/hi\", method = RequestMethod.GET)\n    String sayHiFromClientOne(@RequestParam(\"name\") String name);\n}\n```\nHiController\n```\n@RestController\npublic class HiController {\n\n    @Autowired\n    SchedualServiceHi schedualServiceHi;\n\n    @GetMapping(value = \"/hi\")\n    public String sayHi(@RequestParam String name){\n        return schedualServiceHi.sayHiFromClientOne(name);\n\n    }\n}\n\n```\n## 测试\n启动eureka\n访问http://localhost:8761/\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZDk3Y2M1MmExYzU2MzQ4LnBuZw?x-oss-process=image/format,png)\n启动service-hi\n刷新http://localhost:8761/\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ODI5MzE5NWZhN2RhMjZhLnBuZw?x-oss-process=image/format,png)\n访问service-hihttp://localhost:8763/hi?name=kobe\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjQ2NzE5MDFiYjgwNjg4LnBuZw?x-oss-process=image/format,png)\n启动service-feign\n刷新http://localhost:8761/\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZmM1NTE0ZDZhZGU5ZGZhLnBuZw?x-oss-process=image/format,png)\n同过feign访问接口http://localhost:8765/hi?name=KG\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWM4NGUzMDZhMDRmY2MyLnBuZw?x-oss-process=image/format,png)\n可以看到去到了service-hi服务，端口8763","slug":"Spring-Cloud-Feign使用详解","published":1,"updated":"2020-01-01T02:31:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwjo0006sops8t4xayor","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00NWUyZTA5MmY3MGVmYzY2LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>Feign是一个声明式的Web Service客户端，它的目的就是让Web Service调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。<br>而Feign则会完全代理HTTP请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关处理。Feign整合了Ribbon和Hystrix(关于Hystrix我们后面再讲)，可以让我们不再需要显式地使用这两个组件。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>总起来说，Feign具有如下特性：</p>\n<ul>\n<li><p>可插拔的注解支持，包括Feign注解和JAX-RS注解;</p>\n</li>\n<li><p>支持可插拔的HTTP编码器和解码器;</p>\n</li>\n<li><p>支持Hystrix和它的Fallback;</p>\n</li>\n<li><p>支持Ribbon的负载均衡;</p>\n</li>\n<li><p>支持HTTP请求和响应的压缩。</p>\n</li>\n</ul>\n<h2 id=\"FeignClient注解的一些属性\"><a href=\"#FeignClient注解的一些属性\" class=\"headerlink\" title=\"FeignClient注解的一些属性\"></a>FeignClient注解的一些属性</h2><p><img src=\"/asset/2019-11-19/p15.png\" alt=\"\"></p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"1-引入Feign\"><a href=\"#1-引入Feign\" class=\"headerlink\" title=\"1.引入Feign\"></a>1.引入Feign</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-FeignClient注解\"><a href=\"#2-FeignClient注解\" class=\"headerlink\" title=\"2.@FeignClient注解\"></a>2.@FeignClient注解</h3><p>SpringbootApplication启动类加上@FeignClient注解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class=\"line\">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableEurekaClient</span><br><span class=\"line\">@EnableFeignClients</span><br><span class=\"line\">public class ServiceFeignApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ServiceFeignApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;@EnableDiscoveryClient 和@EnableEurekaClient是等效的</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-yaml配置\"><a href=\"#3-yaml配置\" class=\"headerlink\" title=\"3.yaml配置\"></a>3.yaml配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8765</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-feign</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Feign的使用\"><a href=\"#4-Feign的使用\" class=\"headerlink\" title=\"4.Feign的使用\"></a>4.Feign的使用</h3><p>feign接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FeignClient(value &#x3D; &quot;service-hi&quot;)</span><br><span class=\"line\">public interface SchedualServiceHi &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value &#x3D; &quot;&#x2F;hi&quot;, method &#x3D; RequestMethod.GET)</span><br><span class=\"line\">    String sayHiFromClientOne(@RequestParam(&quot;name&quot;) String name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HiController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    SchedualServiceHi schedualServiceHi;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(value &#x3D; &quot;&#x2F;hi&quot;)</span><br><span class=\"line\">    public String sayHi(@RequestParam String name)&#123;</span><br><span class=\"line\">        return schedualServiceHi.sayHiFromClientOne(name);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"1-创建项目\"><a href=\"#1-创建项目\" class=\"headerlink\" title=\"1.创建项目\"></a>1.创建项目</h3><p>创建一个Maven项目feign，新建2个module <code>service-hi</code>和<code>service-feign</code></p>\n<h3 id=\"2-service-hi\"><a href=\"#2-service-hi\" class=\"headerlink\" title=\"2.service-hi\"></a>2.service-hi</h3><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yNDg5OTI4ZWIzMDA1OTZiLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>pom</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 8763</span><br><span class=\"line\"></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-hi</span><br><span class=\"line\"></span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure>\n<p>ServiceHiApplication</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableEurekaClient</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class ServiceHiApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run( ServiceHiApplication.class, args );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class=\"line\">    String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;&#x2F;hi&quot;)</span><br><span class=\"line\">    public String home(@RequestParam(value &#x3D; &quot;name&quot;, defaultValue &#x3D; &quot;forezp&quot;) String name) &#123;</span><br><span class=\"line\">        return &quot;hi &quot; + name + &quot; ,i am from port:&quot; + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-service-feign\"><a href=\"#3-service-feign\" class=\"headerlink\" title=\"3.service-feign\"></a>3.service-feign</h3><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMTVkN2JkNjUwZDQzYzZmLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>pom</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">       &lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">       &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">       &lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">       &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">       &lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">       &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">   &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8765</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-feign</span><br></pre></td></tr></table></figure>\n<p>ServiceFeignApplication</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableEurekaClient</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@EnableFeignClients</span><br><span class=\"line\">public class ServiceFeignApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ServiceFeignApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SchedualServiceHi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FeignClient(value &#x3D; &quot;service-hi&quot;)</span><br><span class=\"line\">public interface SchedualServiceHi &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value &#x3D; &quot;&#x2F;hi&quot;, method &#x3D; RequestMethod.GET)</span><br><span class=\"line\">    String sayHiFromClientOne(@RequestParam(&quot;name&quot;) String name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>HiController</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HiController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    SchedualServiceHi schedualServiceHi;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(value &#x3D; &quot;&#x2F;hi&quot;)</span><br><span class=\"line\">    public String sayHi(@RequestParam String name)&#123;</span><br><span class=\"line\">        return schedualServiceHi.sayHiFromClientOne(name);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>启动eureka<br>访问<a href=\"http://localhost:8761/\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZDk3Y2M1MmExYzU2MzQ4LnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>启动service-hi<br>刷新<a href=\"http://localhost:8761/\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ODI5MzE5NWZhN2RhMjZhLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>访问service-hi<a href=\"http://localhost:8763/hi?name=kobe\" target=\"_blank\" rel=\"noopener\">http://localhost:8763/hi?name=kobe</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjQ2NzE5MDFiYjgwNjg4LnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>启动service-feign<br>刷新<a href=\"http://localhost:8761/\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZmM1NTE0ZDZhZGU5ZGZhLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>同过feign访问接口<a href=\"http://localhost:8765/hi?name=KG\" target=\"_blank\" rel=\"noopener\">http://localhost:8765/hi?name=KG</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWM4NGUzMDZhMDRmY2MyLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>可以看到去到了service-hi服务，端口8763</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00NWUyZTA5MmY3MGVmYzY2LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>Feign是一个声明式的Web Service客户端，它的目的就是让Web Service调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。<br>而Feign则会完全代理HTTP请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关处理。Feign整合了Ribbon和Hystrix(关于Hystrix我们后面再讲)，可以让我们不再需要显式地使用这两个组件。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>总起来说，Feign具有如下特性：</p>\n<ul>\n<li><p>可插拔的注解支持，包括Feign注解和JAX-RS注解;</p>\n</li>\n<li><p>支持可插拔的HTTP编码器和解码器;</p>\n</li>\n<li><p>支持Hystrix和它的Fallback;</p>\n</li>\n<li><p>支持Ribbon的负载均衡;</p>\n</li>\n<li><p>支持HTTP请求和响应的压缩。</p>\n</li>\n</ul>\n<h2 id=\"FeignClient注解的一些属性\"><a href=\"#FeignClient注解的一些属性\" class=\"headerlink\" title=\"FeignClient注解的一些属性\"></a>FeignClient注解的一些属性</h2><p><img src=\"/asset/2019-11-19/p15.png\" alt=\"\"></p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"1-引入Feign\"><a href=\"#1-引入Feign\" class=\"headerlink\" title=\"1.引入Feign\"></a>1.引入Feign</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-FeignClient注解\"><a href=\"#2-FeignClient注解\" class=\"headerlink\" title=\"2.@FeignClient注解\"></a>2.@FeignClient注解</h3><p>SpringbootApplication启动类加上@FeignClient注解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class=\"line\">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableEurekaClient</span><br><span class=\"line\">@EnableFeignClients</span><br><span class=\"line\">public class ServiceFeignApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ServiceFeignApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;@EnableDiscoveryClient 和@EnableEurekaClient是等效的</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-yaml配置\"><a href=\"#3-yaml配置\" class=\"headerlink\" title=\"3.yaml配置\"></a>3.yaml配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8765</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-feign</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Feign的使用\"><a href=\"#4-Feign的使用\" class=\"headerlink\" title=\"4.Feign的使用\"></a>4.Feign的使用</h3><p>feign接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FeignClient(value &#x3D; &quot;service-hi&quot;)</span><br><span class=\"line\">public interface SchedualServiceHi &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value &#x3D; &quot;&#x2F;hi&quot;, method &#x3D; RequestMethod.GET)</span><br><span class=\"line\">    String sayHiFromClientOne(@RequestParam(&quot;name&quot;) String name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HiController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    SchedualServiceHi schedualServiceHi;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(value &#x3D; &quot;&#x2F;hi&quot;)</span><br><span class=\"line\">    public String sayHi(@RequestParam String name)&#123;</span><br><span class=\"line\">        return schedualServiceHi.sayHiFromClientOne(name);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"1-创建项目\"><a href=\"#1-创建项目\" class=\"headerlink\" title=\"1.创建项目\"></a>1.创建项目</h3><p>创建一个Maven项目feign，新建2个module <code>service-hi</code>和<code>service-feign</code></p>\n<h3 id=\"2-service-hi\"><a href=\"#2-service-hi\" class=\"headerlink\" title=\"2.service-hi\"></a>2.service-hi</h3><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yNDg5OTI4ZWIzMDA1OTZiLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>pom</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 8763</span><br><span class=\"line\"></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-hi</span><br><span class=\"line\"></span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure>\n<p>ServiceHiApplication</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableEurekaClient</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class ServiceHiApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run( ServiceHiApplication.class, args );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class=\"line\">    String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;&#x2F;hi&quot;)</span><br><span class=\"line\">    public String home(@RequestParam(value &#x3D; &quot;name&quot;, defaultValue &#x3D; &quot;forezp&quot;) String name) &#123;</span><br><span class=\"line\">        return &quot;hi &quot; + name + &quot; ,i am from port:&quot; + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-service-feign\"><a href=\"#3-service-feign\" class=\"headerlink\" title=\"3.service-feign\"></a>3.service-feign</h3><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jMTVkN2JkNjUwZDQzYzZmLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>pom</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">       &lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">       &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">       &lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">       &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">       &lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">       &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">   &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8765</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-feign</span><br></pre></td></tr></table></figure>\n<p>ServiceFeignApplication</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableEurekaClient</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@EnableFeignClients</span><br><span class=\"line\">public class ServiceFeignApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ServiceFeignApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SchedualServiceHi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FeignClient(value &#x3D; &quot;service-hi&quot;)</span><br><span class=\"line\">public interface SchedualServiceHi &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value &#x3D; &quot;&#x2F;hi&quot;, method &#x3D; RequestMethod.GET)</span><br><span class=\"line\">    String sayHiFromClientOne(@RequestParam(&quot;name&quot;) String name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>HiController</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HiController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    SchedualServiceHi schedualServiceHi;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(value &#x3D; &quot;&#x2F;hi&quot;)</span><br><span class=\"line\">    public String sayHi(@RequestParam String name)&#123;</span><br><span class=\"line\">        return schedualServiceHi.sayHiFromClientOne(name);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>启动eureka<br>访问<a href=\"http://localhost:8761/\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZDk3Y2M1MmExYzU2MzQ4LnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>启动service-hi<br>刷新<a href=\"http://localhost:8761/\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ODI5MzE5NWZhN2RhMjZhLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>访问service-hi<a href=\"http://localhost:8763/hi?name=kobe\" target=\"_blank\" rel=\"noopener\">http://localhost:8763/hi?name=kobe</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjQ2NzE5MDFiYjgwNjg4LnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>启动service-feign<br>刷新<a href=\"http://localhost:8761/\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZmM1NTE0ZDZhZGU5ZGZhLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>同过feign访问接口<a href=\"http://localhost:8765/hi?name=KG\" target=\"_blank\" rel=\"noopener\">http://localhost:8765/hi?name=KG</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWM4NGUzMDZhMDRmY2MyLnBuZw?x-oss-process=image/format,png\" alt=\"\"><br>可以看到去到了service-hi服务，端口8763</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00NWUyZTA5MmY3MGVmYzY2LmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 10:31:43 GMT+0800 (GMT+08:00)","title":"Spring Cloud Feign使用详解","path":"2019/11/19/Spring-Cloud-Feign使用详解/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00NWUyZTA5MmY3MGVmYzY2LmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00NWUyZTA5MmY3MGVmYzY2LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-11-19T00:35:00.000Z","pv":0,"totalPV":0,"categories":"微服务","tags":["SpringCloud"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"java线程创建全家桶","date":"2019-09-16T05:52:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZTJhMWRhM2Q1NGQ3OTgxLmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n## 继承Thread类\n```\n//继承Thread\npublic class ExtendThread extends Thread{\n   //线程执行体\n   @Override\n   public void run() {\n       //do something\n       System.out.println(\"继承Thread创建线程\");\n       //无返回值\n  }\n}\npublic class ThreadCreateDemo {\n   public static void main(String[] args) {\n       //创建一个线程\n       ExtendThread extendThread = new ExtendThread();\n       //调用start方法启动线程\n       extendThread.start();\n        //没有返回值\n  }\n}\n```\n`使用继承Thread类的方法来创建线程类时候，多个线程之间是无法共享线程类的实例变量的。`\n\n## 实现Runnable接口\n\n覆写Runnable接口实现多线程可以避免单继承局限， 当子类实现Runnable接口，此时子类和Thread的代理模式（子类负责真实业务的操作，thread负责资源调度与线程创建辅助真实业务）。\n```\n//实现Runnable接口\npublic class ImplRunnable implements Runnable {\n   //线程实行体\n   @Override\n   public void run() {\n       //do something\n       System.out.println(\"实现Runnable创建线程\");\n       //没有返回值\n  }\n}\npublic class ThreadCreateDemo {\n   public static void main(String[] args) {\n       ImplRunnable implRunnable = new ImplRunnable();\n       Thread thread = new Thread(implRunnable);\n       //启动线程\n       thread.start();\n  }\n}\n```\n`Runnable对象仅仅作为Thread对象的target，Runnable实现类里包含的run方法仅仅作为线程的执行体，而实际的线程对象依旧是Thread实例，只是该Thread线程负责执行器target的方法。`\n\n## 覆写Callable接口\n```\n//实现Callable返回值类型为Integer类型\npublic class ImplCallable implements Callable<Integer> {\n   //该call()方法将作为线程执行体，并且有返回值\n   @Override\n   public Integer call() throws Exception {\n       //do something\n       System.out.println(\"实现Callable接口创建线程，返回类型为Integer类型\");\n       return 999;\n  }\n}\npublic class ThreadCreateDemo {\n   public static void main(String[] args) throws ExecutionException, InterruptedException {\n       Callable<Integer> callable = new ImplCallable();\n       FutureTask<Integer> futureTask = new FutureTask<>(callable);\n       Thread thread = new Thread(futureTask);\n       thread.start();\n       //获取返回值futureTask.get()\n       System.out.println(futureTask.get());\n  }\n}\n```\n`Callable接口有泛型限制，Callable接口里的泛型形参类型与call方法返回值类型相同，而且Callable接口是函数式接口，因此可以使用Lambda表达式创建Callable对象。`\n\n## 三种方式的对比\n\n通过继承Thread类或者实现Runnable接口、Callable接口都可以实现多线程，不过实现Runnable接口与实现Callable接口的方式基本相同，只是Callabl接口里定义的方法返回值，可以声明抛出异常而已。因此将实现Runnable接口和实现Callable接口归为一种方式。这种方式与继承Thread方式之间的主要差别如下。\n\n### 采用实现Runnable、Callable接口的方式创建线程的优缺点\n\n`优点`\n线程类只是实现了Runnable或者Callable接口，还可以继承其他类。这种方式下，多个线程可以共享一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好的体现了面向对象的思想。\n`缺点`\n编程稍微复杂一些，如果需要访问当前线程，则必须使用\nThread.currentThread()方法\n\n### 采用继承Thread类的方式创建线程的优缺点\n\n`缺点`\n因为线程类已经继承了Thread类，Java语言是单继承的，所以就不能再继承其他父类了。\n\n`优点`\n编写简单，如果需要访问当前线程，则无需使用\nThread.currentThread()方法，直接使用this即可获取当前线程","source":"_posts/Java线程创建全家桶.md","raw":"title: java线程创建全家桶\ntags:\n  - Thread\ncategories:\n  - Java\ndate: 2019-09-16 13:52:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZTJhMWRhM2Q1NGQ3OTgxLmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n## 继承Thread类\n```\n//继承Thread\npublic class ExtendThread extends Thread{\n   //线程执行体\n   @Override\n   public void run() {\n       //do something\n       System.out.println(\"继承Thread创建线程\");\n       //无返回值\n  }\n}\npublic class ThreadCreateDemo {\n   public static void main(String[] args) {\n       //创建一个线程\n       ExtendThread extendThread = new ExtendThread();\n       //调用start方法启动线程\n       extendThread.start();\n        //没有返回值\n  }\n}\n```\n`使用继承Thread类的方法来创建线程类时候，多个线程之间是无法共享线程类的实例变量的。`\n\n## 实现Runnable接口\n\n覆写Runnable接口实现多线程可以避免单继承局限， 当子类实现Runnable接口，此时子类和Thread的代理模式（子类负责真实业务的操作，thread负责资源调度与线程创建辅助真实业务）。\n```\n//实现Runnable接口\npublic class ImplRunnable implements Runnable {\n   //线程实行体\n   @Override\n   public void run() {\n       //do something\n       System.out.println(\"实现Runnable创建线程\");\n       //没有返回值\n  }\n}\npublic class ThreadCreateDemo {\n   public static void main(String[] args) {\n       ImplRunnable implRunnable = new ImplRunnable();\n       Thread thread = new Thread(implRunnable);\n       //启动线程\n       thread.start();\n  }\n}\n```\n`Runnable对象仅仅作为Thread对象的target，Runnable实现类里包含的run方法仅仅作为线程的执行体，而实际的线程对象依旧是Thread实例，只是该Thread线程负责执行器target的方法。`\n\n## 覆写Callable接口\n```\n//实现Callable返回值类型为Integer类型\npublic class ImplCallable implements Callable<Integer> {\n   //该call()方法将作为线程执行体，并且有返回值\n   @Override\n   public Integer call() throws Exception {\n       //do something\n       System.out.println(\"实现Callable接口创建线程，返回类型为Integer类型\");\n       return 999;\n  }\n}\npublic class ThreadCreateDemo {\n   public static void main(String[] args) throws ExecutionException, InterruptedException {\n       Callable<Integer> callable = new ImplCallable();\n       FutureTask<Integer> futureTask = new FutureTask<>(callable);\n       Thread thread = new Thread(futureTask);\n       thread.start();\n       //获取返回值futureTask.get()\n       System.out.println(futureTask.get());\n  }\n}\n```\n`Callable接口有泛型限制，Callable接口里的泛型形参类型与call方法返回值类型相同，而且Callable接口是函数式接口，因此可以使用Lambda表达式创建Callable对象。`\n\n## 三种方式的对比\n\n通过继承Thread类或者实现Runnable接口、Callable接口都可以实现多线程，不过实现Runnable接口与实现Callable接口的方式基本相同，只是Callabl接口里定义的方法返回值，可以声明抛出异常而已。因此将实现Runnable接口和实现Callable接口归为一种方式。这种方式与继承Thread方式之间的主要差别如下。\n\n### 采用实现Runnable、Callable接口的方式创建线程的优缺点\n\n`优点`\n线程类只是实现了Runnable或者Callable接口，还可以继承其他类。这种方式下，多个线程可以共享一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好的体现了面向对象的思想。\n`缺点`\n编程稍微复杂一些，如果需要访问当前线程，则必须使用\nThread.currentThread()方法\n\n### 采用继承Thread类的方式创建线程的优缺点\n\n`缺点`\n因为线程类已经继承了Thread类，Java语言是单继承的，所以就不能再继承其他父类了。\n\n`优点`\n编写简单，如果需要访问当前线程，则无需使用\nThread.currentThread()方法，直接使用this即可获取当前线程","slug":"Java线程创建全家桶","published":1,"updated":"2020-01-01T02:31:03.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwjs000asops3p5shuvn","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZTJhMWRhM2Q1NGQ3OTgxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"继承Thread类\"><a href=\"#继承Thread类\" class=\"headerlink\" title=\"继承Thread类\"></a>继承Thread类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;继承Thread</span><br><span class=\"line\">public class ExtendThread extends Thread&#123;</span><br><span class=\"line\">   &#x2F;&#x2F;线程执行体</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public void run() &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;do something</span><br><span class=\"line\">       System.out.println(&quot;继承Thread创建线程&quot;);</span><br><span class=\"line\">       &#x2F;&#x2F;无返回值</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class ThreadCreateDemo &#123;</span><br><span class=\"line\">   public static void main(String[] args) &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;创建一个线程</span><br><span class=\"line\">       ExtendThread extendThread &#x3D; new ExtendThread();</span><br><span class=\"line\">       &#x2F;&#x2F;调用start方法启动线程</span><br><span class=\"line\">       extendThread.start();</span><br><span class=\"line\">        &#x2F;&#x2F;没有返回值</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>使用继承Thread类的方法来创建线程类时候，多个线程之间是无法共享线程类的实例变量的。</code></p>\n<h2 id=\"实现Runnable接口\"><a href=\"#实现Runnable接口\" class=\"headerlink\" title=\"实现Runnable接口\"></a>实现Runnable接口</h2><p>覆写Runnable接口实现多线程可以避免单继承局限， 当子类实现Runnable接口，此时子类和Thread的代理模式（子类负责真实业务的操作，thread负责资源调度与线程创建辅助真实业务）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;实现Runnable接口</span><br><span class=\"line\">public class ImplRunnable implements Runnable &#123;</span><br><span class=\"line\">   &#x2F;&#x2F;线程实行体</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public void run() &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;do something</span><br><span class=\"line\">       System.out.println(&quot;实现Runnable创建线程&quot;);</span><br><span class=\"line\">       &#x2F;&#x2F;没有返回值</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class ThreadCreateDemo &#123;</span><br><span class=\"line\">   public static void main(String[] args) &#123;</span><br><span class=\"line\">       ImplRunnable implRunnable &#x3D; new ImplRunnable();</span><br><span class=\"line\">       Thread thread &#x3D; new Thread(implRunnable);</span><br><span class=\"line\">       &#x2F;&#x2F;启动线程</span><br><span class=\"line\">       thread.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Runnable对象仅仅作为Thread对象的target，Runnable实现类里包含的run方法仅仅作为线程的执行体，而实际的线程对象依旧是Thread实例，只是该Thread线程负责执行器target的方法。</code></p>\n<h2 id=\"覆写Callable接口\"><a href=\"#覆写Callable接口\" class=\"headerlink\" title=\"覆写Callable接口\"></a>覆写Callable接口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;实现Callable返回值类型为Integer类型</span><br><span class=\"line\">public class ImplCallable implements Callable&lt;Integer&gt; &#123;</span><br><span class=\"line\">   &#x2F;&#x2F;该call()方法将作为线程执行体，并且有返回值</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public Integer call() throws Exception &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;do something</span><br><span class=\"line\">       System.out.println(&quot;实现Callable接口创建线程，返回类型为Integer类型&quot;);</span><br><span class=\"line\">       return 999;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class ThreadCreateDemo &#123;</span><br><span class=\"line\">   public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">       Callable&lt;Integer&gt; callable &#x3D; new ImplCallable();</span><br><span class=\"line\">       FutureTask&lt;Integer&gt; futureTask &#x3D; new FutureTask&lt;&gt;(callable);</span><br><span class=\"line\">       Thread thread &#x3D; new Thread(futureTask);</span><br><span class=\"line\">       thread.start();</span><br><span class=\"line\">       &#x2F;&#x2F;获取返回值futureTask.get()</span><br><span class=\"line\">       System.out.println(futureTask.get());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Callable接口有泛型限制，Callable接口里的泛型形参类型与call方法返回值类型相同，而且Callable接口是函数式接口，因此可以使用Lambda表达式创建Callable对象。</code></p>\n<h2 id=\"三种方式的对比\"><a href=\"#三种方式的对比\" class=\"headerlink\" title=\"三种方式的对比\"></a>三种方式的对比</h2><p>通过继承Thread类或者实现Runnable接口、Callable接口都可以实现多线程，不过实现Runnable接口与实现Callable接口的方式基本相同，只是Callabl接口里定义的方法返回值，可以声明抛出异常而已。因此将实现Runnable接口和实现Callable接口归为一种方式。这种方式与继承Thread方式之间的主要差别如下。</p>\n<h3 id=\"采用实现Runnable、Callable接口的方式创建线程的优缺点\"><a href=\"#采用实现Runnable、Callable接口的方式创建线程的优缺点\" class=\"headerlink\" title=\"采用实现Runnable、Callable接口的方式创建线程的优缺点\"></a>采用实现Runnable、Callable接口的方式创建线程的优缺点</h3><p><code>优点</code><br>线程类只是实现了Runnable或者Callable接口，还可以继承其他类。这种方式下，多个线程可以共享一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好的体现了面向对象的思想。<br><code>缺点</code><br>编程稍微复杂一些，如果需要访问当前线程，则必须使用<br>Thread.currentThread()方法</p>\n<h3 id=\"采用继承Thread类的方式创建线程的优缺点\"><a href=\"#采用继承Thread类的方式创建线程的优缺点\" class=\"headerlink\" title=\"采用继承Thread类的方式创建线程的优缺点\"></a>采用继承Thread类的方式创建线程的优缺点</h3><p><code>缺点</code><br>因为线程类已经继承了Thread类，Java语言是单继承的，所以就不能再继承其他父类了。</p>\n<p><code>优点</code><br>编写简单，如果需要访问当前线程，则无需使用<br>Thread.currentThread()方法，直接使用this即可获取当前线程</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZTJhMWRhM2Q1NGQ3OTgxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"继承Thread类\"><a href=\"#继承Thread类\" class=\"headerlink\" title=\"继承Thread类\"></a>继承Thread类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;继承Thread</span><br><span class=\"line\">public class ExtendThread extends Thread&#123;</span><br><span class=\"line\">   &#x2F;&#x2F;线程执行体</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public void run() &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;do something</span><br><span class=\"line\">       System.out.println(&quot;继承Thread创建线程&quot;);</span><br><span class=\"line\">       &#x2F;&#x2F;无返回值</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class ThreadCreateDemo &#123;</span><br><span class=\"line\">   public static void main(String[] args) &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;创建一个线程</span><br><span class=\"line\">       ExtendThread extendThread &#x3D; new ExtendThread();</span><br><span class=\"line\">       &#x2F;&#x2F;调用start方法启动线程</span><br><span class=\"line\">       extendThread.start();</span><br><span class=\"line\">        &#x2F;&#x2F;没有返回值</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>使用继承Thread类的方法来创建线程类时候，多个线程之间是无法共享线程类的实例变量的。</code></p>\n<h2 id=\"实现Runnable接口\"><a href=\"#实现Runnable接口\" class=\"headerlink\" title=\"实现Runnable接口\"></a>实现Runnable接口</h2><p>覆写Runnable接口实现多线程可以避免单继承局限， 当子类实现Runnable接口，此时子类和Thread的代理模式（子类负责真实业务的操作，thread负责资源调度与线程创建辅助真实业务）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;实现Runnable接口</span><br><span class=\"line\">public class ImplRunnable implements Runnable &#123;</span><br><span class=\"line\">   &#x2F;&#x2F;线程实行体</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public void run() &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;do something</span><br><span class=\"line\">       System.out.println(&quot;实现Runnable创建线程&quot;);</span><br><span class=\"line\">       &#x2F;&#x2F;没有返回值</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class ThreadCreateDemo &#123;</span><br><span class=\"line\">   public static void main(String[] args) &#123;</span><br><span class=\"line\">       ImplRunnable implRunnable &#x3D; new ImplRunnable();</span><br><span class=\"line\">       Thread thread &#x3D; new Thread(implRunnable);</span><br><span class=\"line\">       &#x2F;&#x2F;启动线程</span><br><span class=\"line\">       thread.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Runnable对象仅仅作为Thread对象的target，Runnable实现类里包含的run方法仅仅作为线程的执行体，而实际的线程对象依旧是Thread实例，只是该Thread线程负责执行器target的方法。</code></p>\n<h2 id=\"覆写Callable接口\"><a href=\"#覆写Callable接口\" class=\"headerlink\" title=\"覆写Callable接口\"></a>覆写Callable接口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;实现Callable返回值类型为Integer类型</span><br><span class=\"line\">public class ImplCallable implements Callable&lt;Integer&gt; &#123;</span><br><span class=\"line\">   &#x2F;&#x2F;该call()方法将作为线程执行体，并且有返回值</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public Integer call() throws Exception &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;do something</span><br><span class=\"line\">       System.out.println(&quot;实现Callable接口创建线程，返回类型为Integer类型&quot;);</span><br><span class=\"line\">       return 999;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class ThreadCreateDemo &#123;</span><br><span class=\"line\">   public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">       Callable&lt;Integer&gt; callable &#x3D; new ImplCallable();</span><br><span class=\"line\">       FutureTask&lt;Integer&gt; futureTask &#x3D; new FutureTask&lt;&gt;(callable);</span><br><span class=\"line\">       Thread thread &#x3D; new Thread(futureTask);</span><br><span class=\"line\">       thread.start();</span><br><span class=\"line\">       &#x2F;&#x2F;获取返回值futureTask.get()</span><br><span class=\"line\">       System.out.println(futureTask.get());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Callable接口有泛型限制，Callable接口里的泛型形参类型与call方法返回值类型相同，而且Callable接口是函数式接口，因此可以使用Lambda表达式创建Callable对象。</code></p>\n<h2 id=\"三种方式的对比\"><a href=\"#三种方式的对比\" class=\"headerlink\" title=\"三种方式的对比\"></a>三种方式的对比</h2><p>通过继承Thread类或者实现Runnable接口、Callable接口都可以实现多线程，不过实现Runnable接口与实现Callable接口的方式基本相同，只是Callabl接口里定义的方法返回值，可以声明抛出异常而已。因此将实现Runnable接口和实现Callable接口归为一种方式。这种方式与继承Thread方式之间的主要差别如下。</p>\n<h3 id=\"采用实现Runnable、Callable接口的方式创建线程的优缺点\"><a href=\"#采用实现Runnable、Callable接口的方式创建线程的优缺点\" class=\"headerlink\" title=\"采用实现Runnable、Callable接口的方式创建线程的优缺点\"></a>采用实现Runnable、Callable接口的方式创建线程的优缺点</h3><p><code>优点</code><br>线程类只是实现了Runnable或者Callable接口，还可以继承其他类。这种方式下，多个线程可以共享一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好的体现了面向对象的思想。<br><code>缺点</code><br>编程稍微复杂一些，如果需要访问当前线程，则必须使用<br>Thread.currentThread()方法</p>\n<h3 id=\"采用继承Thread类的方式创建线程的优缺点\"><a href=\"#采用继承Thread类的方式创建线程的优缺点\" class=\"headerlink\" title=\"采用继承Thread类的方式创建线程的优缺点\"></a>采用继承Thread类的方式创建线程的优缺点</h3><p><code>缺点</code><br>因为线程类已经继承了Thread类，Java语言是单继承的，所以就不能再继承其他父类了。</p>\n<p><code>优点</code><br>编写简单，如果需要访问当前线程，则无需使用<br>Thread.currentThread()方法，直接使用this即可获取当前线程</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZTJhMWRhM2Q1NGQ3OTgxLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 10:31:03 GMT+0800 (GMT+08:00)","title":"java线程创建全家桶","path":"2019/09/16/Java线程创建全家桶/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZTJhMWRhM2Q1NGQ3OTgxLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mZTJhMWRhM2Q1NGQ3OTgxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-09-16T05:52:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Thread"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"shiro 加密登录 密码加盐处理","date":"2019-07-26T03:25:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYTgzZWZhMTJhZGI5MzAxLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n密码加密登录是为了提高系统安全性，即使是管理员查看数据库也得不到密码\n使用shiro可以很轻松的完成加密及登录操作\n\n## 1.加密工具\n\n`此工具用于注册时对密码进行加密`\n```\npublic static final String md5(String password, String salt){\n    //加密方式\n    String hashAlgorithmName = \"MD5\";\n    //盐：为了即使相同的密码不同的盐加密后的结果也不同\n    ByteSource byteSalt = ByteSource.Util.bytes(salt);\n    //密码\n    Object source = password;\n    //加密次数\n    int hashIterations = 1024;\n    SimpleHash result = new SimpleHash(hashAlgorithmName, source, byteSalt, hashIterations);\n    return result.toString();\n}\n```\n`测试一下`\n```\npublic static void main(String[] args) {\n    String password = md5(\"123456\", \"WHLH\");\n    System.out.println(password);\n    //加密后的结果\n    //3bcbb857c763d1429a24959cb8de2593\n}\n```\n## 2.使用shiro登录\n`Realm类`\n```\n@Override\nprotected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) {\n    UsernamePasswordToken token=(UsernamePasswordToken) authenticationToken;\n    String username = token.getUsername();\n    //查询用户信息\n    User user=userService.findByUsername(username);\n    //取出盐并编码\n    ByteSource salt = ByteSource.Util.bytes(user.getSalt());\n    return new SimpleAuthenticationInfo(username, user.getPassword(),salt, getName());\n}\n```\n## 3.修改自定义realm配置\n\n`加密算法和加密次数要和加密工具参数保持一致`\n```\n<bean id=\"myRealm\" class=\"cn.jaffreyen.web.shiro.MyRealm\">\n    <property name=\"credentialsMatcher\">\n        <bean class=\"org.apache.shiro.authc.credential.HashedCredentialsMatcher\">\n            <!-- 加密算法 -->\n            <property name=\"hashAlgorithmName\" value=\"MD5\"></property>\n            <!-- 加密次数 -->\n            <property name=\"hashIterations\" value=\"1024\"></property>\n        </bean>\n    </property>\n</bean>\n```","source":"_posts/shiro-加密登录-密码加盐处理.md","raw":"title: shiro 加密登录 密码加盐处理\ntags:\n  - shiro\ncategories:\n  - Java\ndate: 2019-07-26 11:25:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYTgzZWZhMTJhZGI5MzAxLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n密码加密登录是为了提高系统安全性，即使是管理员查看数据库也得不到密码\n使用shiro可以很轻松的完成加密及登录操作\n\n## 1.加密工具\n\n`此工具用于注册时对密码进行加密`\n```\npublic static final String md5(String password, String salt){\n    //加密方式\n    String hashAlgorithmName = \"MD5\";\n    //盐：为了即使相同的密码不同的盐加密后的结果也不同\n    ByteSource byteSalt = ByteSource.Util.bytes(salt);\n    //密码\n    Object source = password;\n    //加密次数\n    int hashIterations = 1024;\n    SimpleHash result = new SimpleHash(hashAlgorithmName, source, byteSalt, hashIterations);\n    return result.toString();\n}\n```\n`测试一下`\n```\npublic static void main(String[] args) {\n    String password = md5(\"123456\", \"WHLH\");\n    System.out.println(password);\n    //加密后的结果\n    //3bcbb857c763d1429a24959cb8de2593\n}\n```\n## 2.使用shiro登录\n`Realm类`\n```\n@Override\nprotected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) {\n    UsernamePasswordToken token=(UsernamePasswordToken) authenticationToken;\n    String username = token.getUsername();\n    //查询用户信息\n    User user=userService.findByUsername(username);\n    //取出盐并编码\n    ByteSource salt = ByteSource.Util.bytes(user.getSalt());\n    return new SimpleAuthenticationInfo(username, user.getPassword(),salt, getName());\n}\n```\n## 3.修改自定义realm配置\n\n`加密算法和加密次数要和加密工具参数保持一致`\n```\n<bean id=\"myRealm\" class=\"cn.jaffreyen.web.shiro.MyRealm\">\n    <property name=\"credentialsMatcher\">\n        <bean class=\"org.apache.shiro.authc.credential.HashedCredentialsMatcher\">\n            <!-- 加密算法 -->\n            <property name=\"hashAlgorithmName\" value=\"MD5\"></property>\n            <!-- 加密次数 -->\n            <property name=\"hashIterations\" value=\"1024\"></property>\n        </bean>\n    </property>\n</bean>\n```","slug":"shiro-加密登录-密码加盐处理","published":1,"updated":"2020-01-01T02:31:11.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwjt000bsopshdlmhlmi","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYTgzZWZhMTJhZGI5MzAxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<p>密码加密登录是为了提高系统安全性，即使是管理员查看数据库也得不到密码<br>使用shiro可以很轻松的完成加密及登录操作</p>\n<h2 id=\"1-加密工具\"><a href=\"#1-加密工具\" class=\"headerlink\" title=\"1.加密工具\"></a>1.加密工具</h2><p><code>此工具用于注册时对密码进行加密</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final String md5(String password, String salt)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;加密方式</span><br><span class=\"line\">    String hashAlgorithmName &#x3D; &quot;MD5&quot;;</span><br><span class=\"line\">    &#x2F;&#x2F;盐：为了即使相同的密码不同的盐加密后的结果也不同</span><br><span class=\"line\">    ByteSource byteSalt &#x3D; ByteSource.Util.bytes(salt);</span><br><span class=\"line\">    &#x2F;&#x2F;密码</span><br><span class=\"line\">    Object source &#x3D; password;</span><br><span class=\"line\">    &#x2F;&#x2F;加密次数</span><br><span class=\"line\">    int hashIterations &#x3D; 1024;</span><br><span class=\"line\">    SimpleHash result &#x3D; new SimpleHash(hashAlgorithmName, source, byteSalt, hashIterations);</span><br><span class=\"line\">    return result.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>测试一下</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    String password &#x3D; md5(&quot;123456&quot;, &quot;WHLH&quot;);</span><br><span class=\"line\">    System.out.println(password);</span><br><span class=\"line\">    &#x2F;&#x2F;加密后的结果</span><br><span class=\"line\">    &#x2F;&#x2F;3bcbb857c763d1429a24959cb8de2593</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-使用shiro登录\"><a href=\"#2-使用shiro登录\" class=\"headerlink\" title=\"2.使用shiro登录\"></a>2.使用shiro登录</h2><p><code>Realm类</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) &#123;</span><br><span class=\"line\">    UsernamePasswordToken token&#x3D;(UsernamePasswordToken) authenticationToken;</span><br><span class=\"line\">    String username &#x3D; token.getUsername();</span><br><span class=\"line\">    &#x2F;&#x2F;查询用户信息</span><br><span class=\"line\">    User user&#x3D;userService.findByUsername(username);</span><br><span class=\"line\">    &#x2F;&#x2F;取出盐并编码</span><br><span class=\"line\">    ByteSource salt &#x3D; ByteSource.Util.bytes(user.getSalt());</span><br><span class=\"line\">    return new SimpleAuthenticationInfo(username, user.getPassword(),salt, getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-修改自定义realm配置\"><a href=\"#3-修改自定义realm配置\" class=\"headerlink\" title=\"3.修改自定义realm配置\"></a>3.修改自定义realm配置</h2><p><code>加密算法和加密次数要和加密工具参数保持一致</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id&#x3D;&quot;myRealm&quot; class&#x3D;&quot;cn.jaffreyen.web.shiro.MyRealm&quot;&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;credentialsMatcher&quot;&gt;</span><br><span class=\"line\">        &lt;bean class&#x3D;&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 加密算法 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;hashAlgorithmName&quot; value&#x3D;&quot;MD5&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">            &lt;!-- 加密次数 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;hashIterations&quot; value&#x3D;&quot;1024&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">        &lt;&#x2F;bean&gt;</span><br><span class=\"line\">    &lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYTgzZWZhMTJhZGI5MzAxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<p>密码加密登录是为了提高系统安全性，即使是管理员查看数据库也得不到密码<br>使用shiro可以很轻松的完成加密及登录操作</p>\n<h2 id=\"1-加密工具\"><a href=\"#1-加密工具\" class=\"headerlink\" title=\"1.加密工具\"></a>1.加密工具</h2><p><code>此工具用于注册时对密码进行加密</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final String md5(String password, String salt)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;加密方式</span><br><span class=\"line\">    String hashAlgorithmName &#x3D; &quot;MD5&quot;;</span><br><span class=\"line\">    &#x2F;&#x2F;盐：为了即使相同的密码不同的盐加密后的结果也不同</span><br><span class=\"line\">    ByteSource byteSalt &#x3D; ByteSource.Util.bytes(salt);</span><br><span class=\"line\">    &#x2F;&#x2F;密码</span><br><span class=\"line\">    Object source &#x3D; password;</span><br><span class=\"line\">    &#x2F;&#x2F;加密次数</span><br><span class=\"line\">    int hashIterations &#x3D; 1024;</span><br><span class=\"line\">    SimpleHash result &#x3D; new SimpleHash(hashAlgorithmName, source, byteSalt, hashIterations);</span><br><span class=\"line\">    return result.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>测试一下</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    String password &#x3D; md5(&quot;123456&quot;, &quot;WHLH&quot;);</span><br><span class=\"line\">    System.out.println(password);</span><br><span class=\"line\">    &#x2F;&#x2F;加密后的结果</span><br><span class=\"line\">    &#x2F;&#x2F;3bcbb857c763d1429a24959cb8de2593</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-使用shiro登录\"><a href=\"#2-使用shiro登录\" class=\"headerlink\" title=\"2.使用shiro登录\"></a>2.使用shiro登录</h2><p><code>Realm类</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) &#123;</span><br><span class=\"line\">    UsernamePasswordToken token&#x3D;(UsernamePasswordToken) authenticationToken;</span><br><span class=\"line\">    String username &#x3D; token.getUsername();</span><br><span class=\"line\">    &#x2F;&#x2F;查询用户信息</span><br><span class=\"line\">    User user&#x3D;userService.findByUsername(username);</span><br><span class=\"line\">    &#x2F;&#x2F;取出盐并编码</span><br><span class=\"line\">    ByteSource salt &#x3D; ByteSource.Util.bytes(user.getSalt());</span><br><span class=\"line\">    return new SimpleAuthenticationInfo(username, user.getPassword(),salt, getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-修改自定义realm配置\"><a href=\"#3-修改自定义realm配置\" class=\"headerlink\" title=\"3.修改自定义realm配置\"></a>3.修改自定义realm配置</h2><p><code>加密算法和加密次数要和加密工具参数保持一致</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id&#x3D;&quot;myRealm&quot; class&#x3D;&quot;cn.jaffreyen.web.shiro.MyRealm&quot;&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;credentialsMatcher&quot;&gt;</span><br><span class=\"line\">        &lt;bean class&#x3D;&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 加密算法 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;hashAlgorithmName&quot; value&#x3D;&quot;MD5&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">            &lt;!-- 加密次数 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;hashIterations&quot; value&#x3D;&quot;1024&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">        &lt;&#x2F;bean&gt;</span><br><span class=\"line\">    &lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYTgzZWZhMTJhZGI5MzAxLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 10:31:11 GMT+0800 (GMT+08:00)","title":"shiro 加密登录 密码加盐处理","path":"2019/07/26/shiro-加密登录-密码加盐处理/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYTgzZWZhMTJhZGI5MzAxLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYTgzZWZhMTJhZGI5MzAxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-07-26T03:25:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["shiro"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"SpringBoot使用Undertow代替tomcat","date":"2019-08-14T07:56:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjUyMDhkMjE4MzkyODkwLnBuZw?x-oss-process=image/format,png)\n<!-- more -->\n\n>Undertow 是基于java nio的web服务器，应用比较广泛，内置提供的PathResourceManager，可以用来直接访问文件系统；如果你有文件需要对外提供访问，除了ftp,nginx等，undertow 也是一个不错的选择，作为java开发，服务搭建非常简便\n\n## Undertow使用\n### 依赖\nspring boot内嵌容器默认为tomcat，想要换成undertow，非常容易，只需修改spring-boot-starter-web依赖，移除tomcat的依赖：\n```\n    <dependency>  \n        <groupId>org.springframework.boot</groupId>  \n        <artifactId>spring-boot-starter-web</artifactId>  \n        <exclusions>  \n            <exclusion>  \n                <groupId>org.springframework.boot</groupId>  \n                <artifactId>spring-boot-starter-tomcat</artifactId>  \n            </exclusion>  \n        </exclusions>  \n    </dependency>  \n```\n然后，添加undertow依赖\n```\n    <dependency>  \n        <groupId>org.springframework.boot</groupId>  \n        <artifactId>spring-boot-starter-undertow</artifactId>  \n    </dependency>  \n```\n 这样即可，使用默认参数启动undertow服务器。如果需要修改undertow参数，继续往下看。\n\n### undertow的参数设置：\n```\nserver:  \n    port: 8084  \n    http2:  \n        enabled: true  \n    undertow:  \n        io-threads: 16  \n        worker-threads: 256  \n        buffer-size: 1024  \n        buffers-per-region: 1024  \n        direct-buffers: true \n```\nio-threads：IO线程数, 它主要执行非阻塞的任务，它们会负责多个连接，默认设置每个CPU核心一个线程，不可设置过大，否则启动项目会报错：打开文件数过多。\n\n \n\nworker-threads：阻塞任务线程池，当执行类似servlet请求阻塞IO操作，undertow会从这个线程池中取得线程。它的值取决于系统线程执行任务的阻塞系数，默认值是 io-threads*8\n\n \n\n以下配置会影响buffer，这些buffer会用于服务器连接的IO操作，有点类似netty的池化内存管理。\n\nbuffer-size：每块buffer的空间大小，越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可\n\nbuffers-per-region：每个区分配的buffer数量，所以pool的大小是buffer-size * buffers-per-region\n\ndirect-buffers：是否分配的直接内存(NIO直接分配的堆外内存)\n\n## File Server\n```\nimport java.io.File;\n\nimport io.undertow.Handlers;\nimport io.undertow.Undertow;\nimport io.undertow.server.handlers.resource.PathResourceManager;\n\npublic class FileServer {\n    public static void main(String[] args) {\n        File file = new File(\"/\");\n        Undertow server = Undertow.builder().addHttpListener(8080, \"localhost\")\n                .setHandler(Handlers.resource(new PathResourceManager(file.toPath(), 100))\n                        .setDirectoryListingEnabled(true))\n                .build();\n        server.start();\n    }\n}\n```\n好了！运行main函数，打开浏览器访问 http://localhost:8080\n","source":"_posts/SpringBoot使用Undertow代替tomcat.md","raw":"title: SpringBoot使用Undertow代替tomcat\ntags:\n  - SpringBoot\ncategories:\n  - Java\ndate: 2019-08-14 15:56:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjUyMDhkMjE4MzkyODkwLnBuZw?x-oss-process=image/format,png)\n<!-- more -->\n\n>Undertow 是基于java nio的web服务器，应用比较广泛，内置提供的PathResourceManager，可以用来直接访问文件系统；如果你有文件需要对外提供访问，除了ftp,nginx等，undertow 也是一个不错的选择，作为java开发，服务搭建非常简便\n\n## Undertow使用\n### 依赖\nspring boot内嵌容器默认为tomcat，想要换成undertow，非常容易，只需修改spring-boot-starter-web依赖，移除tomcat的依赖：\n```\n    <dependency>  \n        <groupId>org.springframework.boot</groupId>  \n        <artifactId>spring-boot-starter-web</artifactId>  \n        <exclusions>  \n            <exclusion>  \n                <groupId>org.springframework.boot</groupId>  \n                <artifactId>spring-boot-starter-tomcat</artifactId>  \n            </exclusion>  \n        </exclusions>  \n    </dependency>  \n```\n然后，添加undertow依赖\n```\n    <dependency>  \n        <groupId>org.springframework.boot</groupId>  \n        <artifactId>spring-boot-starter-undertow</artifactId>  \n    </dependency>  \n```\n 这样即可，使用默认参数启动undertow服务器。如果需要修改undertow参数，继续往下看。\n\n### undertow的参数设置：\n```\nserver:  \n    port: 8084  \n    http2:  \n        enabled: true  \n    undertow:  \n        io-threads: 16  \n        worker-threads: 256  \n        buffer-size: 1024  \n        buffers-per-region: 1024  \n        direct-buffers: true \n```\nio-threads：IO线程数, 它主要执行非阻塞的任务，它们会负责多个连接，默认设置每个CPU核心一个线程，不可设置过大，否则启动项目会报错：打开文件数过多。\n\n \n\nworker-threads：阻塞任务线程池，当执行类似servlet请求阻塞IO操作，undertow会从这个线程池中取得线程。它的值取决于系统线程执行任务的阻塞系数，默认值是 io-threads*8\n\n \n\n以下配置会影响buffer，这些buffer会用于服务器连接的IO操作，有点类似netty的池化内存管理。\n\nbuffer-size：每块buffer的空间大小，越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可\n\nbuffers-per-region：每个区分配的buffer数量，所以pool的大小是buffer-size * buffers-per-region\n\ndirect-buffers：是否分配的直接内存(NIO直接分配的堆外内存)\n\n## File Server\n```\nimport java.io.File;\n\nimport io.undertow.Handlers;\nimport io.undertow.Undertow;\nimport io.undertow.server.handlers.resource.PathResourceManager;\n\npublic class FileServer {\n    public static void main(String[] args) {\n        File file = new File(\"/\");\n        Undertow server = Undertow.builder().addHttpListener(8080, \"localhost\")\n                .setHandler(Handlers.resource(new PathResourceManager(file.toPath(), 100))\n                        .setDirectoryListingEnabled(true))\n                .build();\n        server.start();\n    }\n}\n```\n好了！运行main函数，打开浏览器访问 http://localhost:8080\n","slug":"SpringBoot使用Undertow代替tomcat","published":1,"updated":"2020-01-01T02:31:35.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwjv000fsopse5sx5dg4","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjUyMDhkMjE4MzkyODkwLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>Undertow 是基于java nio的web服务器，应用比较广泛，内置提供的PathResourceManager，可以用来直接访问文件系统；如果你有文件需要对外提供访问，除了ftp,nginx等，undertow 也是一个不错的选择，作为java开发，服务搭建非常简便</p>\n</blockquote>\n<h2 id=\"Undertow使用\"><a href=\"#Undertow使用\" class=\"headerlink\" title=\"Undertow使用\"></a>Undertow使用</h2><h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><p>spring boot内嵌容器默认为tomcat，想要换成undertow，非常容易，只需修改spring-boot-starter-web依赖，移除tomcat的依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;  </span><br><span class=\"line\">    &lt;exclusions&gt;  </span><br><span class=\"line\">        &lt;exclusion&gt;  </span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;  </span><br><span class=\"line\">        &lt;&#x2F;exclusion&gt;  </span><br><span class=\"line\">    &lt;&#x2F;exclusions&gt;  </span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>然后，添加undertow依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;  </span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p> 这样即可，使用默认参数启动undertow服务器。如果需要修改undertow参数，继续往下看。</p>\n<h3 id=\"undertow的参数设置：\"><a href=\"#undertow的参数设置：\" class=\"headerlink\" title=\"undertow的参数设置：\"></a>undertow的参数设置：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:  </span><br><span class=\"line\">    port: 8084  </span><br><span class=\"line\">    http2:  </span><br><span class=\"line\">        enabled: true  </span><br><span class=\"line\">    undertow:  </span><br><span class=\"line\">        io-threads: 16  </span><br><span class=\"line\">        worker-threads: 256  </span><br><span class=\"line\">        buffer-size: 1024  </span><br><span class=\"line\">        buffers-per-region: 1024  </span><br><span class=\"line\">        direct-buffers: true</span><br></pre></td></tr></table></figure>\n<p>io-threads：IO线程数, 它主要执行非阻塞的任务，它们会负责多个连接，默认设置每个CPU核心一个线程，不可设置过大，否则启动项目会报错：打开文件数过多。</p>\n<p>worker-threads：阻塞任务线程池，当执行类似servlet请求阻塞IO操作，undertow会从这个线程池中取得线程。它的值取决于系统线程执行任务的阻塞系数，默认值是 io-threads*8</p>\n<p>以下配置会影响buffer，这些buffer会用于服务器连接的IO操作，有点类似netty的池化内存管理。</p>\n<p>buffer-size：每块buffer的空间大小，越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可</p>\n<p>buffers-per-region：每个区分配的buffer数量，所以pool的大小是buffer-size * buffers-per-region</p>\n<p>direct-buffers：是否分配的直接内存(NIO直接分配的堆外内存)</p>\n<h2 id=\"File-Server\"><a href=\"#File-Server\" class=\"headerlink\" title=\"File Server\"></a>File Server</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.undertow.Handlers;</span><br><span class=\"line\">import io.undertow.Undertow;</span><br><span class=\"line\">import io.undertow.server.handlers.resource.PathResourceManager;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FileServer &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        File file &#x3D; new File(&quot;&#x2F;&quot;);</span><br><span class=\"line\">        Undertow server &#x3D; Undertow.builder().addHttpListener(8080, &quot;localhost&quot;)</span><br><span class=\"line\">                .setHandler(Handlers.resource(new PathResourceManager(file.toPath(), 100))</span><br><span class=\"line\">                        .setDirectoryListingEnabled(true))</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        server.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了！运行main函数，打开浏览器访问 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjUyMDhkMjE4MzkyODkwLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<blockquote>\n<p>Undertow 是基于java nio的web服务器，应用比较广泛，内置提供的PathResourceManager，可以用来直接访问文件系统；如果你有文件需要对外提供访问，除了ftp,nginx等，undertow 也是一个不错的选择，作为java开发，服务搭建非常简便</p>\n</blockquote>\n<h2 id=\"Undertow使用\"><a href=\"#Undertow使用\" class=\"headerlink\" title=\"Undertow使用\"></a>Undertow使用</h2><h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><p>spring boot内嵌容器默认为tomcat，想要换成undertow，非常容易，只需修改spring-boot-starter-web依赖，移除tomcat的依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;  </span><br><span class=\"line\">    &lt;exclusions&gt;  </span><br><span class=\"line\">        &lt;exclusion&gt;  </span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;  </span><br><span class=\"line\">        &lt;&#x2F;exclusion&gt;  </span><br><span class=\"line\">    &lt;&#x2F;exclusions&gt;  </span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>然后，添加undertow依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;  </span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p> 这样即可，使用默认参数启动undertow服务器。如果需要修改undertow参数，继续往下看。</p>\n<h3 id=\"undertow的参数设置：\"><a href=\"#undertow的参数设置：\" class=\"headerlink\" title=\"undertow的参数设置：\"></a>undertow的参数设置：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:  </span><br><span class=\"line\">    port: 8084  </span><br><span class=\"line\">    http2:  </span><br><span class=\"line\">        enabled: true  </span><br><span class=\"line\">    undertow:  </span><br><span class=\"line\">        io-threads: 16  </span><br><span class=\"line\">        worker-threads: 256  </span><br><span class=\"line\">        buffer-size: 1024  </span><br><span class=\"line\">        buffers-per-region: 1024  </span><br><span class=\"line\">        direct-buffers: true</span><br></pre></td></tr></table></figure>\n<p>io-threads：IO线程数, 它主要执行非阻塞的任务，它们会负责多个连接，默认设置每个CPU核心一个线程，不可设置过大，否则启动项目会报错：打开文件数过多。</p>\n<p>worker-threads：阻塞任务线程池，当执行类似servlet请求阻塞IO操作，undertow会从这个线程池中取得线程。它的值取决于系统线程执行任务的阻塞系数，默认值是 io-threads*8</p>\n<p>以下配置会影响buffer，这些buffer会用于服务器连接的IO操作，有点类似netty的池化内存管理。</p>\n<p>buffer-size：每块buffer的空间大小，越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可</p>\n<p>buffers-per-region：每个区分配的buffer数量，所以pool的大小是buffer-size * buffers-per-region</p>\n<p>direct-buffers：是否分配的直接内存(NIO直接分配的堆外内存)</p>\n<h2 id=\"File-Server\"><a href=\"#File-Server\" class=\"headerlink\" title=\"File Server\"></a>File Server</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.undertow.Handlers;</span><br><span class=\"line\">import io.undertow.Undertow;</span><br><span class=\"line\">import io.undertow.server.handlers.resource.PathResourceManager;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FileServer &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        File file &#x3D; new File(&quot;&#x2F;&quot;);</span><br><span class=\"line\">        Undertow server &#x3D; Undertow.builder().addHttpListener(8080, &quot;localhost&quot;)</span><br><span class=\"line\">                .setHandler(Handlers.resource(new PathResourceManager(file.toPath(), 100))</span><br><span class=\"line\">                        .setDirectoryListingEnabled(true))</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        server.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了！运行main函数，打开浏览器访问 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjUyMDhkMjE4MzkyODkwLnBuZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 10:31:35 GMT+0800 (GMT+08:00)","title":"SpringBoot使用Undertow代替tomcat","path":"2019/08/14/SpringBoot使用Undertow代替tomcat/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjUyMDhkMjE4MzkyODkwLnBuZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YjUyMDhkMjE4MzkyODkwLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-08-14T07:56:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["SpringBoot"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"springboot逆向工程","date":"2019-07-27T01:45:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zNGY4NTg2MWVlNjI0NWExLmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n通过逆向工程少写很多代码\n## generatorConfig.xml\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <!--mysql 连接数据库jar 这里选择自己本地位置-->\n    <classPathEntry location=\"C:\\Users\\Administrator\\.m2\\repository\\mysql\\mysql-connector-java\\5.1.21\\mysql-connector-java-5.1.21.jar\" />\n    <context id=\"testTables\" targetRuntime=\"MyBatis3\">\n        <commentGenerator>\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\n            <property name=\"suppressAllComments\" value=\"true\" />\n        </commentGenerator>\n        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->\n        <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/oa\" userId=\"root\"\n                        password=\"\">\n        </jdbcConnection>\n        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和\n           NUMERIC 类型解析为java.math.BigDecimal -->\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\" />\n        </javaTypeResolver>\n\n        <!-- targetProject:生成PO类的位置 -->\n        <javaModelGenerator targetPackage=\"com.yj.oa.project.po\"\n                            targetProject=\"src/test/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n            <!-- 从数据库返回的值被清理前后的空格 -->\n            <property name=\"trimStrings\" value=\"true\" />\n        </javaModelGenerator>\n        <!-- targetProject:mapper映射文件生成的位置\n           如果maven工程只是单独的一个工程，targetProject=\"src/main/java\"\n           若果maven工程是分模块的工程，targetProject=\"所属模块的名称\"，例如：\n           targetProject=\"ecps-manager-mapper\"，下同-->\n        <sqlMapGenerator targetPackage=\"mapper\"\n                         targetProject=\"src/test/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n        </sqlMapGenerator>\n        <!-- targetPackage：mapper接口生成的位置 -->\n        <javaClientGenerator type=\"XMLMAPPER\"\n                             targetPackage=\"com.yj.oa.project.mapper\"\n                             targetProject=\"src/test/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n        </javaClientGenerator>\n        <!-- 指定数据库表 -->\n        <table tableName=\"t_overtimeform\" domainObjectName=\"OvertimeForm\" enableCountByExample=\"false\"\n               enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n    </context>\n</generatorConfiguration>\n\n```\n\n## pom.xml\n\n```\n<plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.3.2</version>\n                <configuration> <!--配置文件的位置-->\n                    <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>\n                    <verbose>true</verbose>\n                    <overwrite>true</overwrite>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>Generate MyBatis Artifacts</id>\n                        <goals>\n                            <goal>generate</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.mybatis.generator</groupId>\n                        <artifactId>mybatis-generator-core</artifactId>\n                        <version>1.3.2</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n\n```","source":"_posts/springboot逆向工程.md","raw":"title: springboot逆向工程\ntags:\n  - SpringBoot\ncategories:\n  - Java\ndate: 2019-07-27 09:45:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zNGY4NTg2MWVlNjI0NWExLmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n通过逆向工程少写很多代码\n## generatorConfig.xml\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <!--mysql 连接数据库jar 这里选择自己本地位置-->\n    <classPathEntry location=\"C:\\Users\\Administrator\\.m2\\repository\\mysql\\mysql-connector-java\\5.1.21\\mysql-connector-java-5.1.21.jar\" />\n    <context id=\"testTables\" targetRuntime=\"MyBatis3\">\n        <commentGenerator>\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\n            <property name=\"suppressAllComments\" value=\"true\" />\n        </commentGenerator>\n        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->\n        <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/oa\" userId=\"root\"\n                        password=\"\">\n        </jdbcConnection>\n        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和\n           NUMERIC 类型解析为java.math.BigDecimal -->\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\" />\n        </javaTypeResolver>\n\n        <!-- targetProject:生成PO类的位置 -->\n        <javaModelGenerator targetPackage=\"com.yj.oa.project.po\"\n                            targetProject=\"src/test/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n            <!-- 从数据库返回的值被清理前后的空格 -->\n            <property name=\"trimStrings\" value=\"true\" />\n        </javaModelGenerator>\n        <!-- targetProject:mapper映射文件生成的位置\n           如果maven工程只是单独的一个工程，targetProject=\"src/main/java\"\n           若果maven工程是分模块的工程，targetProject=\"所属模块的名称\"，例如：\n           targetProject=\"ecps-manager-mapper\"，下同-->\n        <sqlMapGenerator targetPackage=\"mapper\"\n                         targetProject=\"src/test/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n        </sqlMapGenerator>\n        <!-- targetPackage：mapper接口生成的位置 -->\n        <javaClientGenerator type=\"XMLMAPPER\"\n                             targetPackage=\"com.yj.oa.project.mapper\"\n                             targetProject=\"src/test/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n        </javaClientGenerator>\n        <!-- 指定数据库表 -->\n        <table tableName=\"t_overtimeform\" domainObjectName=\"OvertimeForm\" enableCountByExample=\"false\"\n               enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n    </context>\n</generatorConfiguration>\n\n```\n\n## pom.xml\n\n```\n<plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.3.2</version>\n                <configuration> <!--配置文件的位置-->\n                    <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>\n                    <verbose>true</verbose>\n                    <overwrite>true</overwrite>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>Generate MyBatis Artifacts</id>\n                        <goals>\n                            <goal>generate</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.mybatis.generator</groupId>\n                        <artifactId>mybatis-generator-core</artifactId>\n                        <version>1.3.2</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n\n```","slug":"springboot逆向工程","published":1,"updated":"2020-01-01T02:31:27.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwjw000hsopscox0feei","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zNGY4NTg2MWVlNjI0NWExLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<p>通过逆向工程少写很多代码</p>\n<h2 id=\"generatorConfig-xml\"><a href=\"#generatorConfig-xml\" class=\"headerlink\" title=\"generatorConfig.xml\"></a>generatorConfig.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE generatorConfiguration</span><br><span class=\"line\">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot;</span><br><span class=\"line\">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;generatorConfiguration&gt;</span><br><span class=\"line\">    &lt;!--mysql 连接数据库jar 这里选择自己本地位置--&gt;</span><br><span class=\"line\">    &lt;classPathEntry location&#x3D;&quot;C:\\Users\\Administrator\\.m2\\repository\\mysql\\mysql-connector-java\\5.1.21\\mysql-connector-java-5.1.21.jar&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;context id&#x3D;&quot;testTables&quot; targetRuntime&#x3D;&quot;MyBatis3&quot;&gt;</span><br><span class=\"line\">        &lt;commentGenerator&gt;</span><br><span class=\"line\">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;suppressAllComments&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;commentGenerator&gt;</span><br><span class=\"line\">        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span><br><span class=\"line\">        &lt;jdbcConnection driverClass&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class=\"line\">                        connectionURL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;oa&quot; userId&#x3D;&quot;root&quot;</span><br><span class=\"line\">                        password&#x3D;&quot;&quot;&gt;</span><br><span class=\"line\">        &lt;&#x2F;jdbcConnection&gt;</span><br><span class=\"line\">        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span><br><span class=\"line\">           NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br><span class=\"line\">        &lt;javaTypeResolver&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;forceBigDecimals&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;javaTypeResolver&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- targetProject:生成PO类的位置 --&gt;</span><br><span class=\"line\">        &lt;javaModelGenerator targetPackage&#x3D;&quot;com.yj.oa.project.po&quot;</span><br><span class=\"line\">                            targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class=\"line\">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class=\"line\">            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;trimStrings&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;javaModelGenerator&gt;</span><br><span class=\"line\">        &lt;!-- targetProject:mapper映射文件生成的位置</span><br><span class=\"line\">           如果maven工程只是单独的一个工程，targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;</span><br><span class=\"line\">           若果maven工程是分模块的工程，targetProject&#x3D;&quot;所属模块的名称&quot;，例如：</span><br><span class=\"line\">           targetProject&#x3D;&quot;ecps-manager-mapper&quot;，下同--&gt;</span><br><span class=\"line\">        &lt;sqlMapGenerator targetPackage&#x3D;&quot;mapper&quot;</span><br><span class=\"line\">                         targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class=\"line\">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;sqlMapGenerator&gt;</span><br><span class=\"line\">        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span><br><span class=\"line\">        &lt;javaClientGenerator type&#x3D;&quot;XMLMAPPER&quot;</span><br><span class=\"line\">                             targetPackage&#x3D;&quot;com.yj.oa.project.mapper&quot;</span><br><span class=\"line\">                             targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class=\"line\">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;javaClientGenerator&gt;</span><br><span class=\"line\">        &lt;!-- 指定数据库表 --&gt;</span><br><span class=\"line\">        &lt;table tableName&#x3D;&quot;t_overtimeform&quot; domainObjectName&#x3D;&quot;OvertimeForm&quot; enableCountByExample&#x3D;&quot;false&quot;</span><br><span class=\"line\">               enableUpdateByExample&#x3D;&quot;false&quot; enableDeleteByExample&#x3D;&quot;false&quot; enableSelectByExample&#x3D;&quot;false&quot;</span><br><span class=\"line\">               selectByExampleQueryId&#x3D;&quot;false&quot;&gt;&lt;&#x2F;table&gt;</span><br><span class=\"line\">    &lt;&#x2F;context&gt;</span><br><span class=\"line\">&lt;&#x2F;generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">                &lt;configuration&gt; &lt;!--配置文件的位置--&gt;</span><br><span class=\"line\">                    &lt;configurationFile&gt;src&#x2F;main&#x2F;resources&#x2F;generatorConfig.xml&lt;&#x2F;configurationFile&gt;</span><br><span class=\"line\">                    &lt;verbose&gt;true&lt;&#x2F;verbose&gt;</span><br><span class=\"line\">                    &lt;overwrite&gt;true&lt;&#x2F;overwrite&gt;</span><br><span class=\"line\">                &lt;&#x2F;configuration&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;Generate MyBatis Artifacts&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;generate&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">                &lt;dependencies&gt;</span><br><span class=\"line\">                    &lt;dependency&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;mybatis-generator-core&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">                    &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">                &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zNGY4NTg2MWVlNjI0NWExLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<p>通过逆向工程少写很多代码</p>\n<h2 id=\"generatorConfig-xml\"><a href=\"#generatorConfig-xml\" class=\"headerlink\" title=\"generatorConfig.xml\"></a>generatorConfig.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE generatorConfiguration</span><br><span class=\"line\">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot;</span><br><span class=\"line\">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;generatorConfiguration&gt;</span><br><span class=\"line\">    &lt;!--mysql 连接数据库jar 这里选择自己本地位置--&gt;</span><br><span class=\"line\">    &lt;classPathEntry location&#x3D;&quot;C:\\Users\\Administrator\\.m2\\repository\\mysql\\mysql-connector-java\\5.1.21\\mysql-connector-java-5.1.21.jar&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;context id&#x3D;&quot;testTables&quot; targetRuntime&#x3D;&quot;MyBatis3&quot;&gt;</span><br><span class=\"line\">        &lt;commentGenerator&gt;</span><br><span class=\"line\">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;suppressAllComments&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;commentGenerator&gt;</span><br><span class=\"line\">        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span><br><span class=\"line\">        &lt;jdbcConnection driverClass&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class=\"line\">                        connectionURL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;oa&quot; userId&#x3D;&quot;root&quot;</span><br><span class=\"line\">                        password&#x3D;&quot;&quot;&gt;</span><br><span class=\"line\">        &lt;&#x2F;jdbcConnection&gt;</span><br><span class=\"line\">        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span><br><span class=\"line\">           NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br><span class=\"line\">        &lt;javaTypeResolver&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;forceBigDecimals&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;javaTypeResolver&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- targetProject:生成PO类的位置 --&gt;</span><br><span class=\"line\">        &lt;javaModelGenerator targetPackage&#x3D;&quot;com.yj.oa.project.po&quot;</span><br><span class=\"line\">                            targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class=\"line\">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class=\"line\">            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;trimStrings&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;javaModelGenerator&gt;</span><br><span class=\"line\">        &lt;!-- targetProject:mapper映射文件生成的位置</span><br><span class=\"line\">           如果maven工程只是单独的一个工程，targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;</span><br><span class=\"line\">           若果maven工程是分模块的工程，targetProject&#x3D;&quot;所属模块的名称&quot;，例如：</span><br><span class=\"line\">           targetProject&#x3D;&quot;ecps-manager-mapper&quot;，下同--&gt;</span><br><span class=\"line\">        &lt;sqlMapGenerator targetPackage&#x3D;&quot;mapper&quot;</span><br><span class=\"line\">                         targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class=\"line\">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;sqlMapGenerator&gt;</span><br><span class=\"line\">        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span><br><span class=\"line\">        &lt;javaClientGenerator type&#x3D;&quot;XMLMAPPER&quot;</span><br><span class=\"line\">                             targetPackage&#x3D;&quot;com.yj.oa.project.mapper&quot;</span><br><span class=\"line\">                             targetProject&#x3D;&quot;src&#x2F;test&#x2F;java&quot;&gt;</span><br><span class=\"line\">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class=\"line\">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;javaClientGenerator&gt;</span><br><span class=\"line\">        &lt;!-- 指定数据库表 --&gt;</span><br><span class=\"line\">        &lt;table tableName&#x3D;&quot;t_overtimeform&quot; domainObjectName&#x3D;&quot;OvertimeForm&quot; enableCountByExample&#x3D;&quot;false&quot;</span><br><span class=\"line\">               enableUpdateByExample&#x3D;&quot;false&quot; enableDeleteByExample&#x3D;&quot;false&quot; enableSelectByExample&#x3D;&quot;false&quot;</span><br><span class=\"line\">               selectByExampleQueryId&#x3D;&quot;false&quot;&gt;&lt;&#x2F;table&gt;</span><br><span class=\"line\">    &lt;&#x2F;context&gt;</span><br><span class=\"line\">&lt;&#x2F;generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">                &lt;configuration&gt; &lt;!--配置文件的位置--&gt;</span><br><span class=\"line\">                    &lt;configurationFile&gt;src&#x2F;main&#x2F;resources&#x2F;generatorConfig.xml&lt;&#x2F;configurationFile&gt;</span><br><span class=\"line\">                    &lt;verbose&gt;true&lt;&#x2F;verbose&gt;</span><br><span class=\"line\">                    &lt;overwrite&gt;true&lt;&#x2F;overwrite&gt;</span><br><span class=\"line\">                &lt;&#x2F;configuration&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;Generate MyBatis Artifacts&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;generate&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">                &lt;dependencies&gt;</span><br><span class=\"line\">                    &lt;dependency&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;mybatis-generator-core&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">                    &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">                &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zNGY4NTg2MWVlNjI0NWExLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 10:31:27 GMT+0800 (GMT+08:00)","title":"springboot逆向工程","path":"2019/07/27/springboot逆向工程/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zNGY4NTg2MWVlNjI0NWExLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zNGY4NTg2MWVlNjI0NWExLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-07-27T01:45:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["SpringBoot"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"前后端分离后的优雅部署","date":"2019-08-12T01:34:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMDdkNWI1NTg0ZDY3MWJjLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n## Web项目部署容器的选取\n\n目前常用的部署Web项目的容器用Tomcat、Apache、Nginx等，那我们前后端分离后的前端Html静态项目到底部署在那个应用容器呢？我们先看看这几个应用容器的区别。\n\n**Nginx,Apache,Tomcat的区别：**\n\nNginx常用做静态内容服务和代理服务器，直接外来请求转发给后面的应用服务器（如tomcat）,而tomcat更多用来做一个应用容器。\n\n* Apache和nginx应该叫做HTTP Server，而tomcat是一个Application Server是一个Servlet/JSO应用的容器。\n* HTTP Server访问服务器上存储的资源（HTML文件，图片文件等），HTTP Server是中只是把服务器上的文件如实通过HTTP协议传输给客户端。\n* Application Server（应用服务器）往往是运行在HTTP Server的背后并执行应用，将动态的内容转化为静态的内容之后，通过HTTP Server分发到客户端。\n* Apache是同步多进程模型，一个连接对应一个进程，而nginx是一步的，多个连接（万级别）可以对应一个进程。nginx轻量级，抗并发，处理静态文件好。\n\n根据对比，我们不难发现Nginx是较好的选择，它是由俄罗斯人（伊戈尔·赛索耶夫）开发的一款高性能的HTTP和反向代理web服务器。本身是轻量级、抗并发、能实现万级的连接等。同时它也是一个反向代理服务器。因此，我们不仅可以用它部署静态的html应用，还可以实现域名及访问地址的代理。\n\n## Nginx部署前端Web项目\n\nNginx的安装这里不做介绍，只说配置及部署相关内容。首先进入linux系统中Nginx的安装录的conf目录下，找到nginx.config配置文件，vim nginx.config进入编辑模式，在http下的server对应的同级编辑或添加如下代码，然后在root对应的目录下上传对应的html今天项目文件。注意：这里上传的如果是压缩包就需要解压，目录下要有index.html。\n```\nserver {\n  listen 80;\n  server_name www.xxxx.com;\n  location / {\n      root html/; #html访问路径  \n      index index.html;\n  }\n}\n```\n但我们的实际项目中，经常有多个Web端需要部署，如前面图中的例子，Web端有PC商城和Web后台系统，甚至可能更多，这些多个Web静态项目我们都放在nginx的html目录下的不同文件夹里，然后通过域名或ip+port代理到对应目录。下面就是多个Web项目在Nginx里的配置。\n```\n##商城Html页面\nserver {\n  listen 80;\n  server_name www.xxxx.com;\n  location / {\n      root html/pc/; #html访问路径  \n      index index.html;\n  }\n}\n##后台系统Html页面\nserver {\n  listen 80;\n  server_name admin.xxxx.com;\n  location / {\n      root html/admin/; #html访问路径  \n      index index.html;\n  }\n}\n```\n编辑完成后保存，并重启nginx服务 service nginx restart。\n注：server_name 这里可配置域名或ip+端口号。\n\n## 后端项目的部署\n\n大家应该都知道，SpringBoot里集成了Tomcat容器，所有Springboot的项目部署，很是容易，根本不需要你还安装什么Tomcat、JBoss等应用。我们只需打成jar文件，上传到服务器，然后通过执行\njava -jar xxx.jar &命令即可。\n但有没有人遇到过，你通过java -jar xxx.jar &刚刚部署的服务，在你断开linux服务器的shell连接后服务就没了。大家有知道这是什么原因吗？这里给大家说说部署java jar文件命令的那点事。\n* java -jar xxx.jar &\n>此命令可直接启动jar文件，是在当前会话进程中开启一个子进程来运行程序，这个子进程会随着会话进程的结束而结束。也就是说在你端口Shell连接回话结束，服务就跟着结束了。这种情况适合短时间测试用。\n\n* nohup java -jar xxx.jar &\n>这里在说这个命令前先说两个名词，即：\nhangup (挂断)，终端退出时会发送 hangup 信号来通知关闭所有子进程。\nnohup(不挂断，忽略挂断信号)\n\nnohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上\"&\"来将命令同时放入后台运行，也可用\">filename2>&1\"来更改缺省的重定向文件名。这种情况适合在生产环境长时间运行。\n\n在生产环境如果你只用简单的jar部署，那一定得用nohup java 命令启动应用。","source":"_posts/后端分离后的优雅部署.md","raw":"title: 前后端分离后的优雅部署\ntags:\n  - 部署\ncategories:\n  - Java\ndate: 2019-08-12 09:34:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMDdkNWI1NTg0ZDY3MWJjLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n## Web项目部署容器的选取\n\n目前常用的部署Web项目的容器用Tomcat、Apache、Nginx等，那我们前后端分离后的前端Html静态项目到底部署在那个应用容器呢？我们先看看这几个应用容器的区别。\n\n**Nginx,Apache,Tomcat的区别：**\n\nNginx常用做静态内容服务和代理服务器，直接外来请求转发给后面的应用服务器（如tomcat）,而tomcat更多用来做一个应用容器。\n\n* Apache和nginx应该叫做HTTP Server，而tomcat是一个Application Server是一个Servlet/JSO应用的容器。\n* HTTP Server访问服务器上存储的资源（HTML文件，图片文件等），HTTP Server是中只是把服务器上的文件如实通过HTTP协议传输给客户端。\n* Application Server（应用服务器）往往是运行在HTTP Server的背后并执行应用，将动态的内容转化为静态的内容之后，通过HTTP Server分发到客户端。\n* Apache是同步多进程模型，一个连接对应一个进程，而nginx是一步的，多个连接（万级别）可以对应一个进程。nginx轻量级，抗并发，处理静态文件好。\n\n根据对比，我们不难发现Nginx是较好的选择，它是由俄罗斯人（伊戈尔·赛索耶夫）开发的一款高性能的HTTP和反向代理web服务器。本身是轻量级、抗并发、能实现万级的连接等。同时它也是一个反向代理服务器。因此，我们不仅可以用它部署静态的html应用，还可以实现域名及访问地址的代理。\n\n## Nginx部署前端Web项目\n\nNginx的安装这里不做介绍，只说配置及部署相关内容。首先进入linux系统中Nginx的安装录的conf目录下，找到nginx.config配置文件，vim nginx.config进入编辑模式，在http下的server对应的同级编辑或添加如下代码，然后在root对应的目录下上传对应的html今天项目文件。注意：这里上传的如果是压缩包就需要解压，目录下要有index.html。\n```\nserver {\n  listen 80;\n  server_name www.xxxx.com;\n  location / {\n      root html/; #html访问路径  \n      index index.html;\n  }\n}\n```\n但我们的实际项目中，经常有多个Web端需要部署，如前面图中的例子，Web端有PC商城和Web后台系统，甚至可能更多，这些多个Web静态项目我们都放在nginx的html目录下的不同文件夹里，然后通过域名或ip+port代理到对应目录。下面就是多个Web项目在Nginx里的配置。\n```\n##商城Html页面\nserver {\n  listen 80;\n  server_name www.xxxx.com;\n  location / {\n      root html/pc/; #html访问路径  \n      index index.html;\n  }\n}\n##后台系统Html页面\nserver {\n  listen 80;\n  server_name admin.xxxx.com;\n  location / {\n      root html/admin/; #html访问路径  \n      index index.html;\n  }\n}\n```\n编辑完成后保存，并重启nginx服务 service nginx restart。\n注：server_name 这里可配置域名或ip+端口号。\n\n## 后端项目的部署\n\n大家应该都知道，SpringBoot里集成了Tomcat容器，所有Springboot的项目部署，很是容易，根本不需要你还安装什么Tomcat、JBoss等应用。我们只需打成jar文件，上传到服务器，然后通过执行\njava -jar xxx.jar &命令即可。\n但有没有人遇到过，你通过java -jar xxx.jar &刚刚部署的服务，在你断开linux服务器的shell连接后服务就没了。大家有知道这是什么原因吗？这里给大家说说部署java jar文件命令的那点事。\n* java -jar xxx.jar &\n>此命令可直接启动jar文件，是在当前会话进程中开启一个子进程来运行程序，这个子进程会随着会话进程的结束而结束。也就是说在你端口Shell连接回话结束，服务就跟着结束了。这种情况适合短时间测试用。\n\n* nohup java -jar xxx.jar &\n>这里在说这个命令前先说两个名词，即：\nhangup (挂断)，终端退出时会发送 hangup 信号来通知关闭所有子进程。\nnohup(不挂断，忽略挂断信号)\n\nnohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上\"&\"来将命令同时放入后台运行，也可用\">filename2>&1\"来更改缺省的重定向文件名。这种情况适合在生产环境长时间运行。\n\n在生产环境如果你只用简单的jar部署，那一定得用nohup java 命令启动应用。","slug":"后端分离后的优雅部署","published":1,"updated":"2020-01-01T03:53:44.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwjy000msopsa8wigilt","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMDdkNWI1NTg0ZDY3MWJjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"Web项目部署容器的选取\"><a href=\"#Web项目部署容器的选取\" class=\"headerlink\" title=\"Web项目部署容器的选取\"></a>Web项目部署容器的选取</h2><p>目前常用的部署Web项目的容器用Tomcat、Apache、Nginx等，那我们前后端分离后的前端Html静态项目到底部署在那个应用容器呢？我们先看看这几个应用容器的区别。</p>\n<p><strong>Nginx,Apache,Tomcat的区别：</strong></p>\n<p>Nginx常用做静态内容服务和代理服务器，直接外来请求转发给后面的应用服务器（如tomcat）,而tomcat更多用来做一个应用容器。</p>\n<ul>\n<li>Apache和nginx应该叫做HTTP Server，而tomcat是一个Application Server是一个Servlet/JSO应用的容器。</li>\n<li>HTTP Server访问服务器上存储的资源（HTML文件，图片文件等），HTTP Server是中只是把服务器上的文件如实通过HTTP协议传输给客户端。</li>\n<li>Application Server（应用服务器）往往是运行在HTTP Server的背后并执行应用，将动态的内容转化为静态的内容之后，通过HTTP Server分发到客户端。</li>\n<li>Apache是同步多进程模型，一个连接对应一个进程，而nginx是一步的，多个连接（万级别）可以对应一个进程。nginx轻量级，抗并发，处理静态文件好。</li>\n</ul>\n<p>根据对比，我们不难发现Nginx是较好的选择，它是由俄罗斯人（伊戈尔·赛索耶夫）开发的一款高性能的HTTP和反向代理web服务器。本身是轻量级、抗并发、能实现万级的连接等。同时它也是一个反向代理服务器。因此，我们不仅可以用它部署静态的html应用，还可以实现域名及访问地址的代理。</p>\n<h2 id=\"Nginx部署前端Web项目\"><a href=\"#Nginx部署前端Web项目\" class=\"headerlink\" title=\"Nginx部署前端Web项目\"></a>Nginx部署前端Web项目</h2><p>Nginx的安装这里不做介绍，只说配置及部署相关内容。首先进入linux系统中Nginx的安装录的conf目录下，找到nginx.config配置文件，vim nginx.config进入编辑模式，在http下的server对应的同级编辑或添加如下代码，然后在root对应的目录下上传对应的html今天项目文件。注意：这里上传的如果是压缩包就需要解压，目录下要有index.html。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name www.xxxx.com;</span><br><span class=\"line\">  location &#x2F; &#123;</span><br><span class=\"line\">      root html&#x2F;; #html访问路径  </span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但我们的实际项目中，经常有多个Web端需要部署，如前面图中的例子，Web端有PC商城和Web后台系统，甚至可能更多，这些多个Web静态项目我们都放在nginx的html目录下的不同文件夹里，然后通过域名或ip+port代理到对应目录。下面就是多个Web项目在Nginx里的配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##商城Html页面</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name www.xxxx.com;</span><br><span class=\"line\">  location &#x2F; &#123;</span><br><span class=\"line\">      root html&#x2F;pc&#x2F;; #html访问路径  </span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">##后台系统Html页面</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name admin.xxxx.com;</span><br><span class=\"line\">  location &#x2F; &#123;</span><br><span class=\"line\">      root html&#x2F;admin&#x2F;; #html访问路径  </span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编辑完成后保存，并重启nginx服务 service nginx restart。<br>注：server_name 这里可配置域名或ip+端口号。</p>\n<h2 id=\"后端项目的部署\"><a href=\"#后端项目的部署\" class=\"headerlink\" title=\"后端项目的部署\"></a>后端项目的部署</h2><p>大家应该都知道，SpringBoot里集成了Tomcat容器，所有Springboot的项目部署，很是容易，根本不需要你还安装什么Tomcat、JBoss等应用。我们只需打成jar文件，上传到服务器，然后通过执行<br>java -jar xxx.jar &amp;命令即可。<br>但有没有人遇到过，你通过java -jar xxx.jar &amp;刚刚部署的服务，在你断开linux服务器的shell连接后服务就没了。大家有知道这是什么原因吗？这里给大家说说部署java jar文件命令的那点事。</p>\n<ul>\n<li><p>java -jar xxx.jar &amp;</p>\n<blockquote>\n<p>此命令可直接启动jar文件，是在当前会话进程中开启一个子进程来运行程序，这个子进程会随着会话进程的结束而结束。也就是说在你端口Shell连接回话结束，服务就跟着结束了。这种情况适合短时间测试用。</p>\n</blockquote>\n</li>\n<li><p>nohup java -jar xxx.jar &amp;</p>\n<blockquote>\n<p>这里在说这个命令前先说两个名词，即：<br>hangup (挂断)，终端退出时会发送 hangup 信号来通知关闭所有子进程。<br>nohup(不挂断，忽略挂断信号)</p>\n</blockquote>\n</li>\n</ul>\n<p>nohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上”&amp;”来将命令同时放入后台运行，也可用”&gt;filename2&gt;&amp;1”来更改缺省的重定向文件名。这种情况适合在生产环境长时间运行。</p>\n<p>在生产环境如果你只用简单的jar部署，那一定得用nohup java 命令启动应用。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMDdkNWI1NTg0ZDY3MWJjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"Web项目部署容器的选取\"><a href=\"#Web项目部署容器的选取\" class=\"headerlink\" title=\"Web项目部署容器的选取\"></a>Web项目部署容器的选取</h2><p>目前常用的部署Web项目的容器用Tomcat、Apache、Nginx等，那我们前后端分离后的前端Html静态项目到底部署在那个应用容器呢？我们先看看这几个应用容器的区别。</p>\n<p><strong>Nginx,Apache,Tomcat的区别：</strong></p>\n<p>Nginx常用做静态内容服务和代理服务器，直接外来请求转发给后面的应用服务器（如tomcat）,而tomcat更多用来做一个应用容器。</p>\n<ul>\n<li>Apache和nginx应该叫做HTTP Server，而tomcat是一个Application Server是一个Servlet/JSO应用的容器。</li>\n<li>HTTP Server访问服务器上存储的资源（HTML文件，图片文件等），HTTP Server是中只是把服务器上的文件如实通过HTTP协议传输给客户端。</li>\n<li>Application Server（应用服务器）往往是运行在HTTP Server的背后并执行应用，将动态的内容转化为静态的内容之后，通过HTTP Server分发到客户端。</li>\n<li>Apache是同步多进程模型，一个连接对应一个进程，而nginx是一步的，多个连接（万级别）可以对应一个进程。nginx轻量级，抗并发，处理静态文件好。</li>\n</ul>\n<p>根据对比，我们不难发现Nginx是较好的选择，它是由俄罗斯人（伊戈尔·赛索耶夫）开发的一款高性能的HTTP和反向代理web服务器。本身是轻量级、抗并发、能实现万级的连接等。同时它也是一个反向代理服务器。因此，我们不仅可以用它部署静态的html应用，还可以实现域名及访问地址的代理。</p>\n<h2 id=\"Nginx部署前端Web项目\"><a href=\"#Nginx部署前端Web项目\" class=\"headerlink\" title=\"Nginx部署前端Web项目\"></a>Nginx部署前端Web项目</h2><p>Nginx的安装这里不做介绍，只说配置及部署相关内容。首先进入linux系统中Nginx的安装录的conf目录下，找到nginx.config配置文件，vim nginx.config进入编辑模式，在http下的server对应的同级编辑或添加如下代码，然后在root对应的目录下上传对应的html今天项目文件。注意：这里上传的如果是压缩包就需要解压，目录下要有index.html。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name www.xxxx.com;</span><br><span class=\"line\">  location &#x2F; &#123;</span><br><span class=\"line\">      root html&#x2F;; #html访问路径  </span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但我们的实际项目中，经常有多个Web端需要部署，如前面图中的例子，Web端有PC商城和Web后台系统，甚至可能更多，这些多个Web静态项目我们都放在nginx的html目录下的不同文件夹里，然后通过域名或ip+port代理到对应目录。下面就是多个Web项目在Nginx里的配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##商城Html页面</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name www.xxxx.com;</span><br><span class=\"line\">  location &#x2F; &#123;</span><br><span class=\"line\">      root html&#x2F;pc&#x2F;; #html访问路径  </span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">##后台系统Html页面</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name admin.xxxx.com;</span><br><span class=\"line\">  location &#x2F; &#123;</span><br><span class=\"line\">      root html&#x2F;admin&#x2F;; #html访问路径  </span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编辑完成后保存，并重启nginx服务 service nginx restart。<br>注：server_name 这里可配置域名或ip+端口号。</p>\n<h2 id=\"后端项目的部署\"><a href=\"#后端项目的部署\" class=\"headerlink\" title=\"后端项目的部署\"></a>后端项目的部署</h2><p>大家应该都知道，SpringBoot里集成了Tomcat容器，所有Springboot的项目部署，很是容易，根本不需要你还安装什么Tomcat、JBoss等应用。我们只需打成jar文件，上传到服务器，然后通过执行<br>java -jar xxx.jar &amp;命令即可。<br>但有没有人遇到过，你通过java -jar xxx.jar &amp;刚刚部署的服务，在你断开linux服务器的shell连接后服务就没了。大家有知道这是什么原因吗？这里给大家说说部署java jar文件命令的那点事。</p>\n<ul>\n<li><p>java -jar xxx.jar &amp;</p>\n<blockquote>\n<p>此命令可直接启动jar文件，是在当前会话进程中开启一个子进程来运行程序，这个子进程会随着会话进程的结束而结束。也就是说在你端口Shell连接回话结束，服务就跟着结束了。这种情况适合短时间测试用。</p>\n</blockquote>\n</li>\n<li><p>nohup java -jar xxx.jar &amp;</p>\n<blockquote>\n<p>这里在说这个命令前先说两个名词，即：<br>hangup (挂断)，终端退出时会发送 hangup 信号来通知关闭所有子进程。<br>nohup(不挂断，忽略挂断信号)</p>\n</blockquote>\n</li>\n</ul>\n<p>nohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上”&amp;”来将命令同时放入后台运行，也可用”&gt;filename2&gt;&amp;1”来更改缺省的重定向文件名。这种情况适合在生产环境长时间运行。</p>\n<p>在生产环境如果你只用简单的jar部署，那一定得用nohup java 命令启动应用。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMDdkNWI1NTg0ZDY3MWJjLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 11:53:44 GMT+0800 (GMT+08:00)","title":"前后端分离后的优雅部署","path":"2019/08/12/后端分离后的优雅部署/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMDdkNWI1NTg0ZDY3MWJjLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMDdkNWI1NTg0ZDY3MWJjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-08-12T01:34:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["部署"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"SpringMVC请求参数获取的几种方法","author":"Monday","date":"2019-08-15T03:08:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lYWJlMjk2MGJlZGJjMmExLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\nSpringMVC请求参数获取的几种方法\n\n## 通过@PathVariabl获取路径中的参数\n\n```\n    @RequestMapping(value=\"user/{id}/{name}\",method=RequestMethod.GET)\n    public String printMessage1(@PathVariable String id,@PathVariable String name, ModelMap model) {\n        \n        System.out.println(id);\n        System.out.println(name);\n        model.addAttribute(\"message\", \"111111\");\n        return \"users\";\n    }\n```\n\n例如，访问user/123/lei路径时，执行以上方法，其中，参数id=123，name=lei\n\n## @ModelAttribute获取POST请求的FORM表单数据\n\n表单如下\n\n```\n <form method=\"post\" action=\"hao.do\">\n    a: <input id=\"a\" type=\"text\"   name=\"a\"/>\n    b: <input id=\"b\" type=\"text\"   name=\"b\"/>\n    <input type=\"submit\" value=\"Submit\" />\n </form>\n```\n\nJava  Pojo如下\n\n```\n    public class Pojo{\n        private String a;\n        private int b;\n    }\n```\n\nJava Controller如下\n\n```\n@RequestMapping(method = RequestMethod.POST) \npublic String processSubmit(@ModelAttribute(\"pojo\") Pojo pojo) { \n    \n    return \"helloWorld\"; \n}\n```\n\n## @RequestBody获取POST请求的FORM表单数据\n\n`@RequestBody`接收的是一个Json对象的字符串，而不是一个`Json`对象。然而在`ajax`请求往往传的都是`Json`对象，后来发现用 `JSON.stringify(data)`的方式就能将对象变成字符串。同时`ajax`请求的时候也要指定`dataType: \"json\",contentType:\"application/json\"`这样就可以轻易的将一个对象或者`List`传到`Java`端，使用`@RequestBody`即可绑定对象或者`List`.\n\njs代码\n\n```\n<script type=\"text/javascript\">  \n    $(document).ready(function(){  \n        var saveDataAry=[];  \n        var data1={\"userName\":\"test\",\"address\":\"gz\"};  \n        var data2={\"userName\":\"ququ\",\"address\":\"gr\"};  \n        saveDataAry.push(data1);  \n        saveDataAry.push(data2);         \n        $.ajax({ \n            type:\"POST\", \n            url:\"user/saveUser\", \n            dataType:\"json\",      \n            contentType:\"application/json\",               \n            data:JSON.stringify(saveData), \n            success:function(data){ \n\n            } \n         }); \n    }); \n\n```\n\njava代码\n\n```\n    @RequestMapping(value = \"saveUser\", method = {RequestMethod.POST }}) \n    @ResponseBody  \n    public void saveUser(@RequestBody List<User> users) { \n         userService.batchSave(users); \n    }\n```\n`@ModelAttribute`和`@RequestBody`注解不同之处在于`@ModelAttribute`注解可以在前端直接获取返回值\n\n```\n@Controller\npublic class Hello2ModelController extends BaseController {\n\n    @RequestMapping(value = \"/helloWorld2\")  \n    public String helloWorld(@ModelAttribute(\"myUser\") User user) {\n        user.setName(\"老王\");\n       return \"helloWorld\";  \n    }  \n}\n```\n\n`model`中`key`为`myUser` ,前台可以直接通过`${myUser.xx}`获取`user`相应属性\n\n## 直接用HttpServletRequest获取\n\n```\n@RequestMapping(method = RequestMethod.GET) \npublic String get(HttpServletRequest request, HttpServletResponse response) { \n   System.out.println(request.getParameter(\"a\")); \n    return \"helloWorld\"; \n}\n```\n\n## 用注解@RequestParam绑定请求参数\n\n用注解`@RequestParam`绑定请求参数a到变量a\n\n当请求参数a不存在时会有异常发生,可以通过设置属性`required=false`解决,\n\n例如: `@RequestParam(value=\"a\", required=false)`\n\nController如下\n\n```\n@RequestMapping(value = \"/requestParam\", method = RequestMethod.GET) \npublic String setupForm(@RequestParam(\"a\") String a, ModelMap model) { \n   System.out.println(a); \nreturn \"helloWorld\";\n}\n\n```","source":"_posts/SpringMVC请求参数获取的几种方法.md","raw":"title: SpringMVC请求参数获取的几种方法\nauthor: Monday\ntags:\n  - Spring\ncategories:\n  - Java\ndate: 2019-08-15 11:08:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lYWJlMjk2MGJlZGJjMmExLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\nSpringMVC请求参数获取的几种方法\n\n## 通过@PathVariabl获取路径中的参数\n\n```\n    @RequestMapping(value=\"user/{id}/{name}\",method=RequestMethod.GET)\n    public String printMessage1(@PathVariable String id,@PathVariable String name, ModelMap model) {\n        \n        System.out.println(id);\n        System.out.println(name);\n        model.addAttribute(\"message\", \"111111\");\n        return \"users\";\n    }\n```\n\n例如，访问user/123/lei路径时，执行以上方法，其中，参数id=123，name=lei\n\n## @ModelAttribute获取POST请求的FORM表单数据\n\n表单如下\n\n```\n <form method=\"post\" action=\"hao.do\">\n    a: <input id=\"a\" type=\"text\"   name=\"a\"/>\n    b: <input id=\"b\" type=\"text\"   name=\"b\"/>\n    <input type=\"submit\" value=\"Submit\" />\n </form>\n```\n\nJava  Pojo如下\n\n```\n    public class Pojo{\n        private String a;\n        private int b;\n    }\n```\n\nJava Controller如下\n\n```\n@RequestMapping(method = RequestMethod.POST) \npublic String processSubmit(@ModelAttribute(\"pojo\") Pojo pojo) { \n    \n    return \"helloWorld\"; \n}\n```\n\n## @RequestBody获取POST请求的FORM表单数据\n\n`@RequestBody`接收的是一个Json对象的字符串，而不是一个`Json`对象。然而在`ajax`请求往往传的都是`Json`对象，后来发现用 `JSON.stringify(data)`的方式就能将对象变成字符串。同时`ajax`请求的时候也要指定`dataType: \"json\",contentType:\"application/json\"`这样就可以轻易的将一个对象或者`List`传到`Java`端，使用`@RequestBody`即可绑定对象或者`List`.\n\njs代码\n\n```\n<script type=\"text/javascript\">  \n    $(document).ready(function(){  \n        var saveDataAry=[];  \n        var data1={\"userName\":\"test\",\"address\":\"gz\"};  \n        var data2={\"userName\":\"ququ\",\"address\":\"gr\"};  \n        saveDataAry.push(data1);  \n        saveDataAry.push(data2);         \n        $.ajax({ \n            type:\"POST\", \n            url:\"user/saveUser\", \n            dataType:\"json\",      \n            contentType:\"application/json\",               \n            data:JSON.stringify(saveData), \n            success:function(data){ \n\n            } \n         }); \n    }); \n\n```\n\njava代码\n\n```\n    @RequestMapping(value = \"saveUser\", method = {RequestMethod.POST }}) \n    @ResponseBody  \n    public void saveUser(@RequestBody List<User> users) { \n         userService.batchSave(users); \n    }\n```\n`@ModelAttribute`和`@RequestBody`注解不同之处在于`@ModelAttribute`注解可以在前端直接获取返回值\n\n```\n@Controller\npublic class Hello2ModelController extends BaseController {\n\n    @RequestMapping(value = \"/helloWorld2\")  \n    public String helloWorld(@ModelAttribute(\"myUser\") User user) {\n        user.setName(\"老王\");\n       return \"helloWorld\";  \n    }  \n}\n```\n\n`model`中`key`为`myUser` ,前台可以直接通过`${myUser.xx}`获取`user`相应属性\n\n## 直接用HttpServletRequest获取\n\n```\n@RequestMapping(method = RequestMethod.GET) \npublic String get(HttpServletRequest request, HttpServletResponse response) { \n   System.out.println(request.getParameter(\"a\")); \n    return \"helloWorld\"; \n}\n```\n\n## 用注解@RequestParam绑定请求参数\n\n用注解`@RequestParam`绑定请求参数a到变量a\n\n当请求参数a不存在时会有异常发生,可以通过设置属性`required=false`解决,\n\n例如: `@RequestParam(value=\"a\", required=false)`\n\nController如下\n\n```\n@RequestMapping(value = \"/requestParam\", method = RequestMethod.GET) \npublic String setupForm(@RequestParam(\"a\") String a, ModelMap model) { \n   System.out.println(a); \nreturn \"helloWorld\";\n}\n\n```","slug":"SpringMVC请求参数获取的几种方法","published":1,"updated":"2020-01-01T03:51:31.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwjz000psopsebz92xta","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lYWJlMjk2MGJlZGJjMmExLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<p>SpringMVC请求参数获取的几种方法</p>\n<h2 id=\"通过-PathVariabl获取路径中的参数\"><a href=\"#通过-PathVariabl获取路径中的参数\" class=\"headerlink\" title=\"通过@PathVariabl获取路径中的参数\"></a>通过@PathVariabl获取路径中的参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value&#x3D;&quot;user&#x2F;&#123;id&#125;&#x2F;&#123;name&#125;&quot;,method&#x3D;RequestMethod.GET)</span><br><span class=\"line\">public String printMessage1(@PathVariable String id,@PathVariable String name, ModelMap model) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(id);</span><br><span class=\"line\">    System.out.println(name);</span><br><span class=\"line\">    model.addAttribute(&quot;message&quot;, &quot;111111&quot;);</span><br><span class=\"line\">    return &quot;users&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如，访问user/123/lei路径时，执行以上方法，其中，参数id=123，name=lei</p>\n<h2 id=\"ModelAttribute获取POST请求的FORM表单数据\"><a href=\"#ModelAttribute获取POST请求的FORM表单数据\" class=\"headerlink\" title=\"@ModelAttribute获取POST请求的FORM表单数据\"></a>@ModelAttribute获取POST请求的FORM表单数据</h2><p>表单如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;hao.do&quot;&gt;</span><br><span class=\"line\">   a: &lt;input id&#x3D;&quot;a&quot; type&#x3D;&quot;text&quot;   name&#x3D;&quot;a&quot;&#x2F;&gt;</span><br><span class=\"line\">   b: &lt;input id&#x3D;&quot;b&quot; type&#x3D;&quot;text&quot;   name&#x3D;&quot;b&quot;&#x2F;&gt;</span><br><span class=\"line\">   &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Java  Pojo如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Pojo&#123;</span><br><span class=\"line\">    private String a;</span><br><span class=\"line\">    private int b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Java Controller如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(method &#x3D; RequestMethod.POST) </span><br><span class=\"line\">public String processSubmit(@ModelAttribute(&quot;pojo&quot;) Pojo pojo) &#123; </span><br><span class=\"line\">    </span><br><span class=\"line\">    return &quot;helloWorld&quot;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RequestBody获取POST请求的FORM表单数据\"><a href=\"#RequestBody获取POST请求的FORM表单数据\" class=\"headerlink\" title=\"@RequestBody获取POST请求的FORM表单数据\"></a>@RequestBody获取POST请求的FORM表单数据</h2><p><code>@RequestBody</code>接收的是一个Json对象的字符串，而不是一个<code>Json</code>对象。然而在<code>ajax</code>请求往往传的都是<code>Json</code>对象，后来发现用 <code>JSON.stringify(data)</code>的方式就能将对象变成字符串。同时<code>ajax</code>请求的时候也要指定<code>dataType: &quot;json&quot;,contentType:&quot;application/json&quot;</code>这样就可以轻易的将一个对象或者<code>List</code>传到<code>Java</code>端，使用<code>@RequestBody</code>即可绑定对象或者<code>List</code>.</p>\n<p>js代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;  </span><br><span class=\"line\">    $(document).ready(function()&#123;  </span><br><span class=\"line\">        var saveDataAry&#x3D;[];  </span><br><span class=\"line\">        var data1&#x3D;&#123;&quot;userName&quot;:&quot;test&quot;,&quot;address&quot;:&quot;gz&quot;&#125;;  </span><br><span class=\"line\">        var data2&#x3D;&#123;&quot;userName&quot;:&quot;ququ&quot;,&quot;address&quot;:&quot;gr&quot;&#125;;  </span><br><span class=\"line\">        saveDataAry.push(data1);  </span><br><span class=\"line\">        saveDataAry.push(data2);         </span><br><span class=\"line\">        $.ajax(&#123; </span><br><span class=\"line\">            type:&quot;POST&quot;, </span><br><span class=\"line\">            url:&quot;user&#x2F;saveUser&quot;, </span><br><span class=\"line\">            dataType:&quot;json&quot;,      </span><br><span class=\"line\">            contentType:&quot;application&#x2F;json&quot;,               </span><br><span class=\"line\">            data:JSON.stringify(saveData), </span><br><span class=\"line\">            success:function(data)&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">         &#125;); </span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>java代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value &#x3D; &quot;saveUser&quot;, method &#x3D; &#123;RequestMethod.POST &#125;&#125;) </span><br><span class=\"line\">@ResponseBody  </span><br><span class=\"line\">public void saveUser(@RequestBody List&lt;User&gt; users) &#123; </span><br><span class=\"line\">     userService.batchSave(users); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@ModelAttribute</code>和<code>@RequestBody</code>注解不同之处在于<code>@ModelAttribute</code>注解可以在前端直接获取返回值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class Hello2ModelController extends BaseController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value &#x3D; &quot;&#x2F;helloWorld2&quot;)  </span><br><span class=\"line\">    public String helloWorld(@ModelAttribute(&quot;myUser&quot;) User user) &#123;</span><br><span class=\"line\">        user.setName(&quot;老王&quot;);</span><br><span class=\"line\">       return &quot;helloWorld&quot;;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>model</code>中<code>key</code>为<code>myUser</code> ,前台可以直接通过<code>${myUser.xx}</code>获取<code>user</code>相应属性</p>\n<h2 id=\"直接用HttpServletRequest获取\"><a href=\"#直接用HttpServletRequest获取\" class=\"headerlink\" title=\"直接用HttpServletRequest获取\"></a>直接用HttpServletRequest获取</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(method &#x3D; RequestMethod.GET) </span><br><span class=\"line\">public String get(HttpServletRequest request, HttpServletResponse response) &#123; </span><br><span class=\"line\">   System.out.println(request.getParameter(&quot;a&quot;)); </span><br><span class=\"line\">    return &quot;helloWorld&quot;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用注解-RequestParam绑定请求参数\"><a href=\"#用注解-RequestParam绑定请求参数\" class=\"headerlink\" title=\"用注解@RequestParam绑定请求参数\"></a>用注解@RequestParam绑定请求参数</h2><p>用注解<code>@RequestParam</code>绑定请求参数a到变量a</p>\n<p>当请求参数a不存在时会有异常发生,可以通过设置属性<code>required=false</code>解决,</p>\n<p>例如: <code>@RequestParam(value=&quot;a&quot;, required=false)</code></p>\n<p>Controller如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value &#x3D; &quot;&#x2F;requestParam&quot;, method &#x3D; RequestMethod.GET) </span><br><span class=\"line\">public String setupForm(@RequestParam(&quot;a&quot;) String a, ModelMap model) &#123; </span><br><span class=\"line\">   System.out.println(a); </span><br><span class=\"line\">return &quot;helloWorld&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lYWJlMjk2MGJlZGJjMmExLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<p>SpringMVC请求参数获取的几种方法</p>\n<h2 id=\"通过-PathVariabl获取路径中的参数\"><a href=\"#通过-PathVariabl获取路径中的参数\" class=\"headerlink\" title=\"通过@PathVariabl获取路径中的参数\"></a>通过@PathVariabl获取路径中的参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value&#x3D;&quot;user&#x2F;&#123;id&#125;&#x2F;&#123;name&#125;&quot;,method&#x3D;RequestMethod.GET)</span><br><span class=\"line\">public String printMessage1(@PathVariable String id,@PathVariable String name, ModelMap model) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(id);</span><br><span class=\"line\">    System.out.println(name);</span><br><span class=\"line\">    model.addAttribute(&quot;message&quot;, &quot;111111&quot;);</span><br><span class=\"line\">    return &quot;users&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如，访问user/123/lei路径时，执行以上方法，其中，参数id=123，name=lei</p>\n<h2 id=\"ModelAttribute获取POST请求的FORM表单数据\"><a href=\"#ModelAttribute获取POST请求的FORM表单数据\" class=\"headerlink\" title=\"@ModelAttribute获取POST请求的FORM表单数据\"></a>@ModelAttribute获取POST请求的FORM表单数据</h2><p>表单如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;hao.do&quot;&gt;</span><br><span class=\"line\">   a: &lt;input id&#x3D;&quot;a&quot; type&#x3D;&quot;text&quot;   name&#x3D;&quot;a&quot;&#x2F;&gt;</span><br><span class=\"line\">   b: &lt;input id&#x3D;&quot;b&quot; type&#x3D;&quot;text&quot;   name&#x3D;&quot;b&quot;&#x2F;&gt;</span><br><span class=\"line\">   &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Java  Pojo如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Pojo&#123;</span><br><span class=\"line\">    private String a;</span><br><span class=\"line\">    private int b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Java Controller如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(method &#x3D; RequestMethod.POST) </span><br><span class=\"line\">public String processSubmit(@ModelAttribute(&quot;pojo&quot;) Pojo pojo) &#123; </span><br><span class=\"line\">    </span><br><span class=\"line\">    return &quot;helloWorld&quot;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RequestBody获取POST请求的FORM表单数据\"><a href=\"#RequestBody获取POST请求的FORM表单数据\" class=\"headerlink\" title=\"@RequestBody获取POST请求的FORM表单数据\"></a>@RequestBody获取POST请求的FORM表单数据</h2><p><code>@RequestBody</code>接收的是一个Json对象的字符串，而不是一个<code>Json</code>对象。然而在<code>ajax</code>请求往往传的都是<code>Json</code>对象，后来发现用 <code>JSON.stringify(data)</code>的方式就能将对象变成字符串。同时<code>ajax</code>请求的时候也要指定<code>dataType: &quot;json&quot;,contentType:&quot;application/json&quot;</code>这样就可以轻易的将一个对象或者<code>List</code>传到<code>Java</code>端，使用<code>@RequestBody</code>即可绑定对象或者<code>List</code>.</p>\n<p>js代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;  </span><br><span class=\"line\">    $(document).ready(function()&#123;  </span><br><span class=\"line\">        var saveDataAry&#x3D;[];  </span><br><span class=\"line\">        var data1&#x3D;&#123;&quot;userName&quot;:&quot;test&quot;,&quot;address&quot;:&quot;gz&quot;&#125;;  </span><br><span class=\"line\">        var data2&#x3D;&#123;&quot;userName&quot;:&quot;ququ&quot;,&quot;address&quot;:&quot;gr&quot;&#125;;  </span><br><span class=\"line\">        saveDataAry.push(data1);  </span><br><span class=\"line\">        saveDataAry.push(data2);         </span><br><span class=\"line\">        $.ajax(&#123; </span><br><span class=\"line\">            type:&quot;POST&quot;, </span><br><span class=\"line\">            url:&quot;user&#x2F;saveUser&quot;, </span><br><span class=\"line\">            dataType:&quot;json&quot;,      </span><br><span class=\"line\">            contentType:&quot;application&#x2F;json&quot;,               </span><br><span class=\"line\">            data:JSON.stringify(saveData), </span><br><span class=\"line\">            success:function(data)&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">         &#125;); </span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>java代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value &#x3D; &quot;saveUser&quot;, method &#x3D; &#123;RequestMethod.POST &#125;&#125;) </span><br><span class=\"line\">@ResponseBody  </span><br><span class=\"line\">public void saveUser(@RequestBody List&lt;User&gt; users) &#123; </span><br><span class=\"line\">     userService.batchSave(users); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@ModelAttribute</code>和<code>@RequestBody</code>注解不同之处在于<code>@ModelAttribute</code>注解可以在前端直接获取返回值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class Hello2ModelController extends BaseController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value &#x3D; &quot;&#x2F;helloWorld2&quot;)  </span><br><span class=\"line\">    public String helloWorld(@ModelAttribute(&quot;myUser&quot;) User user) &#123;</span><br><span class=\"line\">        user.setName(&quot;老王&quot;);</span><br><span class=\"line\">       return &quot;helloWorld&quot;;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>model</code>中<code>key</code>为<code>myUser</code> ,前台可以直接通过<code>${myUser.xx}</code>获取<code>user</code>相应属性</p>\n<h2 id=\"直接用HttpServletRequest获取\"><a href=\"#直接用HttpServletRequest获取\" class=\"headerlink\" title=\"直接用HttpServletRequest获取\"></a>直接用HttpServletRequest获取</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(method &#x3D; RequestMethod.GET) </span><br><span class=\"line\">public String get(HttpServletRequest request, HttpServletResponse response) &#123; </span><br><span class=\"line\">   System.out.println(request.getParameter(&quot;a&quot;)); </span><br><span class=\"line\">    return &quot;helloWorld&quot;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用注解-RequestParam绑定请求参数\"><a href=\"#用注解-RequestParam绑定请求参数\" class=\"headerlink\" title=\"用注解@RequestParam绑定请求参数\"></a>用注解@RequestParam绑定请求参数</h2><p>用注解<code>@RequestParam</code>绑定请求参数a到变量a</p>\n<p>当请求参数a不存在时会有异常发生,可以通过设置属性<code>required=false</code>解决,</p>\n<p>例如: <code>@RequestParam(value=&quot;a&quot;, required=false)</code></p>\n<p>Controller如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value &#x3D; &quot;&#x2F;requestParam&quot;, method &#x3D; RequestMethod.GET) </span><br><span class=\"line\">public String setupForm(@RequestParam(&quot;a&quot;) String a, ModelMap model) &#123; </span><br><span class=\"line\">   System.out.println(a); </span><br><span class=\"line\">return &quot;helloWorld&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lYWJlMjk2MGJlZGJjMmExLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 11:51:31 GMT+0800 (GMT+08:00)","title":"SpringMVC请求参数获取的几种方法","path":"2019/08/15/SpringMVC请求参数获取的几种方法/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lYWJlMjk2MGJlZGJjMmExLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lYWJlMjk2MGJlZGJjMmExLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-08-15T03:08:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Spring"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"微服务常见的认证方案","date":"2019-11-19T00:40:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n## 分布式Session\n\n传统的单体应用的`session`，在`Spring cloud`微服务架构下，可以采用`分布式session机制`，可以将用户的认证信息存储在共享存储（如redis）中，用户会话作为key实现简单的分布式哈希映射，当用户访问微服务时，用户数据可以从共享存储中获取。`Spring Session`对分布式Session提供了支持，也与`Spring Boot/Cloud`无缝集成。\n\n\n## API Tokens\n\n随着 `Restful API`、`微服务`的兴起，基于 Token 的认证现在已经相当普遍了。\n\n`Token`一般会包含用户的相关信息，其它微服务可以从Token里提取出用户、权限等信息完成鉴权。\n\n基于Token认证的典型流程：\n![图片.png](https://upload-images.jianshu.io/upload_images/12553249-134554ce479b7226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.  用户使用包含用户名和密码的credential从客户端发起资源请求。\n2.  后端接受请求，通过授权中心，生产有效token字符串，返回给客户端。\n3.  客户端获得token后，再次发出资源请求。\n4.  后端接受带token的请求，通过授权中心，获取相关资源，返回给客户端。\n\n优点：\n\n*   服务端无状态：服务端不需要存储Session，因为Token已携带用户的相关信息\n*   性能好：校验Token不需要访问远程服务或数据库\n*   支持移动端\n*   支持跨程序、跨域调用\n\n缺点：\n\n*   每次用户请求需要携带有效token，与Auth服务进行交互验证\n*   Auth服务可能需要处理大量的生产token的操作，可能存在性能问题\n\n　　基于Token的认证方案，业界推荐使用 [JSON Web Tokens（JWT）](https://jwt.io/)，它足够简单且支持程度也比较好","source":"_posts/微服务常见的认证方案.md","raw":"title: 微服务常见的认证方案\ntags:\n  - token\ncategories:\n  - 微服务\ndate: 2019-11-19 08:40:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n## 分布式Session\n\n传统的单体应用的`session`，在`Spring cloud`微服务架构下，可以采用`分布式session机制`，可以将用户的认证信息存储在共享存储（如redis）中，用户会话作为key实现简单的分布式哈希映射，当用户访问微服务时，用户数据可以从共享存储中获取。`Spring Session`对分布式Session提供了支持，也与`Spring Boot/Cloud`无缝集成。\n\n\n## API Tokens\n\n随着 `Restful API`、`微服务`的兴起，基于 Token 的认证现在已经相当普遍了。\n\n`Token`一般会包含用户的相关信息，其它微服务可以从Token里提取出用户、权限等信息完成鉴权。\n\n基于Token认证的典型流程：\n![图片.png](https://upload-images.jianshu.io/upload_images/12553249-134554ce479b7226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.  用户使用包含用户名和密码的credential从客户端发起资源请求。\n2.  后端接受请求，通过授权中心，生产有效token字符串，返回给客户端。\n3.  客户端获得token后，再次发出资源请求。\n4.  后端接受带token的请求，通过授权中心，获取相关资源，返回给客户端。\n\n优点：\n\n*   服务端无状态：服务端不需要存储Session，因为Token已携带用户的相关信息\n*   性能好：校验Token不需要访问远程服务或数据库\n*   支持移动端\n*   支持跨程序、跨域调用\n\n缺点：\n\n*   每次用户请求需要携带有效token，与Auth服务进行交互验证\n*   Auth服务可能需要处理大量的生产token的操作，可能存在性能问题\n\n　　基于Token的认证方案，业界推荐使用 [JSON Web Tokens（JWT）](https://jwt.io/)，它足够简单且支持程度也比较好","slug":"微服务常见的认证方案","published":1,"updated":"2020-01-01T03:14:03.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwk2000usops0pl14dtb","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"分布式Session\"><a href=\"#分布式Session\" class=\"headerlink\" title=\"分布式Session\"></a>分布式Session</h2><p>传统的单体应用的<code>session</code>，在<code>Spring cloud</code>微服务架构下，可以采用<code>分布式session机制</code>，可以将用户的认证信息存储在共享存储（如redis）中，用户会话作为key实现简单的分布式哈希映射，当用户访问微服务时，用户数据可以从共享存储中获取。<code>Spring Session</code>对分布式Session提供了支持，也与<code>Spring Boot/Cloud</code>无缝集成。</p>\n<h2 id=\"API-Tokens\"><a href=\"#API-Tokens\" class=\"headerlink\" title=\"API Tokens\"></a>API Tokens</h2><p>随着 <code>Restful API</code>、<code>微服务</code>的兴起，基于 Token 的认证现在已经相当普遍了。</p>\n<p><code>Token</code>一般会包含用户的相关信息，其它微服务可以从Token里提取出用户、权限等信息完成鉴权。</p>\n<p>基于Token认证的典型流程：<br><img src=\"https://upload-images.jianshu.io/upload_images/12553249-134554ce479b7226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"></p>\n<ol>\n<li>用户使用包含用户名和密码的credential从客户端发起资源请求。</li>\n<li>后端接受请求，通过授权中心，生产有效token字符串，返回给客户端。</li>\n<li>客户端获得token后，再次发出资源请求。</li>\n<li>后端接受带token的请求，通过授权中心，获取相关资源，返回给客户端。</li>\n</ol>\n<p>优点：</p>\n<ul>\n<li>服务端无状态：服务端不需要存储Session，因为Token已携带用户的相关信息</li>\n<li>性能好：校验Token不需要访问远程服务或数据库</li>\n<li>支持移动端</li>\n<li>支持跨程序、跨域调用</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>每次用户请求需要携带有效token，与Auth服务进行交互验证</li>\n<li>Auth服务可能需要处理大量的生产token的操作，可能存在性能问题</li>\n</ul>\n<p>　　基于Token的认证方案，业界推荐使用 <a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener\">JSON Web Tokens（JWT）</a>，它足够简单且支持程度也比较好</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"分布式Session\"><a href=\"#分布式Session\" class=\"headerlink\" title=\"分布式Session\"></a>分布式Session</h2><p>传统的单体应用的<code>session</code>，在<code>Spring cloud</code>微服务架构下，可以采用<code>分布式session机制</code>，可以将用户的认证信息存储在共享存储（如redis）中，用户会话作为key实现简单的分布式哈希映射，当用户访问微服务时，用户数据可以从共享存储中获取。<code>Spring Session</code>对分布式Session提供了支持，也与<code>Spring Boot/Cloud</code>无缝集成。</p>\n<h2 id=\"API-Tokens\"><a href=\"#API-Tokens\" class=\"headerlink\" title=\"API Tokens\"></a>API Tokens</h2><p>随着 <code>Restful API</code>、<code>微服务</code>的兴起，基于 Token 的认证现在已经相当普遍了。</p>\n<p><code>Token</code>一般会包含用户的相关信息，其它微服务可以从Token里提取出用户、权限等信息完成鉴权。</p>\n<p>基于Token认证的典型流程：<br><img src=\"https://upload-images.jianshu.io/upload_images/12553249-134554ce479b7226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"></p>\n<ol>\n<li>用户使用包含用户名和密码的credential从客户端发起资源请求。</li>\n<li>后端接受请求，通过授权中心，生产有效token字符串，返回给客户端。</li>\n<li>客户端获得token后，再次发出资源请求。</li>\n<li>后端接受带token的请求，通过授权中心，获取相关资源，返回给客户端。</li>\n</ol>\n<p>优点：</p>\n<ul>\n<li>服务端无状态：服务端不需要存储Session，因为Token已携带用户的相关信息</li>\n<li>性能好：校验Token不需要访问远程服务或数据库</li>\n<li>支持移动端</li>\n<li>支持跨程序、跨域调用</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>每次用户请求需要携带有效token，与Auth服务进行交互验证</li>\n<li>Auth服务可能需要处理大量的生产token的操作，可能存在性能问题</li>\n</ul>\n<p>　　基于Token的认证方案，业界推荐使用 <a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener\">JSON Web Tokens（JWT）</a>，它足够简单且支持程度也比较好</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 11:14:03 GMT+0800 (GMT+08:00)","title":"微服务常见的认证方案","path":"2019/11/19/微服务常见的认证方案/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-11-19T00:40:00.000Z","pv":0,"totalPV":0,"categories":"微服务","tags":["token"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"微信小程序版本自动更新","date":"2020-01-07T09:24:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hY2ExNmRhNWQzNWYxMDIyLnBuZw?x-oss-process=image/format,png)\n<!-- more -->\n\n>公司的小程序项目上线, 后期还会有小型的版本迭代. 为了让用户能在我们进行版本迭代后及时使用最新版本的功能. 做了以下优化..\n\n## 小程序的销毁\n当用户点击左上角关闭，或者按了设备Home 键离开微信，小程序并没有直接销毁，而是进入了后台；\n当再次进入微信或再次打开小程序，又会从后台进入前台，只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。\n\n## \"冷启动\" 和 \"热启动\".\n热启动是指: 小程序打开后，在一段时间内（目前：5分钟）再次被打开，此时会将后台的小程序切换到前台。\n冷启动是指: 小程序首次打开或销毁后再次被打开.\n\n## 更新版本\n冷启动时, 如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。\n如果要马上应用最新版本，使用 wx.getUpdateManager API 进行处理。\n\n代码如下\n```\n/ 在app.js里写下以下代码\n  onLaunch () {\n    if (wx.canIUse('getUpdateManager')) {\n      const updateManager = wx.getUpdateManager()\n      updateManager.onCheckForUpdate(function (res) {\n        console.log('onCheckForUpdate====', res)\n        // 请求完新版本信息的回调\n        if (res.hasUpdate) {\n          console.log('res.hasUpdate====')\n          updateManager.onUpdateReady(function () {\n            wx.showModal({\n              title: '更新提示',\n              content: '新版本已经准备好，是否重启应用？',\n              success: function (res) {\n                console.log('success====', res)\n                // res: {errMsg: \"showModal: ok\", cancel: false, confirm: true}\n                if (res.confirm) {\n                  // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启\n                  updateManager.applyUpdate()\n                }\n              }\n            })\n          })\n          updateManager.onUpdateFailed(function () {\n            // 新的版本下载失败\n            wx.showModal({\n              title: '已经有新版本了哟~',\n              content: '新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~'\n            })\n          })\n        }\n      })\n    }\n  }\n```\n小程序重新初始化时会触发onLaunch事件\nonLaunch事件会触发在页面onShow事件之前.获取小程序更新版本可以写在onLaunch里.\n\n`注意：在开发和体验版无法测试版本更新`\n\n需要在开发者工具里,编译时选择\"模拟更新编译\"\n![图片.png](https://upload-images.jianshu.io/upload_images/12553249-596b037faafe349e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n(部分开发者工具版本, 每次update编译时都需要重新勾选此选项)\n点击确定,重新编译.\n页面会弹窗显示:\n![图片.png](https://upload-images.jianshu.io/upload_images/12553249-d8fce840734a0c6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击确定后：\n![图片.png](https://upload-images.jianshu.io/upload_images/12553249-28cdc47ab292f08b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n随着小程序的不断更新, 部分功能可能需要最新版的微信客户端才能使用. 这时候可以弹窗提示用户更新到最新版本微信\n```\n if (wx.canIUse('getUpdateManager')) {\n  ...\n} else {\n  // can't use getUpdateManager\n  wx.showModal({\n        title: '提示',\n        content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'\n   })\n```\n完整版本:\n```\nonLaunch () {\n    if (wx.canIUse('getUpdateManager')) {\n      const updateManager = wx.getUpdateManager()\n      updateManager.onCheckForUpdate(function (res) {\n        if (res.hasUpdate) {\n          updateManager.onUpdateReady(function () {\n            wx.showModal({\n              title: '更新提示',\n              content: '新版本已经准备好，是否重启应用？',\n              success: function (res) {\n                if (res.confirm) {\n                  updateManager.applyUpdate()\n                }\n              }\n            })\n          })\n          updateManager.onUpdateFailed(function () {\n            wx.showModal({\n              title: '已经有新版本了哟~',\n              content: '新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~'\n            })\n          })\n        }\n      })\n    } else {\n      wx.showModal({\n        title: '提示',\n        content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'\n      })\n    }\n  }\n```\n如果在onLaunch里进行请求, 这是异步请求. 如果对交互顺序有要求, 如: 版本更新--重新获取数据-- 用户展示, 那么需要考虑在callback里进行重获数据.小程序启动时，正常是会热更新，下载新版本的包，下一次启动就会使用新包。但发现有更新不成功的情况发生.\n官方回答: 策略生效跟网络环境以及发布时间等若干因素有关，会尽可能让小程序快地更新，但无法保证每次都热更新成功。\n小程序的异步更新发生在冷启动过程. 官方不建议热更新. 原因:\n![图片.png](https://upload-images.jianshu.io/upload_images/12553249-69b50b7aa0385509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/微信小程序版本自动更新.md","raw":"---\ntitle: 微信小程序版本自动更新\ntags:\n  - 小程序\ncategories:\n  - Java\ndate: 2020-01-07 17:24:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hY2ExNmRhNWQzNWYxMDIyLnBuZw?x-oss-process=image/format,png)\n<!-- more -->\n\n>公司的小程序项目上线, 后期还会有小型的版本迭代. 为了让用户能在我们进行版本迭代后及时使用最新版本的功能. 做了以下优化..\n\n## 小程序的销毁\n当用户点击左上角关闭，或者按了设备Home 键离开微信，小程序并没有直接销毁，而是进入了后台；\n当再次进入微信或再次打开小程序，又会从后台进入前台，只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。\n\n## \"冷启动\" 和 \"热启动\".\n热启动是指: 小程序打开后，在一段时间内（目前：5分钟）再次被打开，此时会将后台的小程序切换到前台。\n冷启动是指: 小程序首次打开或销毁后再次被打开.\n\n## 更新版本\n冷启动时, 如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。\n如果要马上应用最新版本，使用 wx.getUpdateManager API 进行处理。\n\n代码如下\n```\n/ 在app.js里写下以下代码\n  onLaunch () {\n    if (wx.canIUse('getUpdateManager')) {\n      const updateManager = wx.getUpdateManager()\n      updateManager.onCheckForUpdate(function (res) {\n        console.log('onCheckForUpdate====', res)\n        // 请求完新版本信息的回调\n        if (res.hasUpdate) {\n          console.log('res.hasUpdate====')\n          updateManager.onUpdateReady(function () {\n            wx.showModal({\n              title: '更新提示',\n              content: '新版本已经准备好，是否重启应用？',\n              success: function (res) {\n                console.log('success====', res)\n                // res: {errMsg: \"showModal: ok\", cancel: false, confirm: true}\n                if (res.confirm) {\n                  // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启\n                  updateManager.applyUpdate()\n                }\n              }\n            })\n          })\n          updateManager.onUpdateFailed(function () {\n            // 新的版本下载失败\n            wx.showModal({\n              title: '已经有新版本了哟~',\n              content: '新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~'\n            })\n          })\n        }\n      })\n    }\n  }\n```\n小程序重新初始化时会触发onLaunch事件\nonLaunch事件会触发在页面onShow事件之前.获取小程序更新版本可以写在onLaunch里.\n\n`注意：在开发和体验版无法测试版本更新`\n\n需要在开发者工具里,编译时选择\"模拟更新编译\"\n![图片.png](https://upload-images.jianshu.io/upload_images/12553249-596b037faafe349e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n(部分开发者工具版本, 每次update编译时都需要重新勾选此选项)\n点击确定,重新编译.\n页面会弹窗显示:\n![图片.png](https://upload-images.jianshu.io/upload_images/12553249-d8fce840734a0c6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击确定后：\n![图片.png](https://upload-images.jianshu.io/upload_images/12553249-28cdc47ab292f08b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n随着小程序的不断更新, 部分功能可能需要最新版的微信客户端才能使用. 这时候可以弹窗提示用户更新到最新版本微信\n```\n if (wx.canIUse('getUpdateManager')) {\n  ...\n} else {\n  // can't use getUpdateManager\n  wx.showModal({\n        title: '提示',\n        content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'\n   })\n```\n完整版本:\n```\nonLaunch () {\n    if (wx.canIUse('getUpdateManager')) {\n      const updateManager = wx.getUpdateManager()\n      updateManager.onCheckForUpdate(function (res) {\n        if (res.hasUpdate) {\n          updateManager.onUpdateReady(function () {\n            wx.showModal({\n              title: '更新提示',\n              content: '新版本已经准备好，是否重启应用？',\n              success: function (res) {\n                if (res.confirm) {\n                  updateManager.applyUpdate()\n                }\n              }\n            })\n          })\n          updateManager.onUpdateFailed(function () {\n            wx.showModal({\n              title: '已经有新版本了哟~',\n              content: '新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~'\n            })\n          })\n        }\n      })\n    } else {\n      wx.showModal({\n        title: '提示',\n        content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'\n      })\n    }\n  }\n```\n如果在onLaunch里进行请求, 这是异步请求. 如果对交互顺序有要求, 如: 版本更新--重新获取数据-- 用户展示, 那么需要考虑在callback里进行重获数据.小程序启动时，正常是会热更新，下载新版本的包，下一次启动就会使用新包。但发现有更新不成功的情况发生.\n官方回答: 策略生效跟网络环境以及发布时间等若干因素有关，会尽可能让小程序快地更新，但无法保证每次都热更新成功。\n小程序的异步更新发生在冷启动过程. 官方不建议热更新. 原因:\n![图片.png](https://upload-images.jianshu.io/upload_images/12553249-69b50b7aa0385509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"微信小程序版本自动更新","published":1,"updated":"2020-01-09T09:53:15.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwk4000xsopshtbradjc","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hY2ExNmRhNWQzNWYxMDIyLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>公司的小程序项目上线, 后期还会有小型的版本迭代. 为了让用户能在我们进行版本迭代后及时使用最新版本的功能. 做了以下优化..</p>\n</blockquote>\n<h2 id=\"小程序的销毁\"><a href=\"#小程序的销毁\" class=\"headerlink\" title=\"小程序的销毁\"></a>小程序的销毁</h2><p>当用户点击左上角关闭，或者按了设备Home 键离开微信，小程序并没有直接销毁，而是进入了后台；<br>当再次进入微信或再次打开小程序，又会从后台进入前台，只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。</p>\n<h2 id=\"“冷启动”-和-“热启动”\"><a href=\"#“冷启动”-和-“热启动”\" class=\"headerlink\" title=\"“冷启动” 和 “热启动”.\"></a>“冷启动” 和 “热启动”.</h2><p>热启动是指: 小程序打开后，在一段时间内（目前：5分钟）再次被打开，此时会将后台的小程序切换到前台。<br>冷启动是指: 小程序首次打开或销毁后再次被打开.</p>\n<h2 id=\"更新版本\"><a href=\"#更新版本\" class=\"headerlink\" title=\"更新版本\"></a>更新版本</h2><p>冷启动时, 如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。<br>如果要马上应用最新版本，使用 wx.getUpdateManager API 进行处理。</p>\n<p>代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F; 在app.js里写下以下代码</span><br><span class=\"line\">  onLaunch () &#123;</span><br><span class=\"line\">    if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class=\"line\">      const updateManager &#x3D; wx.getUpdateManager()</span><br><span class=\"line\">      updateManager.onCheckForUpdate(function (res) &#123;</span><br><span class=\"line\">        console.log(&#39;onCheckForUpdate&#x3D;&#x3D;&#x3D;&#x3D;&#39;, res)</span><br><span class=\"line\">        &#x2F;&#x2F; 请求完新版本信息的回调</span><br><span class=\"line\">        if (res.hasUpdate) &#123;</span><br><span class=\"line\">          console.log(&#39;res.hasUpdate&#x3D;&#x3D;&#x3D;&#x3D;&#39;)</span><br><span class=\"line\">          updateManager.onUpdateReady(function () &#123;</span><br><span class=\"line\">            wx.showModal(&#123;</span><br><span class=\"line\">              title: &#39;更新提示&#39;,</span><br><span class=\"line\">              content: &#39;新版本已经准备好，是否重启应用？&#39;,</span><br><span class=\"line\">              success: function (res) &#123;</span><br><span class=\"line\">                console.log(&#39;success&#x3D;&#x3D;&#x3D;&#x3D;&#39;, res)</span><br><span class=\"line\">                &#x2F;&#x2F; res: &#123;errMsg: &quot;showModal: ok&quot;, cancel: false, confirm: true&#125;</span><br><span class=\"line\">                if (res.confirm) &#123;</span><br><span class=\"line\">                  &#x2F;&#x2F; 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span><br><span class=\"line\">                  updateManager.applyUpdate()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          updateManager.onUpdateFailed(function () &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 新的版本下载失败</span><br><span class=\"line\">            wx.showModal(&#123;</span><br><span class=\"line\">              title: &#39;已经有新版本了哟~&#39;,</span><br><span class=\"line\">              content: &#39;新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~&#39;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>小程序重新初始化时会触发onLaunch事件<br>onLaunch事件会触发在页面onShow事件之前.获取小程序更新版本可以写在onLaunch里.</p>\n<p><code>注意：在开发和体验版无法测试版本更新</code></p>\n<p>需要在开发者工具里,编译时选择”模拟更新编译”<br><img src=\"https://upload-images.jianshu.io/upload_images/12553249-596b037faafe349e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"></p>\n<p>(部分开发者工具版本, 每次update编译时都需要重新勾选此选项)<br>点击确定,重新编译.<br>页面会弹窗显示:<br><img src=\"https://upload-images.jianshu.io/upload_images/12553249-d8fce840734a0c6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"><br>点击确定后：<br><img src=\"https://upload-images.jianshu.io/upload_images/12553249-28cdc47ab292f08b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"></p>\n<p>随着小程序的不断更新, 部分功能可能需要最新版的微信客户端才能使用. 这时候可以弹窗提示用户更新到最新版本微信</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; can&#39;t use getUpdateManager</span><br><span class=\"line\">  wx.showModal(&#123;</span><br><span class=\"line\">        title: &#39;提示&#39;,</span><br><span class=\"line\">        content: &#39;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#39;</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<p>完整版本:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onLaunch () &#123;</span><br><span class=\"line\">    if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class=\"line\">      const updateManager &#x3D; wx.getUpdateManager()</span><br><span class=\"line\">      updateManager.onCheckForUpdate(function (res) &#123;</span><br><span class=\"line\">        if (res.hasUpdate) &#123;</span><br><span class=\"line\">          updateManager.onUpdateReady(function () &#123;</span><br><span class=\"line\">            wx.showModal(&#123;</span><br><span class=\"line\">              title: &#39;更新提示&#39;,</span><br><span class=\"line\">              content: &#39;新版本已经准备好，是否重启应用？&#39;,</span><br><span class=\"line\">              success: function (res) &#123;</span><br><span class=\"line\">                if (res.confirm) &#123;</span><br><span class=\"line\">                  updateManager.applyUpdate()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          updateManager.onUpdateFailed(function () &#123;</span><br><span class=\"line\">            wx.showModal(&#123;</span><br><span class=\"line\">              title: &#39;已经有新版本了哟~&#39;,</span><br><span class=\"line\">              content: &#39;新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~&#39;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      wx.showModal(&#123;</span><br><span class=\"line\">        title: &#39;提示&#39;,</span><br><span class=\"line\">        content: &#39;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#39;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>如果在onLaunch里进行请求, 这是异步请求. 如果对交互顺序有要求, 如: 版本更新–重新获取数据– 用户展示, 那么需要考虑在callback里进行重获数据.小程序启动时，正常是会热更新，下载新版本的包，下一次启动就会使用新包。但发现有更新不成功的情况发生.<br>官方回答: 策略生效跟网络环境以及发布时间等若干因素有关，会尽可能让小程序快地更新，但无法保证每次都热更新成功。<br>小程序的异步更新发生在冷启动过程. 官方不建议热更新. 原因:<br><img src=\"https://upload-images.jianshu.io/upload_images/12553249-69b50b7aa0385509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hY2ExNmRhNWQzNWYxMDIyLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<blockquote>\n<p>公司的小程序项目上线, 后期还会有小型的版本迭代. 为了让用户能在我们进行版本迭代后及时使用最新版本的功能. 做了以下优化..</p>\n</blockquote>\n<h2 id=\"小程序的销毁\"><a href=\"#小程序的销毁\" class=\"headerlink\" title=\"小程序的销毁\"></a>小程序的销毁</h2><p>当用户点击左上角关闭，或者按了设备Home 键离开微信，小程序并没有直接销毁，而是进入了后台；<br>当再次进入微信或再次打开小程序，又会从后台进入前台，只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。</p>\n<h2 id=\"“冷启动”-和-“热启动”\"><a href=\"#“冷启动”-和-“热启动”\" class=\"headerlink\" title=\"“冷启动” 和 “热启动”.\"></a>“冷启动” 和 “热启动”.</h2><p>热启动是指: 小程序打开后，在一段时间内（目前：5分钟）再次被打开，此时会将后台的小程序切换到前台。<br>冷启动是指: 小程序首次打开或销毁后再次被打开.</p>\n<h2 id=\"更新版本\"><a href=\"#更新版本\" class=\"headerlink\" title=\"更新版本\"></a>更新版本</h2><p>冷启动时, 如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。<br>如果要马上应用最新版本，使用 wx.getUpdateManager API 进行处理。</p>\n<p>代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F; 在app.js里写下以下代码</span><br><span class=\"line\">  onLaunch () &#123;</span><br><span class=\"line\">    if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class=\"line\">      const updateManager &#x3D; wx.getUpdateManager()</span><br><span class=\"line\">      updateManager.onCheckForUpdate(function (res) &#123;</span><br><span class=\"line\">        console.log(&#39;onCheckForUpdate&#x3D;&#x3D;&#x3D;&#x3D;&#39;, res)</span><br><span class=\"line\">        &#x2F;&#x2F; 请求完新版本信息的回调</span><br><span class=\"line\">        if (res.hasUpdate) &#123;</span><br><span class=\"line\">          console.log(&#39;res.hasUpdate&#x3D;&#x3D;&#x3D;&#x3D;&#39;)</span><br><span class=\"line\">          updateManager.onUpdateReady(function () &#123;</span><br><span class=\"line\">            wx.showModal(&#123;</span><br><span class=\"line\">              title: &#39;更新提示&#39;,</span><br><span class=\"line\">              content: &#39;新版本已经准备好，是否重启应用？&#39;,</span><br><span class=\"line\">              success: function (res) &#123;</span><br><span class=\"line\">                console.log(&#39;success&#x3D;&#x3D;&#x3D;&#x3D;&#39;, res)</span><br><span class=\"line\">                &#x2F;&#x2F; res: &#123;errMsg: &quot;showModal: ok&quot;, cancel: false, confirm: true&#125;</span><br><span class=\"line\">                if (res.confirm) &#123;</span><br><span class=\"line\">                  &#x2F;&#x2F; 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span><br><span class=\"line\">                  updateManager.applyUpdate()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          updateManager.onUpdateFailed(function () &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 新的版本下载失败</span><br><span class=\"line\">            wx.showModal(&#123;</span><br><span class=\"line\">              title: &#39;已经有新版本了哟~&#39;,</span><br><span class=\"line\">              content: &#39;新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~&#39;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>小程序重新初始化时会触发onLaunch事件<br>onLaunch事件会触发在页面onShow事件之前.获取小程序更新版本可以写在onLaunch里.</p>\n<p><code>注意：在开发和体验版无法测试版本更新</code></p>\n<p>需要在开发者工具里,编译时选择”模拟更新编译”<br><img src=\"https://upload-images.jianshu.io/upload_images/12553249-596b037faafe349e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"></p>\n<p>(部分开发者工具版本, 每次update编译时都需要重新勾选此选项)<br>点击确定,重新编译.<br>页面会弹窗显示:<br><img src=\"https://upload-images.jianshu.io/upload_images/12553249-d8fce840734a0c6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"><br>点击确定后：<br><img src=\"https://upload-images.jianshu.io/upload_images/12553249-28cdc47ab292f08b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"></p>\n<p>随着小程序的不断更新, 部分功能可能需要最新版的微信客户端才能使用. 这时候可以弹窗提示用户更新到最新版本微信</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; can&#39;t use getUpdateManager</span><br><span class=\"line\">  wx.showModal(&#123;</span><br><span class=\"line\">        title: &#39;提示&#39;,</span><br><span class=\"line\">        content: &#39;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#39;</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<p>完整版本:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onLaunch () &#123;</span><br><span class=\"line\">    if (wx.canIUse(&#39;getUpdateManager&#39;)) &#123;</span><br><span class=\"line\">      const updateManager &#x3D; wx.getUpdateManager()</span><br><span class=\"line\">      updateManager.onCheckForUpdate(function (res) &#123;</span><br><span class=\"line\">        if (res.hasUpdate) &#123;</span><br><span class=\"line\">          updateManager.onUpdateReady(function () &#123;</span><br><span class=\"line\">            wx.showModal(&#123;</span><br><span class=\"line\">              title: &#39;更新提示&#39;,</span><br><span class=\"line\">              content: &#39;新版本已经准备好，是否重启应用？&#39;,</span><br><span class=\"line\">              success: function (res) &#123;</span><br><span class=\"line\">                if (res.confirm) &#123;</span><br><span class=\"line\">                  updateManager.applyUpdate()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          updateManager.onUpdateFailed(function () &#123;</span><br><span class=\"line\">            wx.showModal(&#123;</span><br><span class=\"line\">              title: &#39;已经有新版本了哟~&#39;,</span><br><span class=\"line\">              content: &#39;新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~&#39;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      wx.showModal(&#123;</span><br><span class=\"line\">        title: &#39;提示&#39;,</span><br><span class=\"line\">        content: &#39;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#39;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>如果在onLaunch里进行请求, 这是异步请求. 如果对交互顺序有要求, 如: 版本更新–重新获取数据– 用户展示, 那么需要考虑在callback里进行重获数据.小程序启动时，正常是会热更新，下载新版本的包，下一次启动就会使用新包。但发现有更新不成功的情况发生.<br>官方回答: 策略生效跟网络环境以及发布时间等若干因素有关，会尽可能让小程序快地更新，但无法保证每次都热更新成功。<br>小程序的异步更新发生在冷启动过程. 官方不建议热更新. 原因:<br><img src=\"https://upload-images.jianshu.io/upload_images/12553249-69b50b7aa0385509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hY2ExNmRhNWQzNWYxMDIyLnBuZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Thu Jan 09 2020 17:53:15 GMT+0800 (GMT+08:00)","title":"微信小程序版本自动更新","path":"2020/01/07/微信小程序版本自动更新/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hY2ExNmRhNWQzNWYxMDIyLnBuZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hY2ExNmRhNWQzNWYxMDIyLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2020-01-07T09:24:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["小程序"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"zipkin","date":"2020-01-01T03:39:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjg3MTc0MGEwOWZiMjNjLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n### Waht is zipkin?\n![zipkin.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zYjQ1NTgzNDJhNWQ3NWVlLnBuZw?x-oss-process=image/format,png)\nZipkin是一种分布式跟踪系统。它有助于收集解决微服务架构中的延迟问题所需的时序数据。它管理这些数据的收集和查找。Zipkin的设计基于Google Dapper论文。\n\n应用程序用于向Zipkin报告时序数据。Zipkin UI还提供了一个依赖关系图，显示了每个应用程序通过的跟踪请求数。如果要解决延迟问题或错误，可以根据应用程序，跟踪长度，注释或时间戳对所有跟踪进行筛选或排序。选择跟踪后，您可以看到每个跨度所需的总跟踪时间百分比，从而可以识别问题应用程序。\n### 快速开始\n下面我们将逐步构建并启动Zipkin实例，以便在本地检查Zipkin。有三个选项：使用Java，Docker或从源代码运行。\n\n如果您熟悉Docker，这是首选的方法。如果您不熟悉Docker，请尝试通过Java或源代码运行。\n>无论您如何启动Zipkin，请浏览http：// your_host：9411以查找跟踪！\n#### Docker\n[Docker zipkin](https://github.com/openzipkin/docker-zipkin)工程可以创建docker 镜像, 提供脚本和一个[docker-compose.yml](https://github.com/openzipkin/docker-zipkin/blob/master/docker-compose.yml) 用于启动预建的镜像。最快的开始是直接运行最新的镜像：\n```\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n#### Java\n如果安装了Java 8或更高版本，最快的方法是获得最新版本后，通过java启动\n```\n>curl -sSL https://zipkin.io/quickstart.sh  |  bash -s\n\n>java -jar zipkin.jar\n```\n#### Running from Source（源代码运行）\nZipkin可以从源代码运行。要实现这一点，您需要获得[zipkin源码](https://github.com/openzipkin/zipkin)\n>get the latest source\n\n>git clone [https://github.com/openzipkin/zipkin](https://github.com/openzipkin/zipkin)\n\n>cd zipkin\n\n>Build the server and also make its dependencies\n\n>./mvnw -DskipTests --also-make -pl zipkin-server clean install\n\n>Run the server\n\n>java -jar ./zipkin-server/target/zipkin-server-*exec.jar\n\n","source":"_posts/zipkin.md","raw":"title: zipkin\ntags:\n  - 微服务\ncategories:\n  - Java\ndate: 2020-01-01 11:39:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjg3MTc0MGEwOWZiMjNjLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n### Waht is zipkin?\n![zipkin.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zYjQ1NTgzNDJhNWQ3NWVlLnBuZw?x-oss-process=image/format,png)\nZipkin是一种分布式跟踪系统。它有助于收集解决微服务架构中的延迟问题所需的时序数据。它管理这些数据的收集和查找。Zipkin的设计基于Google Dapper论文。\n\n应用程序用于向Zipkin报告时序数据。Zipkin UI还提供了一个依赖关系图，显示了每个应用程序通过的跟踪请求数。如果要解决延迟问题或错误，可以根据应用程序，跟踪长度，注释或时间戳对所有跟踪进行筛选或排序。选择跟踪后，您可以看到每个跨度所需的总跟踪时间百分比，从而可以识别问题应用程序。\n### 快速开始\n下面我们将逐步构建并启动Zipkin实例，以便在本地检查Zipkin。有三个选项：使用Java，Docker或从源代码运行。\n\n如果您熟悉Docker，这是首选的方法。如果您不熟悉Docker，请尝试通过Java或源代码运行。\n>无论您如何启动Zipkin，请浏览http：// your_host：9411以查找跟踪！\n#### Docker\n[Docker zipkin](https://github.com/openzipkin/docker-zipkin)工程可以创建docker 镜像, 提供脚本和一个[docker-compose.yml](https://github.com/openzipkin/docker-zipkin/blob/master/docker-compose.yml) 用于启动预建的镜像。最快的开始是直接运行最新的镜像：\n```\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n#### Java\n如果安装了Java 8或更高版本，最快的方法是获得最新版本后，通过java启动\n```\n>curl -sSL https://zipkin.io/quickstart.sh  |  bash -s\n\n>java -jar zipkin.jar\n```\n#### Running from Source（源代码运行）\nZipkin可以从源代码运行。要实现这一点，您需要获得[zipkin源码](https://github.com/openzipkin/zipkin)\n>get the latest source\n\n>git clone [https://github.com/openzipkin/zipkin](https://github.com/openzipkin/zipkin)\n\n>cd zipkin\n\n>Build the server and also make its dependencies\n\n>./mvnw -DskipTests --also-make -pl zipkin-server clean install\n\n>Run the server\n\n>java -jar ./zipkin-server/target/zipkin-server-*exec.jar\n\n","slug":"zipkin","published":1,"updated":"2020-01-01T05:42:58.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwk5000zsopsgi374v5q","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjg3MTc0MGEwOWZiMjNjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h3 id=\"Waht-is-zipkin\"><a href=\"#Waht-is-zipkin\" class=\"headerlink\" title=\"Waht is zipkin?\"></a>Waht is zipkin?</h3><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zYjQ1NTgzNDJhNWQ3NWVlLnBuZw?x-oss-process=image/format,png\" alt=\"zipkin.png\"><br>Zipkin是一种分布式跟踪系统。它有助于收集解决微服务架构中的延迟问题所需的时序数据。它管理这些数据的收集和查找。Zipkin的设计基于Google Dapper论文。</p>\n<p>应用程序用于向Zipkin报告时序数据。Zipkin UI还提供了一个依赖关系图，显示了每个应用程序通过的跟踪请求数。如果要解决延迟问题或错误，可以根据应用程序，跟踪长度，注释或时间戳对所有跟踪进行筛选或排序。选择跟踪后，您可以看到每个跨度所需的总跟踪时间百分比，从而可以识别问题应用程序。</p>\n<h3 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h3><p>下面我们将逐步构建并启动Zipkin实例，以便在本地检查Zipkin。有三个选项：使用Java，Docker或从源代码运行。</p>\n<p>如果您熟悉Docker，这是首选的方法。如果您不熟悉Docker，请尝试通过Java或源代码运行。</p>\n<blockquote>\n<p>无论您如何启动Zipkin，请浏览http：// your_host：9411以查找跟踪！</p>\n</blockquote>\n<h4 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h4><p><a href=\"https://github.com/openzipkin/docker-zipkin\" target=\"_blank\" rel=\"noopener\">Docker zipkin</a>工程可以创建docker 镜像, 提供脚本和一个<a href=\"https://github.com/openzipkin/docker-zipkin/blob/master/docker-compose.yml\" target=\"_blank\" rel=\"noopener\">docker-compose.yml</a> 用于启动预建的镜像。最快的开始是直接运行最新的镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9411:9411 openzipkin&#x2F;zipkin</span><br></pre></td></tr></table></figure>\n<h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><p>如果安装了Java 8或更高版本，最快的方法是获得最新版本后，通过java启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;curl -sSL https:&#x2F;&#x2F;zipkin.io&#x2F;quickstart.sh  |  bash -s</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;java -jar zipkin.jar</span><br></pre></td></tr></table></figure>\n<h4 id=\"Running-from-Source（源代码运行）\"><a href=\"#Running-from-Source（源代码运行）\" class=\"headerlink\" title=\"Running from Source（源代码运行）\"></a>Running from Source（源代码运行）</h4><p>Zipkin可以从源代码运行。要实现这一点，您需要获得<a href=\"https://github.com/openzipkin/zipkin\" target=\"_blank\" rel=\"noopener\">zipkin源码</a></p>\n<blockquote>\n<p>get the latest source</p>\n</blockquote>\n<blockquote>\n<p>git clone <a href=\"https://github.com/openzipkin/zipkin\" target=\"_blank\" rel=\"noopener\">https://github.com/openzipkin/zipkin</a></p>\n</blockquote>\n<blockquote>\n<p>cd zipkin</p>\n</blockquote>\n<blockquote>\n<p>Build the server and also make its dependencies</p>\n</blockquote>\n<blockquote>\n<p>./mvnw -DskipTests –also-make -pl zipkin-server clean install</p>\n</blockquote>\n<blockquote>\n<p>Run the server</p>\n</blockquote>\n<blockquote>\n<p>java -jar ./zipkin-server/target/zipkin-server-*exec.jar</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjg3MTc0MGEwOWZiMjNjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h3 id=\"Waht-is-zipkin\"><a href=\"#Waht-is-zipkin\" class=\"headerlink\" title=\"Waht is zipkin?\"></a>Waht is zipkin?</h3><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zYjQ1NTgzNDJhNWQ3NWVlLnBuZw?x-oss-process=image/format,png\" alt=\"zipkin.png\"><br>Zipkin是一种分布式跟踪系统。它有助于收集解决微服务架构中的延迟问题所需的时序数据。它管理这些数据的收集和查找。Zipkin的设计基于Google Dapper论文。</p>\n<p>应用程序用于向Zipkin报告时序数据。Zipkin UI还提供了一个依赖关系图，显示了每个应用程序通过的跟踪请求数。如果要解决延迟问题或错误，可以根据应用程序，跟踪长度，注释或时间戳对所有跟踪进行筛选或排序。选择跟踪后，您可以看到每个跨度所需的总跟踪时间百分比，从而可以识别问题应用程序。</p>\n<h3 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h3><p>下面我们将逐步构建并启动Zipkin实例，以便在本地检查Zipkin。有三个选项：使用Java，Docker或从源代码运行。</p>\n<p>如果您熟悉Docker，这是首选的方法。如果您不熟悉Docker，请尝试通过Java或源代码运行。</p>\n<blockquote>\n<p>无论您如何启动Zipkin，请浏览http：// your_host：9411以查找跟踪！</p>\n</blockquote>\n<h4 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h4><p><a href=\"https://github.com/openzipkin/docker-zipkin\" target=\"_blank\" rel=\"noopener\">Docker zipkin</a>工程可以创建docker 镜像, 提供脚本和一个<a href=\"https://github.com/openzipkin/docker-zipkin/blob/master/docker-compose.yml\" target=\"_blank\" rel=\"noopener\">docker-compose.yml</a> 用于启动预建的镜像。最快的开始是直接运行最新的镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9411:9411 openzipkin&#x2F;zipkin</span><br></pre></td></tr></table></figure>\n<h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><p>如果安装了Java 8或更高版本，最快的方法是获得最新版本后，通过java启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;curl -sSL https:&#x2F;&#x2F;zipkin.io&#x2F;quickstart.sh  |  bash -s</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;java -jar zipkin.jar</span><br></pre></td></tr></table></figure>\n<h4 id=\"Running-from-Source（源代码运行）\"><a href=\"#Running-from-Source（源代码运行）\" class=\"headerlink\" title=\"Running from Source（源代码运行）\"></a>Running from Source（源代码运行）</h4><p>Zipkin可以从源代码运行。要实现这一点，您需要获得<a href=\"https://github.com/openzipkin/zipkin\" target=\"_blank\" rel=\"noopener\">zipkin源码</a></p>\n<blockquote>\n<p>get the latest source</p>\n</blockquote>\n<blockquote>\n<p>git clone <a href=\"https://github.com/openzipkin/zipkin\" target=\"_blank\" rel=\"noopener\">https://github.com/openzipkin/zipkin</a></p>\n</blockquote>\n<blockquote>\n<p>cd zipkin</p>\n</blockquote>\n<blockquote>\n<p>Build the server and also make its dependencies</p>\n</blockquote>\n<blockquote>\n<p>./mvnw -DskipTests –also-make -pl zipkin-server clean install</p>\n</blockquote>\n<blockquote>\n<p>Run the server</p>\n</blockquote>\n<blockquote>\n<p>java -jar ./zipkin-server/target/zipkin-server-*exec.jar</p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjg3MTc0MGEwOWZiMjNjLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 13:42:58 GMT+0800 (GMT+08:00)","title":"zipkin","path":"2020/01/01/zipkin/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjg3MTc0MGEwOWZiMjNjLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjg3MTc0MGEwOWZiMjNjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2020-01-01T03:39:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["微服务"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"微服务注册中心为什么要使用Consul？","date":"2020-01-01T03:03:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzZiNzMzZDk3YjI1MDI3LmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n### 一、Eureka不建议使用\n\n在选型微服务注册中心时，一定要长远考虑，SpringCloud提供了Eureka作为服务注册中心，我们可以开箱即用，但是，对于服务注册中心随着业务需求的不断变化，对服务注册中心提出了更高要求，Eureka就不太适合了，看到“Eureka 2.0 开源工作宣告停止，继续使用风险自负”。\n![eureka.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04ZjA4NGE5Y2VlMDM0OGM3LnBuZw?x-oss-process=image/format,png)\n这意味着如果开发者继续使用作为 2.x 分支上现有工作 repo 一部分发布的代码库和工件，则将自负风险，对此，专家建议开发者尽快将相关业务迁移到 `Consul/ZooKeeper/Etcd `等工具上。\n### 二、Consul与Zookeeper的区别\n\nConsul是一个在国外流行的服务发现和配置共享的服务软件。本文翻译自Consul的官方文档，文中重点讲述：在与主流同类软件`ZooKeeper、Doozerd`以及`Etcd`比较时，Consul的优势所在。\n\n`ZooKeeper、Doozerd、Etcd`在架构上都非常相似，它们都有服务节点（`server node`），而这些服务节点的操作都要求达到节点的仲裁数（通常，节点的仲裁数遵循的是简单多数原则）。此外，它们都是强一致性的，并且提供各种原语。通过应用程序内部的客户端lib库，这些原语可以用来构建复杂的分布式系统。\n\n`Consul`在一个单一的数据中心内部使用服务节点。在每个数据中心中，为了`Consule`能够运行，并且保持强一致性，Consul服务端需要仲裁。然而，`Consul`原生支持多数据中心，就像一个丰富`gossip`系统连接服务器节点和客户端一样。\n\n当提供K/V存储的时候，这些系统具有大致相同的语义，读取是强一致性的，并且在面对网络分区的时候，为了保持一致性，读取的可用性是可以牺牲的。然而，当系统应用于复杂情况时，这种差异会变得更加明显。\n\n这些系统提供的语义对开发人员构建服务发现系统很有吸引力，但更重要的是，强调开发人员要构建这些特性。`ZooKeeper`只提供一个原始的K/V值存储，并要求开发人员构建他们自己的系统来提供服务发现功能。相反的是，`Consul`提供了一个坚固的框架，这不仅仅是为了提供服务发现功能，也是为了减少推测工作和开发工作量。客户端只需简单地完成服务注册工作，然后使用一个`DNS`接口或者`HTTP`接口就可以执行工作了，而其他系统则需要你定制自己的解决方案。\n\n一个令人信服的服务发现框架必须包含健康检测功能，并且考虑失败的可能性。要是节点失败或者服务故障了，即使开发人员知道节点A提供Foo服务也是没用的。Navie系统利用的是心跳、周期性更新和TTLs，这些系统不仅需要工作量与节点数量成线性关系，并且对服务器的固定数量提出了要求。此外，故障检测窗口的存活时间至少要和TTL一样长。\n\n`ZooKeeper`提供了临时节点，这些临时节点就是K/V条目，当客户端断开连接时，这些条目会被删除。虽然这些临时节点比一个心跳系统更高级，但仍存在固有的扩展性问题，并且会增加客户端的复杂性。与`ZooKeeper`服务器端连接时，客户端必须保持活跃，并且去做持续性连接。此外，`ZooKeeper`还需要胖客户端，而胖客户端是很难编写，并且胖客户端会经常导致调试质询。\n\n`Consul`使用一个完全不同的架构进行健康检测。`Consul`客户端可以运行在集群中的每一个节点上，而不是拥有服务器节点，这些`Consul`客户端属于一个`gossip pool`，`gossip pool`提供了一些功能，包括分布式健康检测。`gossip`协议提供了一个高效的故障检测工具，这个故障检测工具可以应用到任意规模的集群，而不仅仅是作用于特定的服务器组。同时，这个故障检测工具也支持在本地进行多种健康检测。与此相反，ZooKeeper的临时节点只是一个非常原始的活跃度检测。因为有了`Consul`，客户端可以检测web服务器是否正在返回200状态码，内存利用率是否达到临界点，是否有足够的数据存储盘等。此外，`ZooKeeper`会暴露系统的复杂性给客户端，为了避免`ZooKeeper`出现的这种情况，`Consul`只提供一个简单HTTP接口。\n\n`Consul`为服务发现、健康检测、K/V存储和多数据中心提供了一流的支持。为了支持任意存储，而不仅仅是简单的K/V存储，其他系统都要求工具和lib库要率先建立。然而，通过使用客户端节点，`Consul`提供了一个简单的API，这个API的开发只需要瘦客户端就可以了， 而且，通过使用配置文件和DNS接口，开发人员可以建立完整的服务发现解决方案，最终，达到避免开发API的目的。\n\n","source":"_posts/微服务注册中心为什么要使用Consul？.md","raw":"title: 微服务注册中心为什么要使用Consul？\ntags:\n  - 微服务\ncategories:\n  - Java\ndate: 2020-01-01 11:03:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzZiNzMzZDk3YjI1MDI3LmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n### 一、Eureka不建议使用\n\n在选型微服务注册中心时，一定要长远考虑，SpringCloud提供了Eureka作为服务注册中心，我们可以开箱即用，但是，对于服务注册中心随着业务需求的不断变化，对服务注册中心提出了更高要求，Eureka就不太适合了，看到“Eureka 2.0 开源工作宣告停止，继续使用风险自负”。\n![eureka.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04ZjA4NGE5Y2VlMDM0OGM3LnBuZw?x-oss-process=image/format,png)\n这意味着如果开发者继续使用作为 2.x 分支上现有工作 repo 一部分发布的代码库和工件，则将自负风险，对此，专家建议开发者尽快将相关业务迁移到 `Consul/ZooKeeper/Etcd `等工具上。\n### 二、Consul与Zookeeper的区别\n\nConsul是一个在国外流行的服务发现和配置共享的服务软件。本文翻译自Consul的官方文档，文中重点讲述：在与主流同类软件`ZooKeeper、Doozerd`以及`Etcd`比较时，Consul的优势所在。\n\n`ZooKeeper、Doozerd、Etcd`在架构上都非常相似，它们都有服务节点（`server node`），而这些服务节点的操作都要求达到节点的仲裁数（通常，节点的仲裁数遵循的是简单多数原则）。此外，它们都是强一致性的，并且提供各种原语。通过应用程序内部的客户端lib库，这些原语可以用来构建复杂的分布式系统。\n\n`Consul`在一个单一的数据中心内部使用服务节点。在每个数据中心中，为了`Consule`能够运行，并且保持强一致性，Consul服务端需要仲裁。然而，`Consul`原生支持多数据中心，就像一个丰富`gossip`系统连接服务器节点和客户端一样。\n\n当提供K/V存储的时候，这些系统具有大致相同的语义，读取是强一致性的，并且在面对网络分区的时候，为了保持一致性，读取的可用性是可以牺牲的。然而，当系统应用于复杂情况时，这种差异会变得更加明显。\n\n这些系统提供的语义对开发人员构建服务发现系统很有吸引力，但更重要的是，强调开发人员要构建这些特性。`ZooKeeper`只提供一个原始的K/V值存储，并要求开发人员构建他们自己的系统来提供服务发现功能。相反的是，`Consul`提供了一个坚固的框架，这不仅仅是为了提供服务发现功能，也是为了减少推测工作和开发工作量。客户端只需简单地完成服务注册工作，然后使用一个`DNS`接口或者`HTTP`接口就可以执行工作了，而其他系统则需要你定制自己的解决方案。\n\n一个令人信服的服务发现框架必须包含健康检测功能，并且考虑失败的可能性。要是节点失败或者服务故障了，即使开发人员知道节点A提供Foo服务也是没用的。Navie系统利用的是心跳、周期性更新和TTLs，这些系统不仅需要工作量与节点数量成线性关系，并且对服务器的固定数量提出了要求。此外，故障检测窗口的存活时间至少要和TTL一样长。\n\n`ZooKeeper`提供了临时节点，这些临时节点就是K/V条目，当客户端断开连接时，这些条目会被删除。虽然这些临时节点比一个心跳系统更高级，但仍存在固有的扩展性问题，并且会增加客户端的复杂性。与`ZooKeeper`服务器端连接时，客户端必须保持活跃，并且去做持续性连接。此外，`ZooKeeper`还需要胖客户端，而胖客户端是很难编写，并且胖客户端会经常导致调试质询。\n\n`Consul`使用一个完全不同的架构进行健康检测。`Consul`客户端可以运行在集群中的每一个节点上，而不是拥有服务器节点，这些`Consul`客户端属于一个`gossip pool`，`gossip pool`提供了一些功能，包括分布式健康检测。`gossip`协议提供了一个高效的故障检测工具，这个故障检测工具可以应用到任意规模的集群，而不仅仅是作用于特定的服务器组。同时，这个故障检测工具也支持在本地进行多种健康检测。与此相反，ZooKeeper的临时节点只是一个非常原始的活跃度检测。因为有了`Consul`，客户端可以检测web服务器是否正在返回200状态码，内存利用率是否达到临界点，是否有足够的数据存储盘等。此外，`ZooKeeper`会暴露系统的复杂性给客户端，为了避免`ZooKeeper`出现的这种情况，`Consul`只提供一个简单HTTP接口。\n\n`Consul`为服务发现、健康检测、K/V存储和多数据中心提供了一流的支持。为了支持任意存储，而不仅仅是简单的K/V存储，其他系统都要求工具和lib库要率先建立。然而，通过使用客户端节点，`Consul`提供了一个简单的API，这个API的开发只需要瘦客户端就可以了， 而且，通过使用配置文件和DNS接口，开发人员可以建立完整的服务发现解决方案，最终，达到避免开发API的目的。\n\n","slug":"微服务注册中心为什么要使用Consul？","published":1,"updated":"2020-01-01T03:05:59.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwk60013sops3ih73tlv","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzZiNzMzZDk3YjI1MDI3LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h3 id=\"一、Eureka不建议使用\"><a href=\"#一、Eureka不建议使用\" class=\"headerlink\" title=\"一、Eureka不建议使用\"></a>一、Eureka不建议使用</h3><p>在选型微服务注册中心时，一定要长远考虑，SpringCloud提供了Eureka作为服务注册中心，我们可以开箱即用，但是，对于服务注册中心随着业务需求的不断变化，对服务注册中心提出了更高要求，Eureka就不太适合了，看到“Eureka 2.0 开源工作宣告停止，继续使用风险自负”。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04ZjA4NGE5Y2VlMDM0OGM3LnBuZw?x-oss-process=image/format,png\" alt=\"eureka.png\"><br>这意味着如果开发者继续使用作为 2.x 分支上现有工作 repo 一部分发布的代码库和工件，则将自负风险，对此，专家建议开发者尽快将相关业务迁移到 <code>Consul/ZooKeeper/Etcd</code>等工具上。</p>\n<h3 id=\"二、Consul与Zookeeper的区别\"><a href=\"#二、Consul与Zookeeper的区别\" class=\"headerlink\" title=\"二、Consul与Zookeeper的区别\"></a>二、Consul与Zookeeper的区别</h3><p>Consul是一个在国外流行的服务发现和配置共享的服务软件。本文翻译自Consul的官方文档，文中重点讲述：在与主流同类软件<code>ZooKeeper、Doozerd</code>以及<code>Etcd</code>比较时，Consul的优势所在。</p>\n<p><code>ZooKeeper、Doozerd、Etcd</code>在架构上都非常相似，它们都有服务节点（<code>server node</code>），而这些服务节点的操作都要求达到节点的仲裁数（通常，节点的仲裁数遵循的是简单多数原则）。此外，它们都是强一致性的，并且提供各种原语。通过应用程序内部的客户端lib库，这些原语可以用来构建复杂的分布式系统。</p>\n<p><code>Consul</code>在一个单一的数据中心内部使用服务节点。在每个数据中心中，为了<code>Consule</code>能够运行，并且保持强一致性，Consul服务端需要仲裁。然而，<code>Consul</code>原生支持多数据中心，就像一个丰富<code>gossip</code>系统连接服务器节点和客户端一样。</p>\n<p>当提供K/V存储的时候，这些系统具有大致相同的语义，读取是强一致性的，并且在面对网络分区的时候，为了保持一致性，读取的可用性是可以牺牲的。然而，当系统应用于复杂情况时，这种差异会变得更加明显。</p>\n<p>这些系统提供的语义对开发人员构建服务发现系统很有吸引力，但更重要的是，强调开发人员要构建这些特性。<code>ZooKeeper</code>只提供一个原始的K/V值存储，并要求开发人员构建他们自己的系统来提供服务发现功能。相反的是，<code>Consul</code>提供了一个坚固的框架，这不仅仅是为了提供服务发现功能，也是为了减少推测工作和开发工作量。客户端只需简单地完成服务注册工作，然后使用一个<code>DNS</code>接口或者<code>HTTP</code>接口就可以执行工作了，而其他系统则需要你定制自己的解决方案。</p>\n<p>一个令人信服的服务发现框架必须包含健康检测功能，并且考虑失败的可能性。要是节点失败或者服务故障了，即使开发人员知道节点A提供Foo服务也是没用的。Navie系统利用的是心跳、周期性更新和TTLs，这些系统不仅需要工作量与节点数量成线性关系，并且对服务器的固定数量提出了要求。此外，故障检测窗口的存活时间至少要和TTL一样长。</p>\n<p><code>ZooKeeper</code>提供了临时节点，这些临时节点就是K/V条目，当客户端断开连接时，这些条目会被删除。虽然这些临时节点比一个心跳系统更高级，但仍存在固有的扩展性问题，并且会增加客户端的复杂性。与<code>ZooKeeper</code>服务器端连接时，客户端必须保持活跃，并且去做持续性连接。此外，<code>ZooKeeper</code>还需要胖客户端，而胖客户端是很难编写，并且胖客户端会经常导致调试质询。</p>\n<p><code>Consul</code>使用一个完全不同的架构进行健康检测。<code>Consul</code>客户端可以运行在集群中的每一个节点上，而不是拥有服务器节点，这些<code>Consul</code>客户端属于一个<code>gossip pool</code>，<code>gossip pool</code>提供了一些功能，包括分布式健康检测。<code>gossip</code>协议提供了一个高效的故障检测工具，这个故障检测工具可以应用到任意规模的集群，而不仅仅是作用于特定的服务器组。同时，这个故障检测工具也支持在本地进行多种健康检测。与此相反，ZooKeeper的临时节点只是一个非常原始的活跃度检测。因为有了<code>Consul</code>，客户端可以检测web服务器是否正在返回200状态码，内存利用率是否达到临界点，是否有足够的数据存储盘等。此外，<code>ZooKeeper</code>会暴露系统的复杂性给客户端，为了避免<code>ZooKeeper</code>出现的这种情况，<code>Consul</code>只提供一个简单HTTP接口。</p>\n<p><code>Consul</code>为服务发现、健康检测、K/V存储和多数据中心提供了一流的支持。为了支持任意存储，而不仅仅是简单的K/V存储，其他系统都要求工具和lib库要率先建立。然而，通过使用客户端节点，<code>Consul</code>提供了一个简单的API，这个API的开发只需要瘦客户端就可以了， 而且，通过使用配置文件和DNS接口，开发人员可以建立完整的服务发现解决方案，最终，达到避免开发API的目的。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzZiNzMzZDk3YjI1MDI3LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h3 id=\"一、Eureka不建议使用\"><a href=\"#一、Eureka不建议使用\" class=\"headerlink\" title=\"一、Eureka不建议使用\"></a>一、Eureka不建议使用</h3><p>在选型微服务注册中心时，一定要长远考虑，SpringCloud提供了Eureka作为服务注册中心，我们可以开箱即用，但是，对于服务注册中心随着业务需求的不断变化，对服务注册中心提出了更高要求，Eureka就不太适合了，看到“Eureka 2.0 开源工作宣告停止，继续使用风险自负”。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04ZjA4NGE5Y2VlMDM0OGM3LnBuZw?x-oss-process=image/format,png\" alt=\"eureka.png\"><br>这意味着如果开发者继续使用作为 2.x 分支上现有工作 repo 一部分发布的代码库和工件，则将自负风险，对此，专家建议开发者尽快将相关业务迁移到 <code>Consul/ZooKeeper/Etcd</code>等工具上。</p>\n<h3 id=\"二、Consul与Zookeeper的区别\"><a href=\"#二、Consul与Zookeeper的区别\" class=\"headerlink\" title=\"二、Consul与Zookeeper的区别\"></a>二、Consul与Zookeeper的区别</h3><p>Consul是一个在国外流行的服务发现和配置共享的服务软件。本文翻译自Consul的官方文档，文中重点讲述：在与主流同类软件<code>ZooKeeper、Doozerd</code>以及<code>Etcd</code>比较时，Consul的优势所在。</p>\n<p><code>ZooKeeper、Doozerd、Etcd</code>在架构上都非常相似，它们都有服务节点（<code>server node</code>），而这些服务节点的操作都要求达到节点的仲裁数（通常，节点的仲裁数遵循的是简单多数原则）。此外，它们都是强一致性的，并且提供各种原语。通过应用程序内部的客户端lib库，这些原语可以用来构建复杂的分布式系统。</p>\n<p><code>Consul</code>在一个单一的数据中心内部使用服务节点。在每个数据中心中，为了<code>Consule</code>能够运行，并且保持强一致性，Consul服务端需要仲裁。然而，<code>Consul</code>原生支持多数据中心，就像一个丰富<code>gossip</code>系统连接服务器节点和客户端一样。</p>\n<p>当提供K/V存储的时候，这些系统具有大致相同的语义，读取是强一致性的，并且在面对网络分区的时候，为了保持一致性，读取的可用性是可以牺牲的。然而，当系统应用于复杂情况时，这种差异会变得更加明显。</p>\n<p>这些系统提供的语义对开发人员构建服务发现系统很有吸引力，但更重要的是，强调开发人员要构建这些特性。<code>ZooKeeper</code>只提供一个原始的K/V值存储，并要求开发人员构建他们自己的系统来提供服务发现功能。相反的是，<code>Consul</code>提供了一个坚固的框架，这不仅仅是为了提供服务发现功能，也是为了减少推测工作和开发工作量。客户端只需简单地完成服务注册工作，然后使用一个<code>DNS</code>接口或者<code>HTTP</code>接口就可以执行工作了，而其他系统则需要你定制自己的解决方案。</p>\n<p>一个令人信服的服务发现框架必须包含健康检测功能，并且考虑失败的可能性。要是节点失败或者服务故障了，即使开发人员知道节点A提供Foo服务也是没用的。Navie系统利用的是心跳、周期性更新和TTLs，这些系统不仅需要工作量与节点数量成线性关系，并且对服务器的固定数量提出了要求。此外，故障检测窗口的存活时间至少要和TTL一样长。</p>\n<p><code>ZooKeeper</code>提供了临时节点，这些临时节点就是K/V条目，当客户端断开连接时，这些条目会被删除。虽然这些临时节点比一个心跳系统更高级，但仍存在固有的扩展性问题，并且会增加客户端的复杂性。与<code>ZooKeeper</code>服务器端连接时，客户端必须保持活跃，并且去做持续性连接。此外，<code>ZooKeeper</code>还需要胖客户端，而胖客户端是很难编写，并且胖客户端会经常导致调试质询。</p>\n<p><code>Consul</code>使用一个完全不同的架构进行健康检测。<code>Consul</code>客户端可以运行在集群中的每一个节点上，而不是拥有服务器节点，这些<code>Consul</code>客户端属于一个<code>gossip pool</code>，<code>gossip pool</code>提供了一些功能，包括分布式健康检测。<code>gossip</code>协议提供了一个高效的故障检测工具，这个故障检测工具可以应用到任意规模的集群，而不仅仅是作用于特定的服务器组。同时，这个故障检测工具也支持在本地进行多种健康检测。与此相反，ZooKeeper的临时节点只是一个非常原始的活跃度检测。因为有了<code>Consul</code>，客户端可以检测web服务器是否正在返回200状态码，内存利用率是否达到临界点，是否有足够的数据存储盘等。此外，<code>ZooKeeper</code>会暴露系统的复杂性给客户端，为了避免<code>ZooKeeper</code>出现的这种情况，<code>Consul</code>只提供一个简单HTTP接口。</p>\n<p><code>Consul</code>为服务发现、健康检测、K/V存储和多数据中心提供了一流的支持。为了支持任意存储，而不仅仅是简单的K/V存储，其他系统都要求工具和lib库要率先建立。然而，通过使用客户端节点，<code>Consul</code>提供了一个简单的API，这个API的开发只需要瘦客户端就可以了， 而且，通过使用配置文件和DNS接口，开发人员可以建立完整的服务发现解决方案，最终，达到避免开发API的目的。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzZiNzMzZDk3YjI1MDI3LmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 11:05:59 GMT+0800 (GMT+08:00)","title":"微服务注册中心为什么要使用Consul？","path":"2020/01/01/微服务注册中心为什么要使用Consul？/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzZiNzMzZDk3YjI1MDI3LmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzZiNzMzZDk3YjI1MDI3LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2020-01-01T03:03:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["微服务"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"枚举真的比静态常量更占空间吗？","date":"2019-12-30T02:21:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZDllOTU4YWQ2OGE3MjlhLmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n>前两天在网上看到一条信息：枚举比静态常量更占用空间。\n这是真的吗？\n\n## 前言\n### 枚举\n枚举类型是Java 5中新增特性的一部分，它是一种特殊的数据类型，之所以特殊是因为它既是一种类(class)类型却又比类类型多了些特殊的约束，但是这些约束的存在也造就了枚举类型的简洁性、安全性以及便捷性。\n### 枚举实现原理\n在使用关键字enum创建枚举类型并编译后，编译器会为我们生成一个相关的类，这个类继承了Java API中的java.lang.Enum类，也就是说通过关键字enum创建枚举类型在编译后事实上也是一个类类型而且该类继承自java.lang.Enum类。\n\n## 枚举\n新建一个枚举类\n```\npackage com.example.demo;\n\n/**\n * @Author: 少年闰土\n * @Date: 2019/12/27 0027 上午 9:23\n * @Description:\n */\npublic enum Season {\n\n    SPRING(\"春天\", \"趁春踏青\"),\n    SUMMER(\"夏天\", \"夏日炎炎\"),\n    AUTUMN(\"秋天\", \"秋高气爽\"),\n    WINTER(\"冬天\", \"围炉赏雪\");\n\n    private final String name;\n    private final String desc;\n\n    Season(String name, String desc) {\n        this.name = name;\n        this.desc = desc;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n}\n```\n接下来使用javac命令进行编译：生成class文件，然后再通过javap反编译\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00OTUwMmE2NzY0NzNjMDQ0LnBuZw?x-oss-process=image/format,png)\n```\npublic final class com.example.demo.Season extends java.lang.Enum<com.example.de\nmo.Season> {\n  public static final com.example.demo.Season SPRING;\n  public static final com.example.demo.Season SUMMER;\n  public static final com.example.demo.Season AUTUMN;\n  public static final com.example.demo.Season WINTER;\n  //编译器为我们添加的静态的values()方法\n  public static com.example.demo.Season[] values();\n  //编译器为我们添加的静态的valueOf()方法，注意间接调用了Enum也类的valueOf方法\n  public static com.example.demo.Season valueOf(java.lang.String);\n  //构造方法\n  public java.lang.String getName();\n  public java.lang.String getDesc();\n  static {};\n}\n```\n## 静态常量\n```\npackage com.example.demo;\n\n/**\n * @Author: 少年闰土\n * @Date: 2019/12/27 0027 上午 10:49\n * @Description:\n */\npublic class Season {\n\n    public static final String SPRING =\"春天\";\n    public static final String SUMMER =\"夏天\";\n    public static final String AUTUMN =\"秋天\";\n    public static final String WINTER =\"冬天\";\n\n}\n\n```\njavap反编译后：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kN2I0ZTRjYjhmMWM0YzJhLnBuZw?x-oss-process=image/format,png)\n```\npublic class com.example.demo.Season {\n  public static final java.lang.String SPRING;\n  public static final java.lang.String SUMMER;\n  public static final java.lang.String AUTUMN;\n  public static final java.lang.String WINTER;\n  public com.example.demo.Season();\n}\n```\n## 对比\n枚举\n![枚举.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZTI2Y2FkNjRhMjBiNTJjLnBuZw?x-oss-process=image/format,png)\n\n静态常量\n![静态常量.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjcyN2QwMTRjYjcxNzliLnBuZw?x-oss-process=image/format,png)\n\n编译后的枚举class文件大小为1471字节，静态常量class文件大小为400字节。\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZWVkNGI4ZDFhM2IxYjAxLnBuZw?x-oss-process=image/format,png)\n\n用Chkdsk查看簇大小 \n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZGJjNTllYzA5NzMzOWRmLnBuZw?x-oss-process=image/format,png)\n\n\n经过对比枚举类型文件大小更大一些。\n\n枚举的实现原理就是定义一个类，然后实例化几个由final修饰的这个类的对象，每个实例都带有自己的元信息。而常量相比之下，没有这一层封装，只占用最基本的内存，包括引用，和它的值本身，要简单轻巧很多。如果值可以使用基本类型而不是包装类型，那更不用说了。       不过话又说回来，通常情况下我们没必要在意这种区别。如果用枚举可读性、可扩展性更好，用就是了，枚举占那点内存，沧海一粟。在性能与代码维护性之间，除个别情况，优先选后者。高级编程语言的诞生本身就是硬件提升的背景下，牺牲某些性能来降低开发门槛，提高开发效率的，相对于微小的性能损耗，人力成本更值钱\n\n\n\n","source":"_posts/枚举真的比静态常量更占空间吗？.md","raw":"title: 枚举真的比静态常量更占空间吗？\ntags:\n  - enum\ncategories:\n  - Java\ndate: 2019-12-30 10:21:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZDllOTU4YWQ2OGE3MjlhLmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n>前两天在网上看到一条信息：枚举比静态常量更占用空间。\n这是真的吗？\n\n## 前言\n### 枚举\n枚举类型是Java 5中新增特性的一部分，它是一种特殊的数据类型，之所以特殊是因为它既是一种类(class)类型却又比类类型多了些特殊的约束，但是这些约束的存在也造就了枚举类型的简洁性、安全性以及便捷性。\n### 枚举实现原理\n在使用关键字enum创建枚举类型并编译后，编译器会为我们生成一个相关的类，这个类继承了Java API中的java.lang.Enum类，也就是说通过关键字enum创建枚举类型在编译后事实上也是一个类类型而且该类继承自java.lang.Enum类。\n\n## 枚举\n新建一个枚举类\n```\npackage com.example.demo;\n\n/**\n * @Author: 少年闰土\n * @Date: 2019/12/27 0027 上午 9:23\n * @Description:\n */\npublic enum Season {\n\n    SPRING(\"春天\", \"趁春踏青\"),\n    SUMMER(\"夏天\", \"夏日炎炎\"),\n    AUTUMN(\"秋天\", \"秋高气爽\"),\n    WINTER(\"冬天\", \"围炉赏雪\");\n\n    private final String name;\n    private final String desc;\n\n    Season(String name, String desc) {\n        this.name = name;\n        this.desc = desc;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n}\n```\n接下来使用javac命令进行编译：生成class文件，然后再通过javap反编译\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00OTUwMmE2NzY0NzNjMDQ0LnBuZw?x-oss-process=image/format,png)\n```\npublic final class com.example.demo.Season extends java.lang.Enum<com.example.de\nmo.Season> {\n  public static final com.example.demo.Season SPRING;\n  public static final com.example.demo.Season SUMMER;\n  public static final com.example.demo.Season AUTUMN;\n  public static final com.example.demo.Season WINTER;\n  //编译器为我们添加的静态的values()方法\n  public static com.example.demo.Season[] values();\n  //编译器为我们添加的静态的valueOf()方法，注意间接调用了Enum也类的valueOf方法\n  public static com.example.demo.Season valueOf(java.lang.String);\n  //构造方法\n  public java.lang.String getName();\n  public java.lang.String getDesc();\n  static {};\n}\n```\n## 静态常量\n```\npackage com.example.demo;\n\n/**\n * @Author: 少年闰土\n * @Date: 2019/12/27 0027 上午 10:49\n * @Description:\n */\npublic class Season {\n\n    public static final String SPRING =\"春天\";\n    public static final String SUMMER =\"夏天\";\n    public static final String AUTUMN =\"秋天\";\n    public static final String WINTER =\"冬天\";\n\n}\n\n```\njavap反编译后：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kN2I0ZTRjYjhmMWM0YzJhLnBuZw?x-oss-process=image/format,png)\n```\npublic class com.example.demo.Season {\n  public static final java.lang.String SPRING;\n  public static final java.lang.String SUMMER;\n  public static final java.lang.String AUTUMN;\n  public static final java.lang.String WINTER;\n  public com.example.demo.Season();\n}\n```\n## 对比\n枚举\n![枚举.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZTI2Y2FkNjRhMjBiNTJjLnBuZw?x-oss-process=image/format,png)\n\n静态常量\n![静态常量.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjcyN2QwMTRjYjcxNzliLnBuZw?x-oss-process=image/format,png)\n\n编译后的枚举class文件大小为1471字节，静态常量class文件大小为400字节。\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZWVkNGI4ZDFhM2IxYjAxLnBuZw?x-oss-process=image/format,png)\n\n用Chkdsk查看簇大小 \n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZGJjNTllYzA5NzMzOWRmLnBuZw?x-oss-process=image/format,png)\n\n\n经过对比枚举类型文件大小更大一些。\n\n枚举的实现原理就是定义一个类，然后实例化几个由final修饰的这个类的对象，每个实例都带有自己的元信息。而常量相比之下，没有这一层封装，只占用最基本的内存，包括引用，和它的值本身，要简单轻巧很多。如果值可以使用基本类型而不是包装类型，那更不用说了。       不过话又说回来，通常情况下我们没必要在意这种区别。如果用枚举可读性、可扩展性更好，用就是了，枚举占那点内存，沧海一粟。在性能与代码维护性之间，除个别情况，优先选后者。高级编程语言的诞生本身就是硬件提升的背景下，牺牲某些性能来降低开发门槛，提高开发效率的，相对于微小的性能损耗，人力成本更值钱\n\n\n\n","slug":"枚举真的比静态常量更占空间吗？","published":1,"updated":"2020-01-01T02:30:26.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwk70015sops8r7zhvm0","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZDllOTU4YWQ2OGE3MjlhLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>前两天在网上看到一条信息：枚举比静态常量更占用空间。<br>这是真的吗？</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>枚举类型是Java 5中新增特性的一部分，它是一种特殊的数据类型，之所以特殊是因为它既是一种类(class)类型却又比类类型多了些特殊的约束，但是这些约束的存在也造就了枚举类型的简洁性、安全性以及便捷性。</p>\n<h3 id=\"枚举实现原理\"><a href=\"#枚举实现原理\" class=\"headerlink\" title=\"枚举实现原理\"></a>枚举实现原理</h3><p>在使用关键字enum创建枚举类型并编译后，编译器会为我们生成一个相关的类，这个类继承了Java API中的java.lang.Enum类，也就是说通过关键字enum创建枚举类型在编译后事实上也是一个类类型而且该类继承自java.lang.Enum类。</p>\n<h2 id=\"枚举-1\"><a href=\"#枚举-1\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>新建一个枚举类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author: 少年闰土</span><br><span class=\"line\"> * @Date: 2019&#x2F;12&#x2F;27 0027 上午 9:23</span><br><span class=\"line\"> * @Description:</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public enum Season &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SPRING(&quot;春天&quot;, &quot;趁春踏青&quot;),</span><br><span class=\"line\">    SUMMER(&quot;夏天&quot;, &quot;夏日炎炎&quot;),</span><br><span class=\"line\">    AUTUMN(&quot;秋天&quot;, &quot;秋高气爽&quot;),</span><br><span class=\"line\">    WINTER(&quot;冬天&quot;, &quot;围炉赏雪&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    private final String name;</span><br><span class=\"line\">    private final String desc;</span><br><span class=\"line\"></span><br><span class=\"line\">    Season(String name, String desc) &#123;</span><br><span class=\"line\">        this.name &#x3D; name;</span><br><span class=\"line\">        this.desc &#x3D; desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getDesc() &#123;</span><br><span class=\"line\">        return desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来使用javac命令进行编译：生成class文件，然后再通过javap反编译<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00OTUwMmE2NzY0NzNjMDQ0LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class com.example.demo.Season extends java.lang.Enum&lt;com.example.de</span><br><span class=\"line\">mo.Season&gt; &#123;</span><br><span class=\"line\">  public static final com.example.demo.Season SPRING;</span><br><span class=\"line\">  public static final com.example.demo.Season SUMMER;</span><br><span class=\"line\">  public static final com.example.demo.Season AUTUMN;</span><br><span class=\"line\">  public static final com.example.demo.Season WINTER;</span><br><span class=\"line\">  &#x2F;&#x2F;编译器为我们添加的静态的values()方法</span><br><span class=\"line\">  public static com.example.demo.Season[] values();</span><br><span class=\"line\">  &#x2F;&#x2F;编译器为我们添加的静态的valueOf()方法，注意间接调用了Enum也类的valueOf方法</span><br><span class=\"line\">  public static com.example.demo.Season valueOf(java.lang.String);</span><br><span class=\"line\">  &#x2F;&#x2F;构造方法</span><br><span class=\"line\">  public java.lang.String getName();</span><br><span class=\"line\">  public java.lang.String getDesc();</span><br><span class=\"line\">  static &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态常量\"><a href=\"#静态常量\" class=\"headerlink\" title=\"静态常量\"></a>静态常量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author: 少年闰土</span><br><span class=\"line\"> * @Date: 2019&#x2F;12&#x2F;27 0027 上午 10:49</span><br><span class=\"line\"> * @Description:</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Season &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String SPRING &#x3D;&quot;春天&quot;;</span><br><span class=\"line\">    public static final String SUMMER &#x3D;&quot;夏天&quot;;</span><br><span class=\"line\">    public static final String AUTUMN &#x3D;&quot;秋天&quot;;</span><br><span class=\"line\">    public static final String WINTER &#x3D;&quot;冬天&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>javap反编译后：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kN2I0ZTRjYjhmMWM0YzJhLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class com.example.demo.Season &#123;</span><br><span class=\"line\">  public static final java.lang.String SPRING;</span><br><span class=\"line\">  public static final java.lang.String SUMMER;</span><br><span class=\"line\">  public static final java.lang.String AUTUMN;</span><br><span class=\"line\">  public static final java.lang.String WINTER;</span><br><span class=\"line\">  public com.example.demo.Season();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><p>枚举<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZTI2Y2FkNjRhMjBiNTJjLnBuZw?x-oss-process=image/format,png\" alt=\"枚举.png\"></p>\n<p>静态常量<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjcyN2QwMTRjYjcxNzliLnBuZw?x-oss-process=image/format,png\" alt=\"静态常量.png\"></p>\n<p>编译后的枚举class文件大小为1471字节，静态常量class文件大小为400字节。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZWVkNGI4ZDFhM2IxYjAxLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<p>用Chkdsk查看簇大小<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZGJjNTllYzA5NzMzOWRmLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<p>经过对比枚举类型文件大小更大一些。</p>\n<p>枚举的实现原理就是定义一个类，然后实例化几个由final修饰的这个类的对象，每个实例都带有自己的元信息。而常量相比之下，没有这一层封装，只占用最基本的内存，包括引用，和它的值本身，要简单轻巧很多。如果值可以使用基本类型而不是包装类型，那更不用说了。       不过话又说回来，通常情况下我们没必要在意这种区别。如果用枚举可读性、可扩展性更好，用就是了，枚举占那点内存，沧海一粟。在性能与代码维护性之间，除个别情况，优先选后者。高级编程语言的诞生本身就是硬件提升的背景下，牺牲某些性能来降低开发门槛，提高开发效率的，相对于微小的性能损耗，人力成本更值钱</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZDllOTU4YWQ2OGE3MjlhLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<blockquote>\n<p>前两天在网上看到一条信息：枚举比静态常量更占用空间。<br>这是真的吗？</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>枚举类型是Java 5中新增特性的一部分，它是一种特殊的数据类型，之所以特殊是因为它既是一种类(class)类型却又比类类型多了些特殊的约束，但是这些约束的存在也造就了枚举类型的简洁性、安全性以及便捷性。</p>\n<h3 id=\"枚举实现原理\"><a href=\"#枚举实现原理\" class=\"headerlink\" title=\"枚举实现原理\"></a>枚举实现原理</h3><p>在使用关键字enum创建枚举类型并编译后，编译器会为我们生成一个相关的类，这个类继承了Java API中的java.lang.Enum类，也就是说通过关键字enum创建枚举类型在编译后事实上也是一个类类型而且该类继承自java.lang.Enum类。</p>\n<h2 id=\"枚举-1\"><a href=\"#枚举-1\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>新建一个枚举类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author: 少年闰土</span><br><span class=\"line\"> * @Date: 2019&#x2F;12&#x2F;27 0027 上午 9:23</span><br><span class=\"line\"> * @Description:</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public enum Season &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SPRING(&quot;春天&quot;, &quot;趁春踏青&quot;),</span><br><span class=\"line\">    SUMMER(&quot;夏天&quot;, &quot;夏日炎炎&quot;),</span><br><span class=\"line\">    AUTUMN(&quot;秋天&quot;, &quot;秋高气爽&quot;),</span><br><span class=\"line\">    WINTER(&quot;冬天&quot;, &quot;围炉赏雪&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    private final String name;</span><br><span class=\"line\">    private final String desc;</span><br><span class=\"line\"></span><br><span class=\"line\">    Season(String name, String desc) &#123;</span><br><span class=\"line\">        this.name &#x3D; name;</span><br><span class=\"line\">        this.desc &#x3D; desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getDesc() &#123;</span><br><span class=\"line\">        return desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来使用javac命令进行编译：生成class文件，然后再通过javap反编译<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00OTUwMmE2NzY0NzNjMDQ0LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class com.example.demo.Season extends java.lang.Enum&lt;com.example.de</span><br><span class=\"line\">mo.Season&gt; &#123;</span><br><span class=\"line\">  public static final com.example.demo.Season SPRING;</span><br><span class=\"line\">  public static final com.example.demo.Season SUMMER;</span><br><span class=\"line\">  public static final com.example.demo.Season AUTUMN;</span><br><span class=\"line\">  public static final com.example.demo.Season WINTER;</span><br><span class=\"line\">  &#x2F;&#x2F;编译器为我们添加的静态的values()方法</span><br><span class=\"line\">  public static com.example.demo.Season[] values();</span><br><span class=\"line\">  &#x2F;&#x2F;编译器为我们添加的静态的valueOf()方法，注意间接调用了Enum也类的valueOf方法</span><br><span class=\"line\">  public static com.example.demo.Season valueOf(java.lang.String);</span><br><span class=\"line\">  &#x2F;&#x2F;构造方法</span><br><span class=\"line\">  public java.lang.String getName();</span><br><span class=\"line\">  public java.lang.String getDesc();</span><br><span class=\"line\">  static &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态常量\"><a href=\"#静态常量\" class=\"headerlink\" title=\"静态常量\"></a>静态常量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author: 少年闰土</span><br><span class=\"line\"> * @Date: 2019&#x2F;12&#x2F;27 0027 上午 10:49</span><br><span class=\"line\"> * @Description:</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Season &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String SPRING &#x3D;&quot;春天&quot;;</span><br><span class=\"line\">    public static final String SUMMER &#x3D;&quot;夏天&quot;;</span><br><span class=\"line\">    public static final String AUTUMN &#x3D;&quot;秋天&quot;;</span><br><span class=\"line\">    public static final String WINTER &#x3D;&quot;冬天&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>javap反编译后：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kN2I0ZTRjYjhmMWM0YzJhLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class com.example.demo.Season &#123;</span><br><span class=\"line\">  public static final java.lang.String SPRING;</span><br><span class=\"line\">  public static final java.lang.String SUMMER;</span><br><span class=\"line\">  public static final java.lang.String AUTUMN;</span><br><span class=\"line\">  public static final java.lang.String WINTER;</span><br><span class=\"line\">  public com.example.demo.Season();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><p>枚举<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZTI2Y2FkNjRhMjBiNTJjLnBuZw?x-oss-process=image/format,png\" alt=\"枚举.png\"></p>\n<p>静态常量<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjcyN2QwMTRjYjcxNzliLnBuZw?x-oss-process=image/format,png\" alt=\"静态常量.png\"></p>\n<p>编译后的枚举class文件大小为1471字节，静态常量class文件大小为400字节。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZWVkNGI4ZDFhM2IxYjAxLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<p>用Chkdsk查看簇大小<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZGJjNTllYzA5NzMzOWRmLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<p>经过对比枚举类型文件大小更大一些。</p>\n<p>枚举的实现原理就是定义一个类，然后实例化几个由final修饰的这个类的对象，每个实例都带有自己的元信息。而常量相比之下，没有这一层封装，只占用最基本的内存，包括引用，和它的值本身，要简单轻巧很多。如果值可以使用基本类型而不是包装类型，那更不用说了。       不过话又说回来，通常情况下我们没必要在意这种区别。如果用枚举可读性、可扩展性更好，用就是了，枚举占那点内存，沧海一粟。在性能与代码维护性之间，除个别情况，优先选后者。高级编程语言的诞生本身就是硬件提升的背景下，牺牲某些性能来降低开发门槛，提高开发效率的，相对于微小的性能损耗，人力成本更值钱</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZDllOTU4YWQ2OGE3MjlhLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 10:30:26 GMT+0800 (GMT+08:00)","title":"枚举真的比静态常量更占空间吗？","path":"2019/12/30/枚举真的比静态常量更占空间吗？/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZDllOTU4YWQ2OGE3MjlhLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZDllOTU4YWQ2OGE3MjlhLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-12-30T02:21:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["enum"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"记一次jsoup的使用","date":"2019-07-06T07:46:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjFjNDJkZGU1OGRjZTdlLnBuZw?x-oss-process=image/format,png )\n<!-- more -->\n\nJsoup是用于解析HTML，就类似XML解析器用于解析XML。 Jsoup它解析HTML成为真实世界的HTML。 它与jquery选择器的语法非常相似，并且非常灵活容易使用以获得所需的结果。\n\n## 安装\n### 依赖\n```\n<dependency>\n  <!-- jsoup HTML parser library @ http://jsoup.org/ -->\n  <groupId>org.jsoup</groupId>\n  <artifactId>jsoup</artifactId>\n  <version>1.10.2</version>\n</dependency>\n```\n## 应用\n### 从URL获取HTML来解析\n```\nDocument doc = Jsoup.connect(\"http://www.baidu.com/\").get();\nString title = doc.title();\n```\nconnect(String url) 方法创建一个新的 Connection, 和 get() 取得和解析一个HTML文件。如果从该URL获取HTML时发生错误，便会抛出 IOException，应适当处理。\nConnection 接口还提供一个方法链来解决特殊请求，具体如下\n```\n  Document doc = Jsoup.connect(\"http://example.com\";)\n  .data(\"query\", \"Java\")\n  .userAgent(\"Mozilla\")\n  .cookie(\"auth\", \"token\")\n  .timeout(3000)\n  .post();\n```\n### 查看元素\n```\ngetElementById(String id);\ngetElementsByTag(String tag);\ngetElementsByClass(String className);\ngetElementsByAttribute(String key) (and related methods);\nElement siblings: siblingElements(), firstElementSibling(), lastElementSibling(); nextElementSibling(), previousElementSibling();\nGraph: parent(), children(), child(int index);\n```\n### 元素数据\n```\nattr(String key)获取属性attr(String key, String value)设置属性\nattributes()获取所有属性\nid(), className() and classNames()\ntext()获取文本内容text(String value) 设置文本内容\nhtml()获取元素内HTMLhtml(String value)设置元素内的HTML内容\nouterHtml()获取元素外HTML内容\ndata()获取数据内容（例如：script和style标签)\ntag() and tagName()\n```\n### 操作HTML和文本\n```\nappend(String html), prepend(String html)\nappendText(String text), prependText(String text)\nappendElement(String tagName), prependElement(String tagName)\nhtml(String value)\n```\n### 通过类似于css或jQuery的选择器来查找元素\n```\nElements trs = doc.select(\".kuang\").select(\"tbody\").get(5).select(\"tr\");\n        StringBuilder controlTarget = new StringBuilder();\n        for (int i = 0; i < trs.size(); i++) {\n            if (i >= 1 && i < trs.size() - 1) {\n                Elements tds = trs.get(i).select(\"td\");\n                res.setCropRange(tds.get(0).text());\n                res.setDosage(tds.get(2).text());\n                res.setMethod(tds.get(3).text());\n                controlTarget.append(tds.get(1).text()).append(\" \");\n            }\n        }\n```\n### Selector选择器概述\n\n```\n   tagname: 通过标签查找元素，比如：a;\n   ns|tag: 通过标签在命名空间查找元素，比如：可以用 fb|name 语法来查找 <fb:name> 元素;\n   '#id': 通过ID查找元素，比如：#logo;\n   .class: 通过class名称查找元素，比如：.masthead;\n   [attribute]: 利用属性查找元素，比如：[href];\n   [^attr]: 利用属性名前缀来查找元素，比如：可以用[^data-] 来查找带有HTML5 Dataset属性的元素;\n   [attr=value]: 利用属性值来查找元素，比如：[width=500];\n   [attr^=value], [attr$=value], [attr*=value]: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：[href*=/path/];\n   [attr~=regex]: 利用属性值匹配正则表达式来查找元素，比如： img[src~=(?i)\\.(png|jpe?g)];\n   *: 这个符号将匹配所有元素;\n```\n### Selector选择器组合使用\n```\n   el#id: 元素+ID，比如： div#logo;\n   el.class: 元素+class，比如： div.masthead;\n   el[attr]: 元素+class，比如： a[href];\n   任意组合，比如：a[href].highlight;\n   ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在\"body\"元素下的所有 p元素;\n   parent > child: 查找某个父元素下的直接子元素，比如：可以用div.content > p 查找 p 元素，也可以用body > * 查找body标签下所有直接子元素;\n   siblingA + siblingB: 查找在A元素之前第一个同级元素B，比如：div.head + div;\n   siblingA ~ siblingX: 查找A元素之前的同级X元素，比如：h1 ~ p;\n   el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo;\n```\n### 伪选择器selectors\n```\n:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小   于三列的元素\n   :gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素\n   :eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素\n   :has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素\n   :not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class=\"logo\" 元素的所有 div 列表\n   :contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)\n   :containsOwn(text): 查找直接包含给定文本的元素\n   :matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)\n   :matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素\n```\n### 提取给定URL中的链接\n```\n            Document doc = Jsoup.connect(\"http://www.yiibai.com\").get();  \n            Elements links = doc.select(\"a[href]\");  \n            for (Element link : links) {  \n                System.out.println(\"\\nlink : \" + link.attr(\"href\"));  \n                System.out.println(\"text : \" + link.text());  \n            }  \n```\n### 提取URL中的元数据\n\n```\n            Document doc = Jsoup.connect(\"http://www.yiibai.com\").get();  \n            String keywords = doc.select(\"meta[name=keywords]\").first().attr(\"content\");  \n            System.out.println(\"Meta keyword : \" + keywords);  \n            String description = doc.select(\"meta[name=description]\").get(0).attr(\"content\");  \n            System.out.println(\"Meta description : \" + description);  \n\n```\n### 提取URL中的图像\n```\n            Document doc = Jsoup.connect(\"http://www.yiibai.com\").get();  \n            Elements images = doc.select(\"img[src~=(?i)\\\\.(png|jpe?g|gif)]\");  \n            for (Element image : images) {  \n                System.out.println(\"src : \" + image.attr(\"src\"));  \n                System.out.println(\"height : \" + image.attr(\"height\"));  \n                System.out.println(\"width : \" + image.attr(\"width\"));  \n                System.out.println(\"alt : \" + image.attr(\"alt\"));  \n            }  \n```","source":"_posts/记一次jsoup的使用.md","raw":"title: 记一次jsoup的使用\ntags:\n  - 爬虫\ncategories:\n  - Java\ndate: 2019-07-06 15:46:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjFjNDJkZGU1OGRjZTdlLnBuZw?x-oss-process=image/format,png )\n<!-- more -->\n\nJsoup是用于解析HTML，就类似XML解析器用于解析XML。 Jsoup它解析HTML成为真实世界的HTML。 它与jquery选择器的语法非常相似，并且非常灵活容易使用以获得所需的结果。\n\n## 安装\n### 依赖\n```\n<dependency>\n  <!-- jsoup HTML parser library @ http://jsoup.org/ -->\n  <groupId>org.jsoup</groupId>\n  <artifactId>jsoup</artifactId>\n  <version>1.10.2</version>\n</dependency>\n```\n## 应用\n### 从URL获取HTML来解析\n```\nDocument doc = Jsoup.connect(\"http://www.baidu.com/\").get();\nString title = doc.title();\n```\nconnect(String url) 方法创建一个新的 Connection, 和 get() 取得和解析一个HTML文件。如果从该URL获取HTML时发生错误，便会抛出 IOException，应适当处理。\nConnection 接口还提供一个方法链来解决特殊请求，具体如下\n```\n  Document doc = Jsoup.connect(\"http://example.com\";)\n  .data(\"query\", \"Java\")\n  .userAgent(\"Mozilla\")\n  .cookie(\"auth\", \"token\")\n  .timeout(3000)\n  .post();\n```\n### 查看元素\n```\ngetElementById(String id);\ngetElementsByTag(String tag);\ngetElementsByClass(String className);\ngetElementsByAttribute(String key) (and related methods);\nElement siblings: siblingElements(), firstElementSibling(), lastElementSibling(); nextElementSibling(), previousElementSibling();\nGraph: parent(), children(), child(int index);\n```\n### 元素数据\n```\nattr(String key)获取属性attr(String key, String value)设置属性\nattributes()获取所有属性\nid(), className() and classNames()\ntext()获取文本内容text(String value) 设置文本内容\nhtml()获取元素内HTMLhtml(String value)设置元素内的HTML内容\nouterHtml()获取元素外HTML内容\ndata()获取数据内容（例如：script和style标签)\ntag() and tagName()\n```\n### 操作HTML和文本\n```\nappend(String html), prepend(String html)\nappendText(String text), prependText(String text)\nappendElement(String tagName), prependElement(String tagName)\nhtml(String value)\n```\n### 通过类似于css或jQuery的选择器来查找元素\n```\nElements trs = doc.select(\".kuang\").select(\"tbody\").get(5).select(\"tr\");\n        StringBuilder controlTarget = new StringBuilder();\n        for (int i = 0; i < trs.size(); i++) {\n            if (i >= 1 && i < trs.size() - 1) {\n                Elements tds = trs.get(i).select(\"td\");\n                res.setCropRange(tds.get(0).text());\n                res.setDosage(tds.get(2).text());\n                res.setMethod(tds.get(3).text());\n                controlTarget.append(tds.get(1).text()).append(\" \");\n            }\n        }\n```\n### Selector选择器概述\n\n```\n   tagname: 通过标签查找元素，比如：a;\n   ns|tag: 通过标签在命名空间查找元素，比如：可以用 fb|name 语法来查找 <fb:name> 元素;\n   '#id': 通过ID查找元素，比如：#logo;\n   .class: 通过class名称查找元素，比如：.masthead;\n   [attribute]: 利用属性查找元素，比如：[href];\n   [^attr]: 利用属性名前缀来查找元素，比如：可以用[^data-] 来查找带有HTML5 Dataset属性的元素;\n   [attr=value]: 利用属性值来查找元素，比如：[width=500];\n   [attr^=value], [attr$=value], [attr*=value]: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：[href*=/path/];\n   [attr~=regex]: 利用属性值匹配正则表达式来查找元素，比如： img[src~=(?i)\\.(png|jpe?g)];\n   *: 这个符号将匹配所有元素;\n```\n### Selector选择器组合使用\n```\n   el#id: 元素+ID，比如： div#logo;\n   el.class: 元素+class，比如： div.masthead;\n   el[attr]: 元素+class，比如： a[href];\n   任意组合，比如：a[href].highlight;\n   ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在\"body\"元素下的所有 p元素;\n   parent > child: 查找某个父元素下的直接子元素，比如：可以用div.content > p 查找 p 元素，也可以用body > * 查找body标签下所有直接子元素;\n   siblingA + siblingB: 查找在A元素之前第一个同级元素B，比如：div.head + div;\n   siblingA ~ siblingX: 查找A元素之前的同级X元素，比如：h1 ~ p;\n   el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo;\n```\n### 伪选择器selectors\n```\n:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小   于三列的元素\n   :gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素\n   :eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素\n   :has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素\n   :not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class=\"logo\" 元素的所有 div 列表\n   :contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)\n   :containsOwn(text): 查找直接包含给定文本的元素\n   :matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)\n   :matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素\n```\n### 提取给定URL中的链接\n```\n            Document doc = Jsoup.connect(\"http://www.yiibai.com\").get();  \n            Elements links = doc.select(\"a[href]\");  \n            for (Element link : links) {  \n                System.out.println(\"\\nlink : \" + link.attr(\"href\"));  \n                System.out.println(\"text : \" + link.text());  \n            }  \n```\n### 提取URL中的元数据\n\n```\n            Document doc = Jsoup.connect(\"http://www.yiibai.com\").get();  \n            String keywords = doc.select(\"meta[name=keywords]\").first().attr(\"content\");  \n            System.out.println(\"Meta keyword : \" + keywords);  \n            String description = doc.select(\"meta[name=description]\").get(0).attr(\"content\");  \n            System.out.println(\"Meta description : \" + description);  \n\n```\n### 提取URL中的图像\n```\n            Document doc = Jsoup.connect(\"http://www.yiibai.com\").get();  \n            Elements images = doc.select(\"img[src~=(?i)\\\\.(png|jpe?g|gif)]\");  \n            for (Element image : images) {  \n                System.out.println(\"src : \" + image.attr(\"src\"));  \n                System.out.println(\"height : \" + image.attr(\"height\"));  \n                System.out.println(\"width : \" + image.attr(\"width\"));  \n                System.out.println(\"alt : \" + image.attr(\"alt\"));  \n            }  \n```","slug":"记一次jsoup的使用","published":1,"updated":"2020-01-01T02:31:53.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwk80018sopsdkwccitx","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjFjNDJkZGU1OGRjZTdlLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<p>Jsoup是用于解析HTML，就类似XML解析器用于解析XML。 Jsoup它解析HTML成为真实世界的HTML。 它与jquery选择器的语法非常相似，并且非常灵活容易使用以获得所需的结果。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;!-- jsoup HTML parser library @ http:&#x2F;&#x2F;jsoup.org&#x2F; --&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.jsoup&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;jsoup&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;1.10.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><h3 id=\"从URL获取HTML来解析\"><a href=\"#从URL获取HTML来解析\" class=\"headerlink\" title=\"从URL获取HTML来解析\"></a>从URL获取HTML来解析</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;).get();</span><br><span class=\"line\">String title &#x3D; doc.title();</span><br></pre></td></tr></table></figure>\n<p>connect(String url) 方法创建一个新的 Connection, 和 get() 取得和解析一个HTML文件。如果从该URL获取HTML时发生错误，便会抛出 IOException，应适当处理。<br>Connection 接口还提供一个方法链来解决特殊请求，具体如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;example.com&quot;;)</span><br><span class=\"line\">.data(&quot;query&quot;, &quot;Java&quot;)</span><br><span class=\"line\">.userAgent(&quot;Mozilla&quot;)</span><br><span class=\"line\">.cookie(&quot;auth&quot;, &quot;token&quot;)</span><br><span class=\"line\">.timeout(3000)</span><br><span class=\"line\">.post();</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看元素\"><a href=\"#查看元素\" class=\"headerlink\" title=\"查看元素\"></a>查看元素</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getElementById(String id);</span><br><span class=\"line\">getElementsByTag(String tag);</span><br><span class=\"line\">getElementsByClass(String className);</span><br><span class=\"line\">getElementsByAttribute(String key) (and related methods);</span><br><span class=\"line\">Element siblings: siblingElements(), firstElementSibling(), lastElementSibling(); nextElementSibling(), previousElementSibling();</span><br><span class=\"line\">Graph: parent(), children(), child(int index);</span><br></pre></td></tr></table></figure>\n<h3 id=\"元素数据\"><a href=\"#元素数据\" class=\"headerlink\" title=\"元素数据\"></a>元素数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attr(String key)获取属性attr(String key, String value)设置属性</span><br><span class=\"line\">attributes()获取所有属性</span><br><span class=\"line\">id(), className() and classNames()</span><br><span class=\"line\">text()获取文本内容text(String value) 设置文本内容</span><br><span class=\"line\">html()获取元素内HTMLhtml(String value)设置元素内的HTML内容</span><br><span class=\"line\">outerHtml()获取元素外HTML内容</span><br><span class=\"line\">data()获取数据内容（例如：script和style标签)</span><br><span class=\"line\">tag() and tagName()</span><br></pre></td></tr></table></figure>\n<h3 id=\"操作HTML和文本\"><a href=\"#操作HTML和文本\" class=\"headerlink\" title=\"操作HTML和文本\"></a>操作HTML和文本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append(String html), prepend(String html)</span><br><span class=\"line\">appendText(String text), prependText(String text)</span><br><span class=\"line\">appendElement(String tagName), prependElement(String tagName)</span><br><span class=\"line\">html(String value)</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过类似于css或jQuery的选择器来查找元素\"><a href=\"#通过类似于css或jQuery的选择器来查找元素\" class=\"headerlink\" title=\"通过类似于css或jQuery的选择器来查找元素\"></a>通过类似于css或jQuery的选择器来查找元素</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Elements trs &#x3D; doc.select(&quot;.kuang&quot;).select(&quot;tbody&quot;).get(5).select(&quot;tr&quot;);</span><br><span class=\"line\">        StringBuilder controlTarget &#x3D; new StringBuilder();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; trs.size(); i++) &#123;</span><br><span class=\"line\">            if (i &gt;&#x3D; 1 &amp;&amp; i &lt; trs.size() - 1) &#123;</span><br><span class=\"line\">                Elements tds &#x3D; trs.get(i).select(&quot;td&quot;);</span><br><span class=\"line\">                res.setCropRange(tds.get(0).text());</span><br><span class=\"line\">                res.setDosage(tds.get(2).text());</span><br><span class=\"line\">                res.setMethod(tds.get(3).text());</span><br><span class=\"line\">                controlTarget.append(tds.get(1).text()).append(&quot; &quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Selector选择器概述\"><a href=\"#Selector选择器概述\" class=\"headerlink\" title=\"Selector选择器概述\"></a>Selector选择器概述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tagname: 通过标签查找元素，比如：a;</span><br><span class=\"line\">ns|tag: 通过标签在命名空间查找元素，比如：可以用 fb|name 语法来查找 &lt;fb:name&gt; 元素;</span><br><span class=\"line\">&#39;#id&#39;: 通过ID查找元素，比如：#logo;</span><br><span class=\"line\">.class: 通过class名称查找元素，比如：.masthead;</span><br><span class=\"line\">[attribute]: 利用属性查找元素，比如：[href];</span><br><span class=\"line\">[^attr]: 利用属性名前缀来查找元素，比如：可以用[^data-] 来查找带有HTML5 Dataset属性的元素;</span><br><span class=\"line\">[attr&#x3D;value]: 利用属性值来查找元素，比如：[width&#x3D;500];</span><br><span class=\"line\">[attr^&#x3D;value], [attr$&#x3D;value], [attr*&#x3D;value]: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：[href*&#x3D;&#x2F;path&#x2F;];</span><br><span class=\"line\">[attr~&#x3D;regex]: 利用属性值匹配正则表达式来查找元素，比如： img[src~&#x3D;(?i)\\.(png|jpe?g)];</span><br><span class=\"line\">*: 这个符号将匹配所有元素;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Selector选择器组合使用\"><a href=\"#Selector选择器组合使用\" class=\"headerlink\" title=\"Selector选择器组合使用\"></a>Selector选择器组合使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el#id: 元素+ID，比如： div#logo;</span><br><span class=\"line\">el.class: 元素+class，比如： div.masthead;</span><br><span class=\"line\">el[attr]: 元素+class，比如： a[href];</span><br><span class=\"line\">任意组合，比如：a[href].highlight;</span><br><span class=\"line\">ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在&quot;body&quot;元素下的所有 p元素;</span><br><span class=\"line\">parent &gt; child: 查找某个父元素下的直接子元素，比如：可以用div.content &gt; p 查找 p 元素，也可以用body &gt; * 查找body标签下所有直接子元素;</span><br><span class=\"line\">siblingA + siblingB: 查找在A元素之前第一个同级元素B，比如：div.head + div;</span><br><span class=\"line\">siblingA ~ siblingX: 查找A元素之前的同级X元素，比如：h1 ~ p;</span><br><span class=\"line\">el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo;</span><br></pre></td></tr></table></figure>\n<h3 id=\"伪选择器selectors\"><a href=\"#伪选择器selectors\" class=\"headerlink\" title=\"伪选择器selectors\"></a>伪选择器selectors</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小   于三列的元素</span><br><span class=\"line\">   :gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素</span><br><span class=\"line\">   :eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素</span><br><span class=\"line\">   :has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素</span><br><span class=\"line\">   :not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class&#x3D;&quot;logo&quot; 元素的所有 div 列表</span><br><span class=\"line\">   :contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)</span><br><span class=\"line\">   :containsOwn(text): 查找直接包含给定文本的元素</span><br><span class=\"line\">   :matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)</span><br><span class=\"line\">   :matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素</span><br></pre></td></tr></table></figure>\n<h3 id=\"提取给定URL中的链接\"><a href=\"#提取给定URL中的链接\" class=\"headerlink\" title=\"提取给定URL中的链接\"></a>提取给定URL中的链接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class=\"line\">Elements links &#x3D; doc.select(&quot;a[href]&quot;);  </span><br><span class=\"line\">for (Element link : links) &#123;  </span><br><span class=\"line\">    System.out.println(&quot;\\nlink : &quot; + link.attr(&quot;href&quot;));  </span><br><span class=\"line\">    System.out.println(&quot;text : &quot; + link.text());  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"提取URL中的元数据\"><a href=\"#提取URL中的元数据\" class=\"headerlink\" title=\"提取URL中的元数据\"></a>提取URL中的元数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class=\"line\">String keywords &#x3D; doc.select(&quot;meta[name&#x3D;keywords]&quot;).first().attr(&quot;content&quot;);  </span><br><span class=\"line\">System.out.println(&quot;Meta keyword : &quot; + keywords);  </span><br><span class=\"line\">String description &#x3D; doc.select(&quot;meta[name&#x3D;description]&quot;).get(0).attr(&quot;content&quot;);  </span><br><span class=\"line\">System.out.println(&quot;Meta description : &quot; + description);</span><br></pre></td></tr></table></figure>\n<h3 id=\"提取URL中的图像\"><a href=\"#提取URL中的图像\" class=\"headerlink\" title=\"提取URL中的图像\"></a>提取URL中的图像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class=\"line\">Elements images &#x3D; doc.select(&quot;img[src~&#x3D;(?i)\\\\.(png|jpe?g|gif)]&quot;);  </span><br><span class=\"line\">for (Element image : images) &#123;  </span><br><span class=\"line\">    System.out.println(&quot;src : &quot; + image.attr(&quot;src&quot;));  </span><br><span class=\"line\">    System.out.println(&quot;height : &quot; + image.attr(&quot;height&quot;));  </span><br><span class=\"line\">    System.out.println(&quot;width : &quot; + image.attr(&quot;width&quot;));  </span><br><span class=\"line\">    System.out.println(&quot;alt : &quot; + image.attr(&quot;alt&quot;));  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjFjNDJkZGU1OGRjZTdlLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<p>Jsoup是用于解析HTML，就类似XML解析器用于解析XML。 Jsoup它解析HTML成为真实世界的HTML。 它与jquery选择器的语法非常相似，并且非常灵活容易使用以获得所需的结果。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;!-- jsoup HTML parser library @ http:&#x2F;&#x2F;jsoup.org&#x2F; --&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.jsoup&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;jsoup&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;1.10.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><h3 id=\"从URL获取HTML来解析\"><a href=\"#从URL获取HTML来解析\" class=\"headerlink\" title=\"从URL获取HTML来解析\"></a>从URL获取HTML来解析</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;).get();</span><br><span class=\"line\">String title &#x3D; doc.title();</span><br></pre></td></tr></table></figure>\n<p>connect(String url) 方法创建一个新的 Connection, 和 get() 取得和解析一个HTML文件。如果从该URL获取HTML时发生错误，便会抛出 IOException，应适当处理。<br>Connection 接口还提供一个方法链来解决特殊请求，具体如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;example.com&quot;;)</span><br><span class=\"line\">.data(&quot;query&quot;, &quot;Java&quot;)</span><br><span class=\"line\">.userAgent(&quot;Mozilla&quot;)</span><br><span class=\"line\">.cookie(&quot;auth&quot;, &quot;token&quot;)</span><br><span class=\"line\">.timeout(3000)</span><br><span class=\"line\">.post();</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看元素\"><a href=\"#查看元素\" class=\"headerlink\" title=\"查看元素\"></a>查看元素</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getElementById(String id);</span><br><span class=\"line\">getElementsByTag(String tag);</span><br><span class=\"line\">getElementsByClass(String className);</span><br><span class=\"line\">getElementsByAttribute(String key) (and related methods);</span><br><span class=\"line\">Element siblings: siblingElements(), firstElementSibling(), lastElementSibling(); nextElementSibling(), previousElementSibling();</span><br><span class=\"line\">Graph: parent(), children(), child(int index);</span><br></pre></td></tr></table></figure>\n<h3 id=\"元素数据\"><a href=\"#元素数据\" class=\"headerlink\" title=\"元素数据\"></a>元素数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attr(String key)获取属性attr(String key, String value)设置属性</span><br><span class=\"line\">attributes()获取所有属性</span><br><span class=\"line\">id(), className() and classNames()</span><br><span class=\"line\">text()获取文本内容text(String value) 设置文本内容</span><br><span class=\"line\">html()获取元素内HTMLhtml(String value)设置元素内的HTML内容</span><br><span class=\"line\">outerHtml()获取元素外HTML内容</span><br><span class=\"line\">data()获取数据内容（例如：script和style标签)</span><br><span class=\"line\">tag() and tagName()</span><br></pre></td></tr></table></figure>\n<h3 id=\"操作HTML和文本\"><a href=\"#操作HTML和文本\" class=\"headerlink\" title=\"操作HTML和文本\"></a>操作HTML和文本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append(String html), prepend(String html)</span><br><span class=\"line\">appendText(String text), prependText(String text)</span><br><span class=\"line\">appendElement(String tagName), prependElement(String tagName)</span><br><span class=\"line\">html(String value)</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过类似于css或jQuery的选择器来查找元素\"><a href=\"#通过类似于css或jQuery的选择器来查找元素\" class=\"headerlink\" title=\"通过类似于css或jQuery的选择器来查找元素\"></a>通过类似于css或jQuery的选择器来查找元素</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Elements trs &#x3D; doc.select(&quot;.kuang&quot;).select(&quot;tbody&quot;).get(5).select(&quot;tr&quot;);</span><br><span class=\"line\">        StringBuilder controlTarget &#x3D; new StringBuilder();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; trs.size(); i++) &#123;</span><br><span class=\"line\">            if (i &gt;&#x3D; 1 &amp;&amp; i &lt; trs.size() - 1) &#123;</span><br><span class=\"line\">                Elements tds &#x3D; trs.get(i).select(&quot;td&quot;);</span><br><span class=\"line\">                res.setCropRange(tds.get(0).text());</span><br><span class=\"line\">                res.setDosage(tds.get(2).text());</span><br><span class=\"line\">                res.setMethod(tds.get(3).text());</span><br><span class=\"line\">                controlTarget.append(tds.get(1).text()).append(&quot; &quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Selector选择器概述\"><a href=\"#Selector选择器概述\" class=\"headerlink\" title=\"Selector选择器概述\"></a>Selector选择器概述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tagname: 通过标签查找元素，比如：a;</span><br><span class=\"line\">ns|tag: 通过标签在命名空间查找元素，比如：可以用 fb|name 语法来查找 &lt;fb:name&gt; 元素;</span><br><span class=\"line\">&#39;#id&#39;: 通过ID查找元素，比如：#logo;</span><br><span class=\"line\">.class: 通过class名称查找元素，比如：.masthead;</span><br><span class=\"line\">[attribute]: 利用属性查找元素，比如：[href];</span><br><span class=\"line\">[^attr]: 利用属性名前缀来查找元素，比如：可以用[^data-] 来查找带有HTML5 Dataset属性的元素;</span><br><span class=\"line\">[attr&#x3D;value]: 利用属性值来查找元素，比如：[width&#x3D;500];</span><br><span class=\"line\">[attr^&#x3D;value], [attr$&#x3D;value], [attr*&#x3D;value]: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：[href*&#x3D;&#x2F;path&#x2F;];</span><br><span class=\"line\">[attr~&#x3D;regex]: 利用属性值匹配正则表达式来查找元素，比如： img[src~&#x3D;(?i)\\.(png|jpe?g)];</span><br><span class=\"line\">*: 这个符号将匹配所有元素;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Selector选择器组合使用\"><a href=\"#Selector选择器组合使用\" class=\"headerlink\" title=\"Selector选择器组合使用\"></a>Selector选择器组合使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el#id: 元素+ID，比如： div#logo;</span><br><span class=\"line\">el.class: 元素+class，比如： div.masthead;</span><br><span class=\"line\">el[attr]: 元素+class，比如： a[href];</span><br><span class=\"line\">任意组合，比如：a[href].highlight;</span><br><span class=\"line\">ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在&quot;body&quot;元素下的所有 p元素;</span><br><span class=\"line\">parent &gt; child: 查找某个父元素下的直接子元素，比如：可以用div.content &gt; p 查找 p 元素，也可以用body &gt; * 查找body标签下所有直接子元素;</span><br><span class=\"line\">siblingA + siblingB: 查找在A元素之前第一个同级元素B，比如：div.head + div;</span><br><span class=\"line\">siblingA ~ siblingX: 查找A元素之前的同级X元素，比如：h1 ~ p;</span><br><span class=\"line\">el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo;</span><br></pre></td></tr></table></figure>\n<h3 id=\"伪选择器selectors\"><a href=\"#伪选择器selectors\" class=\"headerlink\" title=\"伪选择器selectors\"></a>伪选择器selectors</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小   于三列的元素</span><br><span class=\"line\">   :gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素</span><br><span class=\"line\">   :eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素</span><br><span class=\"line\">   :has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素</span><br><span class=\"line\">   :not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class&#x3D;&quot;logo&quot; 元素的所有 div 列表</span><br><span class=\"line\">   :contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)</span><br><span class=\"line\">   :containsOwn(text): 查找直接包含给定文本的元素</span><br><span class=\"line\">   :matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)</span><br><span class=\"line\">   :matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素</span><br></pre></td></tr></table></figure>\n<h3 id=\"提取给定URL中的链接\"><a href=\"#提取给定URL中的链接\" class=\"headerlink\" title=\"提取给定URL中的链接\"></a>提取给定URL中的链接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class=\"line\">Elements links &#x3D; doc.select(&quot;a[href]&quot;);  </span><br><span class=\"line\">for (Element link : links) &#123;  </span><br><span class=\"line\">    System.out.println(&quot;\\nlink : &quot; + link.attr(&quot;href&quot;));  </span><br><span class=\"line\">    System.out.println(&quot;text : &quot; + link.text());  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"提取URL中的元数据\"><a href=\"#提取URL中的元数据\" class=\"headerlink\" title=\"提取URL中的元数据\"></a>提取URL中的元数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class=\"line\">String keywords &#x3D; doc.select(&quot;meta[name&#x3D;keywords]&quot;).first().attr(&quot;content&quot;);  </span><br><span class=\"line\">System.out.println(&quot;Meta keyword : &quot; + keywords);  </span><br><span class=\"line\">String description &#x3D; doc.select(&quot;meta[name&#x3D;description]&quot;).get(0).attr(&quot;content&quot;);  </span><br><span class=\"line\">System.out.println(&quot;Meta description : &quot; + description);</span><br></pre></td></tr></table></figure>\n<h3 id=\"提取URL中的图像\"><a href=\"#提取URL中的图像\" class=\"headerlink\" title=\"提取URL中的图像\"></a>提取URL中的图像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Document doc &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;www.yiibai.com&quot;).get();  </span><br><span class=\"line\">Elements images &#x3D; doc.select(&quot;img[src~&#x3D;(?i)\\\\.(png|jpe?g|gif)]&quot;);  </span><br><span class=\"line\">for (Element image : images) &#123;  </span><br><span class=\"line\">    System.out.println(&quot;src : &quot; + image.attr(&quot;src&quot;));  </span><br><span class=\"line\">    System.out.println(&quot;height : &quot; + image.attr(&quot;height&quot;));  </span><br><span class=\"line\">    System.out.println(&quot;width : &quot; + image.attr(&quot;width&quot;));  </span><br><span class=\"line\">    System.out.println(&quot;alt : &quot; + image.attr(&quot;alt&quot;));  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjFjNDJkZGU1OGRjZTdlLnBuZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 10:31:53 GMT+0800 (GMT+08:00)","title":"记一次jsoup的使用","path":"2019/07/06/记一次jsoup的使用/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjFjNDJkZGU1OGRjZTdlLnBuZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjFjNDJkZGU1OGRjZTdlLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-07-06T07:46:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["爬虫"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"枚举真的比静态常量更占空间吗？","author":"少年闰土","_content":"","source":"_drafts/枚举真的比静态常量更占空间吗？.md","raw":"---\ntitle: 枚举真的比静态常量更占空间吗？\nauthor: 少年闰土\ntags:\n---\n","slug":"枚举真的比静态常量更占空间吗？","published":0,"date":"2019-12-30T02:20:51.913Z","updated":"2019-12-30T02:20:51.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwkc001bsops7z2ce2ba","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"解决Tomcat8上传文件无可读权限问题","date":"2020-01-01T03:34:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODAwODUwNDI0YWE0Y2M4LmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n### 描述\n使用springmvc做了一个文件上传的功能，上传到nginx目录下的一个文件夹，但是通过目录访问的时候却报403的错误\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YTE5NGE0OTNmOTdmYzkxLnBuZw?x-oss-process=image/format,png)\n去服务器查看了一下文件的权限，发现没有可读权限，于是定位了问题，上传的文件全都没有可读权限。\n\n### 为什么没有可读权限\n网上查阅资料发现，linux默认umask为022，对应权限为755，其它用户可读可执行。可以`vim /etc/profile`，搜索umusk关键字查看\n```\nif [ $UID -gt 199 ] && [ \"`/usr/bin/id -gn`\" = \"`/usr/bin/id -un`\" ]; then\n    umask 002\nelse\n    umask 022\n```\n而tomcat8默认umask为027，对应权限为750，也就是说其它用户连可读的权限都没有。\n可打开catalina.sh文件，搜索umask查看。\n```\n# Set UMASK unless it has been overridden\nif [ -z \"$UMASK\" ]; then\n    UMASK=\"0027\"\nfi\numask $UMASK\n```\n在catalina.sh文件的开篇可以看到\n```\n#   UMASK           (Optional) Override Tomcat's default UMASK of 0027\n```\n于是问题有了答案\n登录到服务器，进入到tomcat的bin目录下\n```\nvim catalina.sh\n输入i,进入编辑模式，将umask改为0022\n：wq(保存退出)\n```\n可以看到\n![3b0b9d5dc0f2d2115073293aeee4331.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjU1N2JlN2UzMTVlMzE0LnBuZw?x-oss-process=image/format,png)\n接下来重启tomcat，重新上传图片即可香油可读权限。\n\n\n","source":"_posts/解决Tomcat8上传文件无可读权限问题.md","raw":"title: 解决Tomcat8上传文件无可读权限问题\ntags:\n  - Tomcat\ncategories:\n  - Java\ndate: 2020-01-01 11:34:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODAwODUwNDI0YWE0Y2M4LmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n### 描述\n使用springmvc做了一个文件上传的功能，上传到nginx目录下的一个文件夹，但是通过目录访问的时候却报403的错误\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YTE5NGE0OTNmOTdmYzkxLnBuZw?x-oss-process=image/format,png)\n去服务器查看了一下文件的权限，发现没有可读权限，于是定位了问题，上传的文件全都没有可读权限。\n\n### 为什么没有可读权限\n网上查阅资料发现，linux默认umask为022，对应权限为755，其它用户可读可执行。可以`vim /etc/profile`，搜索umusk关键字查看\n```\nif [ $UID -gt 199 ] && [ \"`/usr/bin/id -gn`\" = \"`/usr/bin/id -un`\" ]; then\n    umask 002\nelse\n    umask 022\n```\n而tomcat8默认umask为027，对应权限为750，也就是说其它用户连可读的权限都没有。\n可打开catalina.sh文件，搜索umask查看。\n```\n# Set UMASK unless it has been overridden\nif [ -z \"$UMASK\" ]; then\n    UMASK=\"0027\"\nfi\numask $UMASK\n```\n在catalina.sh文件的开篇可以看到\n```\n#   UMASK           (Optional) Override Tomcat's default UMASK of 0027\n```\n于是问题有了答案\n登录到服务器，进入到tomcat的bin目录下\n```\nvim catalina.sh\n输入i,进入编辑模式，将umask改为0022\n：wq(保存退出)\n```\n可以看到\n![3b0b9d5dc0f2d2115073293aeee4331.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjU1N2JlN2UzMTVlMzE0LnBuZw?x-oss-process=image/format,png)\n接下来重启tomcat，重新上传图片即可香油可读权限。\n\n\n","slug":"解决Tomcat8上传文件无可读权限问题","published":1,"updated":"2020-01-01T03:37:36.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwkd001esops3sl7elxo","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODAwODUwNDI0YWE0Y2M4LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>使用springmvc做了一个文件上传的功能，上传到nginx目录下的一个文件夹，但是通过目录访问的时候却报403的错误<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YTE5NGE0OTNmOTdmYzkxLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>去服务器查看了一下文件的权限，发现没有可读权限，于是定位了问题，上传的文件全都没有可读权限。</p>\n<h3 id=\"为什么没有可读权限\"><a href=\"#为什么没有可读权限\" class=\"headerlink\" title=\"为什么没有可读权限\"></a>为什么没有可读权限</h3><p>网上查阅资料发现，linux默认umask为022，对应权限为755，其它用户可读可执行。可以<code>vim /etc/profile</code>，搜索umusk关键字查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ $UID -gt 199 ] &amp;&amp; [ &quot;&#96;&#x2F;usr&#x2F;bin&#x2F;id -gn&#96;&quot; &#x3D; &quot;&#96;&#x2F;usr&#x2F;bin&#x2F;id -un&#96;&quot; ]; then</span><br><span class=\"line\">    umask 002</span><br><span class=\"line\">else</span><br><span class=\"line\">    umask 022</span><br></pre></td></tr></table></figure>\n<p>而tomcat8默认umask为027，对应权限为750，也就是说其它用户连可读的权限都没有。<br>可打开catalina.sh文件，搜索umask查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set UMASK unless it has been overridden</span><br><span class=\"line\">if [ -z &quot;$UMASK&quot; ]; then</span><br><span class=\"line\">    UMASK&#x3D;&quot;0027&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">umask $UMASK</span><br></pre></td></tr></table></figure>\n<p>在catalina.sh文件的开篇可以看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#   UMASK           (Optional) Override Tomcat&#39;s default UMASK of 0027</span><br></pre></td></tr></table></figure>\n<p>于是问题有了答案<br>登录到服务器，进入到tomcat的bin目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim catalina.sh</span><br><span class=\"line\">输入i,进入编辑模式，将umask改为0022</span><br><span class=\"line\">：wq(保存退出)</span><br></pre></td></tr></table></figure>\n<p>可以看到<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjU1N2JlN2UzMTVlMzE0LnBuZw?x-oss-process=image/format,png\" alt=\"3b0b9d5dc0f2d2115073293aeee4331.png\"><br>接下来重启tomcat，重新上传图片即可香油可读权限。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODAwODUwNDI0YWE0Y2M4LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>使用springmvc做了一个文件上传的功能，上传到nginx目录下的一个文件夹，但是通过目录访问的时候却报403的错误<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YTE5NGE0OTNmOTdmYzkxLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>去服务器查看了一下文件的权限，发现没有可读权限，于是定位了问题，上传的文件全都没有可读权限。</p>\n<h3 id=\"为什么没有可读权限\"><a href=\"#为什么没有可读权限\" class=\"headerlink\" title=\"为什么没有可读权限\"></a>为什么没有可读权限</h3><p>网上查阅资料发现，linux默认umask为022，对应权限为755，其它用户可读可执行。可以<code>vim /etc/profile</code>，搜索umusk关键字查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ $UID -gt 199 ] &amp;&amp; [ &quot;&#96;&#x2F;usr&#x2F;bin&#x2F;id -gn&#96;&quot; &#x3D; &quot;&#96;&#x2F;usr&#x2F;bin&#x2F;id -un&#96;&quot; ]; then</span><br><span class=\"line\">    umask 002</span><br><span class=\"line\">else</span><br><span class=\"line\">    umask 022</span><br></pre></td></tr></table></figure>\n<p>而tomcat8默认umask为027，对应权限为750，也就是说其它用户连可读的权限都没有。<br>可打开catalina.sh文件，搜索umask查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set UMASK unless it has been overridden</span><br><span class=\"line\">if [ -z &quot;$UMASK&quot; ]; then</span><br><span class=\"line\">    UMASK&#x3D;&quot;0027&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">umask $UMASK</span><br></pre></td></tr></table></figure>\n<p>在catalina.sh文件的开篇可以看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#   UMASK           (Optional) Override Tomcat&#39;s default UMASK of 0027</span><br></pre></td></tr></table></figure>\n<p>于是问题有了答案<br>登录到服务器，进入到tomcat的bin目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim catalina.sh</span><br><span class=\"line\">输入i,进入编辑模式，将umask改为0022</span><br><span class=\"line\">：wq(保存退出)</span><br></pre></td></tr></table></figure>\n<p>可以看到<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00ZjU1N2JlN2UzMTVlMzE0LnBuZw?x-oss-process=image/format,png\" alt=\"3b0b9d5dc0f2d2115073293aeee4331.png\"><br>接下来重启tomcat，重新上传图片即可香油可读权限。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODAwODUwNDI0YWE0Y2M4LmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 11:37:36 GMT+0800 (GMT+08:00)","title":"解决Tomcat8上传文件无可读权限问题","path":"2020/01/01/解决Tomcat8上传文件无可读权限问题/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODAwODUwNDI0YWE0Y2M4LmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODAwODUwNDI0YWE0Y2M4LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2020-01-01T03:34:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Tomcat"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"软件版本命名规范及各阶段说明","date":"2020-01-01T03:27:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zZDQ3NWU3MTkwZTFjYjIwLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n### 前言\n很多开发人员都没有经历过产品不断的迭代过程，基本上都是做完一套，至多经历一两个版本的迭代，基本上都会调入到另一个项目组或者离职，之后这样的事情不断地重复，直至离开这个行业。\n\n开发人员3个月开发一个版本，定位version1，如果有bug，修复后该怎么升级这个版本号呢？可能是version2，修复这个bug后，如果还有bug呢，可能继续version3.，如果这样下去，还没到产品上线，你这个版本号都会很大，而且很难记得哪一版有什么功能。如果产品上线了以后，还会升级，大家可以想象一下，这样下去后，可能到达了version9999....\n\n### 命名格式\n版本控制比较普遍的 3 种命名格式 :GNU 风格的版本号命名格式、Windows 风格的版本号命名格式、.Net Framework 风格的版本号命名格式。\n##### GNU 风格的版本号命名格式\n主版本号 . 子版本号 [. 修正版本号 [. 编译版本号 ]]\n`Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]]`\n示例 :` 1.2.1, 2.0, 5.0.0 build-13124`\n##### Windows 风格的版本号命名格式\n主版本号 . 子版本号 [ 修正版本号 [. 编译版本号 ]]\n`Major_Version_Number.Minor_Version_Number[Revision_Number[.Build_Number]]`\n示例: `1.21, 2.0`\n##### .Net Framework 风格的版本号命名格式\n主版本号.子版本号[.编译版本号[.修正版本号]]\n`Major_Version_Number.Minor_Version_Number[.Build_Number[.Revision_Number]]`\n版本号由二至四个部分组成：主版本号、次版本号、内部版本号和修订号。主版本号和次版本号是必选的；内部版本号和修订号是可选的，但是如果定义了修订号部分，则内部版本号就是必选的。所有定义的部分都必须是大于或等于 0 的整数。\n\n##### 应根据下面的约定使用这些部分：\n\n`Major` ：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。\n\n`Minor `：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。\n\n`Build` ：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。\n\n`Revision` ：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。\n\n程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 (Hotfix) 更新。\n\n因为目前市场上的软件基本上都是移动端化了，所以这里主要介绍GNU风格。\n\n### 软件版本阶段说明\n* Base版: 此版本表示该软件仅仅是一个假页面链接，通常包括所有的功能和页面布局，但是页面中的功能都没有做完整的实现，只是做为整体网站的一个基础架构。\n\n* Alpha版: 此版本表示该软件在此阶段主要是以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改。\n\n* Beta版: 该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步消除，此版本主要的修改对像是软件的UI。\n\n* RC版: 该版本已经相当成熟了，基本上不存在导致错误的BUG，与即将发行的正式版相差无几。\n\n* Release版: 该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(Ｒ)。\n\n### 版本命名规范\n软件版本号由四部分组成：\n* 第一部分为主版本号\n* 第二部分为子版本号\n* 第三部分为阶段版本号\n* 第四部分为日期版本号加希腊字母版本号\n![版本命名规范.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmJhMzQ1OWZhZWJlYzFhLnBuZw?x-oss-process=image/format,png)\n### 版本号修改规则\n* `主版本号修改` 当功能模块有较大的变动，比如增加多个模块或者整体架构发生变化。此版本号由项目决定是否修改。\n* `子版本号修改` 当功能有一定的增加或变化，比如增加了对权限控制、增加自定义视图等功能。此版本号由项目决定是否修改。\n* `阶段版本号修改` 一般是 Bug 修复或是一些小的变动，要经常发布修订版，时间间隔不限，修复一个严重的bug即可发布一个修订版。此版本号由项目经理决定是否修改。\n* `日期版本号` 用于记录修改项目的当前日期，每天对项目的修改都需要更改日期版本号。此版本号由开发人员决定是否修改。\n* `希腊字母版本号` 此版本号用于标注当前版本的软件处于哪个开发阶段，当软件进入到另一个阶段时需要修改此版本号。此版本号由项目决定是否修改。\n### 版本号阶段标志\n| 阶段名称| 阶段标识| \n|-----|-----|\n| 需求控制| a|\n| 设计阶段| b| \n| 编码阶段| c|\n| 单元测试| d| \n| 单元测试修改| e|\n| 集成测试| f| \n| 集成测试修改| g|\n| 系统测试| h| \n| 系统测试修改| i|\n| 验收测试| j| \n| 验收测试修改| k|\n\n","source":"_posts/软件版本命名规范及各阶段说明.md","raw":"title: 软件版本命名规范及各阶段说明\ntags:\n  - 规范\ncategories:\n  - Java\ndate: 2020-01-01 11:27:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zZDQ3NWU3MTkwZTFjYjIwLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n### 前言\n很多开发人员都没有经历过产品不断的迭代过程，基本上都是做完一套，至多经历一两个版本的迭代，基本上都会调入到另一个项目组或者离职，之后这样的事情不断地重复，直至离开这个行业。\n\n开发人员3个月开发一个版本，定位version1，如果有bug，修复后该怎么升级这个版本号呢？可能是version2，修复这个bug后，如果还有bug呢，可能继续version3.，如果这样下去，还没到产品上线，你这个版本号都会很大，而且很难记得哪一版有什么功能。如果产品上线了以后，还会升级，大家可以想象一下，这样下去后，可能到达了version9999....\n\n### 命名格式\n版本控制比较普遍的 3 种命名格式 :GNU 风格的版本号命名格式、Windows 风格的版本号命名格式、.Net Framework 风格的版本号命名格式。\n##### GNU 风格的版本号命名格式\n主版本号 . 子版本号 [. 修正版本号 [. 编译版本号 ]]\n`Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]]`\n示例 :` 1.2.1, 2.0, 5.0.0 build-13124`\n##### Windows 风格的版本号命名格式\n主版本号 . 子版本号 [ 修正版本号 [. 编译版本号 ]]\n`Major_Version_Number.Minor_Version_Number[Revision_Number[.Build_Number]]`\n示例: `1.21, 2.0`\n##### .Net Framework 风格的版本号命名格式\n主版本号.子版本号[.编译版本号[.修正版本号]]\n`Major_Version_Number.Minor_Version_Number[.Build_Number[.Revision_Number]]`\n版本号由二至四个部分组成：主版本号、次版本号、内部版本号和修订号。主版本号和次版本号是必选的；内部版本号和修订号是可选的，但是如果定义了修订号部分，则内部版本号就是必选的。所有定义的部分都必须是大于或等于 0 的整数。\n\n##### 应根据下面的约定使用这些部分：\n\n`Major` ：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。\n\n`Minor `：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。\n\n`Build` ：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。\n\n`Revision` ：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。\n\n程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 (Hotfix) 更新。\n\n因为目前市场上的软件基本上都是移动端化了，所以这里主要介绍GNU风格。\n\n### 软件版本阶段说明\n* Base版: 此版本表示该软件仅仅是一个假页面链接，通常包括所有的功能和页面布局，但是页面中的功能都没有做完整的实现，只是做为整体网站的一个基础架构。\n\n* Alpha版: 此版本表示该软件在此阶段主要是以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改。\n\n* Beta版: 该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步消除，此版本主要的修改对像是软件的UI。\n\n* RC版: 该版本已经相当成熟了，基本上不存在导致错误的BUG，与即将发行的正式版相差无几。\n\n* Release版: 该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(Ｒ)。\n\n### 版本命名规范\n软件版本号由四部分组成：\n* 第一部分为主版本号\n* 第二部分为子版本号\n* 第三部分为阶段版本号\n* 第四部分为日期版本号加希腊字母版本号\n![版本命名规范.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmJhMzQ1OWZhZWJlYzFhLnBuZw?x-oss-process=image/format,png)\n### 版本号修改规则\n* `主版本号修改` 当功能模块有较大的变动，比如增加多个模块或者整体架构发生变化。此版本号由项目决定是否修改。\n* `子版本号修改` 当功能有一定的增加或变化，比如增加了对权限控制、增加自定义视图等功能。此版本号由项目决定是否修改。\n* `阶段版本号修改` 一般是 Bug 修复或是一些小的变动，要经常发布修订版，时间间隔不限，修复一个严重的bug即可发布一个修订版。此版本号由项目经理决定是否修改。\n* `日期版本号` 用于记录修改项目的当前日期，每天对项目的修改都需要更改日期版本号。此版本号由开发人员决定是否修改。\n* `希腊字母版本号` 此版本号用于标注当前版本的软件处于哪个开发阶段，当软件进入到另一个阶段时需要修改此版本号。此版本号由项目决定是否修改。\n### 版本号阶段标志\n| 阶段名称| 阶段标识| \n|-----|-----|\n| 需求控制| a|\n| 设计阶段| b| \n| 编码阶段| c|\n| 单元测试| d| \n| 单元测试修改| e|\n| 集成测试| f| \n| 集成测试修改| g|\n| 系统测试| h| \n| 系统测试修改| i|\n| 验收测试| j| \n| 验收测试修改| k|\n\n","slug":"软件版本命名规范及各阶段说明","published":1,"updated":"2020-01-01T03:31:36.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwkf001hsops0k620c6u","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zZDQ3NWU3MTkwZTFjYjIwLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>很多开发人员都没有经历过产品不断的迭代过程，基本上都是做完一套，至多经历一两个版本的迭代，基本上都会调入到另一个项目组或者离职，之后这样的事情不断地重复，直至离开这个行业。</p>\n<p>开发人员3个月开发一个版本，定位version1，如果有bug，修复后该怎么升级这个版本号呢？可能是version2，修复这个bug后，如果还有bug呢，可能继续version3.，如果这样下去，还没到产品上线，你这个版本号都会很大，而且很难记得哪一版有什么功能。如果产品上线了以后，还会升级，大家可以想象一下，这样下去后，可能到达了version9999….</p>\n<h3 id=\"命名格式\"><a href=\"#命名格式\" class=\"headerlink\" title=\"命名格式\"></a>命名格式</h3><p>版本控制比较普遍的 3 种命名格式 :GNU 风格的版本号命名格式、Windows 风格的版本号命名格式、.Net Framework 风格的版本号命名格式。</p>\n<h5 id=\"GNU-风格的版本号命名格式\"><a href=\"#GNU-风格的版本号命名格式\" class=\"headerlink\" title=\"GNU 风格的版本号命名格式\"></a>GNU 风格的版本号命名格式</h5><p>主版本号 . 子版本号 [. 修正版本号 [. 编译版本号 ]]<br><code>Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]]</code><br>示例 :<code>1.2.1, 2.0, 5.0.0 build-13124</code></p>\n<h5 id=\"Windows-风格的版本号命名格式\"><a href=\"#Windows-风格的版本号命名格式\" class=\"headerlink\" title=\"Windows 风格的版本号命名格式\"></a>Windows 风格的版本号命名格式</h5><p>主版本号 . 子版本号 [ 修正版本号 [. 编译版本号 ]]<br><code>Major_Version_Number.Minor_Version_Number[Revision_Number[.Build_Number]]</code><br>示例: <code>1.21, 2.0</code></p>\n<h5 id=\"Net-Framework-风格的版本号命名格式\"><a href=\"#Net-Framework-风格的版本号命名格式\" class=\"headerlink\" title=\".Net Framework 风格的版本号命名格式\"></a>.Net Framework 风格的版本号命名格式</h5><p>主版本号.子版本号[.编译版本号[.修正版本号]]<br><code>Major_Version_Number.Minor_Version_Number[.Build_Number[.Revision_Number]]</code><br>版本号由二至四个部分组成：主版本号、次版本号、内部版本号和修订号。主版本号和次版本号是必选的；内部版本号和修订号是可选的，但是如果定义了修订号部分，则内部版本号就是必选的。所有定义的部分都必须是大于或等于 0 的整数。</p>\n<h5 id=\"应根据下面的约定使用这些部分：\"><a href=\"#应根据下面的约定使用这些部分：\" class=\"headerlink\" title=\"应根据下面的约定使用这些部分：\"></a>应根据下面的约定使用这些部分：</h5><p><code>Major</code> ：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。</p>\n<p><code>Minor</code>：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。</p>\n<p><code>Build</code> ：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。</p>\n<p><code>Revision</code> ：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。</p>\n<p>程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 (Hotfix) 更新。</p>\n<p>因为目前市场上的软件基本上都是移动端化了，所以这里主要介绍GNU风格。</p>\n<h3 id=\"软件版本阶段说明\"><a href=\"#软件版本阶段说明\" class=\"headerlink\" title=\"软件版本阶段说明\"></a>软件版本阶段说明</h3><ul>\n<li><p>Base版: 此版本表示该软件仅仅是一个假页面链接，通常包括所有的功能和页面布局，但是页面中的功能都没有做完整的实现，只是做为整体网站的一个基础架构。</p>\n</li>\n<li><p>Alpha版: 此版本表示该软件在此阶段主要是以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改。</p>\n</li>\n<li><p>Beta版: 该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步消除，此版本主要的修改对像是软件的UI。</p>\n</li>\n<li><p>RC版: 该版本已经相当成熟了，基本上不存在导致错误的BUG，与即将发行的正式版相差无几。</p>\n</li>\n<li><p>Release版: 该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(Ｒ)。</p>\n</li>\n</ul>\n<h3 id=\"版本命名规范\"><a href=\"#版本命名规范\" class=\"headerlink\" title=\"版本命名规范\"></a>版本命名规范</h3><p>软件版本号由四部分组成：</p>\n<ul>\n<li>第一部分为主版本号</li>\n<li>第二部分为子版本号</li>\n<li>第三部分为阶段版本号</li>\n<li>第四部分为日期版本号加希腊字母版本号<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmJhMzQ1OWZhZWJlYzFhLnBuZw?x-oss-process=image/format,png\" alt=\"版本命名规范.png\"><h3 id=\"版本号修改规则\"><a href=\"#版本号修改规则\" class=\"headerlink\" title=\"版本号修改规则\"></a>版本号修改规则</h3></li>\n<li><code>主版本号修改</code> 当功能模块有较大的变动，比如增加多个模块或者整体架构发生变化。此版本号由项目决定是否修改。</li>\n<li><code>子版本号修改</code> 当功能有一定的增加或变化，比如增加了对权限控制、增加自定义视图等功能。此版本号由项目决定是否修改。</li>\n<li><code>阶段版本号修改</code> 一般是 Bug 修复或是一些小的变动，要经常发布修订版，时间间隔不限，修复一个严重的bug即可发布一个修订版。此版本号由项目经理决定是否修改。</li>\n<li><code>日期版本号</code> 用于记录修改项目的当前日期，每天对项目的修改都需要更改日期版本号。此版本号由开发人员决定是否修改。</li>\n<li><code>希腊字母版本号</code> 此版本号用于标注当前版本的软件处于哪个开发阶段，当软件进入到另一个阶段时需要修改此版本号。此版本号由项目决定是否修改。<h3 id=\"版本号阶段标志\"><a href=\"#版本号阶段标志\" class=\"headerlink\" title=\"版本号阶段标志\"></a>版本号阶段标志</h3><table>\n<thead>\n<tr>\n<th>阶段名称</th>\n<th>阶段标识</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>需求控制</td>\n<td>a</td>\n</tr>\n<tr>\n<td>设计阶段</td>\n<td>b</td>\n</tr>\n<tr>\n<td>编码阶段</td>\n<td>c</td>\n</tr>\n<tr>\n<td>单元测试</td>\n<td>d</td>\n</tr>\n<tr>\n<td>单元测试修改</td>\n<td>e</td>\n</tr>\n<tr>\n<td>集成测试</td>\n<td>f</td>\n</tr>\n<tr>\n<td>集成测试修改</td>\n<td>g</td>\n</tr>\n<tr>\n<td>系统测试</td>\n<td>h</td>\n</tr>\n<tr>\n<td>系统测试修改</td>\n<td>i</td>\n</tr>\n<tr>\n<td>验收测试</td>\n<td>j</td>\n</tr>\n<tr>\n<td>验收测试修改</td>\n<td>k</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zZDQ3NWU3MTkwZTFjYjIwLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>很多开发人员都没有经历过产品不断的迭代过程，基本上都是做完一套，至多经历一两个版本的迭代，基本上都会调入到另一个项目组或者离职，之后这样的事情不断地重复，直至离开这个行业。</p>\n<p>开发人员3个月开发一个版本，定位version1，如果有bug，修复后该怎么升级这个版本号呢？可能是version2，修复这个bug后，如果还有bug呢，可能继续version3.，如果这样下去，还没到产品上线，你这个版本号都会很大，而且很难记得哪一版有什么功能。如果产品上线了以后，还会升级，大家可以想象一下，这样下去后，可能到达了version9999….</p>\n<h3 id=\"命名格式\"><a href=\"#命名格式\" class=\"headerlink\" title=\"命名格式\"></a>命名格式</h3><p>版本控制比较普遍的 3 种命名格式 :GNU 风格的版本号命名格式、Windows 风格的版本号命名格式、.Net Framework 风格的版本号命名格式。</p>\n<h5 id=\"GNU-风格的版本号命名格式\"><a href=\"#GNU-风格的版本号命名格式\" class=\"headerlink\" title=\"GNU 风格的版本号命名格式\"></a>GNU 风格的版本号命名格式</h5><p>主版本号 . 子版本号 [. 修正版本号 [. 编译版本号 ]]<br><code>Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]]</code><br>示例 :<code>1.2.1, 2.0, 5.0.0 build-13124</code></p>\n<h5 id=\"Windows-风格的版本号命名格式\"><a href=\"#Windows-风格的版本号命名格式\" class=\"headerlink\" title=\"Windows 风格的版本号命名格式\"></a>Windows 风格的版本号命名格式</h5><p>主版本号 . 子版本号 [ 修正版本号 [. 编译版本号 ]]<br><code>Major_Version_Number.Minor_Version_Number[Revision_Number[.Build_Number]]</code><br>示例: <code>1.21, 2.0</code></p>\n<h5 id=\"Net-Framework-风格的版本号命名格式\"><a href=\"#Net-Framework-风格的版本号命名格式\" class=\"headerlink\" title=\".Net Framework 风格的版本号命名格式\"></a>.Net Framework 风格的版本号命名格式</h5><p>主版本号.子版本号[.编译版本号[.修正版本号]]<br><code>Major_Version_Number.Minor_Version_Number[.Build_Number[.Revision_Number]]</code><br>版本号由二至四个部分组成：主版本号、次版本号、内部版本号和修订号。主版本号和次版本号是必选的；内部版本号和修订号是可选的，但是如果定义了修订号部分，则内部版本号就是必选的。所有定义的部分都必须是大于或等于 0 的整数。</p>\n<h5 id=\"应根据下面的约定使用这些部分：\"><a href=\"#应根据下面的约定使用这些部分：\" class=\"headerlink\" title=\"应根据下面的约定使用这些部分：\"></a>应根据下面的约定使用这些部分：</h5><p><code>Major</code> ：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。</p>\n<p><code>Minor</code>：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。</p>\n<p><code>Build</code> ：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。</p>\n<p><code>Revision</code> ：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。</p>\n<p>程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 (Hotfix) 更新。</p>\n<p>因为目前市场上的软件基本上都是移动端化了，所以这里主要介绍GNU风格。</p>\n<h3 id=\"软件版本阶段说明\"><a href=\"#软件版本阶段说明\" class=\"headerlink\" title=\"软件版本阶段说明\"></a>软件版本阶段说明</h3><ul>\n<li><p>Base版: 此版本表示该软件仅仅是一个假页面链接，通常包括所有的功能和页面布局，但是页面中的功能都没有做完整的实现，只是做为整体网站的一个基础架构。</p>\n</li>\n<li><p>Alpha版: 此版本表示该软件在此阶段主要是以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改。</p>\n</li>\n<li><p>Beta版: 该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步消除，此版本主要的修改对像是软件的UI。</p>\n</li>\n<li><p>RC版: 该版本已经相当成熟了，基本上不存在导致错误的BUG，与即将发行的正式版相差无几。</p>\n</li>\n<li><p>Release版: 该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(Ｒ)。</p>\n</li>\n</ul>\n<h3 id=\"版本命名规范\"><a href=\"#版本命名规范\" class=\"headerlink\" title=\"版本命名规范\"></a>版本命名规范</h3><p>软件版本号由四部分组成：</p>\n<ul>\n<li>第一部分为主版本号</li>\n<li>第二部分为子版本号</li>\n<li>第三部分为阶段版本号</li>\n<li>第四部分为日期版本号加希腊字母版本号<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNmJhMzQ1OWZhZWJlYzFhLnBuZw?x-oss-process=image/format,png\" alt=\"版本命名规范.png\"><h3 id=\"版本号修改规则\"><a href=\"#版本号修改规则\" class=\"headerlink\" title=\"版本号修改规则\"></a>版本号修改规则</h3></li>\n<li><code>主版本号修改</code> 当功能模块有较大的变动，比如增加多个模块或者整体架构发生变化。此版本号由项目决定是否修改。</li>\n<li><code>子版本号修改</code> 当功能有一定的增加或变化，比如增加了对权限控制、增加自定义视图等功能。此版本号由项目决定是否修改。</li>\n<li><code>阶段版本号修改</code> 一般是 Bug 修复或是一些小的变动，要经常发布修订版，时间间隔不限，修复一个严重的bug即可发布一个修订版。此版本号由项目经理决定是否修改。</li>\n<li><code>日期版本号</code> 用于记录修改项目的当前日期，每天对项目的修改都需要更改日期版本号。此版本号由开发人员决定是否修改。</li>\n<li><code>希腊字母版本号</code> 此版本号用于标注当前版本的软件处于哪个开发阶段，当软件进入到另一个阶段时需要修改此版本号。此版本号由项目决定是否修改。<h3 id=\"版本号阶段标志\"><a href=\"#版本号阶段标志\" class=\"headerlink\" title=\"版本号阶段标志\"></a>版本号阶段标志</h3><table>\n<thead>\n<tr>\n<th>阶段名称</th>\n<th>阶段标识</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>需求控制</td>\n<td>a</td>\n</tr>\n<tr>\n<td>设计阶段</td>\n<td>b</td>\n</tr>\n<tr>\n<td>编码阶段</td>\n<td>c</td>\n</tr>\n<tr>\n<td>单元测试</td>\n<td>d</td>\n</tr>\n<tr>\n<td>单元测试修改</td>\n<td>e</td>\n</tr>\n<tr>\n<td>集成测试</td>\n<td>f</td>\n</tr>\n<tr>\n<td>集成测试修改</td>\n<td>g</td>\n</tr>\n<tr>\n<td>系统测试</td>\n<td>h</td>\n</tr>\n<tr>\n<td>系统测试修改</td>\n<td>i</td>\n</tr>\n<tr>\n<td>验收测试</td>\n<td>j</td>\n</tr>\n<tr>\n<td>验收测试修改</td>\n<td>k</td>\n</tr>\n</tbody></table>\n</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zZDQ3NWU3MTkwZTFjYjIwLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 11:31:36 GMT+0800 (GMT+08:00)","title":"软件版本命名规范及各阶段说明","path":"2020/01/01/软件版本命名规范及各阶段说明/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zZDQ3NWU3MTkwZTFjYjIwLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zZDQ3NWU3MTkwZTFjYjIwLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2020-01-01T03:27:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["规范"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Double为什么会失真？","date":"2020-01-07T05:43:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02OWU4ZGI5MWZlM2E4N2NiLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n## 前言\n先来看一个double失真的例子\n```\npublic class DoubleTest {\n\n    public static void main(String[] args) {\n        for (double i = 0; i < 1; i = (i * 10 + 1) / 10) {\n            for (double k = 0; k < i; k = (k * 10 + 1) / 10) {\n                System.out.println(i + \"-\" + k + \"=\" + (i - k));\n            }\n        }\n    }\n}\n```\n输出：\n>0.1-0.0=0.1\n0.2-0.0=0.2\n0.2-0.1=0.1\n0.3-0.0=0.3\n0.3-0.1=0.19999999999999998\n0.3-0.2=0.09999999999999998\n0.4-0.0=0.4\n0.4-0.1=0.30000000000000004\n0.4-0.2=0.2\n0.4-0.3=0.10000000000000003\n0.5-0.0=0.5\n0.5-0.1=0.4\n0.5-0.2=0.3\n0.5-0.3=0.2\n0.5-0.4=0.09999999999999998\n0.6-0.0=0.6\n0.6-0.1=0.5\n0.6-0.2=0.39999999999999997\n0.6-0.3=0.3\n0.6-0.4=0.19999999999999996\n0.6-0.5=0.09999999999999998\n0.7-0.0=0.7\n0.7-0.1=0.6\n0.7-0.2=0.49999999999999994\n0.7-0.3=0.39999999999999997\n0.7-0.4=0.29999999999999993\n0.7-0.5=0.19999999999999996\n0.7-0.6=0.09999999999999998\n0.8-0.0=0.8\n0.8-0.1=0.7000000000000001\n0.8-0.2=0.6000000000000001\n0.8-0.3=0.5\n0.8-0.4=0.4\n0.8-0.5=0.30000000000000004\n0.8-0.6=0.20000000000000007\n0.8-0.7=0.10000000000000009\n0.9-0.0=0.9\n0.9-0.1=0.8\n0.9-0.2=0.7\n0.9-0.3=0.6000000000000001\n0.9-0.4=0.5\n0.9-0.5=0.4\n0.9-0.6=0.30000000000000004\n0.9-0.7=0.20000000000000007\n0.9-0.8=0.09999999999999998\n\n## 一、 什么是浮点数？\n### 1、小数\n一个小数的组成：在我国，小数表示由三部分组成，分别是整数+小数点（分隔符）+小数。\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjFkNzM3YjM4ODEyZWEyLnBuZw?x-oss-process=image/format,png)\n### 2、小数为什么会被称为浮点数\n浮点数是属于有理数中某特定子集的数的数字表示，在计算机中用以近似表示任意某个实数。具体的说，这个实数由一个整数或定点数（即尾数）乘以某个基数（计算机中通常是2）的整数次幂得到，这种表示方法类似于基数为10的科学计数法。\n\n对于浮点数可以这样简单的理解：浮点数就是小数点可以任意浮动的数字。\n\n在计算机的机器语言中，只有二进制，机器语言只能识别0和1。所以，计算机也是不可能存储小数的，所以需要有另一种变通的存储方案。这种方案就是指数方案：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMmIxYjExOTM5NTYzOGJhLnBuZw?x-oss-process=image/format,png)\n通过观察以上的图片不难发现，作为一个小数3.14。如果使用指数表现形式的话（3.14E0），其写法是多种多样的，这样写的话，小数点就可以任意浮动了。\n\n### 3、Java中浮点数的表示方法\n对于float来说，4个字节，32位，0-22位表示尾数，23-30(8位)表示指数，31位表示符号位。\n\n对于double来说，8个字节，64位，0-51表示尾数，52-62(11位)表示指数，63位最高位表示符号位。\n\n## 二、浮点数在内存中是如何存储的？\n我们知道，任何数据在计算机内存中都是用‘0\\1’来存储的，浮点数亦是如此。因此十进制浮点数在存储时必定会转换为二进制的浮点数。\n\n在内存中使用二进制的科学计数法来存储，因此分为阶码（即指数）和底数，由于也有正负之分，所以还有一位符号位。\n以float为例，float在内存中的存储为：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMjUzMDkxZDZhOTQ4ZDdmLnBuZw?x-oss-process=image/format,png)\nfloat 符号位(1bit) 指数(8 bit) 尾数(23 bit)\n\ndouble 符号位(1bit) 指数(11 bit) 尾数(52 bit)\n\nfloat在内存中占8位，由于阶码实际存储的是指数的移码，假设指数的真值是e,阶码为E，则有E=e+(2^n-1 -1)。其中 2^n-1 -1是IEEE754标准规定的指数偏移量，根据这个公式我们可以得到 2^8 -1=127。于是，float的指数范围为-128 +127，而double的指数范围为-1024 +1023。其中负指数决定了浮点数所能表达的绝对值最小的非零数；而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。\n\nfloat的范围为-2^128 ~ +2^127，也即-3.40E+38 ~ +3.40E+38；\n\ndouble的范围为-2^1024 ~ +2^1023，也即-1.79E+308 ~ +1.79E+308\n\n这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)\n\n移位存储本质上是为了保证+0和-0的一致性。\n\n以float指数部分的这8位来分析，\n\n那么这8位组成的新的字节，我们来用下面的一串数字表示：0000 0000\n\n首先，我们假设不使用移位存储技术，而是单单看看这个 8位组成的新字节，到底能表示多少个数： 0000 0000 -1111 1111 即0-255，一共256个数。\n\n但是我们知道这8位数既要表示正数也要表示负数。\n\n所以将左边第一位拿出来表示正负的符号：\n\n第一个区间：\n>0 000 0000  -  0 111 1111 \n即+0 到127\n\n第二个区间：\n>1 000 0000  -  1 111 1111\n即 -0到-127\n\n这就是问题的所在:怎么会有两个0，一个正零，一个负零。\n\n这时候使用移位存储：float使用127(0111 1111)\n\n>表示0：0+127=127 即 0000 0000 +0111 1111=0111 1111\n表示1：1+127=128 即 0000 0001 +0111 1111=1000 0000\n表示128：128+127=255 即 1000 0000+0111 1111=1111 1111\n\n最大的正数，再大就要溢出了。\n>表示-1： -1+127=126=127-1 即 0111 1111-0000 0001=0111 1110\n表示-1： -2+127=125=127-2 即 0111 1111-0000 0010=0111 1101\n表示-127： -127+127=0 即0111 1111-0111 1111=0000 0000\n\n最小的负数，在校就溢出了。\n\n## 三、浮点数的进制转换\n### 1、十进制转二进制\n主要看看十进制转二进制，整数部分和小数部分分开处理\n*  整数部分：整数除以2，得到一个商和余数，得到的商继续除以2并得到一个商和一个余数，继续除以2操作直至商为0，上述操作得到一系列余数，从最后一个余数开始直至第一个余数，这一系列0\\1即为转换后的二进制数。\n\n*  小数部分：乘以2，然后取出整数部分，将剩下的小数部分继续乘以2，然后再取整数部分，一直取到小数部分为零为止。如果永远不为零，则按要求保留足够位数的小数，最后一位做0舍1入。将取出的整数顺序排列。\n\n从以上转换过程可以看出，并不是任何一个十进制小数都可以用二进制精确表示出来。一个在0到1之间的小数P可用如下形式表示：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZjBlYTI1NWM2NDBjNDY3LnBuZw?x-oss-process=image/format,png)\n从这个式子中我们也可看出二进制表示出的小数是分段的，这也是为什么在Java中浮点数很多时候并不是十分精确的表示十进制小数的根本原因。\n```\npublic static void main(String[] args) {\n    float f1=20f;\n    float f2=20.3f;\n    float f3=20.5f;\n\n    double d1=20;\n    double d2=20.3;\n    double d3=20.5;\n\n    System.out.println(f1==d1);\n    System.out.println(f2==d2);\n    System.out.println(f3==d3);\n}\n```\n>true\nfalse\ntrue\n\n以20.3举例：\n20转换后变为 10100\n0.3 要转换二进制，需要乘2, 乘完之后 取整数部分，然后用乘的结果减去整数部分， 然后 接着乘2, 直至最后没有小数或者小数出现循环, 即乘完.\n>0.3 * 2 = 0.6 (0)\n  0.6 * 2 = 1.2 (1)\n  0.2 * 2 = 0.4 (0)\n  0.4 * 2 = 0.8 (0)\n  0.8 * 2 = 1.6 (1)\n\n计算到这里， 将再出现0.6,进入循环了，所以，结果\n0.3 = 0.010011001…1001\n所以20.3 = 10100.010011001…1001 (二进制).\n\n### 2、二进制的科学记数法表示\n20.3 = 10100.010011001…1001 (二进制)=1.01000100110011E10…..（十进制科学计数）=1.01000100110011E100…..(二进制科学计数)\n\n这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)\n\n同时要注意一点，以float为例，最高位表示的是整个数的符号位，指数位一共8位，最高位表示的是指数位的正负，因为有可能是E-100这样的情况，所以虽然有8位，最高位只是符号位，剩下7位才是表示真正的数值，这也是使用移位存储的原因。\n\n对于一个数字，只要不超过和float的范围，同时小数部分不是无限小数，就可以和对应的double类型相等。\n### 3、浮点数舍入规则\n以52位尾数的双精度浮点数为例，舍入时需要重点参考第53位。\n\n若第53位为1，而其后的位数都是0，此时就要使第52位为0；若第52位为0则不用再进行其他操作，若第52位为1，则第53位就要向52位进一位。\n\n若第53位为1，但其后的位数不全为0，则第53为就要向第52位进一位。\n\n若不是以上两种情况，也即53位为0，那么就直接舍弃不进位，称为下舍入。\n\n浮点数舍入规则也就证明了为何在上文中提到的浮点数舍入中，相对舍入误差不能大于机器ε的一半。\n\n \n\n对于java来说，一般float类型小数点后保留7位，而double类型小数点后保留15位。\n\n这个原因也是因为尾数的数据宽度限制\n\n对于float型来说，因为2^23 = 8388608\n\n同时最左一位默认省略了，故实际能表示2^24 = 16777216个数，最多能表示8位，但绝对精确的只能表示7位。\n\n而对于double型来说，2^52 = 4503599627370496，共16位。加上省略的一位，能表示2^53 = 9007199254740992。故double型最多能表示16位，而绝对精确的只能表示15位。\n\n### 4、机器ε\n机器ε表示1与大于1的最小浮点数之差。不同精度定义的机器ε不同。以双精度为例，\n\n双精度表示1是\n\n1.000......0000（52个0） × 2^0\n\n而比1大的最小的双精度是（其实还能表示更小的范围，后文中会提到，但并不影响这里的机器ε）\n\n1.000......0001 × 2^0\n\n也即\n\n2^-52 ≈ 2.220446049250313e-16。所以它就是双精度浮点数的机器ε。\n\n在舍入中，相对舍入误差不能大于机器ε的一半。\n\n对于双精度浮点数来说，这个值为0.00000005960464477539。\n\n所以在Java中double类型中连续8个0.1相乘，就会出现表示不精确的情况。\n\n\n参考：\nhttps://baijiahao.baidu.com/s?id=1618173300159774003&wfr=spider&for=pc\nhttps://www.cnblogs.com/Vicebery/p/9997636.html\nhttps://blog.csdn.net/Return_head/article/details/88623060\nhttps://blog.csdn.net/u011277123/article/details/95774544\nhttps://blog.csdn.net/endlessseaofcrow/article/details/81269079\n\n","source":"_posts/Double为什么会失真？.md","raw":"title: Double为什么会失真？\ntags:\n  - 数据类型\ncategories:\n  - Java\ndate: 2020-01-07 13:43:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02OWU4ZGI5MWZlM2E4N2NiLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n## 前言\n先来看一个double失真的例子\n```\npublic class DoubleTest {\n\n    public static void main(String[] args) {\n        for (double i = 0; i < 1; i = (i * 10 + 1) / 10) {\n            for (double k = 0; k < i; k = (k * 10 + 1) / 10) {\n                System.out.println(i + \"-\" + k + \"=\" + (i - k));\n            }\n        }\n    }\n}\n```\n输出：\n>0.1-0.0=0.1\n0.2-0.0=0.2\n0.2-0.1=0.1\n0.3-0.0=0.3\n0.3-0.1=0.19999999999999998\n0.3-0.2=0.09999999999999998\n0.4-0.0=0.4\n0.4-0.1=0.30000000000000004\n0.4-0.2=0.2\n0.4-0.3=0.10000000000000003\n0.5-0.0=0.5\n0.5-0.1=0.4\n0.5-0.2=0.3\n0.5-0.3=0.2\n0.5-0.4=0.09999999999999998\n0.6-0.0=0.6\n0.6-0.1=0.5\n0.6-0.2=0.39999999999999997\n0.6-0.3=0.3\n0.6-0.4=0.19999999999999996\n0.6-0.5=0.09999999999999998\n0.7-0.0=0.7\n0.7-0.1=0.6\n0.7-0.2=0.49999999999999994\n0.7-0.3=0.39999999999999997\n0.7-0.4=0.29999999999999993\n0.7-0.5=0.19999999999999996\n0.7-0.6=0.09999999999999998\n0.8-0.0=0.8\n0.8-0.1=0.7000000000000001\n0.8-0.2=0.6000000000000001\n0.8-0.3=0.5\n0.8-0.4=0.4\n0.8-0.5=0.30000000000000004\n0.8-0.6=0.20000000000000007\n0.8-0.7=0.10000000000000009\n0.9-0.0=0.9\n0.9-0.1=0.8\n0.9-0.2=0.7\n0.9-0.3=0.6000000000000001\n0.9-0.4=0.5\n0.9-0.5=0.4\n0.9-0.6=0.30000000000000004\n0.9-0.7=0.20000000000000007\n0.9-0.8=0.09999999999999998\n\n## 一、 什么是浮点数？\n### 1、小数\n一个小数的组成：在我国，小数表示由三部分组成，分别是整数+小数点（分隔符）+小数。\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjFkNzM3YjM4ODEyZWEyLnBuZw?x-oss-process=image/format,png)\n### 2、小数为什么会被称为浮点数\n浮点数是属于有理数中某特定子集的数的数字表示，在计算机中用以近似表示任意某个实数。具体的说，这个实数由一个整数或定点数（即尾数）乘以某个基数（计算机中通常是2）的整数次幂得到，这种表示方法类似于基数为10的科学计数法。\n\n对于浮点数可以这样简单的理解：浮点数就是小数点可以任意浮动的数字。\n\n在计算机的机器语言中，只有二进制，机器语言只能识别0和1。所以，计算机也是不可能存储小数的，所以需要有另一种变通的存储方案。这种方案就是指数方案：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMmIxYjExOTM5NTYzOGJhLnBuZw?x-oss-process=image/format,png)\n通过观察以上的图片不难发现，作为一个小数3.14。如果使用指数表现形式的话（3.14E0），其写法是多种多样的，这样写的话，小数点就可以任意浮动了。\n\n### 3、Java中浮点数的表示方法\n对于float来说，4个字节，32位，0-22位表示尾数，23-30(8位)表示指数，31位表示符号位。\n\n对于double来说，8个字节，64位，0-51表示尾数，52-62(11位)表示指数，63位最高位表示符号位。\n\n## 二、浮点数在内存中是如何存储的？\n我们知道，任何数据在计算机内存中都是用‘0\\1’来存储的，浮点数亦是如此。因此十进制浮点数在存储时必定会转换为二进制的浮点数。\n\n在内存中使用二进制的科学计数法来存储，因此分为阶码（即指数）和底数，由于也有正负之分，所以还有一位符号位。\n以float为例，float在内存中的存储为：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMjUzMDkxZDZhOTQ4ZDdmLnBuZw?x-oss-process=image/format,png)\nfloat 符号位(1bit) 指数(8 bit) 尾数(23 bit)\n\ndouble 符号位(1bit) 指数(11 bit) 尾数(52 bit)\n\nfloat在内存中占8位，由于阶码实际存储的是指数的移码，假设指数的真值是e,阶码为E，则有E=e+(2^n-1 -1)。其中 2^n-1 -1是IEEE754标准规定的指数偏移量，根据这个公式我们可以得到 2^8 -1=127。于是，float的指数范围为-128 +127，而double的指数范围为-1024 +1023。其中负指数决定了浮点数所能表达的绝对值最小的非零数；而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。\n\nfloat的范围为-2^128 ~ +2^127，也即-3.40E+38 ~ +3.40E+38；\n\ndouble的范围为-2^1024 ~ +2^1023，也即-1.79E+308 ~ +1.79E+308\n\n这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)\n\n移位存储本质上是为了保证+0和-0的一致性。\n\n以float指数部分的这8位来分析，\n\n那么这8位组成的新的字节，我们来用下面的一串数字表示：0000 0000\n\n首先，我们假设不使用移位存储技术，而是单单看看这个 8位组成的新字节，到底能表示多少个数： 0000 0000 -1111 1111 即0-255，一共256个数。\n\n但是我们知道这8位数既要表示正数也要表示负数。\n\n所以将左边第一位拿出来表示正负的符号：\n\n第一个区间：\n>0 000 0000  -  0 111 1111 \n即+0 到127\n\n第二个区间：\n>1 000 0000  -  1 111 1111\n即 -0到-127\n\n这就是问题的所在:怎么会有两个0，一个正零，一个负零。\n\n这时候使用移位存储：float使用127(0111 1111)\n\n>表示0：0+127=127 即 0000 0000 +0111 1111=0111 1111\n表示1：1+127=128 即 0000 0001 +0111 1111=1000 0000\n表示128：128+127=255 即 1000 0000+0111 1111=1111 1111\n\n最大的正数，再大就要溢出了。\n>表示-1： -1+127=126=127-1 即 0111 1111-0000 0001=0111 1110\n表示-1： -2+127=125=127-2 即 0111 1111-0000 0010=0111 1101\n表示-127： -127+127=0 即0111 1111-0111 1111=0000 0000\n\n最小的负数，在校就溢出了。\n\n## 三、浮点数的进制转换\n### 1、十进制转二进制\n主要看看十进制转二进制，整数部分和小数部分分开处理\n*  整数部分：整数除以2，得到一个商和余数，得到的商继续除以2并得到一个商和一个余数，继续除以2操作直至商为0，上述操作得到一系列余数，从最后一个余数开始直至第一个余数，这一系列0\\1即为转换后的二进制数。\n\n*  小数部分：乘以2，然后取出整数部分，将剩下的小数部分继续乘以2，然后再取整数部分，一直取到小数部分为零为止。如果永远不为零，则按要求保留足够位数的小数，最后一位做0舍1入。将取出的整数顺序排列。\n\n从以上转换过程可以看出，并不是任何一个十进制小数都可以用二进制精确表示出来。一个在0到1之间的小数P可用如下形式表示：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZjBlYTI1NWM2NDBjNDY3LnBuZw?x-oss-process=image/format,png)\n从这个式子中我们也可看出二进制表示出的小数是分段的，这也是为什么在Java中浮点数很多时候并不是十分精确的表示十进制小数的根本原因。\n```\npublic static void main(String[] args) {\n    float f1=20f;\n    float f2=20.3f;\n    float f3=20.5f;\n\n    double d1=20;\n    double d2=20.3;\n    double d3=20.5;\n\n    System.out.println(f1==d1);\n    System.out.println(f2==d2);\n    System.out.println(f3==d3);\n}\n```\n>true\nfalse\ntrue\n\n以20.3举例：\n20转换后变为 10100\n0.3 要转换二进制，需要乘2, 乘完之后 取整数部分，然后用乘的结果减去整数部分， 然后 接着乘2, 直至最后没有小数或者小数出现循环, 即乘完.\n>0.3 * 2 = 0.6 (0)\n  0.6 * 2 = 1.2 (1)\n  0.2 * 2 = 0.4 (0)\n  0.4 * 2 = 0.8 (0)\n  0.8 * 2 = 1.6 (1)\n\n计算到这里， 将再出现0.6,进入循环了，所以，结果\n0.3 = 0.010011001…1001\n所以20.3 = 10100.010011001…1001 (二进制).\n\n### 2、二进制的科学记数法表示\n20.3 = 10100.010011001…1001 (二进制)=1.01000100110011E10…..（十进制科学计数）=1.01000100110011E100…..(二进制科学计数)\n\n这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)\n\n同时要注意一点，以float为例，最高位表示的是整个数的符号位，指数位一共8位，最高位表示的是指数位的正负，因为有可能是E-100这样的情况，所以虽然有8位，最高位只是符号位，剩下7位才是表示真正的数值，这也是使用移位存储的原因。\n\n对于一个数字，只要不超过和float的范围，同时小数部分不是无限小数，就可以和对应的double类型相等。\n### 3、浮点数舍入规则\n以52位尾数的双精度浮点数为例，舍入时需要重点参考第53位。\n\n若第53位为1，而其后的位数都是0，此时就要使第52位为0；若第52位为0则不用再进行其他操作，若第52位为1，则第53位就要向52位进一位。\n\n若第53位为1，但其后的位数不全为0，则第53为就要向第52位进一位。\n\n若不是以上两种情况，也即53位为0，那么就直接舍弃不进位，称为下舍入。\n\n浮点数舍入规则也就证明了为何在上文中提到的浮点数舍入中，相对舍入误差不能大于机器ε的一半。\n\n \n\n对于java来说，一般float类型小数点后保留7位，而double类型小数点后保留15位。\n\n这个原因也是因为尾数的数据宽度限制\n\n对于float型来说，因为2^23 = 8388608\n\n同时最左一位默认省略了，故实际能表示2^24 = 16777216个数，最多能表示8位，但绝对精确的只能表示7位。\n\n而对于double型来说，2^52 = 4503599627370496，共16位。加上省略的一位，能表示2^53 = 9007199254740992。故double型最多能表示16位，而绝对精确的只能表示15位。\n\n### 4、机器ε\n机器ε表示1与大于1的最小浮点数之差。不同精度定义的机器ε不同。以双精度为例，\n\n双精度表示1是\n\n1.000......0000（52个0） × 2^0\n\n而比1大的最小的双精度是（其实还能表示更小的范围，后文中会提到，但并不影响这里的机器ε）\n\n1.000......0001 × 2^0\n\n也即\n\n2^-52 ≈ 2.220446049250313e-16。所以它就是双精度浮点数的机器ε。\n\n在舍入中，相对舍入误差不能大于机器ε的一半。\n\n对于双精度浮点数来说，这个值为0.00000005960464477539。\n\n所以在Java中double类型中连续8个0.1相乘，就会出现表示不精确的情况。\n\n\n参考：\nhttps://baijiahao.baidu.com/s?id=1618173300159774003&wfr=spider&for=pc\nhttps://www.cnblogs.com/Vicebery/p/9997636.html\nhttps://blog.csdn.net/Return_head/article/details/88623060\nhttps://blog.csdn.net/u011277123/article/details/95774544\nhttps://blog.csdn.net/endlessseaofcrow/article/details/81269079\n\n","slug":"Double为什么会失真？","published":1,"updated":"2020-01-07T06:06:36.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwl70029sopsgjc0dvpu","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02OWU4ZGI5MWZlM2E4N2NiLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>先来看一个double失真的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DoubleTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        for (double i &#x3D; 0; i &lt; 1; i &#x3D; (i * 10 + 1) &#x2F; 10) &#123;</span><br><span class=\"line\">            for (double k &#x3D; 0; k &lt; i; k &#x3D; (k * 10 + 1) &#x2F; 10) &#123;</span><br><span class=\"line\">                System.out.println(i + &quot;-&quot; + k + &quot;&#x3D;&quot; + (i - k));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<blockquote>\n<p>0.1-0.0=0.1<br>0.2-0.0=0.2<br>0.2-0.1=0.1<br>0.3-0.0=0.3<br>0.3-0.1=0.19999999999999998<br>0.3-0.2=0.09999999999999998<br>0.4-0.0=0.4<br>0.4-0.1=0.30000000000000004<br>0.4-0.2=0.2<br>0.4-0.3=0.10000000000000003<br>0.5-0.0=0.5<br>0.5-0.1=0.4<br>0.5-0.2=0.3<br>0.5-0.3=0.2<br>0.5-0.4=0.09999999999999998<br>0.6-0.0=0.6<br>0.6-0.1=0.5<br>0.6-0.2=0.39999999999999997<br>0.6-0.3=0.3<br>0.6-0.4=0.19999999999999996<br>0.6-0.5=0.09999999999999998<br>0.7-0.0=0.7<br>0.7-0.1=0.6<br>0.7-0.2=0.49999999999999994<br>0.7-0.3=0.39999999999999997<br>0.7-0.4=0.29999999999999993<br>0.7-0.5=0.19999999999999996<br>0.7-0.6=0.09999999999999998<br>0.8-0.0=0.8<br>0.8-0.1=0.7000000000000001<br>0.8-0.2=0.6000000000000001<br>0.8-0.3=0.5<br>0.8-0.4=0.4<br>0.8-0.5=0.30000000000000004<br>0.8-0.6=0.20000000000000007<br>0.8-0.7=0.10000000000000009<br>0.9-0.0=0.9<br>0.9-0.1=0.8<br>0.9-0.2=0.7<br>0.9-0.3=0.6000000000000001<br>0.9-0.4=0.5<br>0.9-0.5=0.4<br>0.9-0.6=0.30000000000000004<br>0.9-0.7=0.20000000000000007<br>0.9-0.8=0.09999999999999998</p>\n</blockquote>\n<h2 id=\"一、-什么是浮点数？\"><a href=\"#一、-什么是浮点数？\" class=\"headerlink\" title=\"一、 什么是浮点数？\"></a>一、 什么是浮点数？</h2><h3 id=\"1、小数\"><a href=\"#1、小数\" class=\"headerlink\" title=\"1、小数\"></a>1、小数</h3><p>一个小数的组成：在我国，小数表示由三部分组成，分别是整数+小数点（分隔符）+小数。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjFkNzM3YjM4ODEyZWEyLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h3 id=\"2、小数为什么会被称为浮点数\"><a href=\"#2、小数为什么会被称为浮点数\" class=\"headerlink\" title=\"2、小数为什么会被称为浮点数\"></a>2、小数为什么会被称为浮点数</h3><p>浮点数是属于有理数中某特定子集的数的数字表示，在计算机中用以近似表示任意某个实数。具体的说，这个实数由一个整数或定点数（即尾数）乘以某个基数（计算机中通常是2）的整数次幂得到，这种表示方法类似于基数为10的科学计数法。</p>\n<p>对于浮点数可以这样简单的理解：浮点数就是小数点可以任意浮动的数字。</p>\n<p>在计算机的机器语言中，只有二进制，机器语言只能识别0和1。所以，计算机也是不可能存储小数的，所以需要有另一种变通的存储方案。这种方案就是指数方案：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMmIxYjExOTM5NTYzOGJhLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>通过观察以上的图片不难发现，作为一个小数3.14。如果使用指数表现形式的话（3.14E0），其写法是多种多样的，这样写的话，小数点就可以任意浮动了。</p>\n<h3 id=\"3、Java中浮点数的表示方法\"><a href=\"#3、Java中浮点数的表示方法\" class=\"headerlink\" title=\"3、Java中浮点数的表示方法\"></a>3、Java中浮点数的表示方法</h3><p>对于float来说，4个字节，32位，0-22位表示尾数，23-30(8位)表示指数，31位表示符号位。</p>\n<p>对于double来说，8个字节，64位，0-51表示尾数，52-62(11位)表示指数，63位最高位表示符号位。</p>\n<h2 id=\"二、浮点数在内存中是如何存储的？\"><a href=\"#二、浮点数在内存中是如何存储的？\" class=\"headerlink\" title=\"二、浮点数在内存中是如何存储的？\"></a>二、浮点数在内存中是如何存储的？</h2><p>我们知道，任何数据在计算机内存中都是用‘0\\1’来存储的，浮点数亦是如此。因此十进制浮点数在存储时必定会转换为二进制的浮点数。</p>\n<p>在内存中使用二进制的科学计数法来存储，因此分为阶码（即指数）和底数，由于也有正负之分，所以还有一位符号位。<br>以float为例，float在内存中的存储为：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMjUzMDkxZDZhOTQ4ZDdmLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>float 符号位(1bit) 指数(8 bit) 尾数(23 bit)</p>\n<p>double 符号位(1bit) 指数(11 bit) 尾数(52 bit)</p>\n<p>float在内存中占8位，由于阶码实际存储的是指数的移码，假设指数的真值是e,阶码为E，则有E=e+(2^n-1 -1)。其中 2^n-1 -1是IEEE754标准规定的指数偏移量，根据这个公式我们可以得到 2^8 -1=127。于是，float的指数范围为-128 +127，而double的指数范围为-1024 +1023。其中负指数决定了浮点数所能表达的绝对值最小的非零数；而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。</p>\n<p>float的范围为-2^128 ~ +2^127，也即-3.40E+38 ~ +3.40E+38；</p>\n<p>double的范围为-2^1024 ~ +2^1023，也即-1.79E+308 ~ +1.79E+308</p>\n<p>这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)</p>\n<p>移位存储本质上是为了保证+0和-0的一致性。</p>\n<p>以float指数部分的这8位来分析，</p>\n<p>那么这8位组成的新的字节，我们来用下面的一串数字表示：0000 0000</p>\n<p>首先，我们假设不使用移位存储技术，而是单单看看这个 8位组成的新字节，到底能表示多少个数： 0000 0000 -1111 1111 即0-255，一共256个数。</p>\n<p>但是我们知道这8位数既要表示正数也要表示负数。</p>\n<p>所以将左边第一位拿出来表示正负的符号：</p>\n<p>第一个区间：</p>\n<blockquote>\n<p>0 000 0000  -  0 111 1111<br>即+0 到127</p>\n</blockquote>\n<p>第二个区间：</p>\n<blockquote>\n<p>1 000 0000  -  1 111 1111<br>即 -0到-127</p>\n</blockquote>\n<p>这就是问题的所在:怎么会有两个0，一个正零，一个负零。</p>\n<p>这时候使用移位存储：float使用127(0111 1111)</p>\n<blockquote>\n<p>表示0：0+127=127 即 0000 0000 +0111 1111=0111 1111<br>表示1：1+127=128 即 0000 0001 +0111 1111=1000 0000<br>表示128：128+127=255 即 1000 0000+0111 1111=1111 1111</p>\n</blockquote>\n<p>最大的正数，再大就要溢出了。</p>\n<blockquote>\n<p>表示-1： -1+127=126=127-1 即 0111 1111-0000 0001=0111 1110<br>表示-1： -2+127=125=127-2 即 0111 1111-0000 0010=0111 1101<br>表示-127： -127+127=0 即0111 1111-0111 1111=0000 0000</p>\n</blockquote>\n<p>最小的负数，在校就溢出了。</p>\n<h2 id=\"三、浮点数的进制转换\"><a href=\"#三、浮点数的进制转换\" class=\"headerlink\" title=\"三、浮点数的进制转换\"></a>三、浮点数的进制转换</h2><h3 id=\"1、十进制转二进制\"><a href=\"#1、十进制转二进制\" class=\"headerlink\" title=\"1、十进制转二进制\"></a>1、十进制转二进制</h3><p>主要看看十进制转二进制，整数部分和小数部分分开处理</p>\n<ul>\n<li><p>整数部分：整数除以2，得到一个商和余数，得到的商继续除以2并得到一个商和一个余数，继续除以2操作直至商为0，上述操作得到一系列余数，从最后一个余数开始直至第一个余数，这一系列0\\1即为转换后的二进制数。</p>\n</li>\n<li><p>小数部分：乘以2，然后取出整数部分，将剩下的小数部分继续乘以2，然后再取整数部分，一直取到小数部分为零为止。如果永远不为零，则按要求保留足够位数的小数，最后一位做0舍1入。将取出的整数顺序排列。</p>\n</li>\n</ul>\n<p>从以上转换过程可以看出，并不是任何一个十进制小数都可以用二进制精确表示出来。一个在0到1之间的小数P可用如下形式表示：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZjBlYTI1NWM2NDBjNDY3LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>从这个式子中我们也可看出二进制表示出的小数是分段的，这也是为什么在Java中浮点数很多时候并不是十分精确的表示十进制小数的根本原因。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    float f1&#x3D;20f;</span><br><span class=\"line\">    float f2&#x3D;20.3f;</span><br><span class=\"line\">    float f3&#x3D;20.5f;</span><br><span class=\"line\"></span><br><span class=\"line\">    double d1&#x3D;20;</span><br><span class=\"line\">    double d2&#x3D;20.3;</span><br><span class=\"line\">    double d3&#x3D;20.5;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(f1&#x3D;&#x3D;d1);</span><br><span class=\"line\">    System.out.println(f2&#x3D;&#x3D;d2);</span><br><span class=\"line\">    System.out.println(f3&#x3D;&#x3D;d3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>true<br>false<br>true</p>\n</blockquote>\n<p>以20.3举例：<br>20转换后变为 10100<br>0.3 要转换二进制，需要乘2, 乘完之后 取整数部分，然后用乘的结果减去整数部分， 然后 接着乘2, 直至最后没有小数或者小数出现循环, 即乘完.</p>\n<blockquote>\n<p>0.3 * 2 = 0.6 (0)<br>  0.6 * 2 = 1.2 (1)<br>  0.2 * 2 = 0.4 (0)<br>  0.4 * 2 = 0.8 (0)<br>  0.8 * 2 = 1.6 (1)</p>\n</blockquote>\n<p>计算到这里， 将再出现0.6,进入循环了，所以，结果<br>0.3 = 0.010011001…1001<br>所以20.3 = 10100.010011001…1001 (二进制).</p>\n<h3 id=\"2、二进制的科学记数法表示\"><a href=\"#2、二进制的科学记数法表示\" class=\"headerlink\" title=\"2、二进制的科学记数法表示\"></a>2、二进制的科学记数法表示</h3><p>20.3 = 10100.010011001…1001 (二进制)=1.01000100110011E10…..（十进制科学计数）=1.01000100110011E100…..(二进制科学计数)</p>\n<p>这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)</p>\n<p>同时要注意一点，以float为例，最高位表示的是整个数的符号位，指数位一共8位，最高位表示的是指数位的正负，因为有可能是E-100这样的情况，所以虽然有8位，最高位只是符号位，剩下7位才是表示真正的数值，这也是使用移位存储的原因。</p>\n<p>对于一个数字，只要不超过和float的范围，同时小数部分不是无限小数，就可以和对应的double类型相等。</p>\n<h3 id=\"3、浮点数舍入规则\"><a href=\"#3、浮点数舍入规则\" class=\"headerlink\" title=\"3、浮点数舍入规则\"></a>3、浮点数舍入规则</h3><p>以52位尾数的双精度浮点数为例，舍入时需要重点参考第53位。</p>\n<p>若第53位为1，而其后的位数都是0，此时就要使第52位为0；若第52位为0则不用再进行其他操作，若第52位为1，则第53位就要向52位进一位。</p>\n<p>若第53位为1，但其后的位数不全为0，则第53为就要向第52位进一位。</p>\n<p>若不是以上两种情况，也即53位为0，那么就直接舍弃不进位，称为下舍入。</p>\n<p>浮点数舍入规则也就证明了为何在上文中提到的浮点数舍入中，相对舍入误差不能大于机器ε的一半。</p>\n<p>对于java来说，一般float类型小数点后保留7位，而double类型小数点后保留15位。</p>\n<p>这个原因也是因为尾数的数据宽度限制</p>\n<p>对于float型来说，因为2^23 = 8388608</p>\n<p>同时最左一位默认省略了，故实际能表示2^24 = 16777216个数，最多能表示8位，但绝对精确的只能表示7位。</p>\n<p>而对于double型来说，2^52 = 4503599627370496，共16位。加上省略的一位，能表示2^53 = 9007199254740992。故double型最多能表示16位，而绝对精确的只能表示15位。</p>\n<h3 id=\"4、机器ε\"><a href=\"#4、机器ε\" class=\"headerlink\" title=\"4、机器ε\"></a>4、机器ε</h3><p>机器ε表示1与大于1的最小浮点数之差。不同精度定义的机器ε不同。以双精度为例，</p>\n<p>双精度表示1是</p>\n<p>1.000……0000（52个0） × 2^0</p>\n<p>而比1大的最小的双精度是（其实还能表示更小的范围，后文中会提到，但并不影响这里的机器ε）</p>\n<p>1.000……0001 × 2^0</p>\n<p>也即</p>\n<p>2^-52 ≈ 2.220446049250313e-16。所以它就是双精度浮点数的机器ε。</p>\n<p>在舍入中，相对舍入误差不能大于机器ε的一半。</p>\n<p>对于双精度浮点数来说，这个值为0.00000005960464477539。</p>\n<p>所以在Java中double类型中连续8个0.1相乘，就会出现表示不精确的情况。</p>\n<p>参考：<br><a href=\"https://baijiahao.baidu.com/s?id=1618173300159774003&amp;wfr=spider&amp;for=pc\" target=\"_blank\" rel=\"noopener\">https://baijiahao.baidu.com/s?id=1618173300159774003&amp;wfr=spider&amp;for=pc</a><br><a href=\"https://www.cnblogs.com/Vicebery/p/9997636.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Vicebery/p/9997636.html</a><br><a href=\"https://blog.csdn.net/Return_head/article/details/88623060\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Return_head/article/details/88623060</a><br><a href=\"https://blog.csdn.net/u011277123/article/details/95774544\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u011277123/article/details/95774544</a><br><a href=\"https://blog.csdn.net/endlessseaofcrow/article/details/81269079\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/endlessseaofcrow/article/details/81269079</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02OWU4ZGI5MWZlM2E4N2NiLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>先来看一个double失真的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DoubleTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        for (double i &#x3D; 0; i &lt; 1; i &#x3D; (i * 10 + 1) &#x2F; 10) &#123;</span><br><span class=\"line\">            for (double k &#x3D; 0; k &lt; i; k &#x3D; (k * 10 + 1) &#x2F; 10) &#123;</span><br><span class=\"line\">                System.out.println(i + &quot;-&quot; + k + &quot;&#x3D;&quot; + (i - k));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<blockquote>\n<p>0.1-0.0=0.1<br>0.2-0.0=0.2<br>0.2-0.1=0.1<br>0.3-0.0=0.3<br>0.3-0.1=0.19999999999999998<br>0.3-0.2=0.09999999999999998<br>0.4-0.0=0.4<br>0.4-0.1=0.30000000000000004<br>0.4-0.2=0.2<br>0.4-0.3=0.10000000000000003<br>0.5-0.0=0.5<br>0.5-0.1=0.4<br>0.5-0.2=0.3<br>0.5-0.3=0.2<br>0.5-0.4=0.09999999999999998<br>0.6-0.0=0.6<br>0.6-0.1=0.5<br>0.6-0.2=0.39999999999999997<br>0.6-0.3=0.3<br>0.6-0.4=0.19999999999999996<br>0.6-0.5=0.09999999999999998<br>0.7-0.0=0.7<br>0.7-0.1=0.6<br>0.7-0.2=0.49999999999999994<br>0.7-0.3=0.39999999999999997<br>0.7-0.4=0.29999999999999993<br>0.7-0.5=0.19999999999999996<br>0.7-0.6=0.09999999999999998<br>0.8-0.0=0.8<br>0.8-0.1=0.7000000000000001<br>0.8-0.2=0.6000000000000001<br>0.8-0.3=0.5<br>0.8-0.4=0.4<br>0.8-0.5=0.30000000000000004<br>0.8-0.6=0.20000000000000007<br>0.8-0.7=0.10000000000000009<br>0.9-0.0=0.9<br>0.9-0.1=0.8<br>0.9-0.2=0.7<br>0.9-0.3=0.6000000000000001<br>0.9-0.4=0.5<br>0.9-0.5=0.4<br>0.9-0.6=0.30000000000000004<br>0.9-0.7=0.20000000000000007<br>0.9-0.8=0.09999999999999998</p>\n</blockquote>\n<h2 id=\"一、-什么是浮点数？\"><a href=\"#一、-什么是浮点数？\" class=\"headerlink\" title=\"一、 什么是浮点数？\"></a>一、 什么是浮点数？</h2><h3 id=\"1、小数\"><a href=\"#1、小数\" class=\"headerlink\" title=\"1、小数\"></a>1、小数</h3><p>一个小数的组成：在我国，小数表示由三部分组成，分别是整数+小数点（分隔符）+小数。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04YjFkNzM3YjM4ODEyZWEyLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h3 id=\"2、小数为什么会被称为浮点数\"><a href=\"#2、小数为什么会被称为浮点数\" class=\"headerlink\" title=\"2、小数为什么会被称为浮点数\"></a>2、小数为什么会被称为浮点数</h3><p>浮点数是属于有理数中某特定子集的数的数字表示，在计算机中用以近似表示任意某个实数。具体的说，这个实数由一个整数或定点数（即尾数）乘以某个基数（计算机中通常是2）的整数次幂得到，这种表示方法类似于基数为10的科学计数法。</p>\n<p>对于浮点数可以这样简单的理解：浮点数就是小数点可以任意浮动的数字。</p>\n<p>在计算机的机器语言中，只有二进制，机器语言只能识别0和1。所以，计算机也是不可能存储小数的，所以需要有另一种变通的存储方案。这种方案就是指数方案：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMmIxYjExOTM5NTYzOGJhLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>通过观察以上的图片不难发现，作为一个小数3.14。如果使用指数表现形式的话（3.14E0），其写法是多种多样的，这样写的话，小数点就可以任意浮动了。</p>\n<h3 id=\"3、Java中浮点数的表示方法\"><a href=\"#3、Java中浮点数的表示方法\" class=\"headerlink\" title=\"3、Java中浮点数的表示方法\"></a>3、Java中浮点数的表示方法</h3><p>对于float来说，4个字节，32位，0-22位表示尾数，23-30(8位)表示指数，31位表示符号位。</p>\n<p>对于double来说，8个字节，64位，0-51表示尾数，52-62(11位)表示指数，63位最高位表示符号位。</p>\n<h2 id=\"二、浮点数在内存中是如何存储的？\"><a href=\"#二、浮点数在内存中是如何存储的？\" class=\"headerlink\" title=\"二、浮点数在内存中是如何存储的？\"></a>二、浮点数在内存中是如何存储的？</h2><p>我们知道，任何数据在计算机内存中都是用‘0\\1’来存储的，浮点数亦是如此。因此十进制浮点数在存储时必定会转换为二进制的浮点数。</p>\n<p>在内存中使用二进制的科学计数法来存储，因此分为阶码（即指数）和底数，由于也有正负之分，所以还有一位符号位。<br>以float为例，float在内存中的存储为：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0yMjUzMDkxZDZhOTQ4ZDdmLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>float 符号位(1bit) 指数(8 bit) 尾数(23 bit)</p>\n<p>double 符号位(1bit) 指数(11 bit) 尾数(52 bit)</p>\n<p>float在内存中占8位，由于阶码实际存储的是指数的移码，假设指数的真值是e,阶码为E，则有E=e+(2^n-1 -1)。其中 2^n-1 -1是IEEE754标准规定的指数偏移量，根据这个公式我们可以得到 2^8 -1=127。于是，float的指数范围为-128 +127，而double的指数范围为-1024 +1023。其中负指数决定了浮点数所能表达的绝对值最小的非零数；而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。</p>\n<p>float的范围为-2^128 ~ +2^127，也即-3.40E+38 ~ +3.40E+38；</p>\n<p>double的范围为-2^1024 ~ +2^1023，也即-1.79E+308 ~ +1.79E+308</p>\n<p>这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)</p>\n<p>移位存储本质上是为了保证+0和-0的一致性。</p>\n<p>以float指数部分的这8位来分析，</p>\n<p>那么这8位组成的新的字节，我们来用下面的一串数字表示：0000 0000</p>\n<p>首先，我们假设不使用移位存储技术，而是单单看看这个 8位组成的新字节，到底能表示多少个数： 0000 0000 -1111 1111 即0-255，一共256个数。</p>\n<p>但是我们知道这8位数既要表示正数也要表示负数。</p>\n<p>所以将左边第一位拿出来表示正负的符号：</p>\n<p>第一个区间：</p>\n<blockquote>\n<p>0 000 0000  -  0 111 1111<br>即+0 到127</p>\n</blockquote>\n<p>第二个区间：</p>\n<blockquote>\n<p>1 000 0000  -  1 111 1111<br>即 -0到-127</p>\n</blockquote>\n<p>这就是问题的所在:怎么会有两个0，一个正零，一个负零。</p>\n<p>这时候使用移位存储：float使用127(0111 1111)</p>\n<blockquote>\n<p>表示0：0+127=127 即 0000 0000 +0111 1111=0111 1111<br>表示1：1+127=128 即 0000 0001 +0111 1111=1000 0000<br>表示128：128+127=255 即 1000 0000+0111 1111=1111 1111</p>\n</blockquote>\n<p>最大的正数，再大就要溢出了。</p>\n<blockquote>\n<p>表示-1： -1+127=126=127-1 即 0111 1111-0000 0001=0111 1110<br>表示-1： -2+127=125=127-2 即 0111 1111-0000 0010=0111 1101<br>表示-127： -127+127=0 即0111 1111-0111 1111=0000 0000</p>\n</blockquote>\n<p>最小的负数，在校就溢出了。</p>\n<h2 id=\"三、浮点数的进制转换\"><a href=\"#三、浮点数的进制转换\" class=\"headerlink\" title=\"三、浮点数的进制转换\"></a>三、浮点数的进制转换</h2><h3 id=\"1、十进制转二进制\"><a href=\"#1、十进制转二进制\" class=\"headerlink\" title=\"1、十进制转二进制\"></a>1、十进制转二进制</h3><p>主要看看十进制转二进制，整数部分和小数部分分开处理</p>\n<ul>\n<li><p>整数部分：整数除以2，得到一个商和余数，得到的商继续除以2并得到一个商和一个余数，继续除以2操作直至商为0，上述操作得到一系列余数，从最后一个余数开始直至第一个余数，这一系列0\\1即为转换后的二进制数。</p>\n</li>\n<li><p>小数部分：乘以2，然后取出整数部分，将剩下的小数部分继续乘以2，然后再取整数部分，一直取到小数部分为零为止。如果永远不为零，则按要求保留足够位数的小数，最后一位做0舍1入。将取出的整数顺序排列。</p>\n</li>\n</ul>\n<p>从以上转换过程可以看出，并不是任何一个十进制小数都可以用二进制精确表示出来。一个在0到1之间的小数P可用如下形式表示：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZjBlYTI1NWM2NDBjNDY3LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>从这个式子中我们也可看出二进制表示出的小数是分段的，这也是为什么在Java中浮点数很多时候并不是十分精确的表示十进制小数的根本原因。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    float f1&#x3D;20f;</span><br><span class=\"line\">    float f2&#x3D;20.3f;</span><br><span class=\"line\">    float f3&#x3D;20.5f;</span><br><span class=\"line\"></span><br><span class=\"line\">    double d1&#x3D;20;</span><br><span class=\"line\">    double d2&#x3D;20.3;</span><br><span class=\"line\">    double d3&#x3D;20.5;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(f1&#x3D;&#x3D;d1);</span><br><span class=\"line\">    System.out.println(f2&#x3D;&#x3D;d2);</span><br><span class=\"line\">    System.out.println(f3&#x3D;&#x3D;d3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>true<br>false<br>true</p>\n</blockquote>\n<p>以20.3举例：<br>20转换后变为 10100<br>0.3 要转换二进制，需要乘2, 乘完之后 取整数部分，然后用乘的结果减去整数部分， 然后 接着乘2, 直至最后没有小数或者小数出现循环, 即乘完.</p>\n<blockquote>\n<p>0.3 * 2 = 0.6 (0)<br>  0.6 * 2 = 1.2 (1)<br>  0.2 * 2 = 0.4 (0)<br>  0.4 * 2 = 0.8 (0)<br>  0.8 * 2 = 1.6 (1)</p>\n</blockquote>\n<p>计算到这里， 将再出现0.6,进入循环了，所以，结果<br>0.3 = 0.010011001…1001<br>所以20.3 = 10100.010011001…1001 (二进制).</p>\n<h3 id=\"2、二进制的科学记数法表示\"><a href=\"#2、二进制的科学记数法表示\" class=\"headerlink\" title=\"2、二进制的科学记数法表示\"></a>2、二进制的科学记数法表示</h3><p>20.3 = 10100.010011001…1001 (二进制)=1.01000100110011E10…..（十进制科学计数）=1.01000100110011E100…..(二进制科学计数)</p>\n<p>这里使用移位存储，对于float来说，指数位加上127，double位加上1023(这里指的是存储，在比较的时候要分别减去127和1023)</p>\n<p>同时要注意一点，以float为例，最高位表示的是整个数的符号位，指数位一共8位，最高位表示的是指数位的正负，因为有可能是E-100这样的情况，所以虽然有8位，最高位只是符号位，剩下7位才是表示真正的数值，这也是使用移位存储的原因。</p>\n<p>对于一个数字，只要不超过和float的范围，同时小数部分不是无限小数，就可以和对应的double类型相等。</p>\n<h3 id=\"3、浮点数舍入规则\"><a href=\"#3、浮点数舍入规则\" class=\"headerlink\" title=\"3、浮点数舍入规则\"></a>3、浮点数舍入规则</h3><p>以52位尾数的双精度浮点数为例，舍入时需要重点参考第53位。</p>\n<p>若第53位为1，而其后的位数都是0，此时就要使第52位为0；若第52位为0则不用再进行其他操作，若第52位为1，则第53位就要向52位进一位。</p>\n<p>若第53位为1，但其后的位数不全为0，则第53为就要向第52位进一位。</p>\n<p>若不是以上两种情况，也即53位为0，那么就直接舍弃不进位，称为下舍入。</p>\n<p>浮点数舍入规则也就证明了为何在上文中提到的浮点数舍入中，相对舍入误差不能大于机器ε的一半。</p>\n<p>对于java来说，一般float类型小数点后保留7位，而double类型小数点后保留15位。</p>\n<p>这个原因也是因为尾数的数据宽度限制</p>\n<p>对于float型来说，因为2^23 = 8388608</p>\n<p>同时最左一位默认省略了，故实际能表示2^24 = 16777216个数，最多能表示8位，但绝对精确的只能表示7位。</p>\n<p>而对于double型来说，2^52 = 4503599627370496，共16位。加上省略的一位，能表示2^53 = 9007199254740992。故double型最多能表示16位，而绝对精确的只能表示15位。</p>\n<h3 id=\"4、机器ε\"><a href=\"#4、机器ε\" class=\"headerlink\" title=\"4、机器ε\"></a>4、机器ε</h3><p>机器ε表示1与大于1的最小浮点数之差。不同精度定义的机器ε不同。以双精度为例，</p>\n<p>双精度表示1是</p>\n<p>1.000……0000（52个0） × 2^0</p>\n<p>而比1大的最小的双精度是（其实还能表示更小的范围，后文中会提到，但并不影响这里的机器ε）</p>\n<p>1.000……0001 × 2^0</p>\n<p>也即</p>\n<p>2^-52 ≈ 2.220446049250313e-16。所以它就是双精度浮点数的机器ε。</p>\n<p>在舍入中，相对舍入误差不能大于机器ε的一半。</p>\n<p>对于双精度浮点数来说，这个值为0.00000005960464477539。</p>\n<p>所以在Java中double类型中连续8个0.1相乘，就会出现表示不精确的情况。</p>\n<p>参考：<br><a href=\"https://baijiahao.baidu.com/s?id=1618173300159774003&amp;wfr=spider&amp;for=pc\" target=\"_blank\" rel=\"noopener\">https://baijiahao.baidu.com/s?id=1618173300159774003&amp;wfr=spider&amp;for=pc</a><br><a href=\"https://www.cnblogs.com/Vicebery/p/9997636.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Vicebery/p/9997636.html</a><br><a href=\"https://blog.csdn.net/Return_head/article/details/88623060\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Return_head/article/details/88623060</a><br><a href=\"https://blog.csdn.net/u011277123/article/details/95774544\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u011277123/article/details/95774544</a><br><a href=\"https://blog.csdn.net/endlessseaofcrow/article/details/81269079\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/endlessseaofcrow/article/details/81269079</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02OWU4ZGI5MWZlM2E4N2NiLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Tue Jan 07 2020 14:06:36 GMT+0800 (GMT+08:00)","title":"Double为什么会失真？","path":"2020/01/07/Double为什么会失真？/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02OWU4ZGI5MWZlM2E4N2NiLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02OWU4ZGI5MWZlM2E4N2NiLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2020-01-07T05:43:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["数据类型"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Consul学习","date":"2019-11-19T00:43:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03MmE5ZmNhMWQ4NDQxMzkyLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n服务注册与服务发现是在分布式服务架构中常常会涉及到的东西，业界常用的服务注册与服务发现工具有 [ZooKeeper](https://zookeeper.apache.org/)、[etcd](https://coreos.com/etcd/)、[Consul](https://www.consul.io/) 和 [Eureka](https://github.com/Netflix/eureka)。Consul 的主要功能有服务发现、健康检查、KV存储、安全服务沟通和多数据中心。Consul 与其他几个工具的区别可以在这里查看 [Consul vs. Other Software](https://www.consul.io/intro/vs/index.html)。\n##为什么需要有服务注册与服务发现？\n假设在分布式系统中有两个服务 Service-A （下文以“S-A”代称）和 Service-B（下文以“S-B”代称），当 S-A 想调用 S-B 时，我们首先想到的时直接在 S-A 中请求 S-B 所在服务器的 IP 地址和监听的端口，这在服务规模很小的情况下是没有任何问题的，但是在服务规模很大每个服务不止部署一个实例的情况下是存在一些问题的，比如 S-B 部署了三个实例 S-B-1、S-B-2 和 S-B-3，这时候 S-A 想调用 S-B 该请求哪一个服务实例的 IP 呢？还是将3个服务实例的 IP 都写在 S-A 的代码里，每次调用 S-B 时选择其中一个 IP？这样做显得很不灵活，这时我们想到了 Nginx 刚好就能很好的解决这个问题，引入 Nginx 后现在的架构变成了如下图这样：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYjBhZjFhOTgyNGIyMGRjLnBuZw?x-oss-process=image/format,png )\n\n引入 Nginx 后就解决了 S-B 部署多个实例的问题，还做了 S-B 实例间的负载均衡。但现在的架构又面临了新的问题，分布式系统往往要保证高可用以及能做到动态伸缩，在引入 Nginx 的架构中，假如当 S-B-1 服务实例不可用时，Nginx 仍然会向 S-B-1 分配请求，这样服务就不可用，我们想要的是 S-B-1 挂掉后 Nginx 就不再向其分配请求，以及当我们新部署了 S-B-4 和 S-B-5 后，Nginx 也能将请求分配到 S-B-4 和 S-B-5，Nginx 要做到这样就要在每次有服务实例变动时去更新配置文件再重启 Nginx。这样看似乎用了 Nginx 也很不舒服以及还需要人工去观察哪些服务有没有挂掉，Nginx 要是有对服务的健康检查以及能够动态变更服务配置就是我们想要的工具，这就是服务注册与服务发现工具的用处。下面是引入服务注册与服务发现工具后的架构图：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03ZTQxZmM4ZGQ5YTc0NmIxLnBuZw?x-oss-process=image/format,png)\n\n在这个架构中：\n\n* 首先 S-B 的实例启动后将自身的服务信息（主要是服务所在的 IP 地址和端口号）注册到注册工具中。不同注册工具服务的注册方式各不相同，后文会讲 Consul 的具体注册方式。\n*  服务将服务信息注册到注册工具后，注册工具就可以对服务做健康检查，以此来确定哪些服务实例可用哪些不可用。\n* S-A 启动后就可以通过服务注册和服务发现工具获取到所有健康的 S-B 实例的 IP 和端口，并将这些信息放入自己的内存中，S-A 就可用通过这些信息来调用 S-B。\n* S-A 可以通过监听（Watch）注册工具来更新存入内存中的 S-B 的服务信息。比如 S-B-1 挂了，健康检查机制就会将其标为不可用，这样的信息变动就被 S-A 监听到了，S-A 就更新自己内存中 S-B-1 的服务信息。\n\n所以务注册与服务发现工具除了服务本身的服务注册和发现功能外至少还需要有健康检查和状态变更通知的功能。\n\n## Consul内部原理\n\nConsul 作为一种分布式服务工具，为了避免单点故障常常以集群的方式进行部署，在 Consul 集群的节点中分为 Server 和 Client 两种节点（所有的节点也被称为Agent），Server 节点保存数据，Client 节点负责健康检查及转发数据请求到 Server；Server 节点有一个 Leader 节点和多个 Follower 节点，Leader 节点会将数据同步到 Follower 节点，在 Leader 节点挂掉的时候会启动选举机制产生一个新的 Leader。\n\nClient 节点很轻量且无状态，它以 RPC 的方式向 Server 节点做读写请求的转发，此外也可以直接向 Server 节点发送读写请求。下面是 Consul 的架构图：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWJlYzdiYmFlYWVhZDY3LnBuZw?x-oss-process=image/format,png)\n\n首先Consul支持多数据中心，在上图中有两个DataCenter，他们通过Internet互联，同时请注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。\n\n在单个数据中心中，Consul分为Client和Server两种节点（所有的节点也被称为Agent），Server节点保存数据，Client负责健康检查及转发数据请求到Server；Server节点有一个Leader和多个Follower，Leader节点会将数据同步到Follower，Server的数量推荐是3个或者5个，在Leader挂掉的时候会启动选举机制产生一个新的Leader。\n\n集群内的Consul节点通过gossip协议（流言协议）维护成员关系，也就是说某个节点了解集群内现在还有哪些节点，这些节点是Client还是Server。单个数据中心的流言协议同时使用TCP和UDP通信，并且都使用8301端口。跨数据中心的流言协议也同时使用TCP和UDP通信，端口使用8302。\n\n集群内数据的读写请求既可以直接发到Server，也可以通过Client使用RPC转发到Server，请求最终会到达Leader节点，在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过TCP的8300端口完成。\n\n## Consul 的主要特点\n\n`Service Discovery` : 服务注册与发现，Consul 的客户端可以做为一个服务注册到 Consul，也可以通过 Consul 来查找特定的服务提供者，并且根据提供的信息进行调用。\n\n`Health Checking`: Consul 客户端会定期发送一些健康检查数据和服务端进行通讯，判断客户端的状态、内存使用情况是否正常，用来监控整个集群的状态，防止服务转发到故障的服务上面。\n\n`KV Store`: Consul 还提供了一个容易使用的键值存储。这可以用来保持动态配置，协助服务协调、建立 Leader 选举，以及开发者想构造的其它一些事务。\n\n`Secure Service Communication`: Consul 可以为服务生成分布式的 TLS 证书，以建立相互的 TLS 连接。 可以使用 intentions 定义允许哪些服务进行通信。 可以使用 intentions 轻松管理服务隔离，而不是使用复杂的网络拓扑和静态防火墙规则。\n\n`Multi Datacenter`: Consul 支持开箱即用的多数据中心，这意味着用户不需要担心需要建立额外的抽象层让业务扩展到多个区域。\n\n`Consul 角色`\n* Server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其它数据中心通讯。 每个数据中心的 Server 数量推荐为 3 个或是 5 个。\n* Client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。\n\nConsul 旨在对 DevOps 社区和应用程序开发人员友好，使其成为现代、弹性基础架构的理想选择。\n\n## Consul 的调用过程\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZGFmM2VjOThjMTk5ZWQwLnBuZw?x-oss-process=image/format,png )\n\n1、当 Producer 启动的时候，会向 Consul 发送一个 post 请求，告诉 Consul 自己的 IP 和 Port；\n\n2、Consul 接收到 Producer 的注册后，每隔 10s（默认）会向 Producer 发送一个健康检查的请求，检验 Producer 是否健康；\n\n3、当 Consumer 发送 GET 方式请求 /api/address 到 Producer 时，会先从 Consul 中拿到一个存储服务 IP 和 Port 的临时表，从表中拿到 Producer 的 IP 和 Port 后再发送 GET 方式请求 /api/address；\n\n4、该临时表每隔 10s 会更新，只包含有通过了健康检查的 Producer。\n\n## Consul 和 eureka的对比\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZTEyNjI5Mzk4OTgxMmQxLnBuZw?x-oss-process=image/format,png )\n\n## Consul服务发现原理\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00MWJhNTZkMWU1NGQ3YzA4LmpwZw?x-oss-process=image/format,png)\n\n首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server，假设他们选举了Server2上的Consul Server节点为Leader。这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定。\n\n然后在服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。服务注册到Consul可以通过HTTP API（8500端口）的方式，也可以通过Consul配置文件的方式。Consul Client可以认为是无状态的，它将注册信息通过RPC转发到Consul Server，服务信息保存在Server的各个节点中，并且通过Raft实现了强一致性。\n\n最后在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的所有部署的IP和端口，然后就可以选择Service B的其中一个部署并向其发起请求了。如果服务发现采用的是DNS方式，则Program D中直接使用Service B的服务发现域名，域名解析请求首先到达本机DNS代理，然后转发到本机Consul Client，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的某个部署的IP和端口。","source":"_posts/Consul学习.md","raw":"---\ntitle: Consul学习\ntags:\n  - Consul\ncategories:\n  - 微服务\ndate: 2019-11-19 08:43:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03MmE5ZmNhMWQ4NDQxMzkyLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n服务注册与服务发现是在分布式服务架构中常常会涉及到的东西，业界常用的服务注册与服务发现工具有 [ZooKeeper](https://zookeeper.apache.org/)、[etcd](https://coreos.com/etcd/)、[Consul](https://www.consul.io/) 和 [Eureka](https://github.com/Netflix/eureka)。Consul 的主要功能有服务发现、健康检查、KV存储、安全服务沟通和多数据中心。Consul 与其他几个工具的区别可以在这里查看 [Consul vs. Other Software](https://www.consul.io/intro/vs/index.html)。\n##为什么需要有服务注册与服务发现？\n假设在分布式系统中有两个服务 Service-A （下文以“S-A”代称）和 Service-B（下文以“S-B”代称），当 S-A 想调用 S-B 时，我们首先想到的时直接在 S-A 中请求 S-B 所在服务器的 IP 地址和监听的端口，这在服务规模很小的情况下是没有任何问题的，但是在服务规模很大每个服务不止部署一个实例的情况下是存在一些问题的，比如 S-B 部署了三个实例 S-B-1、S-B-2 和 S-B-3，这时候 S-A 想调用 S-B 该请求哪一个服务实例的 IP 呢？还是将3个服务实例的 IP 都写在 S-A 的代码里，每次调用 S-B 时选择其中一个 IP？这样做显得很不灵活，这时我们想到了 Nginx 刚好就能很好的解决这个问题，引入 Nginx 后现在的架构变成了如下图这样：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYjBhZjFhOTgyNGIyMGRjLnBuZw?x-oss-process=image/format,png )\n\n引入 Nginx 后就解决了 S-B 部署多个实例的问题，还做了 S-B 实例间的负载均衡。但现在的架构又面临了新的问题，分布式系统往往要保证高可用以及能做到动态伸缩，在引入 Nginx 的架构中，假如当 S-B-1 服务实例不可用时，Nginx 仍然会向 S-B-1 分配请求，这样服务就不可用，我们想要的是 S-B-1 挂掉后 Nginx 就不再向其分配请求，以及当我们新部署了 S-B-4 和 S-B-5 后，Nginx 也能将请求分配到 S-B-4 和 S-B-5，Nginx 要做到这样就要在每次有服务实例变动时去更新配置文件再重启 Nginx。这样看似乎用了 Nginx 也很不舒服以及还需要人工去观察哪些服务有没有挂掉，Nginx 要是有对服务的健康检查以及能够动态变更服务配置就是我们想要的工具，这就是服务注册与服务发现工具的用处。下面是引入服务注册与服务发现工具后的架构图：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03ZTQxZmM4ZGQ5YTc0NmIxLnBuZw?x-oss-process=image/format,png)\n\n在这个架构中：\n\n* 首先 S-B 的实例启动后将自身的服务信息（主要是服务所在的 IP 地址和端口号）注册到注册工具中。不同注册工具服务的注册方式各不相同，后文会讲 Consul 的具体注册方式。\n*  服务将服务信息注册到注册工具后，注册工具就可以对服务做健康检查，以此来确定哪些服务实例可用哪些不可用。\n* S-A 启动后就可以通过服务注册和服务发现工具获取到所有健康的 S-B 实例的 IP 和端口，并将这些信息放入自己的内存中，S-A 就可用通过这些信息来调用 S-B。\n* S-A 可以通过监听（Watch）注册工具来更新存入内存中的 S-B 的服务信息。比如 S-B-1 挂了，健康检查机制就会将其标为不可用，这样的信息变动就被 S-A 监听到了，S-A 就更新自己内存中 S-B-1 的服务信息。\n\n所以务注册与服务发现工具除了服务本身的服务注册和发现功能外至少还需要有健康检查和状态变更通知的功能。\n\n## Consul内部原理\n\nConsul 作为一种分布式服务工具，为了避免单点故障常常以集群的方式进行部署，在 Consul 集群的节点中分为 Server 和 Client 两种节点（所有的节点也被称为Agent），Server 节点保存数据，Client 节点负责健康检查及转发数据请求到 Server；Server 节点有一个 Leader 节点和多个 Follower 节点，Leader 节点会将数据同步到 Follower 节点，在 Leader 节点挂掉的时候会启动选举机制产生一个新的 Leader。\n\nClient 节点很轻量且无状态，它以 RPC 的方式向 Server 节点做读写请求的转发，此外也可以直接向 Server 节点发送读写请求。下面是 Consul 的架构图：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWJlYzdiYmFlYWVhZDY3LnBuZw?x-oss-process=image/format,png)\n\n首先Consul支持多数据中心，在上图中有两个DataCenter，他们通过Internet互联，同时请注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。\n\n在单个数据中心中，Consul分为Client和Server两种节点（所有的节点也被称为Agent），Server节点保存数据，Client负责健康检查及转发数据请求到Server；Server节点有一个Leader和多个Follower，Leader节点会将数据同步到Follower，Server的数量推荐是3个或者5个，在Leader挂掉的时候会启动选举机制产生一个新的Leader。\n\n集群内的Consul节点通过gossip协议（流言协议）维护成员关系，也就是说某个节点了解集群内现在还有哪些节点，这些节点是Client还是Server。单个数据中心的流言协议同时使用TCP和UDP通信，并且都使用8301端口。跨数据中心的流言协议也同时使用TCP和UDP通信，端口使用8302。\n\n集群内数据的读写请求既可以直接发到Server，也可以通过Client使用RPC转发到Server，请求最终会到达Leader节点，在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过TCP的8300端口完成。\n\n## Consul 的主要特点\n\n`Service Discovery` : 服务注册与发现，Consul 的客户端可以做为一个服务注册到 Consul，也可以通过 Consul 来查找特定的服务提供者，并且根据提供的信息进行调用。\n\n`Health Checking`: Consul 客户端会定期发送一些健康检查数据和服务端进行通讯，判断客户端的状态、内存使用情况是否正常，用来监控整个集群的状态，防止服务转发到故障的服务上面。\n\n`KV Store`: Consul 还提供了一个容易使用的键值存储。这可以用来保持动态配置，协助服务协调、建立 Leader 选举，以及开发者想构造的其它一些事务。\n\n`Secure Service Communication`: Consul 可以为服务生成分布式的 TLS 证书，以建立相互的 TLS 连接。 可以使用 intentions 定义允许哪些服务进行通信。 可以使用 intentions 轻松管理服务隔离，而不是使用复杂的网络拓扑和静态防火墙规则。\n\n`Multi Datacenter`: Consul 支持开箱即用的多数据中心，这意味着用户不需要担心需要建立额外的抽象层让业务扩展到多个区域。\n\n`Consul 角色`\n* Server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其它数据中心通讯。 每个数据中心的 Server 数量推荐为 3 个或是 5 个。\n* Client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。\n\nConsul 旨在对 DevOps 社区和应用程序开发人员友好，使其成为现代、弹性基础架构的理想选择。\n\n## Consul 的调用过程\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZGFmM2VjOThjMTk5ZWQwLnBuZw?x-oss-process=image/format,png )\n\n1、当 Producer 启动的时候，会向 Consul 发送一个 post 请求，告诉 Consul 自己的 IP 和 Port；\n\n2、Consul 接收到 Producer 的注册后，每隔 10s（默认）会向 Producer 发送一个健康检查的请求，检验 Producer 是否健康；\n\n3、当 Consumer 发送 GET 方式请求 /api/address 到 Producer 时，会先从 Consul 中拿到一个存储服务 IP 和 Port 的临时表，从表中拿到 Producer 的 IP 和 Port 后再发送 GET 方式请求 /api/address；\n\n4、该临时表每隔 10s 会更新，只包含有通过了健康检查的 Producer。\n\n## Consul 和 eureka的对比\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZTEyNjI5Mzk4OTgxMmQxLnBuZw?x-oss-process=image/format,png )\n\n## Consul服务发现原理\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00MWJhNTZkMWU1NGQ3YzA4LmpwZw?x-oss-process=image/format,png)\n\n首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server，假设他们选举了Server2上的Consul Server节点为Leader。这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定。\n\n然后在服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。服务注册到Consul可以通过HTTP API（8500端口）的方式，也可以通过Consul配置文件的方式。Consul Client可以认为是无状态的，它将注册信息通过RPC转发到Consul Server，服务信息保存在Server的各个节点中，并且通过Raft实现了强一致性。\n\n最后在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的所有部署的IP和端口，然后就可以选择Service B的其中一个部署并向其发起请求了。如果服务发现采用的是DNS方式，则Program D中直接使用Service B的服务发现域名，域名解析请求首先到达本机DNS代理，然后转发到本机Consul Client，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的某个部署的IP和端口。","slug":"Consul学习","published":1,"updated":"2019-12-21T07:09:44.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwl9002bsops8r1a67xf","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03MmE5ZmNhMWQ4NDQxMzkyLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<p>服务注册与服务发现是在分布式服务架构中常常会涉及到的东西，业界常用的服务注册与服务发现工具有 <a href=\"https://zookeeper.apache.org/\" target=\"_blank\" rel=\"noopener\">ZooKeeper</a>、<a href=\"https://coreos.com/etcd/\" target=\"_blank\" rel=\"noopener\">etcd</a>、<a href=\"https://www.consul.io/\" target=\"_blank\" rel=\"noopener\">Consul</a> 和 <a href=\"https://github.com/Netflix/eureka\" target=\"_blank\" rel=\"noopener\">Eureka</a>。Consul 的主要功能有服务发现、健康检查、KV存储、安全服务沟通和多数据中心。Consul 与其他几个工具的区别可以在这里查看 <a href=\"https://www.consul.io/intro/vs/index.html\" target=\"_blank\" rel=\"noopener\">Consul vs. Other Software</a>。<br>##为什么需要有服务注册与服务发现？<br>假设在分布式系统中有两个服务 Service-A （下文以“S-A”代称）和 Service-B（下文以“S-B”代称），当 S-A 想调用 S-B 时，我们首先想到的时直接在 S-A 中请求 S-B 所在服务器的 IP 地址和监听的端口，这在服务规模很小的情况下是没有任何问题的，但是在服务规模很大每个服务不止部署一个实例的情况下是存在一些问题的，比如 S-B 部署了三个实例 S-B-1、S-B-2 和 S-B-3，这时候 S-A 想调用 S-B 该请求哪一个服务实例的 IP 呢？还是将3个服务实例的 IP 都写在 S-A 的代码里，每次调用 S-B 时选择其中一个 IP？这样做显得很不灵活，这时我们想到了 Nginx 刚好就能很好的解决这个问题，引入 Nginx 后现在的架构变成了如下图这样：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYjBhZjFhOTgyNGIyMGRjLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>引入 Nginx 后就解决了 S-B 部署多个实例的问题，还做了 S-B 实例间的负载均衡。但现在的架构又面临了新的问题，分布式系统往往要保证高可用以及能做到动态伸缩，在引入 Nginx 的架构中，假如当 S-B-1 服务实例不可用时，Nginx 仍然会向 S-B-1 分配请求，这样服务就不可用，我们想要的是 S-B-1 挂掉后 Nginx 就不再向其分配请求，以及当我们新部署了 S-B-4 和 S-B-5 后，Nginx 也能将请求分配到 S-B-4 和 S-B-5，Nginx 要做到这样就要在每次有服务实例变动时去更新配置文件再重启 Nginx。这样看似乎用了 Nginx 也很不舒服以及还需要人工去观察哪些服务有没有挂掉，Nginx 要是有对服务的健康检查以及能够动态变更服务配置就是我们想要的工具，这就是服务注册与服务发现工具的用处。下面是引入服务注册与服务发现工具后的架构图：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03ZTQxZmM4ZGQ5YTc0NmIxLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>在这个架构中：</p>\n<ul>\n<li>首先 S-B 的实例启动后将自身的服务信息（主要是服务所在的 IP 地址和端口号）注册到注册工具中。不同注册工具服务的注册方式各不相同，后文会讲 Consul 的具体注册方式。</li>\n<li>服务将服务信息注册到注册工具后，注册工具就可以对服务做健康检查，以此来确定哪些服务实例可用哪些不可用。</li>\n<li>S-A 启动后就可以通过服务注册和服务发现工具获取到所有健康的 S-B 实例的 IP 和端口，并将这些信息放入自己的内存中，S-A 就可用通过这些信息来调用 S-B。</li>\n<li>S-A 可以通过监听（Watch）注册工具来更新存入内存中的 S-B 的服务信息。比如 S-B-1 挂了，健康检查机制就会将其标为不可用，这样的信息变动就被 S-A 监听到了，S-A 就更新自己内存中 S-B-1 的服务信息。</li>\n</ul>\n<p>所以务注册与服务发现工具除了服务本身的服务注册和发现功能外至少还需要有健康检查和状态变更通知的功能。</p>\n<h2 id=\"Consul内部原理\"><a href=\"#Consul内部原理\" class=\"headerlink\" title=\"Consul内部原理\"></a>Consul内部原理</h2><p>Consul 作为一种分布式服务工具，为了避免单点故障常常以集群的方式进行部署，在 Consul 集群的节点中分为 Server 和 Client 两种节点（所有的节点也被称为Agent），Server 节点保存数据，Client 节点负责健康检查及转发数据请求到 Server；Server 节点有一个 Leader 节点和多个 Follower 节点，Leader 节点会将数据同步到 Follower 节点，在 Leader 节点挂掉的时候会启动选举机制产生一个新的 Leader。</p>\n<p>Client 节点很轻量且无状态，它以 RPC 的方式向 Server 节点做读写请求的转发，此外也可以直接向 Server 节点发送读写请求。下面是 Consul 的架构图：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWJlYzdiYmFlYWVhZDY3LnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>首先Consul支持多数据中心，在上图中有两个DataCenter，他们通过Internet互联，同时请注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。</p>\n<p>在单个数据中心中，Consul分为Client和Server两种节点（所有的节点也被称为Agent），Server节点保存数据，Client负责健康检查及转发数据请求到Server；Server节点有一个Leader和多个Follower，Leader节点会将数据同步到Follower，Server的数量推荐是3个或者5个，在Leader挂掉的时候会启动选举机制产生一个新的Leader。</p>\n<p>集群内的Consul节点通过gossip协议（流言协议）维护成员关系，也就是说某个节点了解集群内现在还有哪些节点，这些节点是Client还是Server。单个数据中心的流言协议同时使用TCP和UDP通信，并且都使用8301端口。跨数据中心的流言协议也同时使用TCP和UDP通信，端口使用8302。</p>\n<p>集群内数据的读写请求既可以直接发到Server，也可以通过Client使用RPC转发到Server，请求最终会到达Leader节点，在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过TCP的8300端口完成。</p>\n<h2 id=\"Consul-的主要特点\"><a href=\"#Consul-的主要特点\" class=\"headerlink\" title=\"Consul 的主要特点\"></a>Consul 的主要特点</h2><p><code>Service Discovery</code> : 服务注册与发现，Consul 的客户端可以做为一个服务注册到 Consul，也可以通过 Consul 来查找特定的服务提供者，并且根据提供的信息进行调用。</p>\n<p><code>Health Checking</code>: Consul 客户端会定期发送一些健康检查数据和服务端进行通讯，判断客户端的状态、内存使用情况是否正常，用来监控整个集群的状态，防止服务转发到故障的服务上面。</p>\n<p><code>KV Store</code>: Consul 还提供了一个容易使用的键值存储。这可以用来保持动态配置，协助服务协调、建立 Leader 选举，以及开发者想构造的其它一些事务。</p>\n<p><code>Secure Service Communication</code>: Consul 可以为服务生成分布式的 TLS 证书，以建立相互的 TLS 连接。 可以使用 intentions 定义允许哪些服务进行通信。 可以使用 intentions 轻松管理服务隔离，而不是使用复杂的网络拓扑和静态防火墙规则。</p>\n<p><code>Multi Datacenter</code>: Consul 支持开箱即用的多数据中心，这意味着用户不需要担心需要建立额外的抽象层让业务扩展到多个区域。</p>\n<p><code>Consul 角色</code></p>\n<ul>\n<li>Server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其它数据中心通讯。 每个数据中心的 Server 数量推荐为 3 个或是 5 个。</li>\n<li>Client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。</li>\n</ul>\n<p>Consul 旨在对 DevOps 社区和应用程序开发人员友好，使其成为现代、弹性基础架构的理想选择。</p>\n<h2 id=\"Consul-的调用过程\"><a href=\"#Consul-的调用过程\" class=\"headerlink\" title=\"Consul 的调用过程\"></a>Consul 的调用过程</h2><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZGFmM2VjOThjMTk5ZWQwLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>1、当 Producer 启动的时候，会向 Consul 发送一个 post 请求，告诉 Consul 自己的 IP 和 Port；</p>\n<p>2、Consul 接收到 Producer 的注册后，每隔 10s（默认）会向 Producer 发送一个健康检查的请求，检验 Producer 是否健康；</p>\n<p>3、当 Consumer 发送 GET 方式请求 /api/address 到 Producer 时，会先从 Consul 中拿到一个存储服务 IP 和 Port 的临时表，从表中拿到 Producer 的 IP 和 Port 后再发送 GET 方式请求 /api/address；</p>\n<p>4、该临时表每隔 10s 会更新，只包含有通过了健康检查的 Producer。</p>\n<h2 id=\"Consul-和-eureka的对比\"><a href=\"#Consul-和-eureka的对比\" class=\"headerlink\" title=\"Consul 和 eureka的对比\"></a>Consul 和 eureka的对比</h2><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZTEyNjI5Mzk4OTgxMmQxLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<h2 id=\"Consul服务发现原理\"><a href=\"#Consul服务发现原理\" class=\"headerlink\" title=\"Consul服务发现原理\"></a>Consul服务发现原理</h2><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00MWJhNTZkMWU1NGQ3YzA4LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server，假设他们选举了Server2上的Consul Server节点为Leader。这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定。</p>\n<p>然后在服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。服务注册到Consul可以通过HTTP API（8500端口）的方式，也可以通过Consul配置文件的方式。Consul Client可以认为是无状态的，它将注册信息通过RPC转发到Consul Server，服务信息保存在Server的各个节点中，并且通过Raft实现了强一致性。</p>\n<p>最后在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的所有部署的IP和端口，然后就可以选择Service B的其中一个部署并向其发起请求了。如果服务发现采用的是DNS方式，则Program D中直接使用Service B的服务发现域名，域名解析请求首先到达本机DNS代理，然后转发到本机Consul Client，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的某个部署的IP和端口。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03MmE5ZmNhMWQ4NDQxMzkyLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<p>服务注册与服务发现是在分布式服务架构中常常会涉及到的东西，业界常用的服务注册与服务发现工具有 <a href=\"https://zookeeper.apache.org/\" target=\"_blank\" rel=\"noopener\">ZooKeeper</a>、<a href=\"https://coreos.com/etcd/\" target=\"_blank\" rel=\"noopener\">etcd</a>、<a href=\"https://www.consul.io/\" target=\"_blank\" rel=\"noopener\">Consul</a> 和 <a href=\"https://github.com/Netflix/eureka\" target=\"_blank\" rel=\"noopener\">Eureka</a>。Consul 的主要功能有服务发现、健康检查、KV存储、安全服务沟通和多数据中心。Consul 与其他几个工具的区别可以在这里查看 <a href=\"https://www.consul.io/intro/vs/index.html\" target=\"_blank\" rel=\"noopener\">Consul vs. Other Software</a>。<br>##为什么需要有服务注册与服务发现？<br>假设在分布式系统中有两个服务 Service-A （下文以“S-A”代称）和 Service-B（下文以“S-B”代称），当 S-A 想调用 S-B 时，我们首先想到的时直接在 S-A 中请求 S-B 所在服务器的 IP 地址和监听的端口，这在服务规模很小的情况下是没有任何问题的，但是在服务规模很大每个服务不止部署一个实例的情况下是存在一些问题的，比如 S-B 部署了三个实例 S-B-1、S-B-2 和 S-B-3，这时候 S-A 想调用 S-B 该请求哪一个服务实例的 IP 呢？还是将3个服务实例的 IP 都写在 S-A 的代码里，每次调用 S-B 时选择其中一个 IP？这样做显得很不灵活，这时我们想到了 Nginx 刚好就能很好的解决这个问题，引入 Nginx 后现在的架构变成了如下图这样：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xYjBhZjFhOTgyNGIyMGRjLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>引入 Nginx 后就解决了 S-B 部署多个实例的问题，还做了 S-B 实例间的负载均衡。但现在的架构又面临了新的问题，分布式系统往往要保证高可用以及能做到动态伸缩，在引入 Nginx 的架构中，假如当 S-B-1 服务实例不可用时，Nginx 仍然会向 S-B-1 分配请求，这样服务就不可用，我们想要的是 S-B-1 挂掉后 Nginx 就不再向其分配请求，以及当我们新部署了 S-B-4 和 S-B-5 后，Nginx 也能将请求分配到 S-B-4 和 S-B-5，Nginx 要做到这样就要在每次有服务实例变动时去更新配置文件再重启 Nginx。这样看似乎用了 Nginx 也很不舒服以及还需要人工去观察哪些服务有没有挂掉，Nginx 要是有对服务的健康检查以及能够动态变更服务配置就是我们想要的工具，这就是服务注册与服务发现工具的用处。下面是引入服务注册与服务发现工具后的架构图：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03ZTQxZmM4ZGQ5YTc0NmIxLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>在这个架构中：</p>\n<ul>\n<li>首先 S-B 的实例启动后将自身的服务信息（主要是服务所在的 IP 地址和端口号）注册到注册工具中。不同注册工具服务的注册方式各不相同，后文会讲 Consul 的具体注册方式。</li>\n<li>服务将服务信息注册到注册工具后，注册工具就可以对服务做健康检查，以此来确定哪些服务实例可用哪些不可用。</li>\n<li>S-A 启动后就可以通过服务注册和服务发现工具获取到所有健康的 S-B 实例的 IP 和端口，并将这些信息放入自己的内存中，S-A 就可用通过这些信息来调用 S-B。</li>\n<li>S-A 可以通过监听（Watch）注册工具来更新存入内存中的 S-B 的服务信息。比如 S-B-1 挂了，健康检查机制就会将其标为不可用，这样的信息变动就被 S-A 监听到了，S-A 就更新自己内存中 S-B-1 的服务信息。</li>\n</ul>\n<p>所以务注册与服务发现工具除了服务本身的服务注册和发现功能外至少还需要有健康检查和状态变更通知的功能。</p>\n<h2 id=\"Consul内部原理\"><a href=\"#Consul内部原理\" class=\"headerlink\" title=\"Consul内部原理\"></a>Consul内部原理</h2><p>Consul 作为一种分布式服务工具，为了避免单点故障常常以集群的方式进行部署，在 Consul 集群的节点中分为 Server 和 Client 两种节点（所有的节点也被称为Agent），Server 节点保存数据，Client 节点负责健康检查及转发数据请求到 Server；Server 节点有一个 Leader 节点和多个 Follower 节点，Leader 节点会将数据同步到 Follower 节点，在 Leader 节点挂掉的时候会启动选举机制产生一个新的 Leader。</p>\n<p>Client 节点很轻量且无状态，它以 RPC 的方式向 Server 节点做读写请求的转发，此外也可以直接向 Server 节点发送读写请求。下面是 Consul 的架构图：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNWJlYzdiYmFlYWVhZDY3LnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>首先Consul支持多数据中心，在上图中有两个DataCenter，他们通过Internet互联，同时请注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。</p>\n<p>在单个数据中心中，Consul分为Client和Server两种节点（所有的节点也被称为Agent），Server节点保存数据，Client负责健康检查及转发数据请求到Server；Server节点有一个Leader和多个Follower，Leader节点会将数据同步到Follower，Server的数量推荐是3个或者5个，在Leader挂掉的时候会启动选举机制产生一个新的Leader。</p>\n<p>集群内的Consul节点通过gossip协议（流言协议）维护成员关系，也就是说某个节点了解集群内现在还有哪些节点，这些节点是Client还是Server。单个数据中心的流言协议同时使用TCP和UDP通信，并且都使用8301端口。跨数据中心的流言协议也同时使用TCP和UDP通信，端口使用8302。</p>\n<p>集群内数据的读写请求既可以直接发到Server，也可以通过Client使用RPC转发到Server，请求最终会到达Leader节点，在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过TCP的8300端口完成。</p>\n<h2 id=\"Consul-的主要特点\"><a href=\"#Consul-的主要特点\" class=\"headerlink\" title=\"Consul 的主要特点\"></a>Consul 的主要特点</h2><p><code>Service Discovery</code> : 服务注册与发现，Consul 的客户端可以做为一个服务注册到 Consul，也可以通过 Consul 来查找特定的服务提供者，并且根据提供的信息进行调用。</p>\n<p><code>Health Checking</code>: Consul 客户端会定期发送一些健康检查数据和服务端进行通讯，判断客户端的状态、内存使用情况是否正常，用来监控整个集群的状态，防止服务转发到故障的服务上面。</p>\n<p><code>KV Store</code>: Consul 还提供了一个容易使用的键值存储。这可以用来保持动态配置，协助服务协调、建立 Leader 选举，以及开发者想构造的其它一些事务。</p>\n<p><code>Secure Service Communication</code>: Consul 可以为服务生成分布式的 TLS 证书，以建立相互的 TLS 连接。 可以使用 intentions 定义允许哪些服务进行通信。 可以使用 intentions 轻松管理服务隔离，而不是使用复杂的网络拓扑和静态防火墙规则。</p>\n<p><code>Multi Datacenter</code>: Consul 支持开箱即用的多数据中心，这意味着用户不需要担心需要建立额外的抽象层让业务扩展到多个区域。</p>\n<p><code>Consul 角色</code></p>\n<ul>\n<li>Server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其它数据中心通讯。 每个数据中心的 Server 数量推荐为 3 个或是 5 个。</li>\n<li>Client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。</li>\n</ul>\n<p>Consul 旨在对 DevOps 社区和应用程序开发人员友好，使其成为现代、弹性基础架构的理想选择。</p>\n<h2 id=\"Consul-的调用过程\"><a href=\"#Consul-的调用过程\" class=\"headerlink\" title=\"Consul 的调用过程\"></a>Consul 的调用过程</h2><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iZGFmM2VjOThjMTk5ZWQwLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>1、当 Producer 启动的时候，会向 Consul 发送一个 post 请求，告诉 Consul 自己的 IP 和 Port；</p>\n<p>2、Consul 接收到 Producer 的注册后，每隔 10s（默认）会向 Producer 发送一个健康检查的请求，检验 Producer 是否健康；</p>\n<p>3、当 Consumer 发送 GET 方式请求 /api/address 到 Producer 时，会先从 Consul 中拿到一个存储服务 IP 和 Port 的临时表，从表中拿到 Producer 的 IP 和 Port 后再发送 GET 方式请求 /api/address；</p>\n<p>4、该临时表每隔 10s 会更新，只包含有通过了健康检查的 Producer。</p>\n<h2 id=\"Consul-和-eureka的对比\"><a href=\"#Consul-和-eureka的对比\" class=\"headerlink\" title=\"Consul 和 eureka的对比\"></a>Consul 和 eureka的对比</h2><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hZTEyNjI5Mzk4OTgxMmQxLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<h2 id=\"Consul服务发现原理\"><a href=\"#Consul服务发现原理\" class=\"headerlink\" title=\"Consul服务发现原理\"></a>Consul服务发现原理</h2><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00MWJhNTZkMWU1NGQ3YzA4LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server，假设他们选举了Server2上的Consul Server节点为Leader。这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定。</p>\n<p>然后在服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。服务注册到Consul可以通过HTTP API（8500端口）的方式，也可以通过Consul配置文件的方式。Consul Client可以认为是无状态的，它将注册信息通过RPC转发到Consul Server，服务信息保存在Server的各个节点中，并且通过Raft实现了强一致性。</p>\n<p>最后在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的所有部署的IP和端口，然后就可以选择Service B的其中一个部署并向其发起请求了。如果服务发现采用的是DNS方式，则Program D中直接使用Service B的服务发现域名，域名解析请求首先到达本机DNS代理，然后转发到本机Consul Client，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的某个部署的IP和端口。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03MmE5ZmNhMWQ4NDQxMzkyLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Sat Dec 21 2019 15:09:44 GMT+0800 (GMT+08:00)","title":"Consul学习","path":"2019/11/19/Consul学习/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03MmE5ZmNhMWQ4NDQxMzkyLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03MmE5ZmNhMWQ4NDQxMzkyLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-11-19T00:43:00.000Z","pv":0,"totalPV":0,"categories":"微服务","tags":["Consul"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JWT简介","date":"2019-12-21T00:43:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n\n## 前言\nJSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。[微服务常见的认证方案](https://www.jianshu.com/p/c007b8021d05)\n## 一、跨域认证的问题\n互联网服务离不开用户认证。一般流程是下面这样。\n\n* 1、用户向服务器发送用户名和密码。\n\n* 2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。\n\n* 3、服务器向用户返回一个 session_id，写入用户的 Cookie。\n\n* 4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。\n\n* 5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。\n\n这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。\n\n一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。\n\n另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。\n\n什么是JWT：一句话概括就是（通过客户端保存数据，而服务器根本不保存会话数据，每个请求都被发送回服务器。）\n## 二、JWT\nJSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。\n\n一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。\n### 1、JWT的原则\nJWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户，如下所示。\n```\n{\n\n     \"UserName\": \"少年闰土\",\n\n    \"Role\": \"Admin\",\n\n    \"Expire\": \"2019-12-21 09:15:56\"\n\n}\n```\n以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。\n### 2、JWT的数据结构\n样例：\n```\neyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1NTc5MDU4MDIsImV4cCI6MTU1NzkwNjgwMiwicm9sZXMiOiJhZG1pbiJ9.AS5Y2fNCwUzQQxXh_QQWMpaB75YqfuK-2P7VZiCXEJI\n```\n他是一个长字符串，中间用`.`进行分割，代表JWT的三个组成部分，如下：\n\n* Header（头部）\n\n* Payload（负载）\n* Signature（签名）\n![图片来自网络-仅供参考.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xNGFkNzRiMDY3ZTI3YmQxLnBuZw?x-oss-process=image/format,png)\n#### 2.1、头部（Header）\n头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。\n`{\"typ\":\"JWT\",\"alg\":\"HS256\"}`\n\n这个json中的typ属性，用来标识整个token字符串是一个JWT字符串；它的alg属性，用来说明这个JWT签发的时候所使用的签名和摘要算法。typ跟alg属性的全称其实是type跟algorithm，分别是类型跟算法的意思。之所以都用三个字母来表示，也是基于JWT最终字串大小的考虑，同时也是跟JWT这个名称保持一致，这样就都是三个字符了…typ跟alg是JWT中标准中规定的属性名称\n\n在头部指明了签名算法是HS256算法。 我们进行BASE64编码[http://base64.xpcha.com/](https://links.jianshu.com/go?to=http%3A%2F%2Fbase64.xpcha.com%2F)，编码后的字符串如下：\n`eyJhbGciOiJIUzI1NiJ9`\n\n#### 2.2、载荷（Playload）\nPayload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。\n```\niss: jwt签发者\nsub: jwt所面向的用户\naud: 接收jwt的一方\nexp: jwt的过期时间，这个过期时间必须要大于签发时间\nnbf: 定义在什么时间之前，该jwt都是不可用的.\niat: jwt的签发时间\njti: jwt的唯一身份标识，主要用来作为一次性token。\n```\n除了官方字段，你还可以在这个部分定义私有字段\n样例：\n`{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"admin\":true}`\n然后将其进行base64加密，得到Jwt的第二部分。\n`eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9`\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNDM2MzY2NGU3ZTY3NjA1LnBuZw?x-oss-process=image/format,png)\n\n#### 2.3、签名（Signature）\nSignature 部分是对前两部分的签名，防止数据篡改。这个签证信息由三部分组成：\n>header (base64后的)\n payload (base64后的)\nsecret\n\n首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。\n```\n    HMACSHA256(\n      base64UrlEncode(header) + \".\" +\n      base64UrlEncode(payload),\n      secret)\n```\n### 3、Base64URL\n前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。\n\nJWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。 \n### 4、JWT 的使用方式\n客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。\n\n此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。\n`Authorization: Bearer <token>`\n\n下图显示了如何获取JWT并将其用于访问API或资源：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MDk3YjI4MDFlYTZjMTlmLnBuZw?x-oss-process=image/format,png)\n\n## 三、JWT使用\n### 1、添加依赖\n```\n       <dependency>\n            <groupId>com.auth0</groupId>\n            <artifactId>java-jwt</artifactId>\n            <version>3.2.0</version>\n        </dependency>\n```\n### 2、工具类\n\n```\npackage com.example.demo.utils;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.JWTDecodeException;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport org.springframework.stereotype.Component;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @Author: 少年闰土\n * @Date: 2019/12/11 \n * @Time: 下午 4:12\n * @Version: v1.0\n * jwt工具类\n */\n@Component\npublic class JwtUtils {\n\n    /**\n     * 解析token\n     *\n     * @param token token\n     * @return 用户名\n     */\n    public static String getUserName(String token) {\n        try {\n            DecodedJWT jwt = JWT.decode(token);\n            return jwt.getClaim(\"userName\").asString();\n        } catch (JWTDecodeException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    /**\n     * 签发token\n     *\n     * @param userName 用户名\n     * @return token\n     */\n    public static String sign(String userName,String secret) {\n        try {\n            //token过期时间\n            Date date = new Date(System.currentTimeMillis() + (60 * 60 * 1000));\n            Algorithm algorithm = Algorithm.HMAC256(secret);\n            // 附带username信息\n            return JWT.create()\n                    .withClaim(\"userName\", userName)\n                    .withExpiresAt(date)\n                    .sign(algorithm);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    /**\n     * 检验token是否过期\n     *\n     * @param token\n     * @return\n     */\n    public static Map verify(String token,String userName, String secret) {\n        Map result = new HashMap<String, Object>(2);\n        try {\n            Algorithm algorithm = Algorithm.HMAC256(secret);\n            JWTVerifier verifier = JWT.require(algorithm)\n                    .withClaim(\"userName\", userName)\n                    .build();\n            DecodedJWT jwt = verifier.verify(token);\n            result.put(\"isSuccess\", true);\n            result.put(\"exception\", null);\n        } catch (Exception exception) {\n            result.put(\"isSuccess\", false);\n            result.put(\"exception\", exception);\n        }\n        return result;\n    }\n}\n\n```\n### 3、使用\n```\n    @ApiOperation(value = \"浏览器点击登录\")\n    @ApiImplicitParam(name = \"user\", value = \"用户实体\", required = true, paramType = \"User\")\n    @PostMapping(\"/login\")\n    public R login(@RequestBody User user) {\n        log.debug(\"------浏览器点击登录------\");\n        String userName = user.getUsername();\n        String passWord = user.getPassword();\n        User u = this.userService.getUser(userName);\n        String passWordSalt = MD5.md5Salt(passWord, userName);\n        if (u != null && u.getPassword().equals(passWordSalt)) {\n            String token = JwtUtils.sign(userName, passWordSalt);\n            return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);\n        } else {\n            return R.error(R.MSG_LOGIN_ERROR);\n        }\n    }\n```\n\n\n\n\n","source":"_posts/JWT简介.md","raw":"---\ntitle: JWT简介\ntags:\n  - JWT\ncategories:\n  - 微服务\ndate: 2019-12-21 08:43:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n\n## 前言\nJSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。[微服务常见的认证方案](https://www.jianshu.com/p/c007b8021d05)\n## 一、跨域认证的问题\n互联网服务离不开用户认证。一般流程是下面这样。\n\n* 1、用户向服务器发送用户名和密码。\n\n* 2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。\n\n* 3、服务器向用户返回一个 session_id，写入用户的 Cookie。\n\n* 4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。\n\n* 5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。\n\n这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。\n\n一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。\n\n另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。\n\n什么是JWT：一句话概括就是（通过客户端保存数据，而服务器根本不保存会话数据，每个请求都被发送回服务器。）\n## 二、JWT\nJSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。\n\n一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。\n### 1、JWT的原则\nJWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户，如下所示。\n```\n{\n\n     \"UserName\": \"少年闰土\",\n\n    \"Role\": \"Admin\",\n\n    \"Expire\": \"2019-12-21 09:15:56\"\n\n}\n```\n以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。\n### 2、JWT的数据结构\n样例：\n```\neyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1NTc5MDU4MDIsImV4cCI6MTU1NzkwNjgwMiwicm9sZXMiOiJhZG1pbiJ9.AS5Y2fNCwUzQQxXh_QQWMpaB75YqfuK-2P7VZiCXEJI\n```\n他是一个长字符串，中间用`.`进行分割，代表JWT的三个组成部分，如下：\n\n* Header（头部）\n\n* Payload（负载）\n* Signature（签名）\n![图片来自网络-仅供参考.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xNGFkNzRiMDY3ZTI3YmQxLnBuZw?x-oss-process=image/format,png)\n#### 2.1、头部（Header）\n头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。\n`{\"typ\":\"JWT\",\"alg\":\"HS256\"}`\n\n这个json中的typ属性，用来标识整个token字符串是一个JWT字符串；它的alg属性，用来说明这个JWT签发的时候所使用的签名和摘要算法。typ跟alg属性的全称其实是type跟algorithm，分别是类型跟算法的意思。之所以都用三个字母来表示，也是基于JWT最终字串大小的考虑，同时也是跟JWT这个名称保持一致，这样就都是三个字符了…typ跟alg是JWT中标准中规定的属性名称\n\n在头部指明了签名算法是HS256算法。 我们进行BASE64编码[http://base64.xpcha.com/](https://links.jianshu.com/go?to=http%3A%2F%2Fbase64.xpcha.com%2F)，编码后的字符串如下：\n`eyJhbGciOiJIUzI1NiJ9`\n\n#### 2.2、载荷（Playload）\nPayload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。\n```\niss: jwt签发者\nsub: jwt所面向的用户\naud: 接收jwt的一方\nexp: jwt的过期时间，这个过期时间必须要大于签发时间\nnbf: 定义在什么时间之前，该jwt都是不可用的.\niat: jwt的签发时间\njti: jwt的唯一身份标识，主要用来作为一次性token。\n```\n除了官方字段，你还可以在这个部分定义私有字段\n样例：\n`{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"admin\":true}`\n然后将其进行base64加密，得到Jwt的第二部分。\n`eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9`\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNDM2MzY2NGU3ZTY3NjA1LnBuZw?x-oss-process=image/format,png)\n\n#### 2.3、签名（Signature）\nSignature 部分是对前两部分的签名，防止数据篡改。这个签证信息由三部分组成：\n>header (base64后的)\n payload (base64后的)\nsecret\n\n首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。\n```\n    HMACSHA256(\n      base64UrlEncode(header) + \".\" +\n      base64UrlEncode(payload),\n      secret)\n```\n### 3、Base64URL\n前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。\n\nJWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。 \n### 4、JWT 的使用方式\n客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。\n\n此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。\n`Authorization: Bearer <token>`\n\n下图显示了如何获取JWT并将其用于访问API或资源：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MDk3YjI4MDFlYTZjMTlmLnBuZw?x-oss-process=image/format,png)\n\n## 三、JWT使用\n### 1、添加依赖\n```\n       <dependency>\n            <groupId>com.auth0</groupId>\n            <artifactId>java-jwt</artifactId>\n            <version>3.2.0</version>\n        </dependency>\n```\n### 2、工具类\n\n```\npackage com.example.demo.utils;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.JWTDecodeException;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport org.springframework.stereotype.Component;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @Author: 少年闰土\n * @Date: 2019/12/11 \n * @Time: 下午 4:12\n * @Version: v1.0\n * jwt工具类\n */\n@Component\npublic class JwtUtils {\n\n    /**\n     * 解析token\n     *\n     * @param token token\n     * @return 用户名\n     */\n    public static String getUserName(String token) {\n        try {\n            DecodedJWT jwt = JWT.decode(token);\n            return jwt.getClaim(\"userName\").asString();\n        } catch (JWTDecodeException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    /**\n     * 签发token\n     *\n     * @param userName 用户名\n     * @return token\n     */\n    public static String sign(String userName,String secret) {\n        try {\n            //token过期时间\n            Date date = new Date(System.currentTimeMillis() + (60 * 60 * 1000));\n            Algorithm algorithm = Algorithm.HMAC256(secret);\n            // 附带username信息\n            return JWT.create()\n                    .withClaim(\"userName\", userName)\n                    .withExpiresAt(date)\n                    .sign(algorithm);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    /**\n     * 检验token是否过期\n     *\n     * @param token\n     * @return\n     */\n    public static Map verify(String token,String userName, String secret) {\n        Map result = new HashMap<String, Object>(2);\n        try {\n            Algorithm algorithm = Algorithm.HMAC256(secret);\n            JWTVerifier verifier = JWT.require(algorithm)\n                    .withClaim(\"userName\", userName)\n                    .build();\n            DecodedJWT jwt = verifier.verify(token);\n            result.put(\"isSuccess\", true);\n            result.put(\"exception\", null);\n        } catch (Exception exception) {\n            result.put(\"isSuccess\", false);\n            result.put(\"exception\", exception);\n        }\n        return result;\n    }\n}\n\n```\n### 3、使用\n```\n    @ApiOperation(value = \"浏览器点击登录\")\n    @ApiImplicitParam(name = \"user\", value = \"用户实体\", required = true, paramType = \"User\")\n    @PostMapping(\"/login\")\n    public R login(@RequestBody User user) {\n        log.debug(\"------浏览器点击登录------\");\n        String userName = user.getUsername();\n        String passWord = user.getPassword();\n        User u = this.userService.getUser(userName);\n        String passWordSalt = MD5.md5Salt(passWord, userName);\n        if (u != null && u.getPassword().equals(passWordSalt)) {\n            String token = JwtUtils.sign(userName, passWordSalt);\n            return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);\n        } else {\n            return R.error(R.MSG_LOGIN_ERROR);\n        }\n    }\n```\n\n\n\n\n","slug":"JWT简介","published":1,"updated":"2019-12-21T07:09:31.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwlb002esopsenkyh7q9","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。<a href=\"https://www.jianshu.com/p/c007b8021d05\" target=\"_blank\" rel=\"noopener\">微服务常见的认证方案</a></p>\n<h2 id=\"一、跨域认证的问题\"><a href=\"#一、跨域认证的问题\" class=\"headerlink\" title=\"一、跨域认证的问题\"></a>一、跨域认证的问题</h2><p>互联网服务离不开用户认证。一般流程是下面这样。</p>\n<ul>\n<li><p>1、用户向服务器发送用户名和密码。</p>\n</li>\n<li><p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p>\n</li>\n<li><p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p>\n</li>\n<li><p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p>\n</li>\n<li><p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p>\n</li>\n</ul>\n<p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p>\n<p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</p>\n<p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</p>\n<p>什么是JWT：一句话概括就是（通过客户端保存数据，而服务器根本不保存会话数据，每个请求都被发送回服务器。）</p>\n<h2 id=\"二、JWT\"><a href=\"#二、JWT\" class=\"headerlink\" title=\"二、JWT\"></a>二、JWT</h2><p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。</p>\n<p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p>\n<h3 id=\"1、JWT的原则\"><a href=\"#1、JWT的原则\" class=\"headerlink\" title=\"1、JWT的原则\"></a>1、JWT的原则</h3><p>JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户，如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     &quot;UserName&quot;: &quot;少年闰土&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;Role&quot;: &quot;Admin&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;Expire&quot;: &quot;2019-12-21 09:15:56&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。</p>\n<h3 id=\"2、JWT的数据结构\"><a href=\"#2、JWT的数据结构\" class=\"headerlink\" title=\"2、JWT的数据结构\"></a>2、JWT的数据结构</h3><p>样例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1NTc5MDU4MDIsImV4cCI6MTU1NzkwNjgwMiwicm9sZXMiOiJhZG1pbiJ9.AS5Y2fNCwUzQQxXh_QQWMpaB75YqfuK-2P7VZiCXEJI</span><br></pre></td></tr></table></figure>\n<p>他是一个长字符串，中间用<code>.</code>进行分割，代表JWT的三个组成部分，如下：</p>\n<ul>\n<li><p>Header（头部）</p>\n</li>\n<li><p>Payload（负载）</p>\n</li>\n<li><p>Signature（签名）<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xNGFkNzRiMDY3ZTI3YmQxLnBuZw?x-oss-process=image/format,png\" alt=\"图片来自网络-仅供参考.png\"></p>\n<h4 id=\"2-1、头部（Header）\"><a href=\"#2-1、头部（Header）\" class=\"headerlink\" title=\"2.1、头部（Header）\"></a>2.1、头部（Header）</h4><p>头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。<br><code>{&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;}</code></p>\n</li>\n</ul>\n<p>这个json中的typ属性，用来标识整个token字符串是一个JWT字符串；它的alg属性，用来说明这个JWT签发的时候所使用的签名和摘要算法。typ跟alg属性的全称其实是type跟algorithm，分别是类型跟算法的意思。之所以都用三个字母来表示，也是基于JWT最终字串大小的考虑，同时也是跟JWT这个名称保持一致，这样就都是三个字符了…typ跟alg是JWT中标准中规定的属性名称</p>\n<p>在头部指明了签名算法是HS256算法。 我们进行BASE64编码<a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fbase64.xpcha.com%2F\" target=\"_blank\" rel=\"noopener\">http://base64.xpcha.com/</a>，编码后的字符串如下：<br><code>eyJhbGciOiJIUzI1NiJ9</code></p>\n<h4 id=\"2-2、载荷（Playload）\"><a href=\"#2-2、载荷（Playload）\" class=\"headerlink\" title=\"2.2、载荷（Playload）\"></a>2.2、载荷（Playload）</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iss: jwt签发者</span><br><span class=\"line\">sub: jwt所面向的用户</span><br><span class=\"line\">aud: 接收jwt的一方</span><br><span class=\"line\">exp: jwt的过期时间，这个过期时间必须要大于签发时间</span><br><span class=\"line\">nbf: 定义在什么时间之前，该jwt都是不可用的.</span><br><span class=\"line\">iat: jwt的签发时间</span><br><span class=\"line\">jti: jwt的唯一身份标识，主要用来作为一次性token。</span><br></pre></td></tr></table></figure>\n<p>除了官方字段，你还可以在这个部分定义私有字段<br>样例：<br><code>{&quot;sub&quot;:&quot;1234567890&quot;,&quot;name&quot;:&quot;John Doe&quot;,&quot;admin&quot;:true}</code><br>然后将其进行base64加密，得到Jwt的第二部分。<br><code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</code><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNDM2MzY2NGU3ZTY3NjA1LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h4 id=\"2-3、签名（Signature）\"><a href=\"#2-3、签名（Signature）\" class=\"headerlink\" title=\"2.3、签名（Signature）\"></a>2.3、签名（Signature）</h4><p>Signature 部分是对前两部分的签名，防止数据篡改。这个签证信息由三部分组成：</p>\n<blockquote>\n<p>header (base64后的)<br> payload (base64后的)<br>secret</p>\n</blockquote>\n<p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMACSHA256(</span><br><span class=\"line\">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class=\"line\">  base64UrlEncode(payload),</span><br><span class=\"line\">  secret)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、Base64URL\"><a href=\"#3、Base64URL\" class=\"headerlink\" title=\"3、Base64URL\"></a>3、Base64URL</h3><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p>\n<p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。 </p>\n<h3 id=\"4、JWT-的使用方式\"><a href=\"#4、JWT-的使用方式\" class=\"headerlink\" title=\"4、JWT 的使用方式\"></a>4、JWT 的使用方式</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p>\n<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。<br><code>Authorization: Bearer &lt;token&gt;</code></p>\n<p>下图显示了如何获取JWT并将其用于访问API或资源：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MDk3YjI4MDFlYTZjMTlmLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h2 id=\"三、JWT使用\"><a href=\"#三、JWT使用\" class=\"headerlink\" title=\"三、JWT使用\"></a>三、JWT使用</h2><h3 id=\"1、添加依赖\"><a href=\"#1、添加依赖\" class=\"headerlink\" title=\"1、添加依赖\"></a>1、添加依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.auth0&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;java-jwt&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;3.2.0&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、工具类\"><a href=\"#2、工具类\" class=\"headerlink\" title=\"2、工具类\"></a>2、工具类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.demo.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.auth0.jwt.JWT;</span><br><span class=\"line\">import com.auth0.jwt.JWTVerifier;</span><br><span class=\"line\">import com.auth0.jwt.algorithms.Algorithm;</span><br><span class=\"line\">import com.auth0.jwt.exceptions.JWTDecodeException;</span><br><span class=\"line\">import com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author: 少年闰土</span><br><span class=\"line\"> * @Date: 2019&#x2F;12&#x2F;11 </span><br><span class=\"line\"> * @Time: 下午 4:12</span><br><span class=\"line\"> * @Version: v1.0</span><br><span class=\"line\"> * jwt工具类</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class JwtUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 解析token</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token token</span><br><span class=\"line\">     * @return 用户名</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static String getUserName(String token) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            DecodedJWT jwt &#x3D; JWT.decode(token);</span><br><span class=\"line\">            return jwt.getClaim(&quot;userName&quot;).asString();</span><br><span class=\"line\">        &#125; catch (JWTDecodeException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 签发token</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param userName 用户名</span><br><span class=\"line\">     * @return token</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static String sign(String userName,String secret) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;token过期时间</span><br><span class=\"line\">            Date date &#x3D; new Date(System.currentTimeMillis() + (60 * 60 * 1000));</span><br><span class=\"line\">            Algorithm algorithm &#x3D; Algorithm.HMAC256(secret);</span><br><span class=\"line\">            &#x2F;&#x2F; 附带username信息</span><br><span class=\"line\">            return JWT.create()</span><br><span class=\"line\">                    .withClaim(&quot;userName&quot;, userName)</span><br><span class=\"line\">                    .withExpiresAt(date)</span><br><span class=\"line\">                    .sign(algorithm);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 检验token是否过期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static Map verify(String token,String userName, String secret) &#123;</span><br><span class=\"line\">        Map result &#x3D; new HashMap&lt;String, Object&gt;(2);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Algorithm algorithm &#x3D; Algorithm.HMAC256(secret);</span><br><span class=\"line\">            JWTVerifier verifier &#x3D; JWT.require(algorithm)</span><br><span class=\"line\">                    .withClaim(&quot;userName&quot;, userName)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            DecodedJWT jwt &#x3D; verifier.verify(token);</span><br><span class=\"line\">            result.put(&quot;isSuccess&quot;, true);</span><br><span class=\"line\">            result.put(&quot;exception&quot;, null);</span><br><span class=\"line\">        &#125; catch (Exception exception) &#123;</span><br><span class=\"line\">            result.put(&quot;isSuccess&quot;, false);</span><br><span class=\"line\">            result.put(&quot;exception&quot;, exception);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、使用\"><a href=\"#3、使用\" class=\"headerlink\" title=\"3、使用\"></a>3、使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ApiOperation(value &#x3D; &quot;浏览器点击登录&quot;)</span><br><span class=\"line\">@ApiImplicitParam(name &#x3D; &quot;user&quot;, value &#x3D; &quot;用户实体&quot;, required &#x3D; true, paramType &#x3D; &quot;User&quot;)</span><br><span class=\"line\">@PostMapping(&quot;&#x2F;login&quot;)</span><br><span class=\"line\">public R login(@RequestBody User user) &#123;</span><br><span class=\"line\">    log.debug(&quot;------浏览器点击登录------&quot;);</span><br><span class=\"line\">    String userName &#x3D; user.getUsername();</span><br><span class=\"line\">    String passWord &#x3D; user.getPassword();</span><br><span class=\"line\">    User u &#x3D; this.userService.getUser(userName);</span><br><span class=\"line\">    String passWordSalt &#x3D; MD5.md5Salt(passWord, userName);</span><br><span class=\"line\">    if (u !&#x3D; null &amp;&amp; u.getPassword().equals(passWordSalt)) &#123;</span><br><span class=\"line\">        String token &#x3D; JwtUtils.sign(userName, passWordSalt);</span><br><span class=\"line\">        return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return R.error(R.MSG_LOGIN_ERROR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。<a href=\"https://www.jianshu.com/p/c007b8021d05\" target=\"_blank\" rel=\"noopener\">微服务常见的认证方案</a></p>\n<h2 id=\"一、跨域认证的问题\"><a href=\"#一、跨域认证的问题\" class=\"headerlink\" title=\"一、跨域认证的问题\"></a>一、跨域认证的问题</h2><p>互联网服务离不开用户认证。一般流程是下面这样。</p>\n<ul>\n<li><p>1、用户向服务器发送用户名和密码。</p>\n</li>\n<li><p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p>\n</li>\n<li><p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p>\n</li>\n<li><p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p>\n</li>\n<li><p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p>\n</li>\n</ul>\n<p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p>\n<p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</p>\n<p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</p>\n<p>什么是JWT：一句话概括就是（通过客户端保存数据，而服务器根本不保存会话数据，每个请求都被发送回服务器。）</p>\n<h2 id=\"二、JWT\"><a href=\"#二、JWT\" class=\"headerlink\" title=\"二、JWT\"></a>二、JWT</h2><p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。</p>\n<p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p>\n<h3 id=\"1、JWT的原则\"><a href=\"#1、JWT的原则\" class=\"headerlink\" title=\"1、JWT的原则\"></a>1、JWT的原则</h3><p>JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户，如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     &quot;UserName&quot;: &quot;少年闰土&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;Role&quot;: &quot;Admin&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;Expire&quot;: &quot;2019-12-21 09:15:56&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。</p>\n<h3 id=\"2、JWT的数据结构\"><a href=\"#2、JWT的数据结构\" class=\"headerlink\" title=\"2、JWT的数据结构\"></a>2、JWT的数据结构</h3><p>样例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1NTc5MDU4MDIsImV4cCI6MTU1NzkwNjgwMiwicm9sZXMiOiJhZG1pbiJ9.AS5Y2fNCwUzQQxXh_QQWMpaB75YqfuK-2P7VZiCXEJI</span><br></pre></td></tr></table></figure>\n<p>他是一个长字符串，中间用<code>.</code>进行分割，代表JWT的三个组成部分，如下：</p>\n<ul>\n<li><p>Header（头部）</p>\n</li>\n<li><p>Payload（负载）</p>\n</li>\n<li><p>Signature（签名）<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xNGFkNzRiMDY3ZTI3YmQxLnBuZw?x-oss-process=image/format,png\" alt=\"图片来自网络-仅供参考.png\"></p>\n<h4 id=\"2-1、头部（Header）\"><a href=\"#2-1、头部（Header）\" class=\"headerlink\" title=\"2.1、头部（Header）\"></a>2.1、头部（Header）</h4><p>头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。<br><code>{&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;}</code></p>\n</li>\n</ul>\n<p>这个json中的typ属性，用来标识整个token字符串是一个JWT字符串；它的alg属性，用来说明这个JWT签发的时候所使用的签名和摘要算法。typ跟alg属性的全称其实是type跟algorithm，分别是类型跟算法的意思。之所以都用三个字母来表示，也是基于JWT最终字串大小的考虑，同时也是跟JWT这个名称保持一致，这样就都是三个字符了…typ跟alg是JWT中标准中规定的属性名称</p>\n<p>在头部指明了签名算法是HS256算法。 我们进行BASE64编码<a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fbase64.xpcha.com%2F\" target=\"_blank\" rel=\"noopener\">http://base64.xpcha.com/</a>，编码后的字符串如下：<br><code>eyJhbGciOiJIUzI1NiJ9</code></p>\n<h4 id=\"2-2、载荷（Playload）\"><a href=\"#2-2、载荷（Playload）\" class=\"headerlink\" title=\"2.2、载荷（Playload）\"></a>2.2、载荷（Playload）</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iss: jwt签发者</span><br><span class=\"line\">sub: jwt所面向的用户</span><br><span class=\"line\">aud: 接收jwt的一方</span><br><span class=\"line\">exp: jwt的过期时间，这个过期时间必须要大于签发时间</span><br><span class=\"line\">nbf: 定义在什么时间之前，该jwt都是不可用的.</span><br><span class=\"line\">iat: jwt的签发时间</span><br><span class=\"line\">jti: jwt的唯一身份标识，主要用来作为一次性token。</span><br></pre></td></tr></table></figure>\n<p>除了官方字段，你还可以在这个部分定义私有字段<br>样例：<br><code>{&quot;sub&quot;:&quot;1234567890&quot;,&quot;name&quot;:&quot;John Doe&quot;,&quot;admin&quot;:true}</code><br>然后将其进行base64加密，得到Jwt的第二部分。<br><code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</code><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kNDM2MzY2NGU3ZTY3NjA1LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h4 id=\"2-3、签名（Signature）\"><a href=\"#2-3、签名（Signature）\" class=\"headerlink\" title=\"2.3、签名（Signature）\"></a>2.3、签名（Signature）</h4><p>Signature 部分是对前两部分的签名，防止数据篡改。这个签证信息由三部分组成：</p>\n<blockquote>\n<p>header (base64后的)<br> payload (base64后的)<br>secret</p>\n</blockquote>\n<p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMACSHA256(</span><br><span class=\"line\">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class=\"line\">  base64UrlEncode(payload),</span><br><span class=\"line\">  secret)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、Base64URL\"><a href=\"#3、Base64URL\" class=\"headerlink\" title=\"3、Base64URL\"></a>3、Base64URL</h3><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p>\n<p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。 </p>\n<h3 id=\"4、JWT-的使用方式\"><a href=\"#4、JWT-的使用方式\" class=\"headerlink\" title=\"4、JWT 的使用方式\"></a>4、JWT 的使用方式</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p>\n<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。<br><code>Authorization: Bearer &lt;token&gt;</code></p>\n<p>下图显示了如何获取JWT并将其用于访问API或资源：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05MDk3YjI4MDFlYTZjMTlmLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h2 id=\"三、JWT使用\"><a href=\"#三、JWT使用\" class=\"headerlink\" title=\"三、JWT使用\"></a>三、JWT使用</h2><h3 id=\"1、添加依赖\"><a href=\"#1、添加依赖\" class=\"headerlink\" title=\"1、添加依赖\"></a>1、添加依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.auth0&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;java-jwt&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;3.2.0&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、工具类\"><a href=\"#2、工具类\" class=\"headerlink\" title=\"2、工具类\"></a>2、工具类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.demo.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.auth0.jwt.JWT;</span><br><span class=\"line\">import com.auth0.jwt.JWTVerifier;</span><br><span class=\"line\">import com.auth0.jwt.algorithms.Algorithm;</span><br><span class=\"line\">import com.auth0.jwt.exceptions.JWTDecodeException;</span><br><span class=\"line\">import com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @Author: 少年闰土</span><br><span class=\"line\"> * @Date: 2019&#x2F;12&#x2F;11 </span><br><span class=\"line\"> * @Time: 下午 4:12</span><br><span class=\"line\"> * @Version: v1.0</span><br><span class=\"line\"> * jwt工具类</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class JwtUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 解析token</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token token</span><br><span class=\"line\">     * @return 用户名</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static String getUserName(String token) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            DecodedJWT jwt &#x3D; JWT.decode(token);</span><br><span class=\"line\">            return jwt.getClaim(&quot;userName&quot;).asString();</span><br><span class=\"line\">        &#125; catch (JWTDecodeException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 签发token</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param userName 用户名</span><br><span class=\"line\">     * @return token</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static String sign(String userName,String secret) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;token过期时间</span><br><span class=\"line\">            Date date &#x3D; new Date(System.currentTimeMillis() + (60 * 60 * 1000));</span><br><span class=\"line\">            Algorithm algorithm &#x3D; Algorithm.HMAC256(secret);</span><br><span class=\"line\">            &#x2F;&#x2F; 附带username信息</span><br><span class=\"line\">            return JWT.create()</span><br><span class=\"line\">                    .withClaim(&quot;userName&quot;, userName)</span><br><span class=\"line\">                    .withExpiresAt(date)</span><br><span class=\"line\">                    .sign(algorithm);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 检验token是否过期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static Map verify(String token,String userName, String secret) &#123;</span><br><span class=\"line\">        Map result &#x3D; new HashMap&lt;String, Object&gt;(2);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Algorithm algorithm &#x3D; Algorithm.HMAC256(secret);</span><br><span class=\"line\">            JWTVerifier verifier &#x3D; JWT.require(algorithm)</span><br><span class=\"line\">                    .withClaim(&quot;userName&quot;, userName)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            DecodedJWT jwt &#x3D; verifier.verify(token);</span><br><span class=\"line\">            result.put(&quot;isSuccess&quot;, true);</span><br><span class=\"line\">            result.put(&quot;exception&quot;, null);</span><br><span class=\"line\">        &#125; catch (Exception exception) &#123;</span><br><span class=\"line\">            result.put(&quot;isSuccess&quot;, false);</span><br><span class=\"line\">            result.put(&quot;exception&quot;, exception);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、使用\"><a href=\"#3、使用\" class=\"headerlink\" title=\"3、使用\"></a>3、使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ApiOperation(value &#x3D; &quot;浏览器点击登录&quot;)</span><br><span class=\"line\">@ApiImplicitParam(name &#x3D; &quot;user&quot;, value &#x3D; &quot;用户实体&quot;, required &#x3D; true, paramType &#x3D; &quot;User&quot;)</span><br><span class=\"line\">@PostMapping(&quot;&#x2F;login&quot;)</span><br><span class=\"line\">public R login(@RequestBody User user) &#123;</span><br><span class=\"line\">    log.debug(&quot;------浏览器点击登录------&quot;);</span><br><span class=\"line\">    String userName &#x3D; user.getUsername();</span><br><span class=\"line\">    String passWord &#x3D; user.getPassword();</span><br><span class=\"line\">    User u &#x3D; this.userService.getUser(userName);</span><br><span class=\"line\">    String passWordSalt &#x3D; MD5.md5Salt(passWord, userName);</span><br><span class=\"line\">    if (u !&#x3D; null &amp;&amp; u.getPassword().equals(passWordSalt)) &#123;</span><br><span class=\"line\">        String token &#x3D; JwtUtils.sign(userName, passWordSalt);</span><br><span class=\"line\">        return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return R.error(R.MSG_LOGIN_ERROR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Sat Dec 21 2019 15:09:31 GMT+0800 (GMT+08:00)","title":"JWT简介","path":"2019/12/21/JWT简介/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS03NDMwMTkyODA2NDIxMzZjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-12-21T00:43:00.000Z","pv":0,"totalPV":0,"categories":"微服务","tags":["JWT"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"开发中常用的 25 个JavaScript 单行代码","date":"2019-07-26T03:34:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjg5MGI4N2M1YjFiZmIxLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n### 1.强制布尔值\n要将变量强制转换为布尔值而不更改其值：\n```\nconst myBoolean = !! myVariable;!!null // false !!undefined // false !!false // false !!ture // ture !!\"\" // false !!\"string\" // true !!0 // false !!1 // true !!{} // true !![] // true \n```\n### 2.基于某个条件为对象设置属性\n要使用spread运算符有条件地在对象上设置属性：\n```\nconst myObject = {... myProperty && {propName：myPoperty}};\nlet myProperty = 'Jhon' const myObject = {...myProperty && {propName: myProperty}}; \n// {propName: \"Jhon\"} \nlet myProperty = '' \nconst myObject = {...myProperty && {propName: myProperty}}; \n// {} \n```\n如果myProperty结果为false，则 && 失败并且不设置新属性; 否则，如果不为空，&& 将设置新属性并覆盖原来的值。\n\n### 3.合并对象\n```\nconst mergedObject = { ...objectOne, ...objectTwo }; \nconst mergedObject = { ...{name: 'Jhon', age: '18'}, ...{name1: 'jhon1', age1: '12'}};\n // {name: \"Jhon\", age: \"18\", name1: \"jhon1\", age1: \"12\"} \nconst mergedObject = { ...{name: 'Jhon', age: '18'}, ...{name: 'jhon1', age:'12'}}; \n// {name: \"jhon1\", age: \"12\"} \n```\n支持无限制合并，但如果对象之间存在相同属性，则后面属性会覆盖前面属性。*请注意，这仅适用于浅层合并。\n\n### 4.交换变量\n\n要在不使用中间变量的情况下交换两个变量的值\n```\n[varA，varB] = [varB，varA]; \nlet a = 1; let b = 2; \n[a, b] = [b, a] // a = 2 b = 1 \n```\n### 5.删除Boolean 为 false 值\n```\nconst clean = dirty.filter(Boolean); \nconst clean = [0, false, true, undefined, null, '', 12, 15].filter(Boolean); // [true, 12, 15] \n```\n这将删除值等于：null，undefined，false，0 和空字符串('')。\n\n### 6.转换元素类型\n\n要将Number元素转换为String元素：\n```\nconst stringArray = numberArray.map(String); \nconst stringArray = [1, 2, 3].map(String); [\"1\", \"2\", \"3\"] \n```\n如果数组包含字符串，字符串原样保留。 这也可以用于将String元素转换为Number类型：\n```\nconst numberArray = stringArray.map(Number); \nconst stringArray = [\"1\", \"2\", \"3\"].map(String); // [1, 2, 3] \n```\n### 7.格式化对象为JSON代码\n\n要以可读的格式显示JSON代码：\n```\nconst formatted = JSON.stringify(myObj, null, 4); \nconst formatted = JSON.stringify({name: 'Jhon', age: 18, address: 'sz'}, null, 4); \n/* {  \"name\": \"Jhon\",  \"age\": 18,  \"address\": \"sz\" } */ \n```\n该字符串化命令有三个参数。第一个是Javascript对象。第二个是可选函数，可用于在JSON进行字符串化时对其执行操作。最后一个参数指示要添加多少空格作为缩进以格式化JSON。省略最后一个参数，JSON将返回一个长行。如果myObj中存在循环引用，则会格式失败。\n\n### 8.快速创建数字数组\n\n要创建一个数组并用数字填充它，索引为零：\n```\nconst numArray = Array.from(new Array(10), (x, i)=> i);\n // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \n```\n### 9.随机生成六位数字验证码\n```\nconst code = Math.floor(Math.random() * 1000000).toString().padStart(6, \"0\"); \n// 942377 \n```\n### 10.身份证正则\n```\nconst IDReg= /(^[1-9]d{5}(18|19|\n              ([23]d))d{2}((0[1-9])|\n              (10|11|12))(([0-2][1-9])|10|20|30|31)d{3}[0-9Xx]$)|\n              (^[1-9]d{5}d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)d{2}[0-9Xx]$)/; \n```\n### 11.window.location.search 转 JS 对象\n\n有时候我们会对url的查询参数即从问号 (?)后 开始的 URL（查询部分）进行转换\n```\nconst searchObj = search \n                => JSON.parse(\n                   `{\"${decodeURIComponent(search\n                       .substring(1))\n                       .replace(/\"/g, '\\\"')\n                       .replace(/&/g,'\",\"')\n                       .replace(/=/g, '\":\"')\n                    }\"}`\n                ); \n// 假如请求url为 // 'https://www.baidu.com?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=js&rsv_pq=a86b5e5f0007bceb&rsv_t=1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&rqlang=cn&rsv_enter=0&inputT=1287&rsv_sug3=5&rsv_sug1=3&rsv_sug7=101&rsv_sug2=0&rsv_sug4=1907' \n// 那么 window.location.search 就为： let search = '?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=js&rsv_pq=a86b5e5f0007bceb&rsv_t=1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&rqlang=cn&rsv_enter=0&inputT=1287&rsv_sug3=5&rsv_sug1=3&rsv_sug7=101&rsv_sug2=0&rsv_sug4=1907' searchObj(search) \n```\n### 12.JS 对象转 url 查询字符串\n```\nconst objectToQueryString = (obj)\n                         => Object.keys(obj).map((key)                          \n                         =>`${encodeURIComponent(key)}\n                         =${encodeURIComponent(obj[key])}`).join('&'); \nobjectToQueryString({name: 'Jhon', age: 18, address: 'beijing'}) \n// name=Jhon&age=18&address=beijing \n```\n### 13.获取数组交集\n```\nconst similarity = (arr, values) => arr.filter(v => values.includes(v)); \nsimilarity([1, 2, 3], [1, 2, 4]); \n// [1,2] \n```\n### 14.检测设备类型\n\n使用正则表达式来检测 navigator.userAgent 属性判断设备是在移动设备还是在台式机/笔记本电脑打开。\n```\nconst detectDeviceType = () \n                       =>/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|\n                         OperaMini/i.test(navigator.userAgent) ? 'Mobile' : 'Desktop'; \n```\n### 15.将数字转化为千分位格式\n```\nconst toDecimalMark = num => num.toLocaleString('en-US'); \ntoDecimalMark(12305030388.9087); \n// \"12,305,030,388.909\" \n```\n### 16.多维数组转一维数组\n```\nconst deepFlatten = arr \n                 => [].concat(\n                              ...arr.map(\n                                         v => (Array.isArray(v) ? deepFlatten(v) : v))); \ndeepFlatten([1, [2], [[3], 4], 5]); // [1,2,3,4,5] \n```\n### 17.过滤对象数组\n```\nconst reducedFilter = (data, keys, fn)\n                    =>data.filter(fn)\n                    .map(\n                        el =>keys.reduce(\n                            (acc, key) => {acc[key] =el[key];return acc;}, {})\n                        );\nconst data = [  {  id: 1,  name: 'john',  age: 24  },  {  id: 2,  name: 'mike',  age: 50  } ]; \nlet a = reducedFilter(data, ['id', 'name'], item => item.age > 24);\n // [{ id: 2, name: 'mike'}] \n```\n### 18.驼峰字字符串格式化\n\n转换驼峰拼写的字符串为特定格式。\n\n使用 String.replace() 去除下划线，连字符和空格，并将驼峰拼写格式的单词转换为全小写。省略第二个参数 separator ，默认使用 _ 分隔符。\n```\n const fromCamelCase = (str, separator = '_') =>str.replace(/([a-zd])([A-Z])/g, '$1' + separator + '$2').replace(/([A-Z]+)([A-Z][a-zd]+)/g, '$1' + separator + '$2').toLowerCase();\n fromCamelCase('someDatabaseFieldName', ' ');\n\n // 'some database field name' fromCamelCase('someLabelThatNeedsToBeCamelized', '-'); \n // 'some-label-that-needs-to-be-camelized' fromCamelCase('someJavascriptProperty', '_');\n // 'some_javascript_property' \n```\n### 19.是否为绝对地址\n```\nconst isAbsoluteURL = str => /^[a-z][a-z0-9+.-]*:/.test(str); \nisAbsoluteURL('https://google.com'); // true \nisAbsoluteURL('ftp://www.myserver.net');// true \nisAbsoluteURL('/foo/bar'); // false \n```\n### 20.获取两个日期相差天数\n```\nconst getDaysDiffBetweenDates = \n    (dateInitial, dateFinal) => (dateFinal - dateInitial) / (1000 * 3600 * 24); \ngetDaysDiffBetweenDates(new Date('2017-12-13'), new Date('2017-12-22')); // 9 \n```\n### 21.数组去重\n```\nconst deDupe = (myArray) => [... new Set(myArray)];\n deDupe([1, 1, 2, 1, 3, 3, 4]) // [1, 2, 3, 4] \n```\n### 22.数组对象去重\n```\nconst uniqueElementsBy = \n             (arr, fn) =>arr.reduce((acc, v)\n                       => {\n                          if (!acc.some(x => fn(v, x))) acc.push(v);\n                          return acc;\n                          }, []); \nuniqueElementsBy([{id: 1, name: 'Jhon'}, \n                  {id: 2, name: 'sss'},\n                  {id: 1, name: 'Jhon'}], (a, b)       \n             => a.id == b.id) \n// [{id: 1, name: 'Jhon'}, {id: 2, name: 'sss'}] \n```\n### 23.RGB 颜色转 16进制颜色\n```\nconst RGBToHex = (r, g, b)\n               => ((r << 16) + (g << 8) + b).toString(16).padStart(6, '0'); \nRGBToHex(255, 165, 1); // 'ffa501' \n```\n### 24.常用密码组合正则\n```\nconst passwordReg = /(?!^(d+|[a-zA-Z]+|[~!@#$%^&*?]+)$)^[w~!@#$%^&*?]{8,20}$/; \n// -长度8~20位字符，支持大小写字母、数字、符号三种字符中任意两种字符的组合 \n```\n### 25.判断dom元素是否具有某个className\n```\nconst hasClass = (el, className)\n               => new RegExp(`(^|\\s)${className}(\\s|$)`).test(el.className); \n```","source":"_posts/开发中常用的-25-个JavaScript-单行代码.md","raw":"title: 开发中常用的 25 个JavaScript 单行代码\ntags:\n  - javaScript\ncategories:\n  - JavaScript\ndate: 2019-07-26 11:34:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjg5MGI4N2M1YjFiZmIxLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n\n### 1.强制布尔值\n要将变量强制转换为布尔值而不更改其值：\n```\nconst myBoolean = !! myVariable;!!null // false !!undefined // false !!false // false !!ture // ture !!\"\" // false !!\"string\" // true !!0 // false !!1 // true !!{} // true !![] // true \n```\n### 2.基于某个条件为对象设置属性\n要使用spread运算符有条件地在对象上设置属性：\n```\nconst myObject = {... myProperty && {propName：myPoperty}};\nlet myProperty = 'Jhon' const myObject = {...myProperty && {propName: myProperty}}; \n// {propName: \"Jhon\"} \nlet myProperty = '' \nconst myObject = {...myProperty && {propName: myProperty}}; \n// {} \n```\n如果myProperty结果为false，则 && 失败并且不设置新属性; 否则，如果不为空，&& 将设置新属性并覆盖原来的值。\n\n### 3.合并对象\n```\nconst mergedObject = { ...objectOne, ...objectTwo }; \nconst mergedObject = { ...{name: 'Jhon', age: '18'}, ...{name1: 'jhon1', age1: '12'}};\n // {name: \"Jhon\", age: \"18\", name1: \"jhon1\", age1: \"12\"} \nconst mergedObject = { ...{name: 'Jhon', age: '18'}, ...{name: 'jhon1', age:'12'}}; \n// {name: \"jhon1\", age: \"12\"} \n```\n支持无限制合并，但如果对象之间存在相同属性，则后面属性会覆盖前面属性。*请注意，这仅适用于浅层合并。\n\n### 4.交换变量\n\n要在不使用中间变量的情况下交换两个变量的值\n```\n[varA，varB] = [varB，varA]; \nlet a = 1; let b = 2; \n[a, b] = [b, a] // a = 2 b = 1 \n```\n### 5.删除Boolean 为 false 值\n```\nconst clean = dirty.filter(Boolean); \nconst clean = [0, false, true, undefined, null, '', 12, 15].filter(Boolean); // [true, 12, 15] \n```\n这将删除值等于：null，undefined，false，0 和空字符串('')。\n\n### 6.转换元素类型\n\n要将Number元素转换为String元素：\n```\nconst stringArray = numberArray.map(String); \nconst stringArray = [1, 2, 3].map(String); [\"1\", \"2\", \"3\"] \n```\n如果数组包含字符串，字符串原样保留。 这也可以用于将String元素转换为Number类型：\n```\nconst numberArray = stringArray.map(Number); \nconst stringArray = [\"1\", \"2\", \"3\"].map(String); // [1, 2, 3] \n```\n### 7.格式化对象为JSON代码\n\n要以可读的格式显示JSON代码：\n```\nconst formatted = JSON.stringify(myObj, null, 4); \nconst formatted = JSON.stringify({name: 'Jhon', age: 18, address: 'sz'}, null, 4); \n/* {  \"name\": \"Jhon\",  \"age\": 18,  \"address\": \"sz\" } */ \n```\n该字符串化命令有三个参数。第一个是Javascript对象。第二个是可选函数，可用于在JSON进行字符串化时对其执行操作。最后一个参数指示要添加多少空格作为缩进以格式化JSON。省略最后一个参数，JSON将返回一个长行。如果myObj中存在循环引用，则会格式失败。\n\n### 8.快速创建数字数组\n\n要创建一个数组并用数字填充它，索引为零：\n```\nconst numArray = Array.from(new Array(10), (x, i)=> i);\n // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \n```\n### 9.随机生成六位数字验证码\n```\nconst code = Math.floor(Math.random() * 1000000).toString().padStart(6, \"0\"); \n// 942377 \n```\n### 10.身份证正则\n```\nconst IDReg= /(^[1-9]d{5}(18|19|\n              ([23]d))d{2}((0[1-9])|\n              (10|11|12))(([0-2][1-9])|10|20|30|31)d{3}[0-9Xx]$)|\n              (^[1-9]d{5}d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)d{2}[0-9Xx]$)/; \n```\n### 11.window.location.search 转 JS 对象\n\n有时候我们会对url的查询参数即从问号 (?)后 开始的 URL（查询部分）进行转换\n```\nconst searchObj = search \n                => JSON.parse(\n                   `{\"${decodeURIComponent(search\n                       .substring(1))\n                       .replace(/\"/g, '\\\"')\n                       .replace(/&/g,'\",\"')\n                       .replace(/=/g, '\":\"')\n                    }\"}`\n                ); \n// 假如请求url为 // 'https://www.baidu.com?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=js&rsv_pq=a86b5e5f0007bceb&rsv_t=1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&rqlang=cn&rsv_enter=0&inputT=1287&rsv_sug3=5&rsv_sug1=3&rsv_sug7=101&rsv_sug2=0&rsv_sug4=1907' \n// 那么 window.location.search 就为： let search = '?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=js&rsv_pq=a86b5e5f0007bceb&rsv_t=1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&rqlang=cn&rsv_enter=0&inputT=1287&rsv_sug3=5&rsv_sug1=3&rsv_sug7=101&rsv_sug2=0&rsv_sug4=1907' searchObj(search) \n```\n### 12.JS 对象转 url 查询字符串\n```\nconst objectToQueryString = (obj)\n                         => Object.keys(obj).map((key)                          \n                         =>`${encodeURIComponent(key)}\n                         =${encodeURIComponent(obj[key])}`).join('&'); \nobjectToQueryString({name: 'Jhon', age: 18, address: 'beijing'}) \n// name=Jhon&age=18&address=beijing \n```\n### 13.获取数组交集\n```\nconst similarity = (arr, values) => arr.filter(v => values.includes(v)); \nsimilarity([1, 2, 3], [1, 2, 4]); \n// [1,2] \n```\n### 14.检测设备类型\n\n使用正则表达式来检测 navigator.userAgent 属性判断设备是在移动设备还是在台式机/笔记本电脑打开。\n```\nconst detectDeviceType = () \n                       =>/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|\n                         OperaMini/i.test(navigator.userAgent) ? 'Mobile' : 'Desktop'; \n```\n### 15.将数字转化为千分位格式\n```\nconst toDecimalMark = num => num.toLocaleString('en-US'); \ntoDecimalMark(12305030388.9087); \n// \"12,305,030,388.909\" \n```\n### 16.多维数组转一维数组\n```\nconst deepFlatten = arr \n                 => [].concat(\n                              ...arr.map(\n                                         v => (Array.isArray(v) ? deepFlatten(v) : v))); \ndeepFlatten([1, [2], [[3], 4], 5]); // [1,2,3,4,5] \n```\n### 17.过滤对象数组\n```\nconst reducedFilter = (data, keys, fn)\n                    =>data.filter(fn)\n                    .map(\n                        el =>keys.reduce(\n                            (acc, key) => {acc[key] =el[key];return acc;}, {})\n                        );\nconst data = [  {  id: 1,  name: 'john',  age: 24  },  {  id: 2,  name: 'mike',  age: 50  } ]; \nlet a = reducedFilter(data, ['id', 'name'], item => item.age > 24);\n // [{ id: 2, name: 'mike'}] \n```\n### 18.驼峰字字符串格式化\n\n转换驼峰拼写的字符串为特定格式。\n\n使用 String.replace() 去除下划线，连字符和空格，并将驼峰拼写格式的单词转换为全小写。省略第二个参数 separator ，默认使用 _ 分隔符。\n```\n const fromCamelCase = (str, separator = '_') =>str.replace(/([a-zd])([A-Z])/g, '$1' + separator + '$2').replace(/([A-Z]+)([A-Z][a-zd]+)/g, '$1' + separator + '$2').toLowerCase();\n fromCamelCase('someDatabaseFieldName', ' ');\n\n // 'some database field name' fromCamelCase('someLabelThatNeedsToBeCamelized', '-'); \n // 'some-label-that-needs-to-be-camelized' fromCamelCase('someJavascriptProperty', '_');\n // 'some_javascript_property' \n```\n### 19.是否为绝对地址\n```\nconst isAbsoluteURL = str => /^[a-z][a-z0-9+.-]*:/.test(str); \nisAbsoluteURL('https://google.com'); // true \nisAbsoluteURL('ftp://www.myserver.net');// true \nisAbsoluteURL('/foo/bar'); // false \n```\n### 20.获取两个日期相差天数\n```\nconst getDaysDiffBetweenDates = \n    (dateInitial, dateFinal) => (dateFinal - dateInitial) / (1000 * 3600 * 24); \ngetDaysDiffBetweenDates(new Date('2017-12-13'), new Date('2017-12-22')); // 9 \n```\n### 21.数组去重\n```\nconst deDupe = (myArray) => [... new Set(myArray)];\n deDupe([1, 1, 2, 1, 3, 3, 4]) // [1, 2, 3, 4] \n```\n### 22.数组对象去重\n```\nconst uniqueElementsBy = \n             (arr, fn) =>arr.reduce((acc, v)\n                       => {\n                          if (!acc.some(x => fn(v, x))) acc.push(v);\n                          return acc;\n                          }, []); \nuniqueElementsBy([{id: 1, name: 'Jhon'}, \n                  {id: 2, name: 'sss'},\n                  {id: 1, name: 'Jhon'}], (a, b)       \n             => a.id == b.id) \n// [{id: 1, name: 'Jhon'}, {id: 2, name: 'sss'}] \n```\n### 23.RGB 颜色转 16进制颜色\n```\nconst RGBToHex = (r, g, b)\n               => ((r << 16) + (g << 8) + b).toString(16).padStart(6, '0'); \nRGBToHex(255, 165, 1); // 'ffa501' \n```\n### 24.常用密码组合正则\n```\nconst passwordReg = /(?!^(d+|[a-zA-Z]+|[~!@#$%^&*?]+)$)^[w~!@#$%^&*?]{8,20}$/; \n// -长度8~20位字符，支持大小写字母、数字、符号三种字符中任意两种字符的组合 \n```\n### 25.判断dom元素是否具有某个className\n```\nconst hasClass = (el, className)\n               => new RegExp(`(^|\\s)${className}(\\s|$)`).test(el.className); \n```","slug":"开发中常用的-25-个JavaScript-单行代码","published":1,"updated":"2020-01-01T03:56:28.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwlc002gsops7wg71ox2","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjg5MGI4N2M1YjFiZmIxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h3 id=\"1-强制布尔值\"><a href=\"#1-强制布尔值\" class=\"headerlink\" title=\"1.强制布尔值\"></a>1.强制布尔值</h3><p>要将变量强制转换为布尔值而不更改其值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const myBoolean &#x3D; !! myVariable;!!null &#x2F;&#x2F; false !!undefined &#x2F;&#x2F; false !!false &#x2F;&#x2F; false !!ture &#x2F;&#x2F; ture !!&quot;&quot; &#x2F;&#x2F; false !!&quot;string&quot; &#x2F;&#x2F; true !!0 &#x2F;&#x2F; false !!1 &#x2F;&#x2F; true !!&#123;&#125; &#x2F;&#x2F; true !![] &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-基于某个条件为对象设置属性\"><a href=\"#2-基于某个条件为对象设置属性\" class=\"headerlink\" title=\"2.基于某个条件为对象设置属性\"></a>2.基于某个条件为对象设置属性</h3><p>要使用spread运算符有条件地在对象上设置属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const myObject &#x3D; &#123;... myProperty &amp;&amp; &#123;propName：myPoperty&#125;&#125;;</span><br><span class=\"line\">let myProperty &#x3D; &#39;Jhon&#39; const myObject &#x3D; &#123;...myProperty &amp;&amp; &#123;propName: myProperty&#125;&#125;; </span><br><span class=\"line\">&#x2F;&#x2F; &#123;propName: &quot;Jhon&quot;&#125; </span><br><span class=\"line\">let myProperty &#x3D; &#39;&#39; </span><br><span class=\"line\">const myObject &#x3D; &#123;...myProperty &amp;&amp; &#123;propName: myProperty&#125;&#125;; </span><br><span class=\"line\">&#x2F;&#x2F; &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>如果myProperty结果为false，则 &amp;&amp; 失败并且不设置新属性; 否则，如果不为空，&amp;&amp; 将设置新属性并覆盖原来的值。</p>\n<h3 id=\"3-合并对象\"><a href=\"#3-合并对象\" class=\"headerlink\" title=\"3.合并对象\"></a>3.合并对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mergedObject &#x3D; &#123; ...objectOne, ...objectTwo &#125;; </span><br><span class=\"line\">const mergedObject &#x3D; &#123; ...&#123;name: &#39;Jhon&#39;, age: &#39;18&#39;&#125;, ...&#123;name1: &#39;jhon1&#39;, age1: &#39;12&#39;&#125;&#125;;</span><br><span class=\"line\"> &#x2F;&#x2F; &#123;name: &quot;Jhon&quot;, age: &quot;18&quot;, name1: &quot;jhon1&quot;, age1: &quot;12&quot;&#125; </span><br><span class=\"line\">const mergedObject &#x3D; &#123; ...&#123;name: &#39;Jhon&#39;, age: &#39;18&#39;&#125;, ...&#123;name: &#39;jhon1&#39;, age:&#39;12&#39;&#125;&#125;; </span><br><span class=\"line\">&#x2F;&#x2F; &#123;name: &quot;jhon1&quot;, age: &quot;12&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p>支持无限制合并，但如果对象之间存在相同属性，则后面属性会覆盖前面属性。*请注意，这仅适用于浅层合并。</p>\n<h3 id=\"4-交换变量\"><a href=\"#4-交换变量\" class=\"headerlink\" title=\"4.交换变量\"></a>4.交换变量</h3><p>要在不使用中间变量的情况下交换两个变量的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[varA，varB] &#x3D; [varB，varA]; </span><br><span class=\"line\">let a &#x3D; 1; let b &#x3D; 2; </span><br><span class=\"line\">[a, b] &#x3D; [b, a] &#x2F;&#x2F; a &#x3D; 2 b &#x3D; 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-删除Boolean-为-false-值\"><a href=\"#5-删除Boolean-为-false-值\" class=\"headerlink\" title=\"5.删除Boolean 为 false 值\"></a>5.删除Boolean 为 false 值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const clean &#x3D; dirty.filter(Boolean); </span><br><span class=\"line\">const clean &#x3D; [0, false, true, undefined, null, &#39;&#39;, 12, 15].filter(Boolean); &#x2F;&#x2F; [true, 12, 15]</span><br></pre></td></tr></table></figure>\n<p>这将删除值等于：null，undefined，false，0 和空字符串(‘’)。</p>\n<h3 id=\"6-转换元素类型\"><a href=\"#6-转换元素类型\" class=\"headerlink\" title=\"6.转换元素类型\"></a>6.转换元素类型</h3><p>要将Number元素转换为String元素：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const stringArray &#x3D; numberArray.map(String); </span><br><span class=\"line\">const stringArray &#x3D; [1, 2, 3].map(String); [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span><br></pre></td></tr></table></figure>\n<p>如果数组包含字符串，字符串原样保留。 这也可以用于将String元素转换为Number类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const numberArray &#x3D; stringArray.map(Number); </span><br><span class=\"line\">const stringArray &#x3D; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(String); &#x2F;&#x2F; [1, 2, 3]</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-格式化对象为JSON代码\"><a href=\"#7-格式化对象为JSON代码\" class=\"headerlink\" title=\"7.格式化对象为JSON代码\"></a>7.格式化对象为JSON代码</h3><p>要以可读的格式显示JSON代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const formatted &#x3D; JSON.stringify(myObj, null, 4); </span><br><span class=\"line\">const formatted &#x3D; JSON.stringify(&#123;name: &#39;Jhon&#39;, age: 18, address: &#39;sz&#39;&#125;, null, 4); </span><br><span class=\"line\">&#x2F;* &#123;  &quot;name&quot;: &quot;Jhon&quot;,  &quot;age&quot;: 18,  &quot;address&quot;: &quot;sz&quot; &#125; *&#x2F;</span><br></pre></td></tr></table></figure>\n<p>该字符串化命令有三个参数。第一个是Javascript对象。第二个是可选函数，可用于在JSON进行字符串化时对其执行操作。最后一个参数指示要添加多少空格作为缩进以格式化JSON。省略最后一个参数，JSON将返回一个长行。如果myObj中存在循环引用，则会格式失败。</p>\n<h3 id=\"8-快速创建数字数组\"><a href=\"#8-快速创建数字数组\" class=\"headerlink\" title=\"8.快速创建数字数组\"></a>8.快速创建数字数组</h3><p>要创建一个数组并用数字填充它，索引为零：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const numArray &#x3D; Array.from(new Array(10), (x, i)&#x3D;&gt; i);</span><br><span class=\"line\"> &#x2F;&#x2F; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-随机生成六位数字验证码\"><a href=\"#9-随机生成六位数字验证码\" class=\"headerlink\" title=\"9.随机生成六位数字验证码\"></a>9.随机生成六位数字验证码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const code &#x3D; Math.floor(Math.random() * 1000000).toString().padStart(6, &quot;0&quot;); </span><br><span class=\"line\">&#x2F;&#x2F; 942377</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-身份证正则\"><a href=\"#10-身份证正则\" class=\"headerlink\" title=\"10.身份证正则\"></a>10.身份证正则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const IDReg&#x3D; &#x2F;(^[1-9]d&#123;5&#125;(18|19|</span><br><span class=\"line\">              ([23]d))d&#123;2&#125;((0[1-9])|</span><br><span class=\"line\">              (10|11|12))(([0-2][1-9])|10|20|30|31)d&#123;3&#125;[0-9Xx]$)|</span><br><span class=\"line\">              (^[1-9]d&#123;5&#125;d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)d&#123;2&#125;[0-9Xx]$)&#x2F;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-window-location-search-转-JS-对象\"><a href=\"#11-window-location-search-转-JS-对象\" class=\"headerlink\" title=\"11.window.location.search 转 JS 对象\"></a>11.window.location.search 转 JS 对象</h3><p>有时候我们会对url的查询参数即从问号 (?)后 开始的 URL（查询部分）进行转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const searchObj &#x3D; search </span><br><span class=\"line\">                &#x3D;&gt; JSON.parse(</span><br><span class=\"line\">                   &#96;&#123;&quot;$&#123;decodeURIComponent(search</span><br><span class=\"line\">                       .substring(1))</span><br><span class=\"line\">                       .replace(&#x2F;&quot;&#x2F;g, &#39;\\&quot;&#39;)</span><br><span class=\"line\">                       .replace(&#x2F;&amp;&#x2F;g,&#39;&quot;,&quot;&#39;)</span><br><span class=\"line\">                       .replace(&#x2F;&#x3D;&#x2F;g, &#39;&quot;:&quot;&#39;)</span><br><span class=\"line\">                    &#125;&quot;&#125;&#96;</span><br><span class=\"line\">                ); </span><br><span class=\"line\">&#x2F;&#x2F; 假如请求url为 &#x2F;&#x2F; &#39;https:&#x2F;&#x2F;www.baidu.com?ie&#x3D;utf-8&amp;f&#x3D;8&amp;rsv_bp&#x3D;1&amp;rsv_idx&#x3D;1&amp;tn&#x3D;baidu&amp;wd&#x3D;js&amp;rsv_pq&#x3D;a86b5e5f0007bceb&amp;rsv_t&#x3D;1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&amp;rqlang&#x3D;cn&amp;rsv_enter&#x3D;0&amp;inputT&#x3D;1287&amp;rsv_sug3&#x3D;5&amp;rsv_sug1&#x3D;3&amp;rsv_sug7&#x3D;101&amp;rsv_sug2&#x3D;0&amp;rsv_sug4&#x3D;1907&#39; </span><br><span class=\"line\">&#x2F;&#x2F; 那么 window.location.search 就为： let search &#x3D; &#39;?ie&#x3D;utf-8&amp;f&#x3D;8&amp;rsv_bp&#x3D;1&amp;rsv_idx&#x3D;1&amp;tn&#x3D;baidu&amp;wd&#x3D;js&amp;rsv_pq&#x3D;a86b5e5f0007bceb&amp;rsv_t&#x3D;1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&amp;rqlang&#x3D;cn&amp;rsv_enter&#x3D;0&amp;inputT&#x3D;1287&amp;rsv_sug3&#x3D;5&amp;rsv_sug1&#x3D;3&amp;rsv_sug7&#x3D;101&amp;rsv_sug2&#x3D;0&amp;rsv_sug4&#x3D;1907&#39; searchObj(search)</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-JS-对象转-url-查询字符串\"><a href=\"#12-JS-对象转-url-查询字符串\" class=\"headerlink\" title=\"12.JS 对象转 url 查询字符串\"></a>12.JS 对象转 url 查询字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const objectToQueryString &#x3D; (obj)</span><br><span class=\"line\">                         &#x3D;&gt; Object.keys(obj).map((key)                          </span><br><span class=\"line\">                         &#x3D;&gt;&#96;$&#123;encodeURIComponent(key)&#125;</span><br><span class=\"line\">                         &#x3D;$&#123;encodeURIComponent(obj[key])&#125;&#96;).join(&#39;&amp;&#39;); </span><br><span class=\"line\">objectToQueryString(&#123;name: &#39;Jhon&#39;, age: 18, address: &#39;beijing&#39;&#125;) </span><br><span class=\"line\">&#x2F;&#x2F; name&#x3D;Jhon&amp;age&#x3D;18&amp;address&#x3D;beijing</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-获取数组交集\"><a href=\"#13-获取数组交集\" class=\"headerlink\" title=\"13.获取数组交集\"></a>13.获取数组交集</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const similarity &#x3D; (arr, values) &#x3D;&gt; arr.filter(v &#x3D;&gt; values.includes(v)); </span><br><span class=\"line\">similarity([1, 2, 3], [1, 2, 4]); </span><br><span class=\"line\">&#x2F;&#x2F; [1,2]</span><br></pre></td></tr></table></figure>\n<h3 id=\"14-检测设备类型\"><a href=\"#14-检测设备类型\" class=\"headerlink\" title=\"14.检测设备类型\"></a>14.检测设备类型</h3><p>使用正则表达式来检测 navigator.userAgent 属性判断设备是在移动设备还是在台式机/笔记本电脑打开。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const detectDeviceType &#x3D; () </span><br><span class=\"line\">                       &#x3D;&gt;&#x2F;Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|</span><br><span class=\"line\">                         OperaMini&#x2F;i.test(navigator.userAgent) ? &#39;Mobile&#39; : &#39;Desktop&#39;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"15-将数字转化为千分位格式\"><a href=\"#15-将数字转化为千分位格式\" class=\"headerlink\" title=\"15.将数字转化为千分位格式\"></a>15.将数字转化为千分位格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const toDecimalMark &#x3D; num &#x3D;&gt; num.toLocaleString(&#39;en-US&#39;); </span><br><span class=\"line\">toDecimalMark(12305030388.9087); </span><br><span class=\"line\">&#x2F;&#x2F; &quot;12,305,030,388.909&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"16-多维数组转一维数组\"><a href=\"#16-多维数组转一维数组\" class=\"headerlink\" title=\"16.多维数组转一维数组\"></a>16.多维数组转一维数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const deepFlatten &#x3D; arr </span><br><span class=\"line\">                 &#x3D;&gt; [].concat(</span><br><span class=\"line\">                              ...arr.map(</span><br><span class=\"line\">                                         v &#x3D;&gt; (Array.isArray(v) ? deepFlatten(v) : v))); </span><br><span class=\"line\">deepFlatten([1, [2], [[3], 4], 5]); &#x2F;&#x2F; [1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n<h3 id=\"17-过滤对象数组\"><a href=\"#17-过滤对象数组\" class=\"headerlink\" title=\"17.过滤对象数组\"></a>17.过滤对象数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reducedFilter &#x3D; (data, keys, fn)</span><br><span class=\"line\">                    &#x3D;&gt;data.filter(fn)</span><br><span class=\"line\">                    .map(</span><br><span class=\"line\">                        el &#x3D;&gt;keys.reduce(</span><br><span class=\"line\">                            (acc, key) &#x3D;&gt; &#123;acc[key] &#x3D;el[key];return acc;&#125;, &#123;&#125;)</span><br><span class=\"line\">                        );</span><br><span class=\"line\">const data &#x3D; [  &#123;  id: 1,  name: &#39;john&#39;,  age: 24  &#125;,  &#123;  id: 2,  name: &#39;mike&#39;,  age: 50  &#125; ]; </span><br><span class=\"line\">let a &#x3D; reducedFilter(data, [&#39;id&#39;, &#39;name&#39;], item &#x3D;&gt; item.age &gt; 24);</span><br><span class=\"line\"> &#x2F;&#x2F; [&#123; id: 2, name: &#39;mike&#39;&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"18-驼峰字字符串格式化\"><a href=\"#18-驼峰字字符串格式化\" class=\"headerlink\" title=\"18.驼峰字字符串格式化\"></a>18.驼峰字字符串格式化</h3><p>转换驼峰拼写的字符串为特定格式。</p>\n<p>使用 String.replace() 去除下划线，连字符和空格，并将驼峰拼写格式的单词转换为全小写。省略第二个参数 separator ，默认使用 _ 分隔符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fromCamelCase &#x3D; (str, separator &#x3D; &#39;_&#39;) &#x3D;&gt;str.replace(&#x2F;([a-zd])([A-Z])&#x2F;g, &#39;$1&#39; + separator + &#39;$2&#39;).replace(&#x2F;([A-Z]+)([A-Z][a-zd]+)&#x2F;g, &#39;$1&#39; + separator + &#39;$2&#39;).toLowerCase();</span><br><span class=\"line\">fromCamelCase(&#39;someDatabaseFieldName&#39;, &#39; &#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; &#39;some database field name&#39; fromCamelCase(&#39;someLabelThatNeedsToBeCamelized&#39;, &#39;-&#39;); </span><br><span class=\"line\">&#x2F;&#x2F; &#39;some-label-that-needs-to-be-camelized&#39; fromCamelCase(&#39;someJavascriptProperty&#39;, &#39;_&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; &#39;some_javascript_property&#39;</span><br></pre></td></tr></table></figure>\n<h3 id=\"19-是否为绝对地址\"><a href=\"#19-是否为绝对地址\" class=\"headerlink\" title=\"19.是否为绝对地址\"></a>19.是否为绝对地址</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const isAbsoluteURL &#x3D; str &#x3D;&gt; &#x2F;^[a-z][a-z0-9+.-]*:&#x2F;.test(str); </span><br><span class=\"line\">isAbsoluteURL(&#39;https:&#x2F;&#x2F;google.com&#39;); &#x2F;&#x2F; true </span><br><span class=\"line\">isAbsoluteURL(&#39;ftp:&#x2F;&#x2F;www.myserver.net&#39;);&#x2F;&#x2F; true </span><br><span class=\"line\">isAbsoluteURL(&#39;&#x2F;foo&#x2F;bar&#39;); &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>\n<h3 id=\"20-获取两个日期相差天数\"><a href=\"#20-获取两个日期相差天数\" class=\"headerlink\" title=\"20.获取两个日期相差天数\"></a>20.获取两个日期相差天数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const getDaysDiffBetweenDates &#x3D; </span><br><span class=\"line\">    (dateInitial, dateFinal) &#x3D;&gt; (dateFinal - dateInitial) &#x2F; (1000 * 3600 * 24); </span><br><span class=\"line\">getDaysDiffBetweenDates(new Date(&#39;2017-12-13&#39;), new Date(&#39;2017-12-22&#39;)); &#x2F;&#x2F; 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"21-数组去重\"><a href=\"#21-数组去重\" class=\"headerlink\" title=\"21.数组去重\"></a>21.数组去重</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const deDupe &#x3D; (myArray) &#x3D;&gt; [... new Set(myArray)];</span><br><span class=\"line\"> deDupe([1, 1, 2, 1, 3, 3, 4]) &#x2F;&#x2F; [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>\n<h3 id=\"22-数组对象去重\"><a href=\"#22-数组对象去重\" class=\"headerlink\" title=\"22.数组对象去重\"></a>22.数组对象去重</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const uniqueElementsBy &#x3D; </span><br><span class=\"line\">             (arr, fn) &#x3D;&gt;arr.reduce((acc, v)</span><br><span class=\"line\">                       &#x3D;&gt; &#123;</span><br><span class=\"line\">                          if (!acc.some(x &#x3D;&gt; fn(v, x))) acc.push(v);</span><br><span class=\"line\">                          return acc;</span><br><span class=\"line\">                          &#125;, []); </span><br><span class=\"line\">uniqueElementsBy([&#123;id: 1, name: &#39;Jhon&#39;&#125;, </span><br><span class=\"line\">                  &#123;id: 2, name: &#39;sss&#39;&#125;,</span><br><span class=\"line\">                  &#123;id: 1, name: &#39;Jhon&#39;&#125;], (a, b)       </span><br><span class=\"line\">             &#x3D;&gt; a.id &#x3D;&#x3D; b.id) </span><br><span class=\"line\">&#x2F;&#x2F; [&#123;id: 1, name: &#39;Jhon&#39;&#125;, &#123;id: 2, name: &#39;sss&#39;&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-RGB-颜色转-16进制颜色\"><a href=\"#23-RGB-颜色转-16进制颜色\" class=\"headerlink\" title=\"23.RGB 颜色转 16进制颜色\"></a>23.RGB 颜色转 16进制颜色</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const RGBToHex &#x3D; (r, g, b)</span><br><span class=\"line\">               &#x3D;&gt; ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b).toString(16).padStart(6, &#39;0&#39;); </span><br><span class=\"line\">RGBToHex(255, 165, 1); &#x2F;&#x2F; &#39;ffa501&#39;</span><br></pre></td></tr></table></figure>\n<h3 id=\"24-常用密码组合正则\"><a href=\"#24-常用密码组合正则\" class=\"headerlink\" title=\"24.常用密码组合正则\"></a>24.常用密码组合正则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const passwordReg &#x3D; &#x2F;(?!^(d+|[a-zA-Z]+|[~!@#$%^&amp;*?]+)$)^[w~!@#$%^&amp;*?]&#123;8,20&#125;$&#x2F;; </span><br><span class=\"line\">&#x2F;&#x2F; -长度8~20位字符，支持大小写字母、数字、符号三种字符中任意两种字符的组合</span><br></pre></td></tr></table></figure>\n<h3 id=\"25-判断dom元素是否具有某个className\"><a href=\"#25-判断dom元素是否具有某个className\" class=\"headerlink\" title=\"25.判断dom元素是否具有某个className\"></a>25.判断dom元素是否具有某个className</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const hasClass &#x3D; (el, className)</span><br><span class=\"line\">               &#x3D;&gt; new RegExp(&#96;(^|\\s)$&#123;className&#125;(\\s|$)&#96;).test(el.className);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjg5MGI4N2M1YjFiZmIxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h3 id=\"1-强制布尔值\"><a href=\"#1-强制布尔值\" class=\"headerlink\" title=\"1.强制布尔值\"></a>1.强制布尔值</h3><p>要将变量强制转换为布尔值而不更改其值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const myBoolean &#x3D; !! myVariable;!!null &#x2F;&#x2F; false !!undefined &#x2F;&#x2F; false !!false &#x2F;&#x2F; false !!ture &#x2F;&#x2F; ture !!&quot;&quot; &#x2F;&#x2F; false !!&quot;string&quot; &#x2F;&#x2F; true !!0 &#x2F;&#x2F; false !!1 &#x2F;&#x2F; true !!&#123;&#125; &#x2F;&#x2F; true !![] &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-基于某个条件为对象设置属性\"><a href=\"#2-基于某个条件为对象设置属性\" class=\"headerlink\" title=\"2.基于某个条件为对象设置属性\"></a>2.基于某个条件为对象设置属性</h3><p>要使用spread运算符有条件地在对象上设置属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const myObject &#x3D; &#123;... myProperty &amp;&amp; &#123;propName：myPoperty&#125;&#125;;</span><br><span class=\"line\">let myProperty &#x3D; &#39;Jhon&#39; const myObject &#x3D; &#123;...myProperty &amp;&amp; &#123;propName: myProperty&#125;&#125;; </span><br><span class=\"line\">&#x2F;&#x2F; &#123;propName: &quot;Jhon&quot;&#125; </span><br><span class=\"line\">let myProperty &#x3D; &#39;&#39; </span><br><span class=\"line\">const myObject &#x3D; &#123;...myProperty &amp;&amp; &#123;propName: myProperty&#125;&#125;; </span><br><span class=\"line\">&#x2F;&#x2F; &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>如果myProperty结果为false，则 &amp;&amp; 失败并且不设置新属性; 否则，如果不为空，&amp;&amp; 将设置新属性并覆盖原来的值。</p>\n<h3 id=\"3-合并对象\"><a href=\"#3-合并对象\" class=\"headerlink\" title=\"3.合并对象\"></a>3.合并对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mergedObject &#x3D; &#123; ...objectOne, ...objectTwo &#125;; </span><br><span class=\"line\">const mergedObject &#x3D; &#123; ...&#123;name: &#39;Jhon&#39;, age: &#39;18&#39;&#125;, ...&#123;name1: &#39;jhon1&#39;, age1: &#39;12&#39;&#125;&#125;;</span><br><span class=\"line\"> &#x2F;&#x2F; &#123;name: &quot;Jhon&quot;, age: &quot;18&quot;, name1: &quot;jhon1&quot;, age1: &quot;12&quot;&#125; </span><br><span class=\"line\">const mergedObject &#x3D; &#123; ...&#123;name: &#39;Jhon&#39;, age: &#39;18&#39;&#125;, ...&#123;name: &#39;jhon1&#39;, age:&#39;12&#39;&#125;&#125;; </span><br><span class=\"line\">&#x2F;&#x2F; &#123;name: &quot;jhon1&quot;, age: &quot;12&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p>支持无限制合并，但如果对象之间存在相同属性，则后面属性会覆盖前面属性。*请注意，这仅适用于浅层合并。</p>\n<h3 id=\"4-交换变量\"><a href=\"#4-交换变量\" class=\"headerlink\" title=\"4.交换变量\"></a>4.交换变量</h3><p>要在不使用中间变量的情况下交换两个变量的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[varA，varB] &#x3D; [varB，varA]; </span><br><span class=\"line\">let a &#x3D; 1; let b &#x3D; 2; </span><br><span class=\"line\">[a, b] &#x3D; [b, a] &#x2F;&#x2F; a &#x3D; 2 b &#x3D; 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-删除Boolean-为-false-值\"><a href=\"#5-删除Boolean-为-false-值\" class=\"headerlink\" title=\"5.删除Boolean 为 false 值\"></a>5.删除Boolean 为 false 值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const clean &#x3D; dirty.filter(Boolean); </span><br><span class=\"line\">const clean &#x3D; [0, false, true, undefined, null, &#39;&#39;, 12, 15].filter(Boolean); &#x2F;&#x2F; [true, 12, 15]</span><br></pre></td></tr></table></figure>\n<p>这将删除值等于：null，undefined，false，0 和空字符串(‘’)。</p>\n<h3 id=\"6-转换元素类型\"><a href=\"#6-转换元素类型\" class=\"headerlink\" title=\"6.转换元素类型\"></a>6.转换元素类型</h3><p>要将Number元素转换为String元素：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const stringArray &#x3D; numberArray.map(String); </span><br><span class=\"line\">const stringArray &#x3D; [1, 2, 3].map(String); [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span><br></pre></td></tr></table></figure>\n<p>如果数组包含字符串，字符串原样保留。 这也可以用于将String元素转换为Number类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const numberArray &#x3D; stringArray.map(Number); </span><br><span class=\"line\">const stringArray &#x3D; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(String); &#x2F;&#x2F; [1, 2, 3]</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-格式化对象为JSON代码\"><a href=\"#7-格式化对象为JSON代码\" class=\"headerlink\" title=\"7.格式化对象为JSON代码\"></a>7.格式化对象为JSON代码</h3><p>要以可读的格式显示JSON代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const formatted &#x3D; JSON.stringify(myObj, null, 4); </span><br><span class=\"line\">const formatted &#x3D; JSON.stringify(&#123;name: &#39;Jhon&#39;, age: 18, address: &#39;sz&#39;&#125;, null, 4); </span><br><span class=\"line\">&#x2F;* &#123;  &quot;name&quot;: &quot;Jhon&quot;,  &quot;age&quot;: 18,  &quot;address&quot;: &quot;sz&quot; &#125; *&#x2F;</span><br></pre></td></tr></table></figure>\n<p>该字符串化命令有三个参数。第一个是Javascript对象。第二个是可选函数，可用于在JSON进行字符串化时对其执行操作。最后一个参数指示要添加多少空格作为缩进以格式化JSON。省略最后一个参数，JSON将返回一个长行。如果myObj中存在循环引用，则会格式失败。</p>\n<h3 id=\"8-快速创建数字数组\"><a href=\"#8-快速创建数字数组\" class=\"headerlink\" title=\"8.快速创建数字数组\"></a>8.快速创建数字数组</h3><p>要创建一个数组并用数字填充它，索引为零：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const numArray &#x3D; Array.from(new Array(10), (x, i)&#x3D;&gt; i);</span><br><span class=\"line\"> &#x2F;&#x2F; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-随机生成六位数字验证码\"><a href=\"#9-随机生成六位数字验证码\" class=\"headerlink\" title=\"9.随机生成六位数字验证码\"></a>9.随机生成六位数字验证码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const code &#x3D; Math.floor(Math.random() * 1000000).toString().padStart(6, &quot;0&quot;); </span><br><span class=\"line\">&#x2F;&#x2F; 942377</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-身份证正则\"><a href=\"#10-身份证正则\" class=\"headerlink\" title=\"10.身份证正则\"></a>10.身份证正则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const IDReg&#x3D; &#x2F;(^[1-9]d&#123;5&#125;(18|19|</span><br><span class=\"line\">              ([23]d))d&#123;2&#125;((0[1-9])|</span><br><span class=\"line\">              (10|11|12))(([0-2][1-9])|10|20|30|31)d&#123;3&#125;[0-9Xx]$)|</span><br><span class=\"line\">              (^[1-9]d&#123;5&#125;d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)d&#123;2&#125;[0-9Xx]$)&#x2F;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-window-location-search-转-JS-对象\"><a href=\"#11-window-location-search-转-JS-对象\" class=\"headerlink\" title=\"11.window.location.search 转 JS 对象\"></a>11.window.location.search 转 JS 对象</h3><p>有时候我们会对url的查询参数即从问号 (?)后 开始的 URL（查询部分）进行转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const searchObj &#x3D; search </span><br><span class=\"line\">                &#x3D;&gt; JSON.parse(</span><br><span class=\"line\">                   &#96;&#123;&quot;$&#123;decodeURIComponent(search</span><br><span class=\"line\">                       .substring(1))</span><br><span class=\"line\">                       .replace(&#x2F;&quot;&#x2F;g, &#39;\\&quot;&#39;)</span><br><span class=\"line\">                       .replace(&#x2F;&amp;&#x2F;g,&#39;&quot;,&quot;&#39;)</span><br><span class=\"line\">                       .replace(&#x2F;&#x3D;&#x2F;g, &#39;&quot;:&quot;&#39;)</span><br><span class=\"line\">                    &#125;&quot;&#125;&#96;</span><br><span class=\"line\">                ); </span><br><span class=\"line\">&#x2F;&#x2F; 假如请求url为 &#x2F;&#x2F; &#39;https:&#x2F;&#x2F;www.baidu.com?ie&#x3D;utf-8&amp;f&#x3D;8&amp;rsv_bp&#x3D;1&amp;rsv_idx&#x3D;1&amp;tn&#x3D;baidu&amp;wd&#x3D;js&amp;rsv_pq&#x3D;a86b5e5f0007bceb&amp;rsv_t&#x3D;1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&amp;rqlang&#x3D;cn&amp;rsv_enter&#x3D;0&amp;inputT&#x3D;1287&amp;rsv_sug3&#x3D;5&amp;rsv_sug1&#x3D;3&amp;rsv_sug7&#x3D;101&amp;rsv_sug2&#x3D;0&amp;rsv_sug4&#x3D;1907&#39; </span><br><span class=\"line\">&#x2F;&#x2F; 那么 window.location.search 就为： let search &#x3D; &#39;?ie&#x3D;utf-8&amp;f&#x3D;8&amp;rsv_bp&#x3D;1&amp;rsv_idx&#x3D;1&amp;tn&#x3D;baidu&amp;wd&#x3D;js&amp;rsv_pq&#x3D;a86b5e5f0007bceb&amp;rsv_t&#x3D;1e1fAVan%2BVlnkhJHFB0BIGLdLM2slszYMJBTTfFkmyyBUzBpw0ggeuVDE50&amp;rqlang&#x3D;cn&amp;rsv_enter&#x3D;0&amp;inputT&#x3D;1287&amp;rsv_sug3&#x3D;5&amp;rsv_sug1&#x3D;3&amp;rsv_sug7&#x3D;101&amp;rsv_sug2&#x3D;0&amp;rsv_sug4&#x3D;1907&#39; searchObj(search)</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-JS-对象转-url-查询字符串\"><a href=\"#12-JS-对象转-url-查询字符串\" class=\"headerlink\" title=\"12.JS 对象转 url 查询字符串\"></a>12.JS 对象转 url 查询字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const objectToQueryString &#x3D; (obj)</span><br><span class=\"line\">                         &#x3D;&gt; Object.keys(obj).map((key)                          </span><br><span class=\"line\">                         &#x3D;&gt;&#96;$&#123;encodeURIComponent(key)&#125;</span><br><span class=\"line\">                         &#x3D;$&#123;encodeURIComponent(obj[key])&#125;&#96;).join(&#39;&amp;&#39;); </span><br><span class=\"line\">objectToQueryString(&#123;name: &#39;Jhon&#39;, age: 18, address: &#39;beijing&#39;&#125;) </span><br><span class=\"line\">&#x2F;&#x2F; name&#x3D;Jhon&amp;age&#x3D;18&amp;address&#x3D;beijing</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-获取数组交集\"><a href=\"#13-获取数组交集\" class=\"headerlink\" title=\"13.获取数组交集\"></a>13.获取数组交集</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const similarity &#x3D; (arr, values) &#x3D;&gt; arr.filter(v &#x3D;&gt; values.includes(v)); </span><br><span class=\"line\">similarity([1, 2, 3], [1, 2, 4]); </span><br><span class=\"line\">&#x2F;&#x2F; [1,2]</span><br></pre></td></tr></table></figure>\n<h3 id=\"14-检测设备类型\"><a href=\"#14-检测设备类型\" class=\"headerlink\" title=\"14.检测设备类型\"></a>14.检测设备类型</h3><p>使用正则表达式来检测 navigator.userAgent 属性判断设备是在移动设备还是在台式机/笔记本电脑打开。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const detectDeviceType &#x3D; () </span><br><span class=\"line\">                       &#x3D;&gt;&#x2F;Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|</span><br><span class=\"line\">                         OperaMini&#x2F;i.test(navigator.userAgent) ? &#39;Mobile&#39; : &#39;Desktop&#39;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"15-将数字转化为千分位格式\"><a href=\"#15-将数字转化为千分位格式\" class=\"headerlink\" title=\"15.将数字转化为千分位格式\"></a>15.将数字转化为千分位格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const toDecimalMark &#x3D; num &#x3D;&gt; num.toLocaleString(&#39;en-US&#39;); </span><br><span class=\"line\">toDecimalMark(12305030388.9087); </span><br><span class=\"line\">&#x2F;&#x2F; &quot;12,305,030,388.909&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"16-多维数组转一维数组\"><a href=\"#16-多维数组转一维数组\" class=\"headerlink\" title=\"16.多维数组转一维数组\"></a>16.多维数组转一维数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const deepFlatten &#x3D; arr </span><br><span class=\"line\">                 &#x3D;&gt; [].concat(</span><br><span class=\"line\">                              ...arr.map(</span><br><span class=\"line\">                                         v &#x3D;&gt; (Array.isArray(v) ? deepFlatten(v) : v))); </span><br><span class=\"line\">deepFlatten([1, [2], [[3], 4], 5]); &#x2F;&#x2F; [1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n<h3 id=\"17-过滤对象数组\"><a href=\"#17-过滤对象数组\" class=\"headerlink\" title=\"17.过滤对象数组\"></a>17.过滤对象数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reducedFilter &#x3D; (data, keys, fn)</span><br><span class=\"line\">                    &#x3D;&gt;data.filter(fn)</span><br><span class=\"line\">                    .map(</span><br><span class=\"line\">                        el &#x3D;&gt;keys.reduce(</span><br><span class=\"line\">                            (acc, key) &#x3D;&gt; &#123;acc[key] &#x3D;el[key];return acc;&#125;, &#123;&#125;)</span><br><span class=\"line\">                        );</span><br><span class=\"line\">const data &#x3D; [  &#123;  id: 1,  name: &#39;john&#39;,  age: 24  &#125;,  &#123;  id: 2,  name: &#39;mike&#39;,  age: 50  &#125; ]; </span><br><span class=\"line\">let a &#x3D; reducedFilter(data, [&#39;id&#39;, &#39;name&#39;], item &#x3D;&gt; item.age &gt; 24);</span><br><span class=\"line\"> &#x2F;&#x2F; [&#123; id: 2, name: &#39;mike&#39;&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"18-驼峰字字符串格式化\"><a href=\"#18-驼峰字字符串格式化\" class=\"headerlink\" title=\"18.驼峰字字符串格式化\"></a>18.驼峰字字符串格式化</h3><p>转换驼峰拼写的字符串为特定格式。</p>\n<p>使用 String.replace() 去除下划线，连字符和空格，并将驼峰拼写格式的单词转换为全小写。省略第二个参数 separator ，默认使用 _ 分隔符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fromCamelCase &#x3D; (str, separator &#x3D; &#39;_&#39;) &#x3D;&gt;str.replace(&#x2F;([a-zd])([A-Z])&#x2F;g, &#39;$1&#39; + separator + &#39;$2&#39;).replace(&#x2F;([A-Z]+)([A-Z][a-zd]+)&#x2F;g, &#39;$1&#39; + separator + &#39;$2&#39;).toLowerCase();</span><br><span class=\"line\">fromCamelCase(&#39;someDatabaseFieldName&#39;, &#39; &#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; &#39;some database field name&#39; fromCamelCase(&#39;someLabelThatNeedsToBeCamelized&#39;, &#39;-&#39;); </span><br><span class=\"line\">&#x2F;&#x2F; &#39;some-label-that-needs-to-be-camelized&#39; fromCamelCase(&#39;someJavascriptProperty&#39;, &#39;_&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; &#39;some_javascript_property&#39;</span><br></pre></td></tr></table></figure>\n<h3 id=\"19-是否为绝对地址\"><a href=\"#19-是否为绝对地址\" class=\"headerlink\" title=\"19.是否为绝对地址\"></a>19.是否为绝对地址</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const isAbsoluteURL &#x3D; str &#x3D;&gt; &#x2F;^[a-z][a-z0-9+.-]*:&#x2F;.test(str); </span><br><span class=\"line\">isAbsoluteURL(&#39;https:&#x2F;&#x2F;google.com&#39;); &#x2F;&#x2F; true </span><br><span class=\"line\">isAbsoluteURL(&#39;ftp:&#x2F;&#x2F;www.myserver.net&#39;);&#x2F;&#x2F; true </span><br><span class=\"line\">isAbsoluteURL(&#39;&#x2F;foo&#x2F;bar&#39;); &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>\n<h3 id=\"20-获取两个日期相差天数\"><a href=\"#20-获取两个日期相差天数\" class=\"headerlink\" title=\"20.获取两个日期相差天数\"></a>20.获取两个日期相差天数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const getDaysDiffBetweenDates &#x3D; </span><br><span class=\"line\">    (dateInitial, dateFinal) &#x3D;&gt; (dateFinal - dateInitial) &#x2F; (1000 * 3600 * 24); </span><br><span class=\"line\">getDaysDiffBetweenDates(new Date(&#39;2017-12-13&#39;), new Date(&#39;2017-12-22&#39;)); &#x2F;&#x2F; 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"21-数组去重\"><a href=\"#21-数组去重\" class=\"headerlink\" title=\"21.数组去重\"></a>21.数组去重</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const deDupe &#x3D; (myArray) &#x3D;&gt; [... new Set(myArray)];</span><br><span class=\"line\"> deDupe([1, 1, 2, 1, 3, 3, 4]) &#x2F;&#x2F; [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>\n<h3 id=\"22-数组对象去重\"><a href=\"#22-数组对象去重\" class=\"headerlink\" title=\"22.数组对象去重\"></a>22.数组对象去重</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const uniqueElementsBy &#x3D; </span><br><span class=\"line\">             (arr, fn) &#x3D;&gt;arr.reduce((acc, v)</span><br><span class=\"line\">                       &#x3D;&gt; &#123;</span><br><span class=\"line\">                          if (!acc.some(x &#x3D;&gt; fn(v, x))) acc.push(v);</span><br><span class=\"line\">                          return acc;</span><br><span class=\"line\">                          &#125;, []); </span><br><span class=\"line\">uniqueElementsBy([&#123;id: 1, name: &#39;Jhon&#39;&#125;, </span><br><span class=\"line\">                  &#123;id: 2, name: &#39;sss&#39;&#125;,</span><br><span class=\"line\">                  &#123;id: 1, name: &#39;Jhon&#39;&#125;], (a, b)       </span><br><span class=\"line\">             &#x3D;&gt; a.id &#x3D;&#x3D; b.id) </span><br><span class=\"line\">&#x2F;&#x2F; [&#123;id: 1, name: &#39;Jhon&#39;&#125;, &#123;id: 2, name: &#39;sss&#39;&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-RGB-颜色转-16进制颜色\"><a href=\"#23-RGB-颜色转-16进制颜色\" class=\"headerlink\" title=\"23.RGB 颜色转 16进制颜色\"></a>23.RGB 颜色转 16进制颜色</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const RGBToHex &#x3D; (r, g, b)</span><br><span class=\"line\">               &#x3D;&gt; ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b).toString(16).padStart(6, &#39;0&#39;); </span><br><span class=\"line\">RGBToHex(255, 165, 1); &#x2F;&#x2F; &#39;ffa501&#39;</span><br></pre></td></tr></table></figure>\n<h3 id=\"24-常用密码组合正则\"><a href=\"#24-常用密码组合正则\" class=\"headerlink\" title=\"24.常用密码组合正则\"></a>24.常用密码组合正则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const passwordReg &#x3D; &#x2F;(?!^(d+|[a-zA-Z]+|[~!@#$%^&amp;*?]+)$)^[w~!@#$%^&amp;*?]&#123;8,20&#125;$&#x2F;; </span><br><span class=\"line\">&#x2F;&#x2F; -长度8~20位字符，支持大小写字母、数字、符号三种字符中任意两种字符的组合</span><br></pre></td></tr></table></figure>\n<h3 id=\"25-判断dom元素是否具有某个className\"><a href=\"#25-判断dom元素是否具有某个className\" class=\"headerlink\" title=\"25.判断dom元素是否具有某个className\"></a>25.判断dom元素是否具有某个className</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const hasClass &#x3D; (el, className)</span><br><span class=\"line\">               &#x3D;&gt; new RegExp(&#96;(^|\\s)$&#123;className&#125;(\\s|$)&#96;).test(el.className);</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjg5MGI4N2M1YjFiZmIxLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 11:56:28 GMT+0800 (GMT+08:00)","title":"开发中常用的 25 个JavaScript 单行代码","path":"2019/07/26/开发中常用的-25-个JavaScript-单行代码/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjg5MGI4N2M1YjFiZmIxLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjg5MGI4N2M1YjFiZmIxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-07-26T03:34:00.000Z","pv":0,"totalPV":0,"categories":"JavaScript","tags":["javaScript"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"微服务网关 Spring Cloud Gateway","date":"2020-01-01T03:09:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMjE2MjFhMjZlNjVhOGQ5LmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n## 什么是网关\n假设你现在要做一个电商应用，前端是移动端的APP，后端是各种微服务。那你可能某个页面需要调用多个服务的数据来展示。如果没有网关，你的系统看起来就是这个样子的：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01YTQ4NGE3ZTU4Y2M4ODk3LnBuZw?x-oss-process=image/format,png)\n\n而如果加上了网关，你的系统就会变成这个样子：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02MzQxNWM5YzY0YzViYWVmLnBuZw?x-oss-process=image/format,png)\n#Spring Cloud Gateway\nSpring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。\n\nSpring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Netflix Zuul，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。\n### 相关概念\n* Route（路由）：这是网关的基本构建块。它由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。\n* Predicate（断言）：这是一个 Java 8 的 Predicate。输入类型是一个 ServerWebExchange。我们可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。\n* Filter（过滤器）：这是org.springframework.cloud.gateway.filter.GatewayFilter的实例，我们可以使用它修改请求和响应。\n### 工作流程\n![gateway.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNTlmNTA3MTU0NDBkNjdhLnBuZw?x-oss-process=image/format,png)\n\n（PS：看到这张图是不是很熟悉，没错，很像SpringMVC的请求处理过程）\n\n* 请求发送到网关，DispatcherHandler是HTTP请求的中央分发器，接管请求并将请求匹配到相应的 HandlerMapping。\n\n* 请求与处理器之间有一个映射关系，网关将会对请求进行路由，handler 此处会匹配到 RoutePredicateHandlerMapping，匹配请求对应的 Route。\n\n* 随后到达网关的 web 处理器，该 WebHandler 代理了一系列网关过滤器和全局过滤器的实例，如对请求或者响应的 Header 处理（增加或者移除某个 Header）。\n\n* 最后，转发到具体的代理服务。\n\n简而言之：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hMzVmNzhiZTMzNjJhN2EwLnBuZw?x-oss-process=image/format,png)\n客户端向 Spring Cloud Gateway 发出请求。如果 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。 过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。\n## 快速开始\n### 1.新建一个项目gatewayTest\n在项目中添加3个module`eureka,producer,gateway`\n项目结构\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWY0NWYzNWNhMjg2MTc0LnBuZw?x-oss-process=image/format,png)\n### 2.rureka\n新建module\n\n![step1.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YzI0YjFlZWYwMjg3ZDEwLnBuZw?x-oss-process=image/format,png)\n![step2.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzMwMjIwY2ZhMGM2NjUzLnBuZw?x-oss-process=image/format,png)\n![step3.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iYjc4NmVmZjgxMGIwY2NjLnBuZw?x-oss-process=image/format,png)\n![step4.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZWU4NDdkZGZjOWNmY2M2LnBuZw?x-oss-process=image/format,png)\n![step5.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGQ0YTllM2RkOGFmZGE4LnBuZw?x-oss-process=image/format,png)\n\n添加eureka依赖\n```\n <dependency>\n       <groupId>org.springframework.cloud</groupId>\n       <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n </dependency>\n```\n完整pom\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example.eureka</groupId>\n    <artifactId>eureka</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>eureka</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>com.gateway.test</groupId>\n        <artifactId>gatewayTest</artifactId>\n        <version>1.0-SNAPSHOT</version>\n        <relativePath>..</relativePath> <!-- lookup parent from repository -->\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n配置文件\n```\nspring:\n  application:\n    name: eureka\n\nserver:\n  port: 8761\neureka:\n  instance:\n    hostname: localhost\n  client:\n    fetch-registry: false\n    register-with-eureka: false\n    service-url:\n      defaultZone: http://localhost:8761/eureka/\n\n```\n启动类\n```\npackage com.example.eureka.eureka;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n\n@EnableEurekaServer\n@SpringBootApplication\npublic class EurekaApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaApplication.class, args);\n    }\n\n}\n\n```\n启动程序，访问http://localhost:8761/![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05NzY5NzhkMzZmOGM1NmJlLnBuZw?x-oss-process=image/format,png)\n现在还没有服务进行注册\n### 3.producer\n新建producer的module，同创建rureka，不同处如下图，其他都一样。\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZjY1YTg2Y2ZmZTM3NTI4LnBuZw?x-oss-process=image/format,png)\n\n完整pom\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example.producer</groupId>\n    <artifactId>producer</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>producer</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>com.gateway.test</groupId>\n        <artifactId>gatewayTest</artifactId>\n        <version>1.0-SNAPSHOT</version>\n        <relativePath>..</relativePath> <!-- lookup parent from repository -->\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n配置文件\n```\nspring:\n  application:\n    name: producer\nserver:\n  port: 8081\n\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka/\n```\n启动类\n```\npackage com.example.producer.producer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n\n@EnableEurekaClient\n@SpringBootApplication\npublic class ProducerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProducerApplication.class, args);\n    }\n\n}\n\n```\n新建2个类控制器\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjk5MjM2Y2Y5MzQyOTMwLnBuZw?x-oss-process=image/format,png)\n`HelloController`\n```\n@RestController\n@RequestMapping(\"/hello\")\npublic class HelloController {\n\n    @RequestMapping(\"say\")\n    public String say() {\n        return \"Hello Every Buddy\";\n    }\n}\n```\n`GoodByeController`\n```\n@RestController\n@RequestMapping(\"/goodbye\")\npublic class GoodByeController {\n\n    @RequestMapping(\"say\")\n    public String say() {\n        return \"Bye Bye\";\n    }\n}\n```\n\n启动程序，访问http://localhost:8761/\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02NzU2N2M5NTNiM2VkMDIyLnBuZw?x-oss-process=image/format,png)\n\n### 4.gateway\n创建过程同eureka\n完整pom\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example.gateway</groupId>\n    <artifactId>gateway</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>gateway</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>com.gateway.test</groupId>\n        <artifactId>gatewayTest</artifactId>\n        <version>1.0-SNAPSHOT</version>\n        <relativePath>..</relativePath> <!-- lookup parent from repository -->\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-gateway</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n配置文件\n```\ntest:\n  uri: lb://producer\n\nspring:\n  application:\n    name: gateway\n#  cloud:\n#    gateway:\n#      routes:\n#        - id: route_producer_hello\n#          uri: ${test.uri} # uri以lb://开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称\n#          predicates:\n#            - Path=/api-hello/**\n#          filters:\n#            - StripPrefix=1 # 表示在转发时去掉api\n#\n#        - id: route_producer_goodbye\n#          uri: ${test.uri}\n#          predicates:\n#            - Path=/api-goodbye/**\n#          filters:\n#            - StripPrefix=1\n#            - name: Hystrix\n#              args:\n#                name: myfallbackcmd\n#                fallbackUri: forward:/user/fallback\n\n\nserver:\n  port: 8080\n\nlogging:\n  level:\n    org.springframework.cloud.gateway: TRACE\n    org.springframework.http.server.reactive: DEBUG\n    org.springframework.web.reactive: DEBUG\n    reactor.ipc.netty: DEBUG\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka/\n    enabled: true # 是否启用注册服务 默认为true, false是不启用\n  instance:\n    prefer-ip-address: true\n\n```\n启动类\n```\npackage com.example.gateway.gateway;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\npublic class GatewayApplication {\n\n    @Value(\"${test.uri}\")\n    private String uri;\n\n    @Bean\n    public RouteLocator routeLocator(RouteLocatorBuilder builder){\n        return builder.routes()\n                .route(r ->r.path(\"/hello/**\").uri(uri))\n                .route(r ->r.path(\"/goodbye/**\").uri(uri)).build();\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n\n```\n启动程序，访问http://localhost:8761/\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xODVjYTViMDA1MDI4YmU5LnBuZw?x-oss-process=image/format,png)\n### 5.测试\n服务都已经注册到reureka,我们定义了hello和goodbye开头的请求都会转发到`lb://producer`服务，我们定义gateway的端口是8080，producer的端口是8081\n`直接请求producer服务`\nhttp://localhost:8081/hello/say\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04MzJmN2YxMGQ2MTZmN2U1LnBuZw?x-oss-process=image/format,png)\nhttp://localhost:8081/goodbye/say\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYTcyNTA0MzBmODU1MzY0LnBuZw?x-oss-process=image/format,png)\n\n`通过网关请求`\nhttp://localhost:8080/hello/say\n![hello.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYzI3OTZlNWZjZDM0ZTFmLnBuZw?x-oss-process=image/format,png)\nhttp://localhost:8080/goodbye/say\n![goodbye.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGJhN2QwYTBjM2M2MGVhLnBuZw?x-oss-process=image/format,png)\n\n## 网关本身的负载均衡\n\n那所有微服务就只有一个网关，万一并发量上去了，网关承受不住怎么办？\nSpring Cloud Gateway底层是Netty的，它本身就能承受比较大的并发。如果还是承受不了并发量，那可以注册多个Gateway实例，然后在前面弄一个Nginx或者F5等负载均衡器。大概图是这样：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjRlNTZkYjE2MzU4MjBkLnBuZw?x-oss-process=image/format,png)\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/微服务网关-Spring-Cloud-Gateway.md","raw":"title: 微服务网关 Spring Cloud Gateway\ntags:\n  - 微服务\ncategories:\n  - Java\ndate: 2020-01-01 11:09:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMjE2MjFhMjZlNjVhOGQ5LmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n## 什么是网关\n假设你现在要做一个电商应用，前端是移动端的APP，后端是各种微服务。那你可能某个页面需要调用多个服务的数据来展示。如果没有网关，你的系统看起来就是这个样子的：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01YTQ4NGE3ZTU4Y2M4ODk3LnBuZw?x-oss-process=image/format,png)\n\n而如果加上了网关，你的系统就会变成这个样子：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02MzQxNWM5YzY0YzViYWVmLnBuZw?x-oss-process=image/format,png)\n#Spring Cloud Gateway\nSpring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。\n\nSpring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Netflix Zuul，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。\n### 相关概念\n* Route（路由）：这是网关的基本构建块。它由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。\n* Predicate（断言）：这是一个 Java 8 的 Predicate。输入类型是一个 ServerWebExchange。我们可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。\n* Filter（过滤器）：这是org.springframework.cloud.gateway.filter.GatewayFilter的实例，我们可以使用它修改请求和响应。\n### 工作流程\n![gateway.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNTlmNTA3MTU0NDBkNjdhLnBuZw?x-oss-process=image/format,png)\n\n（PS：看到这张图是不是很熟悉，没错，很像SpringMVC的请求处理过程）\n\n* 请求发送到网关，DispatcherHandler是HTTP请求的中央分发器，接管请求并将请求匹配到相应的 HandlerMapping。\n\n* 请求与处理器之间有一个映射关系，网关将会对请求进行路由，handler 此处会匹配到 RoutePredicateHandlerMapping，匹配请求对应的 Route。\n\n* 随后到达网关的 web 处理器，该 WebHandler 代理了一系列网关过滤器和全局过滤器的实例，如对请求或者响应的 Header 处理（增加或者移除某个 Header）。\n\n* 最后，转发到具体的代理服务。\n\n简而言之：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hMzVmNzhiZTMzNjJhN2EwLnBuZw?x-oss-process=image/format,png)\n客户端向 Spring Cloud Gateway 发出请求。如果 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。 过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。\n## 快速开始\n### 1.新建一个项目gatewayTest\n在项目中添加3个module`eureka,producer,gateway`\n项目结构\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWY0NWYzNWNhMjg2MTc0LnBuZw?x-oss-process=image/format,png)\n### 2.rureka\n新建module\n\n![step1.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YzI0YjFlZWYwMjg3ZDEwLnBuZw?x-oss-process=image/format,png)\n![step2.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzMwMjIwY2ZhMGM2NjUzLnBuZw?x-oss-process=image/format,png)\n![step3.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iYjc4NmVmZjgxMGIwY2NjLnBuZw?x-oss-process=image/format,png)\n![step4.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZWU4NDdkZGZjOWNmY2M2LnBuZw?x-oss-process=image/format,png)\n![step5.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGQ0YTllM2RkOGFmZGE4LnBuZw?x-oss-process=image/format,png)\n\n添加eureka依赖\n```\n <dependency>\n       <groupId>org.springframework.cloud</groupId>\n       <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n </dependency>\n```\n完整pom\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example.eureka</groupId>\n    <artifactId>eureka</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>eureka</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>com.gateway.test</groupId>\n        <artifactId>gatewayTest</artifactId>\n        <version>1.0-SNAPSHOT</version>\n        <relativePath>..</relativePath> <!-- lookup parent from repository -->\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n配置文件\n```\nspring:\n  application:\n    name: eureka\n\nserver:\n  port: 8761\neureka:\n  instance:\n    hostname: localhost\n  client:\n    fetch-registry: false\n    register-with-eureka: false\n    service-url:\n      defaultZone: http://localhost:8761/eureka/\n\n```\n启动类\n```\npackage com.example.eureka.eureka;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n\n@EnableEurekaServer\n@SpringBootApplication\npublic class EurekaApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaApplication.class, args);\n    }\n\n}\n\n```\n启动程序，访问http://localhost:8761/![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05NzY5NzhkMzZmOGM1NmJlLnBuZw?x-oss-process=image/format,png)\n现在还没有服务进行注册\n### 3.producer\n新建producer的module，同创建rureka，不同处如下图，其他都一样。\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZjY1YTg2Y2ZmZTM3NTI4LnBuZw?x-oss-process=image/format,png)\n\n完整pom\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example.producer</groupId>\n    <artifactId>producer</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>producer</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>com.gateway.test</groupId>\n        <artifactId>gatewayTest</artifactId>\n        <version>1.0-SNAPSHOT</version>\n        <relativePath>..</relativePath> <!-- lookup parent from repository -->\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n配置文件\n```\nspring:\n  application:\n    name: producer\nserver:\n  port: 8081\n\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka/\n```\n启动类\n```\npackage com.example.producer.producer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n\n@EnableEurekaClient\n@SpringBootApplication\npublic class ProducerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProducerApplication.class, args);\n    }\n\n}\n\n```\n新建2个类控制器\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjk5MjM2Y2Y5MzQyOTMwLnBuZw?x-oss-process=image/format,png)\n`HelloController`\n```\n@RestController\n@RequestMapping(\"/hello\")\npublic class HelloController {\n\n    @RequestMapping(\"say\")\n    public String say() {\n        return \"Hello Every Buddy\";\n    }\n}\n```\n`GoodByeController`\n```\n@RestController\n@RequestMapping(\"/goodbye\")\npublic class GoodByeController {\n\n    @RequestMapping(\"say\")\n    public String say() {\n        return \"Bye Bye\";\n    }\n}\n```\n\n启动程序，访问http://localhost:8761/\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02NzU2N2M5NTNiM2VkMDIyLnBuZw?x-oss-process=image/format,png)\n\n### 4.gateway\n创建过程同eureka\n完整pom\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example.gateway</groupId>\n    <artifactId>gateway</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>gateway</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>com.gateway.test</groupId>\n        <artifactId>gatewayTest</artifactId>\n        <version>1.0-SNAPSHOT</version>\n        <relativePath>..</relativePath> <!-- lookup parent from repository -->\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-gateway</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n配置文件\n```\ntest:\n  uri: lb://producer\n\nspring:\n  application:\n    name: gateway\n#  cloud:\n#    gateway:\n#      routes:\n#        - id: route_producer_hello\n#          uri: ${test.uri} # uri以lb://开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称\n#          predicates:\n#            - Path=/api-hello/**\n#          filters:\n#            - StripPrefix=1 # 表示在转发时去掉api\n#\n#        - id: route_producer_goodbye\n#          uri: ${test.uri}\n#          predicates:\n#            - Path=/api-goodbye/**\n#          filters:\n#            - StripPrefix=1\n#            - name: Hystrix\n#              args:\n#                name: myfallbackcmd\n#                fallbackUri: forward:/user/fallback\n\n\nserver:\n  port: 8080\n\nlogging:\n  level:\n    org.springframework.cloud.gateway: TRACE\n    org.springframework.http.server.reactive: DEBUG\n    org.springframework.web.reactive: DEBUG\n    reactor.ipc.netty: DEBUG\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka/\n    enabled: true # 是否启用注册服务 默认为true, false是不启用\n  instance:\n    prefer-ip-address: true\n\n```\n启动类\n```\npackage com.example.gateway.gateway;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\npublic class GatewayApplication {\n\n    @Value(\"${test.uri}\")\n    private String uri;\n\n    @Bean\n    public RouteLocator routeLocator(RouteLocatorBuilder builder){\n        return builder.routes()\n                .route(r ->r.path(\"/hello/**\").uri(uri))\n                .route(r ->r.path(\"/goodbye/**\").uri(uri)).build();\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n\n```\n启动程序，访问http://localhost:8761/\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xODVjYTViMDA1MDI4YmU5LnBuZw?x-oss-process=image/format,png)\n### 5.测试\n服务都已经注册到reureka,我们定义了hello和goodbye开头的请求都会转发到`lb://producer`服务，我们定义gateway的端口是8080，producer的端口是8081\n`直接请求producer服务`\nhttp://localhost:8081/hello/say\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04MzJmN2YxMGQ2MTZmN2U1LnBuZw?x-oss-process=image/format,png)\nhttp://localhost:8081/goodbye/say\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYTcyNTA0MzBmODU1MzY0LnBuZw?x-oss-process=image/format,png)\n\n`通过网关请求`\nhttp://localhost:8080/hello/say\n![hello.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYzI3OTZlNWZjZDM0ZTFmLnBuZw?x-oss-process=image/format,png)\nhttp://localhost:8080/goodbye/say\n![goodbye.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGJhN2QwYTBjM2M2MGVhLnBuZw?x-oss-process=image/format,png)\n\n## 网关本身的负载均衡\n\n那所有微服务就只有一个网关，万一并发量上去了，网关承受不住怎么办？\nSpring Cloud Gateway底层是Netty的，它本身就能承受比较大的并发。如果还是承受不了并发量，那可以注册多个Gateway实例，然后在前面弄一个Nginx或者F5等负载均衡器。大概图是这样：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjRlNTZkYjE2MzU4MjBkLnBuZw?x-oss-process=image/format,png)\n\n\n\n\n\n\n\n\n\n\n\n","slug":"微服务网关-Spring-Cloud-Gateway","published":1,"updated":"2020-01-01T05:34:50.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwlf002jsops8m6p2qx2","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMjE2MjFhMjZlNjVhOGQ5LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"什么是网关\"><a href=\"#什么是网关\" class=\"headerlink\" title=\"什么是网关\"></a>什么是网关</h2><p>假设你现在要做一个电商应用，前端是移动端的APP，后端是各种微服务。那你可能某个页面需要调用多个服务的数据来展示。如果没有网关，你的系统看起来就是这个样子的：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01YTQ4NGE3ZTU4Y2M4ODk3LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<p>而如果加上了网关，你的系统就会变成这个样子：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02MzQxNWM5YzY0YzViYWVmLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>#Spring Cloud Gateway<br>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>\n<p>Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Netflix Zuul，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p>\n<h3 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h3><ul>\n<li>Route（路由）：这是网关的基本构建块。它由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。</li>\n<li>Predicate（断言）：这是一个 Java 8 的 Predicate。输入类型是一个 ServerWebExchange。我们可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。</li>\n<li>Filter（过滤器）：这是org.springframework.cloud.gateway.filter.GatewayFilter的实例，我们可以使用它修改请求和响应。<h3 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNTlmNTA3MTU0NDBkNjdhLnBuZw?x-oss-process=image/format,png\" alt=\"gateway.png\"></li>\n</ul>\n<p>（PS：看到这张图是不是很熟悉，没错，很像SpringMVC的请求处理过程）</p>\n<ul>\n<li><p>请求发送到网关，DispatcherHandler是HTTP请求的中央分发器，接管请求并将请求匹配到相应的 HandlerMapping。</p>\n</li>\n<li><p>请求与处理器之间有一个映射关系，网关将会对请求进行路由，handler 此处会匹配到 RoutePredicateHandlerMapping，匹配请求对应的 Route。</p>\n</li>\n<li><p>随后到达网关的 web 处理器，该 WebHandler 代理了一系列网关过滤器和全局过滤器的实例，如对请求或者响应的 Header 处理（增加或者移除某个 Header）。</p>\n</li>\n<li><p>最后，转发到具体的代理服务。</p>\n</li>\n</ul>\n<p>简而言之：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hMzVmNzhiZTMzNjJhN2EwLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>客户端向 Spring Cloud Gateway 发出请求。如果 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。 过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"1-新建一个项目gatewayTest\"><a href=\"#1-新建一个项目gatewayTest\" class=\"headerlink\" title=\"1.新建一个项目gatewayTest\"></a>1.新建一个项目gatewayTest</h3><p>在项目中添加3个module<code>eureka,producer,gateway</code><br>项目结构<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWY0NWYzNWNhMjg2MTc0LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h3 id=\"2-rureka\"><a href=\"#2-rureka\" class=\"headerlink\" title=\"2.rureka\"></a>2.rureka</h3><p>新建module</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YzI0YjFlZWYwMjg3ZDEwLnBuZw?x-oss-process=image/format,png\" alt=\"step1.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzMwMjIwY2ZhMGM2NjUzLnBuZw?x-oss-process=image/format,png\" alt=\"step2.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iYjc4NmVmZjgxMGIwY2NjLnBuZw?x-oss-process=image/format,png\" alt=\"step3.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZWU4NDdkZGZjOWNmY2M2LnBuZw?x-oss-process=image/format,png\" alt=\"step4.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGQ0YTllM2RkOGFmZGE4LnBuZw?x-oss-process=image/format,png\" alt=\"step5.png\"></p>\n<p>添加eureka依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>完整pom</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.example.eureka&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;eureka&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\">    &lt;name&gt;eureka&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>\n<p>配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: eureka</span><br><span class=\"line\"></span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8761</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    hostname: localhost</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    fetch-registry: false</span><br><span class=\"line\">    register-with-eureka: false</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure>\n<p>启动类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.eureka.eureka;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class=\"line\"></span><br><span class=\"line\">@EnableEurekaServer</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class EurekaApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动程序，访问<a href=\"http://localhost:8761/![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05NzY5NzhkMzZmOGM1NmJlLnBuZw?x-oss-process=image/format,png)\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05NzY5NzhkMzZmOGM1NmJlLnBuZw?x-oss-process=image/format,png)</a><br>现在还没有服务进行注册</p>\n<h3 id=\"3-producer\"><a href=\"#3-producer\" class=\"headerlink\" title=\"3.producer\"></a>3.producer</h3><p>新建producer的module，同创建rureka，不同处如下图，其他都一样。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZjY1YTg2Y2ZmZTM3NTI4LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<p>完整pom</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.example.producer&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;producer&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;name&gt;producer&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>\n<p>配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: producer</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8081</span><br><span class=\"line\"></span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure>\n<p>启动类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.producer.producer;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class=\"line\"></span><br><span class=\"line\">@EnableEurekaClient</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ProducerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ProducerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建2个类控制器<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjk5MjM2Y2Y5MzQyOTMwLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br><code>HelloController</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;say&quot;)</span><br><span class=\"line\">    public String say() &#123;</span><br><span class=\"line\">        return &quot;Hello Every Buddy&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>GoodByeController</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;&#x2F;goodbye&quot;)</span><br><span class=\"line\">public class GoodByeController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;say&quot;)</span><br><span class=\"line\">    public String say() &#123;</span><br><span class=\"line\">        return &quot;Bye Bye&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动程序，访问<a href=\"http://localhost:8761/\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02NzU2N2M5NTNiM2VkMDIyLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h3 id=\"4-gateway\"><a href=\"#4-gateway\" class=\"headerlink\" title=\"4.gateway\"></a>4.gateway</h3><p>创建过程同eureka<br>完整pom</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.example.gateway&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;gateway&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;name&gt;gateway&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>\n<p>配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test:</span><br><span class=\"line\">  uri: lb:&#x2F;&#x2F;producer</span><br><span class=\"line\"></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: gateway</span><br><span class=\"line\">#  cloud:</span><br><span class=\"line\">#    gateway:</span><br><span class=\"line\">#      routes:</span><br><span class=\"line\">#        - id: route_producer_hello</span><br><span class=\"line\">#          uri: $&#123;test.uri&#125; # uri以lb:&#x2F;&#x2F;开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称</span><br><span class=\"line\">#          predicates:</span><br><span class=\"line\">#            - Path&#x3D;&#x2F;api-hello&#x2F;**</span><br><span class=\"line\">#          filters:</span><br><span class=\"line\">#            - StripPrefix&#x3D;1 # 表示在转发时去掉api</span><br><span class=\"line\">#</span><br><span class=\"line\">#        - id: route_producer_goodbye</span><br><span class=\"line\">#          uri: $&#123;test.uri&#125;</span><br><span class=\"line\">#          predicates:</span><br><span class=\"line\">#            - Path&#x3D;&#x2F;api-goodbye&#x2F;**</span><br><span class=\"line\">#          filters:</span><br><span class=\"line\">#            - StripPrefix&#x3D;1</span><br><span class=\"line\">#            - name: Hystrix</span><br><span class=\"line\">#              args:</span><br><span class=\"line\">#                name: myfallbackcmd</span><br><span class=\"line\">#                fallbackUri: forward:&#x2F;user&#x2F;fallback</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8080</span><br><span class=\"line\"></span><br><span class=\"line\">logging:</span><br><span class=\"line\">  level:</span><br><span class=\"line\">    org.springframework.cloud.gateway: TRACE</span><br><span class=\"line\">    org.springframework.http.server.reactive: DEBUG</span><br><span class=\"line\">    org.springframework.web.reactive: DEBUG</span><br><span class=\"line\">    reactor.ipc.netty: DEBUG</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class=\"line\">    enabled: true # 是否启用注册服务 默认为true, false是不启用</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    prefer-ip-address: true</span><br></pre></td></tr></table></figure>\n<p>启动类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.gateway.gateway;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class=\"line\">import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class GatewayApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Value(&quot;$&#123;test.uri&#125;&quot;)</span><br><span class=\"line\">    private String uri;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RouteLocator routeLocator(RouteLocatorBuilder builder)&#123;</span><br><span class=\"line\">        return builder.routes()</span><br><span class=\"line\">                .route(r -&gt;r.path(&quot;&#x2F;hello&#x2F;**&quot;).uri(uri))</span><br><span class=\"line\">                .route(r -&gt;r.path(&quot;&#x2F;goodbye&#x2F;**&quot;).uri(uri)).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动程序，访问<a href=\"http://localhost:8761/\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xODVjYTViMDA1MDI4YmU5LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h3 id=\"5-测试\"><a href=\"#5-测试\" class=\"headerlink\" title=\"5.测试\"></a>5.测试</h3><p>服务都已经注册到reureka,我们定义了hello和goodbye开头的请求都会转发到<code>lb://producer</code>服务，我们定义gateway的端口是8080，producer的端口是8081<br><code>直接请求producer服务</code><br><a href=\"http://localhost:8081/hello/say\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/hello/say</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04MzJmN2YxMGQ2MTZmN2U1LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br><a href=\"http://localhost:8081/goodbye/say\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/goodbye/say</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYTcyNTA0MzBmODU1MzY0LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<p><code>通过网关请求</code><br><a href=\"http://localhost:8080/hello/say\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello/say</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYzI3OTZlNWZjZDM0ZTFmLnBuZw?x-oss-process=image/format,png\" alt=\"hello.png\"><br><a href=\"http://localhost:8080/goodbye/say\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/goodbye/say</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGJhN2QwYTBjM2M2MGVhLnBuZw?x-oss-process=image/format,png\" alt=\"goodbye.png\"></p>\n<h2 id=\"网关本身的负载均衡\"><a href=\"#网关本身的负载均衡\" class=\"headerlink\" title=\"网关本身的负载均衡\"></a>网关本身的负载均衡</h2><p>那所有微服务就只有一个网关，万一并发量上去了，网关承受不住怎么办？<br>Spring Cloud Gateway底层是Netty的，它本身就能承受比较大的并发。如果还是承受不了并发量，那可以注册多个Gateway实例，然后在前面弄一个Nginx或者F5等负载均衡器。大概图是这样：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjRlNTZkYjE2MzU4MjBkLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMjE2MjFhMjZlNjVhOGQ5LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"什么是网关\"><a href=\"#什么是网关\" class=\"headerlink\" title=\"什么是网关\"></a>什么是网关</h2><p>假设你现在要做一个电商应用，前端是移动端的APP，后端是各种微服务。那你可能某个页面需要调用多个服务的数据来展示。如果没有网关，你的系统看起来就是这个样子的：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01YTQ4NGE3ZTU4Y2M4ODk3LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<p>而如果加上了网关，你的系统就会变成这个样子：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02MzQxNWM5YzY0YzViYWVmLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>#Spring Cloud Gateway<br>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>\n<p>Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Netflix Zuul，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p>\n<h3 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h3><ul>\n<li>Route（路由）：这是网关的基本构建块。它由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。</li>\n<li>Predicate（断言）：这是一个 Java 8 的 Predicate。输入类型是一个 ServerWebExchange。我们可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。</li>\n<li>Filter（过滤器）：这是org.springframework.cloud.gateway.filter.GatewayFilter的实例，我们可以使用它修改请求和响应。<h3 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNTlmNTA3MTU0NDBkNjdhLnBuZw?x-oss-process=image/format,png\" alt=\"gateway.png\"></li>\n</ul>\n<p>（PS：看到这张图是不是很熟悉，没错，很像SpringMVC的请求处理过程）</p>\n<ul>\n<li><p>请求发送到网关，DispatcherHandler是HTTP请求的中央分发器，接管请求并将请求匹配到相应的 HandlerMapping。</p>\n</li>\n<li><p>请求与处理器之间有一个映射关系，网关将会对请求进行路由，handler 此处会匹配到 RoutePredicateHandlerMapping，匹配请求对应的 Route。</p>\n</li>\n<li><p>随后到达网关的 web 处理器，该 WebHandler 代理了一系列网关过滤器和全局过滤器的实例，如对请求或者响应的 Header 处理（增加或者移除某个 Header）。</p>\n</li>\n<li><p>最后，转发到具体的代理服务。</p>\n</li>\n</ul>\n<p>简而言之：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hMzVmNzhiZTMzNjJhN2EwLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>客户端向 Spring Cloud Gateway 发出请求。如果 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。 过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"1-新建一个项目gatewayTest\"><a href=\"#1-新建一个项目gatewayTest\" class=\"headerlink\" title=\"1.新建一个项目gatewayTest\"></a>1.新建一个项目gatewayTest</h3><p>在项目中添加3个module<code>eureka,producer,gateway</code><br>项目结构<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0zMWY0NWYzNWNhMjg2MTc0LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h3 id=\"2-rureka\"><a href=\"#2-rureka\" class=\"headerlink\" title=\"2.rureka\"></a>2.rureka</h3><p>新建module</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS00YzI0YjFlZWYwMjg3ZDEwLnBuZw?x-oss-process=image/format,png\" alt=\"step1.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mNzMwMjIwY2ZhMGM2NjUzLnBuZw?x-oss-process=image/format,png\" alt=\"step2.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iYjc4NmVmZjgxMGIwY2NjLnBuZw?x-oss-process=image/format,png\" alt=\"step3.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZWU4NDdkZGZjOWNmY2M2LnBuZw?x-oss-process=image/format,png\" alt=\"step4.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGQ0YTllM2RkOGFmZGE4LnBuZw?x-oss-process=image/format,png\" alt=\"step5.png\"></p>\n<p>添加eureka依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>完整pom</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.example.eureka&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;eureka&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\">    &lt;name&gt;eureka&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>\n<p>配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: eureka</span><br><span class=\"line\"></span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8761</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    hostname: localhost</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    fetch-registry: false</span><br><span class=\"line\">    register-with-eureka: false</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure>\n<p>启动类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.eureka.eureka;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class=\"line\"></span><br><span class=\"line\">@EnableEurekaServer</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class EurekaApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动程序，访问<a href=\"http://localhost:8761/![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05NzY5NzhkMzZmOGM1NmJlLnBuZw?x-oss-process=image/format,png)\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05NzY5NzhkMzZmOGM1NmJlLnBuZw?x-oss-process=image/format,png)</a><br>现在还没有服务进行注册</p>\n<h3 id=\"3-producer\"><a href=\"#3-producer\" class=\"headerlink\" title=\"3.producer\"></a>3.producer</h3><p>新建producer的module，同创建rureka，不同处如下图，其他都一样。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01ZjY1YTg2Y2ZmZTM3NTI4LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<p>完整pom</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.example.producer&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;producer&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;name&gt;producer&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>\n<p>配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: producer</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8081</span><br><span class=\"line\"></span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure>\n<p>启动类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.producer.producer;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class=\"line\"></span><br><span class=\"line\">@EnableEurekaClient</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ProducerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ProducerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建2个类控制器<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMjk5MjM2Y2Y5MzQyOTMwLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br><code>HelloController</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;say&quot;)</span><br><span class=\"line\">    public String say() &#123;</span><br><span class=\"line\">        return &quot;Hello Every Buddy&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>GoodByeController</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;&#x2F;goodbye&quot;)</span><br><span class=\"line\">public class GoodByeController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;say&quot;)</span><br><span class=\"line\">    public String say() &#123;</span><br><span class=\"line\">        return &quot;Bye Bye&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动程序，访问<a href=\"http://localhost:8761/\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02NzU2N2M5NTNiM2VkMDIyLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h3 id=\"4-gateway\"><a href=\"#4-gateway\" class=\"headerlink\" title=\"4.gateway\"></a>4.gateway</h3><p>创建过程同eureka<br>完整pom</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.example.gateway&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;gateway&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;name&gt;gateway&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.gateway.test&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;gatewayTest&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&gt;..&lt;&#x2F;relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>\n<p>配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test:</span><br><span class=\"line\">  uri: lb:&#x2F;&#x2F;producer</span><br><span class=\"line\"></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: gateway</span><br><span class=\"line\">#  cloud:</span><br><span class=\"line\">#    gateway:</span><br><span class=\"line\">#      routes:</span><br><span class=\"line\">#        - id: route_producer_hello</span><br><span class=\"line\">#          uri: $&#123;test.uri&#125; # uri以lb:&#x2F;&#x2F;开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称</span><br><span class=\"line\">#          predicates:</span><br><span class=\"line\">#            - Path&#x3D;&#x2F;api-hello&#x2F;**</span><br><span class=\"line\">#          filters:</span><br><span class=\"line\">#            - StripPrefix&#x3D;1 # 表示在转发时去掉api</span><br><span class=\"line\">#</span><br><span class=\"line\">#        - id: route_producer_goodbye</span><br><span class=\"line\">#          uri: $&#123;test.uri&#125;</span><br><span class=\"line\">#          predicates:</span><br><span class=\"line\">#            - Path&#x3D;&#x2F;api-goodbye&#x2F;**</span><br><span class=\"line\">#          filters:</span><br><span class=\"line\">#            - StripPrefix&#x3D;1</span><br><span class=\"line\">#            - name: Hystrix</span><br><span class=\"line\">#              args:</span><br><span class=\"line\">#                name: myfallbackcmd</span><br><span class=\"line\">#                fallbackUri: forward:&#x2F;user&#x2F;fallback</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8080</span><br><span class=\"line\"></span><br><span class=\"line\">logging:</span><br><span class=\"line\">  level:</span><br><span class=\"line\">    org.springframework.cloud.gateway: TRACE</span><br><span class=\"line\">    org.springframework.http.server.reactive: DEBUG</span><br><span class=\"line\">    org.springframework.web.reactive: DEBUG</span><br><span class=\"line\">    reactor.ipc.netty: DEBUG</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class=\"line\">    enabled: true # 是否启用注册服务 默认为true, false是不启用</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    prefer-ip-address: true</span><br></pre></td></tr></table></figure>\n<p>启动类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.gateway.gateway;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class=\"line\">import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class GatewayApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Value(&quot;$&#123;test.uri&#125;&quot;)</span><br><span class=\"line\">    private String uri;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RouteLocator routeLocator(RouteLocatorBuilder builder)&#123;</span><br><span class=\"line\">        return builder.routes()</span><br><span class=\"line\">                .route(r -&gt;r.path(&quot;&#x2F;hello&#x2F;**&quot;).uri(uri))</span><br><span class=\"line\">                .route(r -&gt;r.path(&quot;&#x2F;goodbye&#x2F;**&quot;).uri(uri)).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动程序，访问<a href=\"http://localhost:8761/\" target=\"_blank\" rel=\"noopener\">http://localhost:8761/</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xODVjYTViMDA1MDI4YmU5LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h3 id=\"5-测试\"><a href=\"#5-测试\" class=\"headerlink\" title=\"5.测试\"></a>5.测试</h3><p>服务都已经注册到reureka,我们定义了hello和goodbye开头的请求都会转发到<code>lb://producer</code>服务，我们定义gateway的端口是8080，producer的端口是8081<br><code>直接请求producer服务</code><br><a href=\"http://localhost:8081/hello/say\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/hello/say</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS04MzJmN2YxMGQ2MTZmN2U1LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br><a href=\"http://localhost:8081/goodbye/say\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/goodbye/say</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYTcyNTA0MzBmODU1MzY0LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<p><code>通过网关请求</code><br><a href=\"http://localhost:8080/hello/say\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello/say</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wYzI3OTZlNWZjZDM0ZTFmLnBuZw?x-oss-process=image/format,png\" alt=\"hello.png\"><br><a href=\"http://localhost:8080/goodbye/say\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/goodbye/say</a><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xZGJhN2QwYTBjM2M2MGVhLnBuZw?x-oss-process=image/format,png\" alt=\"goodbye.png\"></p>\n<h2 id=\"网关本身的负载均衡\"><a href=\"#网关本身的负载均衡\" class=\"headerlink\" title=\"网关本身的负载均衡\"></a>网关本身的负载均衡</h2><p>那所有微服务就只有一个网关，万一并发量上去了，网关承受不住怎么办？<br>Spring Cloud Gateway底层是Netty的，它本身就能承受比较大的并发。如果还是承受不了并发量，那可以注册多个Gateway实例，然后在前面弄一个Nginx或者F5等负载均衡器。大概图是这样：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01NjRlNTZkYjE2MzU4MjBkLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMjE2MjFhMjZlNjVhOGQ5LmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 13:34:50 GMT+0800 (GMT+08:00)","title":"微服务网关 Spring Cloud Gateway","path":"2020/01/01/微服务网关-Spring-Cloud-Gateway/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMjE2MjFhMjZlNjVhOGQ5LmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMjE2MjFhMjZlNjVhOGQ5LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2020-01-01T03:09:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["微服务"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"自己实现一个简单版的HashMap","date":"2019-07-26T03:54:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOWZmN2ZhMDZkMDQ5YzNjLmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n## HashMap简介\n\nHashMap 是一个散列表，它存储的内容是键值对(key-value)映射。\nHashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。\nHashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。\n\n\nHashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。容量 是哈希表中桶的数量，初始容量 只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。\n通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。\n\n## 简单版，只实现put和get\n```\npublic class MyHashMap<K, V> {\n    private static int default_length = 16;\n    private MyEntry<K, V>[] entries;\n\n    public MyHashMap() {\n        super();\n        entries = new MyEntry[default_length];\n    }\n\n    public V put(K key, V value) {\n        int index = key.hashCode() % default_length;// hascode值除map大小取余\n        MyEntry<K, V> prevoius = entries[index];\n        for (MyEntry<K, V> entry = entries[index]; entry != null; entry = entry.next) {\n            if (entry.getKey().equals(key)) {\n                V oldValue = (V) entry.getValue();\n                entry.setValue(value);\n                return oldValue;\n            }\n        }\n        MyEntry<K, V> entry = new MyEntry<>(key, value);\n        entry.next = prevoius;\n        entries[index] = entry;\n        return null;\n    }\n\n    public K get(K key){\n        int index= key.hashCode()%default_length;\n        for (MyEntry<K,V> entry= entries[index];entry!=null;entry=entry.next){\n            if(entry.getKey().equals(key)){\n                return (K)entry.getValue();\n            }\n        }\n        return null;\n    }\n\n    private final class MyEntry<K, V> {\n        private K key;\n        private V value;\n        private MyEntry next;\n\n        public MyEntry() {\n            super();\n        }\n\n        public MyEntry(K key, V value) {\n            super();\n            this.key = key;\n            this.value = value;\n        }\n\n        public MyEntry(K key, V value, MyEntry next) {\n            super();\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n\n        public K getKey() {\n            return key;\n        }\n\n        public void setKey(K key) {\n            this.key = key;\n        }\n\n        public V getValue() {\n            return value;\n        }\n\n        public void setValue(V value) {\n            this.value = value;\n        }\n\n        public MyEntry getNext() {\n            return next;\n        }\n\n        public void setNext(MyEntry next) {\n            this.next = next;\n        }\n    }\n}\n```\n\n## 复杂版\n```\npublic class MyHashMap {\n    //默认初始化大小 16\n    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n    //默认负载因子 0.75\n    private static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n    //临界值\n    private int threshold;\n\n    //元素个数\n    private int size;\n\n    //扩容次数\n    private int resize;\n\n    private MyEntry[] table;\n\n    public MyHashMap() {\n        table = new MyEntry[DEFAULT_INITIAL_CAPACITY];\n        threshold = (int) (DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);\n        size = 0;\n    }\n\n    private int index(Object key) {\n        //根据key的hashcode和entry长度取模计算key在entry中的位置\n        return key.hashCode() % table.length;\n    }\n\n    public void put(Object key, Object value) {\n        //key为null时需要特殊处理，为简化实现忽略null值\n        if (key == null) return;\n        int index = index(key);\n        //遍历index位置的entry，若找到重复key则更新对应entry的值，然后返回\n        MyEntry entry = table[index];\n        while (entry != null) {\n            if (entry.getKey().hashCode() == key.hashCode() && (entry.getKey() == key || entry.getKey().equals(key))) {\n                entry.setValue(value);\n                return;\n            }\n            entry = entry.getNext();\n        }\n        //若index位置没有entry或者未找到重复的key，则将新key添加到table的index位置\n        add(index, key, value);\n    }\n\n    private void add(int index, Object key, Object value) {\n        //将新的entry放到table的index位置第一个，若原来有值则以链表形式存放\n        MyEntry entry = new MyEntry(key, value, table[index]);\n        table[index] = entry;\n        //判断size是否达到临界值，若已达到则进行扩容，将table的capacicy翻倍\n        if (size++ >= threshold) {\n            resize(table.length * 2);\n        }\n    }\n\n    private void resize(int capacity) {\n        if (capacity <= table.length) return;\n\n        MyEntry[] newTable = new MyEntry[capacity];\n        //遍历原table，将每个entry都重新计算hash放入newTable中\n        for (int i = 0; i < table.length; i++) {\n            MyEntry old = table[i];\n            while (old!=null){\n                MyEntry next = old.getNext();\n                int index = index(old.getKey());\n                old.setNext(newTable[index]);\n                newTable[index] = old;\n                old=next;\n            }\n        }\n        //用newTable替table\n        table = newTable;\n        //修改临界值\n        threshold = (int) (table.length * DEFAULT_LOAD_FACTOR);\n        resize++;\n    }\n\n    public Object get(Object key){\n        //这里简化处理，忽略null值\n        if (key == null) return null;\n        MyEntry entry= getEntry(key);\n        return entry == null ? null : entry.getValue();\n    }\n\n    public MyEntry getEntry(Object key){\n        MyEntry entry =table[index(key)];\n        while (entry!=null){\n            if (entry.getKey().hashCode()==key.hashCode()&&(entry.getKey()==key||entry.getKey().equals(key))){\n                return entry;\n            }\n            entry = entry.getNext();\n        }\n        return entry;\n    }\n    public void remove(Object key) {\n        if (key == null) return;\n        int index = index(key);\n        MyEntry pre = null;\n        MyEntry entry = table[index];\n        while (entry != null) {\n            if (entry.getKey().hashCode() == key.hashCode() && (entry.getKey() == key || entry.getKey().equals(key))) {\n                if (pre == null) table[index] = entry.getNext();\n                else pre.setNext(entry.getNext());\n                //如果成功找到并删除，修改size\n                size--;\n                return;\n            }\n            pre = entry;\n            entry = entry.getNext();\n        }\n    }\n\n    public boolean containsKey(Object key) {\n        if (key == null) return false;\n        return getEntry(key) != null;\n    }\n\n    public int size() {\n        return this.size;\n    }\n\n    public void clear() {\n        for (int i = 0; i < table.length; i++) {\n            table[i] = null;\n        }\n        this.size = 0;\n    }\n\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(String.format(\"size:%s capacity:%s resize:%s\\n\\n\", size, table.length, resize));\n        for (MyEntry entry : table) {\n            while (entry != null) {\n                sb.append(entry.getKey() + \":\" + entry.getValue() + \"\\n\");\n                entry = entry.getNext();\n            }\n        }\n        return sb.toString();\n    }\n}\n\n    final class MyEntry {\n        private Object key;\n        private Object value;\n        private MyEntry next;\n\n        public MyEntry(Object key, Object value, MyEntry next) {\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n\n        public Object getKey() {\n            return key;\n        }\n\n        public void setKey(Object key) {\n            this.key = key;\n        }\n\n        public Object getValue() {\n            return value;\n        }\n\n        public void setValue(Object value) {\n            this.value = value;\n        }\n\n        public MyEntry getNext() {\n            return next;\n        }\n\n        public void setNext(MyEntry next) {\n            this.next = next;\n        }\n    }\n```","source":"_posts/自己实现一个简单版的HashMap.md","raw":"title: 自己实现一个简单版的HashMap\ntags:\n  - HashMap\ncategories:\n  - Java\ndate: 2019-07-26 11:54:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOWZmN2ZhMDZkMDQ5YzNjLmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n\n## HashMap简介\n\nHashMap 是一个散列表，它存储的内容是键值对(key-value)映射。\nHashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。\nHashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。\n\n\nHashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。容量 是哈希表中桶的数量，初始容量 只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。\n通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。\n\n## 简单版，只实现put和get\n```\npublic class MyHashMap<K, V> {\n    private static int default_length = 16;\n    private MyEntry<K, V>[] entries;\n\n    public MyHashMap() {\n        super();\n        entries = new MyEntry[default_length];\n    }\n\n    public V put(K key, V value) {\n        int index = key.hashCode() % default_length;// hascode值除map大小取余\n        MyEntry<K, V> prevoius = entries[index];\n        for (MyEntry<K, V> entry = entries[index]; entry != null; entry = entry.next) {\n            if (entry.getKey().equals(key)) {\n                V oldValue = (V) entry.getValue();\n                entry.setValue(value);\n                return oldValue;\n            }\n        }\n        MyEntry<K, V> entry = new MyEntry<>(key, value);\n        entry.next = prevoius;\n        entries[index] = entry;\n        return null;\n    }\n\n    public K get(K key){\n        int index= key.hashCode()%default_length;\n        for (MyEntry<K,V> entry= entries[index];entry!=null;entry=entry.next){\n            if(entry.getKey().equals(key)){\n                return (K)entry.getValue();\n            }\n        }\n        return null;\n    }\n\n    private final class MyEntry<K, V> {\n        private K key;\n        private V value;\n        private MyEntry next;\n\n        public MyEntry() {\n            super();\n        }\n\n        public MyEntry(K key, V value) {\n            super();\n            this.key = key;\n            this.value = value;\n        }\n\n        public MyEntry(K key, V value, MyEntry next) {\n            super();\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n\n        public K getKey() {\n            return key;\n        }\n\n        public void setKey(K key) {\n            this.key = key;\n        }\n\n        public V getValue() {\n            return value;\n        }\n\n        public void setValue(V value) {\n            this.value = value;\n        }\n\n        public MyEntry getNext() {\n            return next;\n        }\n\n        public void setNext(MyEntry next) {\n            this.next = next;\n        }\n    }\n}\n```\n\n## 复杂版\n```\npublic class MyHashMap {\n    //默认初始化大小 16\n    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n    //默认负载因子 0.75\n    private static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n    //临界值\n    private int threshold;\n\n    //元素个数\n    private int size;\n\n    //扩容次数\n    private int resize;\n\n    private MyEntry[] table;\n\n    public MyHashMap() {\n        table = new MyEntry[DEFAULT_INITIAL_CAPACITY];\n        threshold = (int) (DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);\n        size = 0;\n    }\n\n    private int index(Object key) {\n        //根据key的hashcode和entry长度取模计算key在entry中的位置\n        return key.hashCode() % table.length;\n    }\n\n    public void put(Object key, Object value) {\n        //key为null时需要特殊处理，为简化实现忽略null值\n        if (key == null) return;\n        int index = index(key);\n        //遍历index位置的entry，若找到重复key则更新对应entry的值，然后返回\n        MyEntry entry = table[index];\n        while (entry != null) {\n            if (entry.getKey().hashCode() == key.hashCode() && (entry.getKey() == key || entry.getKey().equals(key))) {\n                entry.setValue(value);\n                return;\n            }\n            entry = entry.getNext();\n        }\n        //若index位置没有entry或者未找到重复的key，则将新key添加到table的index位置\n        add(index, key, value);\n    }\n\n    private void add(int index, Object key, Object value) {\n        //将新的entry放到table的index位置第一个，若原来有值则以链表形式存放\n        MyEntry entry = new MyEntry(key, value, table[index]);\n        table[index] = entry;\n        //判断size是否达到临界值，若已达到则进行扩容，将table的capacicy翻倍\n        if (size++ >= threshold) {\n            resize(table.length * 2);\n        }\n    }\n\n    private void resize(int capacity) {\n        if (capacity <= table.length) return;\n\n        MyEntry[] newTable = new MyEntry[capacity];\n        //遍历原table，将每个entry都重新计算hash放入newTable中\n        for (int i = 0; i < table.length; i++) {\n            MyEntry old = table[i];\n            while (old!=null){\n                MyEntry next = old.getNext();\n                int index = index(old.getKey());\n                old.setNext(newTable[index]);\n                newTable[index] = old;\n                old=next;\n            }\n        }\n        //用newTable替table\n        table = newTable;\n        //修改临界值\n        threshold = (int) (table.length * DEFAULT_LOAD_FACTOR);\n        resize++;\n    }\n\n    public Object get(Object key){\n        //这里简化处理，忽略null值\n        if (key == null) return null;\n        MyEntry entry= getEntry(key);\n        return entry == null ? null : entry.getValue();\n    }\n\n    public MyEntry getEntry(Object key){\n        MyEntry entry =table[index(key)];\n        while (entry!=null){\n            if (entry.getKey().hashCode()==key.hashCode()&&(entry.getKey()==key||entry.getKey().equals(key))){\n                return entry;\n            }\n            entry = entry.getNext();\n        }\n        return entry;\n    }\n    public void remove(Object key) {\n        if (key == null) return;\n        int index = index(key);\n        MyEntry pre = null;\n        MyEntry entry = table[index];\n        while (entry != null) {\n            if (entry.getKey().hashCode() == key.hashCode() && (entry.getKey() == key || entry.getKey().equals(key))) {\n                if (pre == null) table[index] = entry.getNext();\n                else pre.setNext(entry.getNext());\n                //如果成功找到并删除，修改size\n                size--;\n                return;\n            }\n            pre = entry;\n            entry = entry.getNext();\n        }\n    }\n\n    public boolean containsKey(Object key) {\n        if (key == null) return false;\n        return getEntry(key) != null;\n    }\n\n    public int size() {\n        return this.size;\n    }\n\n    public void clear() {\n        for (int i = 0; i < table.length; i++) {\n            table[i] = null;\n        }\n        this.size = 0;\n    }\n\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(String.format(\"size:%s capacity:%s resize:%s\\n\\n\", size, table.length, resize));\n        for (MyEntry entry : table) {\n            while (entry != null) {\n                sb.append(entry.getKey() + \":\" + entry.getValue() + \"\\n\");\n                entry = entry.getNext();\n            }\n        }\n        return sb.toString();\n    }\n}\n\n    final class MyEntry {\n        private Object key;\n        private Object value;\n        private MyEntry next;\n\n        public MyEntry(Object key, Object value, MyEntry next) {\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n\n        public Object getKey() {\n            return key;\n        }\n\n        public void setKey(Object key) {\n            this.key = key;\n        }\n\n        public Object getValue() {\n            return value;\n        }\n\n        public void setValue(Object value) {\n            this.value = value;\n        }\n\n        public MyEntry getNext() {\n            return next;\n        }\n\n        public void setNext(MyEntry next) {\n            this.next = next;\n        }\n    }\n```","slug":"自己实现一个简单版的HashMap","published":1,"updated":"2020-01-01T02:32:02.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwli002osops5goc1y65","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOWZmN2ZhMDZkMDQ5YzNjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"HashMap简介\"><a href=\"#HashMap简介\" class=\"headerlink\" title=\"HashMap简介\"></a>HashMap简介</h2><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br>HashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。<br>HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。</p>\n<p>HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。容量 是哈希表中桶的数量，初始容量 只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。<br>通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。</p>\n<h2 id=\"简单版，只实现put和get\"><a href=\"#简单版，只实现put和get\" class=\"headerlink\" title=\"简单版，只实现put和get\"></a>简单版，只实现put和get</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyHashMap&lt;K, V&gt; &#123;</span><br><span class=\"line\">    private static int default_length &#x3D; 16;</span><br><span class=\"line\">    private MyEntry&lt;K, V&gt;[] entries;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyHashMap() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        entries &#x3D; new MyEntry[default_length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public V put(K key, V value) &#123;</span><br><span class=\"line\">        int index &#x3D; key.hashCode() % default_length;&#x2F;&#x2F; hascode值除map大小取余</span><br><span class=\"line\">        MyEntry&lt;K, V&gt; prevoius &#x3D; entries[index];</span><br><span class=\"line\">        for (MyEntry&lt;K, V&gt; entry &#x3D; entries[index]; entry !&#x3D; null; entry &#x3D; entry.next) &#123;</span><br><span class=\"line\">            if (entry.getKey().equals(key)) &#123;</span><br><span class=\"line\">                V oldValue &#x3D; (V) entry.getValue();</span><br><span class=\"line\">                entry.setValue(value);</span><br><span class=\"line\">                return oldValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MyEntry&lt;K, V&gt; entry &#x3D; new MyEntry&lt;&gt;(key, value);</span><br><span class=\"line\">        entry.next &#x3D; prevoius;</span><br><span class=\"line\">        entries[index] &#x3D; entry;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public K get(K key)&#123;</span><br><span class=\"line\">        int index&#x3D; key.hashCode()%default_length;</span><br><span class=\"line\">        for (MyEntry&lt;K,V&gt; entry&#x3D; entries[index];entry!&#x3D;null;entry&#x3D;entry.next)&#123;</span><br><span class=\"line\">            if(entry.getKey().equals(key))&#123;</span><br><span class=\"line\">                return (K)entry.getValue();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final class MyEntry&lt;K, V&gt; &#123;</span><br><span class=\"line\">        private K key;</span><br><span class=\"line\">        private V value;</span><br><span class=\"line\">        private MyEntry next;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry() &#123;</span><br><span class=\"line\">            super();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry(K key, V value) &#123;</span><br><span class=\"line\">            super();</span><br><span class=\"line\">            this.key &#x3D; key;</span><br><span class=\"line\">            this.value &#x3D; value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry(K key, V value, MyEntry next) &#123;</span><br><span class=\"line\">            super();</span><br><span class=\"line\">            this.key &#x3D; key;</span><br><span class=\"line\">            this.value &#x3D; value;</span><br><span class=\"line\">            this.next &#x3D; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public K getKey() &#123;</span><br><span class=\"line\">            return key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setKey(K key) &#123;</span><br><span class=\"line\">            this.key &#x3D; key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public V getValue() &#123;</span><br><span class=\"line\">            return value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setValue(V value) &#123;</span><br><span class=\"line\">            this.value &#x3D; value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry getNext() &#123;</span><br><span class=\"line\">            return next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setNext(MyEntry next) &#123;</span><br><span class=\"line\">            this.next &#x3D; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂版\"><a href=\"#复杂版\" class=\"headerlink\" title=\"复杂版\"></a>复杂版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyHashMap &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;默认初始化大小 16</span><br><span class=\"line\">    private static final int DEFAULT_INITIAL_CAPACITY &#x3D; 16;</span><br><span class=\"line\">    &#x2F;&#x2F;默认负载因子 0.75</span><br><span class=\"line\">    private static final float DEFAULT_LOAD_FACTOR &#x3D; 0.75f;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;临界值</span><br><span class=\"line\">    private int threshold;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;元素个数</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;扩容次数</span><br><span class=\"line\">    private int resize;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MyEntry[] table;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyHashMap() &#123;</span><br><span class=\"line\">        table &#x3D; new MyEntry[DEFAULT_INITIAL_CAPACITY];</span><br><span class=\"line\">        threshold &#x3D; (int) (DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">        size &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int index(Object key) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;根据key的hashcode和entry长度取模计算key在entry中的位置</span><br><span class=\"line\">        return key.hashCode() % table.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void put(Object key, Object value) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;key为null时需要特殊处理，为简化实现忽略null值</span><br><span class=\"line\">        if (key &#x3D;&#x3D; null) return;</span><br><span class=\"line\">        int index &#x3D; index(key);</span><br><span class=\"line\">        &#x2F;&#x2F;遍历index位置的entry，若找到重复key则更新对应entry的值，然后返回</span><br><span class=\"line\">        MyEntry entry &#x3D; table[index];</span><br><span class=\"line\">        while (entry !&#x3D; null) &#123;</span><br><span class=\"line\">            if (entry.getKey().hashCode() &#x3D;&#x3D; key.hashCode() &amp;&amp; (entry.getKey() &#x3D;&#x3D; key || entry.getKey().equals(key))) &#123;</span><br><span class=\"line\">                entry.setValue(value);</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            entry &#x3D; entry.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;若index位置没有entry或者未找到重复的key，则将新key添加到table的index位置</span><br><span class=\"line\">        add(index, key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void add(int index, Object key, Object value) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;将新的entry放到table的index位置第一个，若原来有值则以链表形式存放</span><br><span class=\"line\">        MyEntry entry &#x3D; new MyEntry(key, value, table[index]);</span><br><span class=\"line\">        table[index] &#x3D; entry;</span><br><span class=\"line\">        &#x2F;&#x2F;判断size是否达到临界值，若已达到则进行扩容，将table的capacicy翻倍</span><br><span class=\"line\">        if (size++ &gt;&#x3D; threshold) &#123;</span><br><span class=\"line\">            resize(table.length * 2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void resize(int capacity) &#123;</span><br><span class=\"line\">        if (capacity &lt;&#x3D; table.length) return;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyEntry[] newTable &#x3D; new MyEntry[capacity];</span><br><span class=\"line\">        &#x2F;&#x2F;遍历原table，将每个entry都重新计算hash放入newTable中</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; table.length; i++) &#123;</span><br><span class=\"line\">            MyEntry old &#x3D; table[i];</span><br><span class=\"line\">            while (old!&#x3D;null)&#123;</span><br><span class=\"line\">                MyEntry next &#x3D; old.getNext();</span><br><span class=\"line\">                int index &#x3D; index(old.getKey());</span><br><span class=\"line\">                old.setNext(newTable[index]);</span><br><span class=\"line\">                newTable[index] &#x3D; old;</span><br><span class=\"line\">                old&#x3D;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;用newTable替table</span><br><span class=\"line\">        table &#x3D; newTable;</span><br><span class=\"line\">        &#x2F;&#x2F;修改临界值</span><br><span class=\"line\">        threshold &#x3D; (int) (table.length * DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">        resize++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object get(Object key)&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;这里简化处理，忽略null值</span><br><span class=\"line\">        if (key &#x3D;&#x3D; null) return null;</span><br><span class=\"line\">        MyEntry entry&#x3D; getEntry(key);</span><br><span class=\"line\">        return entry &#x3D;&#x3D; null ? null : entry.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyEntry getEntry(Object key)&#123;</span><br><span class=\"line\">        MyEntry entry &#x3D;table[index(key)];</span><br><span class=\"line\">        while (entry!&#x3D;null)&#123;</span><br><span class=\"line\">            if (entry.getKey().hashCode()&#x3D;&#x3D;key.hashCode()&amp;&amp;(entry.getKey()&#x3D;&#x3D;key||entry.getKey().equals(key)))&#123;</span><br><span class=\"line\">                return entry;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            entry &#x3D; entry.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return entry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void remove(Object key) &#123;</span><br><span class=\"line\">        if (key &#x3D;&#x3D; null) return;</span><br><span class=\"line\">        int index &#x3D; index(key);</span><br><span class=\"line\">        MyEntry pre &#x3D; null;</span><br><span class=\"line\">        MyEntry entry &#x3D; table[index];</span><br><span class=\"line\">        while (entry !&#x3D; null) &#123;</span><br><span class=\"line\">            if (entry.getKey().hashCode() &#x3D;&#x3D; key.hashCode() &amp;&amp; (entry.getKey() &#x3D;&#x3D; key || entry.getKey().equals(key))) &#123;</span><br><span class=\"line\">                if (pre &#x3D;&#x3D; null) table[index] &#x3D; entry.getNext();</span><br><span class=\"line\">                else pre.setNext(entry.getNext());</span><br><span class=\"line\">                &#x2F;&#x2F;如果成功找到并删除，修改size</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre &#x3D; entry;</span><br><span class=\"line\">            entry &#x3D; entry.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean containsKey(Object key) &#123;</span><br><span class=\"line\">        if (key &#x3D;&#x3D; null) return false;</span><br><span class=\"line\">        return getEntry(key) !&#x3D; null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int size() &#123;</span><br><span class=\"line\">        return this.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void clear() &#123;</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; table.length; i++) &#123;</span><br><span class=\"line\">            table[i] &#x3D; null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.size &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class=\"line\">        sb.append(String.format(&quot;size:%s capacity:%s resize:%s\\n\\n&quot;, size, table.length, resize));</span><br><span class=\"line\">        for (MyEntry entry : table) &#123;</span><br><span class=\"line\">            while (entry !&#x3D; null) &#123;</span><br><span class=\"line\">                sb.append(entry.getKey() + &quot;:&quot; + entry.getValue() + &quot;\\n&quot;);</span><br><span class=\"line\">                entry &#x3D; entry.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    final class MyEntry &#123;</span><br><span class=\"line\">        private Object key;</span><br><span class=\"line\">        private Object value;</span><br><span class=\"line\">        private MyEntry next;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry(Object key, Object value, MyEntry next) &#123;</span><br><span class=\"line\">            this.key &#x3D; key;</span><br><span class=\"line\">            this.value &#x3D; value;</span><br><span class=\"line\">            this.next &#x3D; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Object getKey() &#123;</span><br><span class=\"line\">            return key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setKey(Object key) &#123;</span><br><span class=\"line\">            this.key &#x3D; key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Object getValue() &#123;</span><br><span class=\"line\">            return value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setValue(Object value) &#123;</span><br><span class=\"line\">            this.value &#x3D; value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry getNext() &#123;</span><br><span class=\"line\">            return next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setNext(MyEntry next) &#123;</span><br><span class=\"line\">            this.next &#x3D; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOWZmN2ZhMDZkMDQ5YzNjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"HashMap简介\"><a href=\"#HashMap简介\" class=\"headerlink\" title=\"HashMap简介\"></a>HashMap简介</h2><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br>HashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。<br>HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。</p>\n<p>HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。容量 是哈希表中桶的数量，初始容量 只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。<br>通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。</p>\n<h2 id=\"简单版，只实现put和get\"><a href=\"#简单版，只实现put和get\" class=\"headerlink\" title=\"简单版，只实现put和get\"></a>简单版，只实现put和get</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyHashMap&lt;K, V&gt; &#123;</span><br><span class=\"line\">    private static int default_length &#x3D; 16;</span><br><span class=\"line\">    private MyEntry&lt;K, V&gt;[] entries;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyHashMap() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        entries &#x3D; new MyEntry[default_length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public V put(K key, V value) &#123;</span><br><span class=\"line\">        int index &#x3D; key.hashCode() % default_length;&#x2F;&#x2F; hascode值除map大小取余</span><br><span class=\"line\">        MyEntry&lt;K, V&gt; prevoius &#x3D; entries[index];</span><br><span class=\"line\">        for (MyEntry&lt;K, V&gt; entry &#x3D; entries[index]; entry !&#x3D; null; entry &#x3D; entry.next) &#123;</span><br><span class=\"line\">            if (entry.getKey().equals(key)) &#123;</span><br><span class=\"line\">                V oldValue &#x3D; (V) entry.getValue();</span><br><span class=\"line\">                entry.setValue(value);</span><br><span class=\"line\">                return oldValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        MyEntry&lt;K, V&gt; entry &#x3D; new MyEntry&lt;&gt;(key, value);</span><br><span class=\"line\">        entry.next &#x3D; prevoius;</span><br><span class=\"line\">        entries[index] &#x3D; entry;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public K get(K key)&#123;</span><br><span class=\"line\">        int index&#x3D; key.hashCode()%default_length;</span><br><span class=\"line\">        for (MyEntry&lt;K,V&gt; entry&#x3D; entries[index];entry!&#x3D;null;entry&#x3D;entry.next)&#123;</span><br><span class=\"line\">            if(entry.getKey().equals(key))&#123;</span><br><span class=\"line\">                return (K)entry.getValue();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final class MyEntry&lt;K, V&gt; &#123;</span><br><span class=\"line\">        private K key;</span><br><span class=\"line\">        private V value;</span><br><span class=\"line\">        private MyEntry next;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry() &#123;</span><br><span class=\"line\">            super();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry(K key, V value) &#123;</span><br><span class=\"line\">            super();</span><br><span class=\"line\">            this.key &#x3D; key;</span><br><span class=\"line\">            this.value &#x3D; value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry(K key, V value, MyEntry next) &#123;</span><br><span class=\"line\">            super();</span><br><span class=\"line\">            this.key &#x3D; key;</span><br><span class=\"line\">            this.value &#x3D; value;</span><br><span class=\"line\">            this.next &#x3D; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public K getKey() &#123;</span><br><span class=\"line\">            return key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setKey(K key) &#123;</span><br><span class=\"line\">            this.key &#x3D; key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public V getValue() &#123;</span><br><span class=\"line\">            return value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setValue(V value) &#123;</span><br><span class=\"line\">            this.value &#x3D; value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry getNext() &#123;</span><br><span class=\"line\">            return next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setNext(MyEntry next) &#123;</span><br><span class=\"line\">            this.next &#x3D; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂版\"><a href=\"#复杂版\" class=\"headerlink\" title=\"复杂版\"></a>复杂版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyHashMap &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;默认初始化大小 16</span><br><span class=\"line\">    private static final int DEFAULT_INITIAL_CAPACITY &#x3D; 16;</span><br><span class=\"line\">    &#x2F;&#x2F;默认负载因子 0.75</span><br><span class=\"line\">    private static final float DEFAULT_LOAD_FACTOR &#x3D; 0.75f;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;临界值</span><br><span class=\"line\">    private int threshold;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;元素个数</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;扩容次数</span><br><span class=\"line\">    private int resize;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MyEntry[] table;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyHashMap() &#123;</span><br><span class=\"line\">        table &#x3D; new MyEntry[DEFAULT_INITIAL_CAPACITY];</span><br><span class=\"line\">        threshold &#x3D; (int) (DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">        size &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int index(Object key) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;根据key的hashcode和entry长度取模计算key在entry中的位置</span><br><span class=\"line\">        return key.hashCode() % table.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void put(Object key, Object value) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;key为null时需要特殊处理，为简化实现忽略null值</span><br><span class=\"line\">        if (key &#x3D;&#x3D; null) return;</span><br><span class=\"line\">        int index &#x3D; index(key);</span><br><span class=\"line\">        &#x2F;&#x2F;遍历index位置的entry，若找到重复key则更新对应entry的值，然后返回</span><br><span class=\"line\">        MyEntry entry &#x3D; table[index];</span><br><span class=\"line\">        while (entry !&#x3D; null) &#123;</span><br><span class=\"line\">            if (entry.getKey().hashCode() &#x3D;&#x3D; key.hashCode() &amp;&amp; (entry.getKey() &#x3D;&#x3D; key || entry.getKey().equals(key))) &#123;</span><br><span class=\"line\">                entry.setValue(value);</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            entry &#x3D; entry.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;若index位置没有entry或者未找到重复的key，则将新key添加到table的index位置</span><br><span class=\"line\">        add(index, key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void add(int index, Object key, Object value) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;将新的entry放到table的index位置第一个，若原来有值则以链表形式存放</span><br><span class=\"line\">        MyEntry entry &#x3D; new MyEntry(key, value, table[index]);</span><br><span class=\"line\">        table[index] &#x3D; entry;</span><br><span class=\"line\">        &#x2F;&#x2F;判断size是否达到临界值，若已达到则进行扩容，将table的capacicy翻倍</span><br><span class=\"line\">        if (size++ &gt;&#x3D; threshold) &#123;</span><br><span class=\"line\">            resize(table.length * 2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void resize(int capacity) &#123;</span><br><span class=\"line\">        if (capacity &lt;&#x3D; table.length) return;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyEntry[] newTable &#x3D; new MyEntry[capacity];</span><br><span class=\"line\">        &#x2F;&#x2F;遍历原table，将每个entry都重新计算hash放入newTable中</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; table.length; i++) &#123;</span><br><span class=\"line\">            MyEntry old &#x3D; table[i];</span><br><span class=\"line\">            while (old!&#x3D;null)&#123;</span><br><span class=\"line\">                MyEntry next &#x3D; old.getNext();</span><br><span class=\"line\">                int index &#x3D; index(old.getKey());</span><br><span class=\"line\">                old.setNext(newTable[index]);</span><br><span class=\"line\">                newTable[index] &#x3D; old;</span><br><span class=\"line\">                old&#x3D;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;用newTable替table</span><br><span class=\"line\">        table &#x3D; newTable;</span><br><span class=\"line\">        &#x2F;&#x2F;修改临界值</span><br><span class=\"line\">        threshold &#x3D; (int) (table.length * DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">        resize++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object get(Object key)&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;这里简化处理，忽略null值</span><br><span class=\"line\">        if (key &#x3D;&#x3D; null) return null;</span><br><span class=\"line\">        MyEntry entry&#x3D; getEntry(key);</span><br><span class=\"line\">        return entry &#x3D;&#x3D; null ? null : entry.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyEntry getEntry(Object key)&#123;</span><br><span class=\"line\">        MyEntry entry &#x3D;table[index(key)];</span><br><span class=\"line\">        while (entry!&#x3D;null)&#123;</span><br><span class=\"line\">            if (entry.getKey().hashCode()&#x3D;&#x3D;key.hashCode()&amp;&amp;(entry.getKey()&#x3D;&#x3D;key||entry.getKey().equals(key)))&#123;</span><br><span class=\"line\">                return entry;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            entry &#x3D; entry.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return entry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void remove(Object key) &#123;</span><br><span class=\"line\">        if (key &#x3D;&#x3D; null) return;</span><br><span class=\"line\">        int index &#x3D; index(key);</span><br><span class=\"line\">        MyEntry pre &#x3D; null;</span><br><span class=\"line\">        MyEntry entry &#x3D; table[index];</span><br><span class=\"line\">        while (entry !&#x3D; null) &#123;</span><br><span class=\"line\">            if (entry.getKey().hashCode() &#x3D;&#x3D; key.hashCode() &amp;&amp; (entry.getKey() &#x3D;&#x3D; key || entry.getKey().equals(key))) &#123;</span><br><span class=\"line\">                if (pre &#x3D;&#x3D; null) table[index] &#x3D; entry.getNext();</span><br><span class=\"line\">                else pre.setNext(entry.getNext());</span><br><span class=\"line\">                &#x2F;&#x2F;如果成功找到并删除，修改size</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre &#x3D; entry;</span><br><span class=\"line\">            entry &#x3D; entry.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean containsKey(Object key) &#123;</span><br><span class=\"line\">        if (key &#x3D;&#x3D; null) return false;</span><br><span class=\"line\">        return getEntry(key) !&#x3D; null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int size() &#123;</span><br><span class=\"line\">        return this.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void clear() &#123;</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; table.length; i++) &#123;</span><br><span class=\"line\">            table[i] &#x3D; null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.size &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class=\"line\">        sb.append(String.format(&quot;size:%s capacity:%s resize:%s\\n\\n&quot;, size, table.length, resize));</span><br><span class=\"line\">        for (MyEntry entry : table) &#123;</span><br><span class=\"line\">            while (entry !&#x3D; null) &#123;</span><br><span class=\"line\">                sb.append(entry.getKey() + &quot;:&quot; + entry.getValue() + &quot;\\n&quot;);</span><br><span class=\"line\">                entry &#x3D; entry.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    final class MyEntry &#123;</span><br><span class=\"line\">        private Object key;</span><br><span class=\"line\">        private Object value;</span><br><span class=\"line\">        private MyEntry next;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry(Object key, Object value, MyEntry next) &#123;</span><br><span class=\"line\">            this.key &#x3D; key;</span><br><span class=\"line\">            this.value &#x3D; value;</span><br><span class=\"line\">            this.next &#x3D; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Object getKey() &#123;</span><br><span class=\"line\">            return key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setKey(Object key) &#123;</span><br><span class=\"line\">            this.key &#x3D; key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Object getValue() &#123;</span><br><span class=\"line\">            return value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setValue(Object value) &#123;</span><br><span class=\"line\">            this.value &#x3D; value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MyEntry getNext() &#123;</span><br><span class=\"line\">            return next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setNext(MyEntry next) &#123;</span><br><span class=\"line\">            this.next &#x3D; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOWZmN2ZhMDZkMDQ5YzNjLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 10:32:02 GMT+0800 (GMT+08:00)","title":"自己实现一个简单版的HashMap","path":"2019/07/26/自己实现一个简单版的HashMap/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOWZmN2ZhMDZkMDQ5YzNjLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOWZmN2ZhMDZkMDQ5YzNjLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2019-07-26T03:54:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["HashMap"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java反射","date":"2020-01-05T23:57:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hNGQzN2EyYjc0MWZiOGVhLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n## 一、什么是反射？\n[JAVA反射机制](https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990)是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。\n>简单的来说：\n1.通过new关键字创建对象操作对象，在编译时就已经确定。\n2.通过反射可以在程序运行过程中动态的操作对象，可以获得编译期无法获得的信息，动态操作最大限度发挥了java扩展性。\n\n## 二、反射原理\nJava反射的原理:java类的执行需要经历以下过程：\n* 编译：.java文件编译后生成.class字节码文件\n* 加载：类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例\n* 链接\n `验证`：格式（class文件规范） 语义（final类是否有子类） 操作\n`准备`：静态变量赋初值和内存空间，final修饰的内存空间直接赋原值，此处不是用户指定的初值。\n`解析`：符号引用转化为直接引用，分配地址\n* 初始化：有父类先初始化父类，然后初始化自己；将static修饰代码执行一遍，如果是静态变量，则用用户指定值覆盖原有初值；如果是代码块，则执行一遍操作。\n\nJava的反射就是利用上面第二步加载到jvm中的.class文件来进行操作的。.class文件中包含java类的所有信息，当你不知道某个类具体信息时，可以使用反射获取class，然后进行各种操作。\n\nJava反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。总结说：反射就是把java类中的各种成分映射成一个个的Java对象，并且可以进行操作。\n\n## 三、反射机制相关\n与Java反射相关的类如下：\n\n| 类名| 用途|\n|-----|-----|\n| Class类 | 代表类的实体，在运行的Java应用程序中表示类和接口|\n| Field类 | 代表类的成员变量（成员变量也称为类的属性）|\n| Method类| 代表类的方法|\n| Constructor类 | 代表类的构造方法|\n\n 反射可访问的常用信息\n \n| 类型| 访问方法|返回值类型|说明|\n|-----|-----|-----|-----|\n| 包路径 | getPackage()|Package 对象| 获取该类的存放路径|\n| 类名称| getName()|String 对象| 获取该类的名称|\n| 继承类| getSuperclass()|Class 对象|  获取该类继承的类|\n| 实现接口| getlnterfaces()|Class 型数组|  获取该类实现的所有接口|\n| 构造方法| getConstructors()|Constructor 型数组|  获取所有权限为 public 的构造方法|\n| 构造方法| getDeclaredContruectors()|Constructor 对象|  获取当前对象的所有构造方法|\n| 方法| getMethods()|Methods 型数组|  获取所有权限为 public 的方法|\n| 方法| getDeclaredMethods()|Methods 对象|  获取当前对象的所有方法|\n| 成员变量| getFields()|Field 型数组|  获取所有权限为 public 的成员变量|\n| 成员变量| getDeclareFileds()|Field 对象|  获取当前对象的所有成员变量|\n| 内部类| getClasses()|Class 型数组|  获取所有权限为 public 的内部类|\n| 内部类| getDeclaredClasses()|Class 型数组|  获取所有内部类|\n| 内部类的声明类| getDeclaringClass()|Class 对象|  如果该类为内部类，则返回它的成员类，否则返回 null|\n\nJava 反射机制主要提供了以下功能，这些功能都位于java.lang.reflect包。\n\n* 在运行时判断任意一个对象所属的类。\n\n* 在运行时构造任意一个类的对象。\n\n* 在运行时判断任意一个类所具有的成员变量和方法。\n\n* 在运行时调用任意一个对象的方法。\n\n* 生成动态代理。\n\n## 四、反射的使用\n### 1、java中的Class三种获取方式\n\n　jdk提供了三种方式获取一个对象的Class，就Person person 来说\n\n　　1.person .getClass()，这个是Object类里面的方法\n\n　　2.Person .Class属性，任何的数据类型，基本数据类型或者抽象数据类型，都可以通过这种方式获取类\n\n　　3.Class.forName(\"\")，Class类提供了这样一个方法，让我们通过类名来获取到对象类\n\n　说明：在运行期间，如果我们要产生某个类的对象，Java虚拟机(JVM)会检查该类型的Class对象是否已被加载。如果没有被加载，JVM会根据类的名称找到.class文件并加载它。一旦某个类型的Class对象已被加载到内存，就可以用它来产生该类型的所有对象。 \n```\n    //方式一\n    Person person = new Person();\n    Class<? extends Person> personClazz01 = person.getClass();\n \n    //方式二\n    try {\n        Class<?> personClazz02 = Class.forName(\"Person\");\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    }\n \n    //方式三\n    Class<? extends Person> personClazz03 = Person.class;\n \n```\n### 2、如何通过反射获取私有成员变量和私有方法\nPerson类 \n```\npublic class Person {\nprivate String name = \"zhangsan\";\nprivate String age;\n \npublic String getName() {\n    return name;\n}\n \npublic void setName(String name) {\n    this.name = name;\n}\n}  \n \n \n    Person person = new Person();\n    //打印没有改变属性之前的name值\n    System.out.println(\"before：\" + getPrivateValue(person, \"name\"));\n    person.setName(\"lisi\");\n    //打印修改之后的name值\n    System.out.println(\"after：\" + getPrivateValue(person, \"name\"));\n \n \n \n/**\n * 通过反射获取私有的成员变量\n *\n * @param person\n * @return\n */\nprivate Object getPrivateValue(Person person, String fieldName) {\n \n    try {\n        Field field = person.getClass().getDeclaredField(fieldName);\n        // 参数值为true，打开禁用访问控制检查\n        //setAccessible(true) 并不是将方法的访问权限改成了public，而是取消java的权限控制检查。\n        //所以即使是public方法，其accessible 属相默认也是false\n        field.setAccessible(true);\n        return field.get(person);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n} \n```\n运行结果\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iNmRjM2Q1MWY1YTM5NzA1LnBuZw?x-oss-process=image/format,png)\n### 3、demo\n```\npackage cn.lee.demo;\n \nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.TypeVariable;\n \npublic class Main {\n\t/**\n\t * 为了看清楚Java反射部分代码，所有异常我都最后抛出来给虚拟机处理！\n\t * @param args\n\t * @throws ClassNotFoundException\n\t * @throws InstantiationException\n\t * @throws IllegalAccessException\n\t * @throws InvocationTargetException \n\t * @throws IllegalArgumentException \n\t * @throws NoSuchFieldException \n\t * @throws SecurityException \n\t * @throws NoSuchMethodException \n\t */\n\tpublic static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, SecurityException, NoSuchFieldException, NoSuchMethodException {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\t//Demo1.  通过Java反射机制得到类的包名和类名\n\t\tDemo1();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo2.  验证所有的类都是Class类的实例对象\n\t\tDemo2();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo3.  通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]，无参构造\n\t\tDemo3();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo4:  通过Java反射机制得到一个类的构造函数，并实现构造带参实例对象\n\t\tDemo4();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo5:  通过Java反射机制操作成员变量, set 和 get\n\t\tDemo5();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等\n\t\tDemo6();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo7: 通过Java反射机制调用类中方法\n\t\tDemo7();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo8: 通过Java反射机制获得类加载器\n\t\tDemo8();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t}\n\t\n\t/**\n\t * Demo1: 通过Java反射机制得到类的包名和类名\n\t */\n\tpublic static void Demo1()\n\t{\n\t\tPerson person = new Person();\n\t\tSystem.out.println(\"Demo1: 包名: \" + person.getClass().getPackage().getName() + \"，\" \n\t\t\t\t+ \"完整类名: \" + person.getClass().getName());\n\t}\n\t\n\t/**\n\t * Demo2: 验证所有的类都是Class类的实例对象\n\t * @throws ClassNotFoundException \n\t */\n\tpublic static void Demo2() throws ClassNotFoundException\n\t{\n\t\t//定义两个类型都未知的Class , 设置初值为null, 看看如何给它们赋值成Person类\n\t\tClass<?> class1 = null;\n        Class<?> class2 = null;\n        \n        //写法1, 可能抛出 ClassNotFoundException [多用这个写法]\n        class1 = Class.forName(\"cn.lee.demo.Person\");\n        System.out.println(\"Demo2:(写法1) 包名: \" + class1.getPackage().getName() + \"，\" \n\t\t\t\t+ \"完整类名: \" + class1.getName());\n        \n        //写法2\n        class2 = Person.class;\n        System.out.println(\"Demo2:(写法2) 包名: \" + class2.getPackage().getName() + \"，\" \n\t\t\t\t+ \"完整类名: \" + class2.getName());\n\t}\n\t\n\t/**\n\t * Demo3: 通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]\n\t * @throws ClassNotFoundException \n\t * @throws IllegalAccessException \n\t * @throws InstantiationException \n\t */\n\tpublic static void Demo3() throws ClassNotFoundException, InstantiationException, IllegalAccessException\n\t{\n\t\tClass<?> class1 = null;\n\t\tclass1 = Class.forName(\"cn.lee.demo.Person\");\n\t\t//由于这里不能带参数，所以你要实例化的这个类Person，一定要有无参构造函数哈～\n\t\tPerson person = (Person) class1.newInstance();\n\t\tperson.setAge(20);\n\t\tperson.setName(\"LeeFeng\");\n\t\tSystem.out.println(\"Demo3: \" + person.getName() + \" : \" + person.getAge());\n\t}\n\t\n\t/**\n\t * Demo4: 通过Java反射机制得到一个类的构造函数，并实现创建带参实例对象\n\t * @throws ClassNotFoundException \n\t * @throws InvocationTargetException \n\t * @throws IllegalAccessException \n\t * @throws InstantiationException \n\t * @throws IllegalArgumentException \n\t */\n\tpublic static void Demo4() throws ClassNotFoundException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException\n\t{\n\t\tClass<?> class1 = null;\n\t\tPerson person1 = null;\n\t\tPerson person2 = null;\n\t\t\n\t\tclass1 = Class.forName(\"cn.lee.demo.Person\");\n\t\t//得到一系列构造函数集合\n\t\tConstructor<?>[] constructors = class1.getConstructors();\n\t\t\n\t\tperson1 = (Person) constructors[0].newInstance();\n\t\tperson1.setAge(30);\n\t\tperson1.setName(\"leeFeng\");\n\t\t\n\t\tperson2 = (Person) constructors[1].newInstance(20,\"leeFeng\");\n\t\t\n\t\tSystem.out.println(\"Demo4: \" + person1.getName() + \" : \" + person1.getAge()\n\t\t\t\t+ \"  ,   \" + person2.getName() + \" : \" + person2.getAge()\n\t\t\t\t);\n\t\t\n\t}\n\t\n\t/**\n\t * Demo5: 通过Java反射机制操作成员变量, set 和 get\n\t * \n\t * @throws IllegalAccessException \n\t * @throws IllegalArgumentException \n\t * @throws NoSuchFieldException \n\t * @throws SecurityException \n\t * @throws InstantiationException \n\t * @throws ClassNotFoundException \n\t */\n\tpublic static void Demo5() throws IllegalArgumentException, IllegalAccessException, SecurityException, NoSuchFieldException, InstantiationException, ClassNotFoundException\n\t{\n\t\tClass<?> class1 = null;\n\t\tclass1 = Class.forName(\"cn.lee.demo.Person\");\n\t\tObject obj = class1.newInstance();\n\t\t\n\t\tField personNameField = class1.getDeclaredField(\"name\");\n\t\tpersonNameField.setAccessible(true);\n\t\tpersonNameField.set(obj, \"胖虎先森\");\n\t\t\n\t\t\n\t\tSystem.out.println(\"Demo5: 修改属性之后得到属性变量的值：\" + personNameField.get(obj));\n\t\t\n\t}\n\t\n \n\t/**\n\t * Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等\n\t * @throws ClassNotFoundException \n\t */\n\tpublic static void Demo6() throws ClassNotFoundException\n\t{\n\t\tClass<?> class1 = null;\n\t\tclass1 = Class.forName(\"cn.lee.demo.SuperMan\");\n\t\t\n\t\t//取得父类名称\n\t\tClass<?>  superClass = class1.getSuperclass();\n\t\tSystem.out.println(\"Demo6:  SuperMan类的父类名: \" + superClass.getName());\n\t\t\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t\n\t\tField[] fields = class1.getDeclaredFields();\n\t\tfor (int i = 0; i < fields.length; i++) {\n\t\t\tSystem.out.println(\"类中的成员: \" + fields[i]);\n\t\t}\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t\n\t\t//取得类方法\n\t\tMethod[] methods = class1.getDeclaredMethods();\n\t\tfor (int i = 0; i < methods.length; i++) {\n\t\t\tSystem.out.println(\"Demo6,取得SuperMan类的方法：\");\n\t\t\tSystem.out.println(\"函数名：\" + methods[i].getName());\n\t\t\tSystem.out.println(\"函数返回类型：\" + methods[i].getReturnType());\n\t\t\tSystem.out.println(\"函数访问修饰符：\" + Modifier.toString(methods[i].getModifiers()));\n\t\t\tSystem.out.println(\"函数代码写法： \" + methods[i]);\n\t\t}\n\t\t\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//取得类实现的接口,因为接口类也属于Class,所以得到接口中的方法也是一样的方法得到哈\n\t\tClass<?> interfaces[] = class1.getInterfaces();\n\t\tfor (int i = 0; i < interfaces.length; i++) {\n\t\t\tSystem.out.println(\"实现的接口类名: \" + interfaces[i].getName() );\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Demo7: 通过Java反射机制调用类方法\n\t * @throws ClassNotFoundException \n\t * @throws NoSuchMethodException \n\t * @throws SecurityException \n\t * @throws InvocationTargetException \n\t * @throws IllegalAccessException \n\t * @throws IllegalArgumentException \n\t * @throws InstantiationException \n\t */\n\tpublic static void Demo7() throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, InstantiationException\n\t{\n\t\tClass<?> class1 = null;\n\t\tclass1 = Class.forName(\"cn.lee.demo.SuperMan\");\n\t\t\n\t\tSystem.out.println(\"Demo7: \\n调用无参方法fly()：\");\n\t\tMethod method = class1.getMethod(\"fly\");\n\t\tmethod.invoke(class1.newInstance());\n\t\t\n\t\tSystem.out.println(\"调用有参方法walk(int m)：\");\n\t\tmethod = class1.getMethod(\"walk\",int.class);\n\t\tmethod.invoke(class1.newInstance(),100);\n\t}\n\t\n\t/**\n\t * Demo8: 通过Java反射机制得到类加载器信息\n\t * \n\t * 在java中有三种类类加载器。[这段资料网上截取]\n\t\t1）Bootstrap ClassLoader 此加载器采用c++编写，一般开发中很少见。\n\t\t2）Extension ClassLoader 用来进行扩展类的加载，一般对应的是jre\\lib\\ext目录中的类\n\t\t3）AppClassLoader 加载classpath指定的类，是最常用的加载器。同时也是java中默认的加载器。\n\t * \n\t * @throws ClassNotFoundException \n\t */\n\tpublic static void Demo8() throws ClassNotFoundException\n\t{\n\t\tClass<?> class1 = null;\n\t\tclass1 = Class.forName(\"cn.lee.demo.SuperMan\");\n\t\tString nameString = class1.getClassLoader().getClass().getName();\n\t\t\n\t\tSystem.out.println(\"Demo8: 类加载器类名: \" + nameString);\n\t}\n\t\n\t\n\t\n}\n/**\n * \n * @author xiaoyaomeng\n *\n */\nclass  Person{\n\tprivate int age;\n\tprivate String name;\n\tpublic Person(){\n\t\t\n\t}\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n \n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n}\n \nclass SuperMan extends Person implements ActionInterface\n{\n\tprivate boolean BlueBriefs;\n\t\n\tpublic void fly()\n\t{\n\t\tSystem.out.println(\"超人会飞耶～～\");\n\t}\n\t\n\tpublic boolean isBlueBriefs() {\n\t\treturn BlueBriefs;\n\t}\n\tpublic void setBlueBriefs(boolean blueBriefs) {\n\t\tBlueBriefs = blueBriefs;\n\t}\n \n\t@Override\n\tpublic void walk(int m) {\n\t\t// TODO Auto-generated method stub\n\t\tSystem.out.println(\"超人会走耶～～走了\" + m + \"米就走不动了！\");\n\t}\n}\ninterface ActionInterface{\n\tpublic void walk(int m);\n}\n```\n## 五、java反射调用service或mapper中的接口\njava中的反射需要一个实例，但是接口无法提供这样的实例，但是JDK提供了一个叫做动态代理的东西，这个代理恰恰只能代理接口。所以我们想要反射接口需要使用这个动态代理来做。\n\n在java的动态代理机制中，有两个重要的东西，一个是 InvocationHandler(接口)、另一个则是 Proxy(类)，这是我们动态代理必须用到的两个东西。\n\n### 1、静态代理\n先来看一下静态代理\n```\npublic class TestStaticProxy {\n    //这里传入的是接口类型的对象，方便向上转型，实现多态\n    public static void consumer(ProxyInterface pi){\n        pi.say();\n    }\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        consumer(new ProxyObject());\n    }\n}\n\n//代理接口\ninterface ProxyInterface{\n    public void say();\n}\n\n\n//被代理者\nclass RealObject implements ProxyInterface{\n    //实现接口方法\n    @Override\n    public void say() {\n        // TODO Auto-generated method stub\n        System.out.println(\"say\");\n    }\n    \n}\n\n\n//代理者\nclass ProxyObject implements ProxyInterface{\n\n    @Override\n    public void say() {\n        // TODO Auto-generated method stub\n        //dosomething for example\n        System.out.println(\"hello proxy\");\n        new RealObject().say();\n        System.out.println(\"this is method end\");\n    }\n    \n}\noutput:\nhello proxy\nsay\nthis is method end\n```\n### 2、动态代理\n```\nimport java.lang.reflect.*;\n\npublic class TestActiveProxy{\n    static void customer(ProxyInterface pi){\n        pi.say();\n    }\n    public static void main(String[] args){\n        RealObject real = new RealObject();\n        ProxyInterface proxy = (ProxyInterface)Proxy.newProxyInstance(ProxyInterface.class.getClassLoader(),new Class[]{ProxyInterface.class}, new ProxyObject(real));\n        customer(proxy);\n    }\n}\n\n\ninterface ProxyInterface{\n    void say();\n}\n\n//被代理类\nclass RealObject implements ProxyInterface{\n    public void say(){\n        System.out.println(\"i'm talking\");\n    }\n}\n\n//代理类，实现InvocationHandler 接口\nclass ProxyObject implements InvocationHandler{\n    private Object proxied = null;\n    public ProxyObject(){\n        \n    }\n    public ProxyObject(Object proxied){\n        this.proxied  = proxied;\n    }\n    public Object invoke(Object arg0, Method arg1, Object[] arg2) throws Throwable {\n        System.out.println(\"hello\");\n        return arg1.invoke(proxied, arg2);\n    };\n}\n```\n\n### 3、应用场景\n假如现在我们需要通过反射得到`TestMapper`接口，然后调用其中的一个`selectById`方法\n```\n    public interface TestMapper{\n            /**\n            * 根据id查对象\n            */\n            User  selectById(@Param(\"id\") Integer id);\n    }\n```\n现在如果我们需要反射使用该接口根据用户ID获取用户对象是无法直接反射调取的，所以我们需要一个动态代理类。\n创建一个`MyInvocationHandler`实现`InvocationHandler`接口\n```\npublic class MyInvocationHandler implements InvocationHandler {\n\n    private Object target;\n\n    public MyInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        return method.invoke(target,args);\n    }\n}\n```\n去生成代理对象并调用方法\n```\n SqlSession sqlSession = this.sqlSessionFactory.openSession();\n\n Class<?> clazz = Class.forName(\"com.example.demo.mapper.TestMapper\");\n\n Object instance = Proxy.newProxyInstance(\n                clazz.getClassLoader(),\n                new Class[]{clazz},\n                new MyInvocationHandler(sqlSession.getMapper(clazz))\n        );\n//这里我是通过sqlSession来获取Mapper的\n\n Method method = instance.getClass().getMethod(\"selectById\",Integer.class);\n method.invoke(instance, 1);\n//object为mapper中传入的参数\n```\n\n这里需要注意，newProxyInstance()方法中最后一个参数，即为我们创建的动态代理的类（因为我这里调用的接口为mybatis中mapper中的接口，所以需要从sqlSession中getMapper）。\n\n\n参考：\nhttp://blog.qiji.tech/archives/4374\nhttps://www.jianshu.com/p/9be58ee20dee\nhttps://blog.csdn.net/ljphhj/article/details/12858767\nhttps://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn\n\n","source":"_posts/Java反射.md","raw":"title: Java反射\ntags:\n  - 反射\ncategories:\n  - Java\ndate: 2020-01-06 07:57:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hNGQzN2EyYjc0MWZiOGVhLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n## 一、什么是反射？\n[JAVA反射机制](https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990)是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。\n>简单的来说：\n1.通过new关键字创建对象操作对象，在编译时就已经确定。\n2.通过反射可以在程序运行过程中动态的操作对象，可以获得编译期无法获得的信息，动态操作最大限度发挥了java扩展性。\n\n## 二、反射原理\nJava反射的原理:java类的执行需要经历以下过程：\n* 编译：.java文件编译后生成.class字节码文件\n* 加载：类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例\n* 链接\n `验证`：格式（class文件规范） 语义（final类是否有子类） 操作\n`准备`：静态变量赋初值和内存空间，final修饰的内存空间直接赋原值，此处不是用户指定的初值。\n`解析`：符号引用转化为直接引用，分配地址\n* 初始化：有父类先初始化父类，然后初始化自己；将static修饰代码执行一遍，如果是静态变量，则用用户指定值覆盖原有初值；如果是代码块，则执行一遍操作。\n\nJava的反射就是利用上面第二步加载到jvm中的.class文件来进行操作的。.class文件中包含java类的所有信息，当你不知道某个类具体信息时，可以使用反射获取class，然后进行各种操作。\n\nJava反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。总结说：反射就是把java类中的各种成分映射成一个个的Java对象，并且可以进行操作。\n\n## 三、反射机制相关\n与Java反射相关的类如下：\n\n| 类名| 用途|\n|-----|-----|\n| Class类 | 代表类的实体，在运行的Java应用程序中表示类和接口|\n| Field类 | 代表类的成员变量（成员变量也称为类的属性）|\n| Method类| 代表类的方法|\n| Constructor类 | 代表类的构造方法|\n\n 反射可访问的常用信息\n \n| 类型| 访问方法|返回值类型|说明|\n|-----|-----|-----|-----|\n| 包路径 | getPackage()|Package 对象| 获取该类的存放路径|\n| 类名称| getName()|String 对象| 获取该类的名称|\n| 继承类| getSuperclass()|Class 对象|  获取该类继承的类|\n| 实现接口| getlnterfaces()|Class 型数组|  获取该类实现的所有接口|\n| 构造方法| getConstructors()|Constructor 型数组|  获取所有权限为 public 的构造方法|\n| 构造方法| getDeclaredContruectors()|Constructor 对象|  获取当前对象的所有构造方法|\n| 方法| getMethods()|Methods 型数组|  获取所有权限为 public 的方法|\n| 方法| getDeclaredMethods()|Methods 对象|  获取当前对象的所有方法|\n| 成员变量| getFields()|Field 型数组|  获取所有权限为 public 的成员变量|\n| 成员变量| getDeclareFileds()|Field 对象|  获取当前对象的所有成员变量|\n| 内部类| getClasses()|Class 型数组|  获取所有权限为 public 的内部类|\n| 内部类| getDeclaredClasses()|Class 型数组|  获取所有内部类|\n| 内部类的声明类| getDeclaringClass()|Class 对象|  如果该类为内部类，则返回它的成员类，否则返回 null|\n\nJava 反射机制主要提供了以下功能，这些功能都位于java.lang.reflect包。\n\n* 在运行时判断任意一个对象所属的类。\n\n* 在运行时构造任意一个类的对象。\n\n* 在运行时判断任意一个类所具有的成员变量和方法。\n\n* 在运行时调用任意一个对象的方法。\n\n* 生成动态代理。\n\n## 四、反射的使用\n### 1、java中的Class三种获取方式\n\n　jdk提供了三种方式获取一个对象的Class，就Person person 来说\n\n　　1.person .getClass()，这个是Object类里面的方法\n\n　　2.Person .Class属性，任何的数据类型，基本数据类型或者抽象数据类型，都可以通过这种方式获取类\n\n　　3.Class.forName(\"\")，Class类提供了这样一个方法，让我们通过类名来获取到对象类\n\n　说明：在运行期间，如果我们要产生某个类的对象，Java虚拟机(JVM)会检查该类型的Class对象是否已被加载。如果没有被加载，JVM会根据类的名称找到.class文件并加载它。一旦某个类型的Class对象已被加载到内存，就可以用它来产生该类型的所有对象。 \n```\n    //方式一\n    Person person = new Person();\n    Class<? extends Person> personClazz01 = person.getClass();\n \n    //方式二\n    try {\n        Class<?> personClazz02 = Class.forName(\"Person\");\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    }\n \n    //方式三\n    Class<? extends Person> personClazz03 = Person.class;\n \n```\n### 2、如何通过反射获取私有成员变量和私有方法\nPerson类 \n```\npublic class Person {\nprivate String name = \"zhangsan\";\nprivate String age;\n \npublic String getName() {\n    return name;\n}\n \npublic void setName(String name) {\n    this.name = name;\n}\n}  \n \n \n    Person person = new Person();\n    //打印没有改变属性之前的name值\n    System.out.println(\"before：\" + getPrivateValue(person, \"name\"));\n    person.setName(\"lisi\");\n    //打印修改之后的name值\n    System.out.println(\"after：\" + getPrivateValue(person, \"name\"));\n \n \n \n/**\n * 通过反射获取私有的成员变量\n *\n * @param person\n * @return\n */\nprivate Object getPrivateValue(Person person, String fieldName) {\n \n    try {\n        Field field = person.getClass().getDeclaredField(fieldName);\n        // 参数值为true，打开禁用访问控制检查\n        //setAccessible(true) 并不是将方法的访问权限改成了public，而是取消java的权限控制检查。\n        //所以即使是public方法，其accessible 属相默认也是false\n        field.setAccessible(true);\n        return field.get(person);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n} \n```\n运行结果\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iNmRjM2Q1MWY1YTM5NzA1LnBuZw?x-oss-process=image/format,png)\n### 3、demo\n```\npackage cn.lee.demo;\n \nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.TypeVariable;\n \npublic class Main {\n\t/**\n\t * 为了看清楚Java反射部分代码，所有异常我都最后抛出来给虚拟机处理！\n\t * @param args\n\t * @throws ClassNotFoundException\n\t * @throws InstantiationException\n\t * @throws IllegalAccessException\n\t * @throws InvocationTargetException \n\t * @throws IllegalArgumentException \n\t * @throws NoSuchFieldException \n\t * @throws SecurityException \n\t * @throws NoSuchMethodException \n\t */\n\tpublic static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, SecurityException, NoSuchFieldException, NoSuchMethodException {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\t//Demo1.  通过Java反射机制得到类的包名和类名\n\t\tDemo1();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo2.  验证所有的类都是Class类的实例对象\n\t\tDemo2();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo3.  通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]，无参构造\n\t\tDemo3();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo4:  通过Java反射机制得到一个类的构造函数，并实现构造带参实例对象\n\t\tDemo4();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo5:  通过Java反射机制操作成员变量, set 和 get\n\t\tDemo5();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等\n\t\tDemo6();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo7: 通过Java反射机制调用类中方法\n\t\tDemo7();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//Demo8: 通过Java反射机制获得类加载器\n\t\tDemo8();\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t}\n\t\n\t/**\n\t * Demo1: 通过Java反射机制得到类的包名和类名\n\t */\n\tpublic static void Demo1()\n\t{\n\t\tPerson person = new Person();\n\t\tSystem.out.println(\"Demo1: 包名: \" + person.getClass().getPackage().getName() + \"，\" \n\t\t\t\t+ \"完整类名: \" + person.getClass().getName());\n\t}\n\t\n\t/**\n\t * Demo2: 验证所有的类都是Class类的实例对象\n\t * @throws ClassNotFoundException \n\t */\n\tpublic static void Demo2() throws ClassNotFoundException\n\t{\n\t\t//定义两个类型都未知的Class , 设置初值为null, 看看如何给它们赋值成Person类\n\t\tClass<?> class1 = null;\n        Class<?> class2 = null;\n        \n        //写法1, 可能抛出 ClassNotFoundException [多用这个写法]\n        class1 = Class.forName(\"cn.lee.demo.Person\");\n        System.out.println(\"Demo2:(写法1) 包名: \" + class1.getPackage().getName() + \"，\" \n\t\t\t\t+ \"完整类名: \" + class1.getName());\n        \n        //写法2\n        class2 = Person.class;\n        System.out.println(\"Demo2:(写法2) 包名: \" + class2.getPackage().getName() + \"，\" \n\t\t\t\t+ \"完整类名: \" + class2.getName());\n\t}\n\t\n\t/**\n\t * Demo3: 通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]\n\t * @throws ClassNotFoundException \n\t * @throws IllegalAccessException \n\t * @throws InstantiationException \n\t */\n\tpublic static void Demo3() throws ClassNotFoundException, InstantiationException, IllegalAccessException\n\t{\n\t\tClass<?> class1 = null;\n\t\tclass1 = Class.forName(\"cn.lee.demo.Person\");\n\t\t//由于这里不能带参数，所以你要实例化的这个类Person，一定要有无参构造函数哈～\n\t\tPerson person = (Person) class1.newInstance();\n\t\tperson.setAge(20);\n\t\tperson.setName(\"LeeFeng\");\n\t\tSystem.out.println(\"Demo3: \" + person.getName() + \" : \" + person.getAge());\n\t}\n\t\n\t/**\n\t * Demo4: 通过Java反射机制得到一个类的构造函数，并实现创建带参实例对象\n\t * @throws ClassNotFoundException \n\t * @throws InvocationTargetException \n\t * @throws IllegalAccessException \n\t * @throws InstantiationException \n\t * @throws IllegalArgumentException \n\t */\n\tpublic static void Demo4() throws ClassNotFoundException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException\n\t{\n\t\tClass<?> class1 = null;\n\t\tPerson person1 = null;\n\t\tPerson person2 = null;\n\t\t\n\t\tclass1 = Class.forName(\"cn.lee.demo.Person\");\n\t\t//得到一系列构造函数集合\n\t\tConstructor<?>[] constructors = class1.getConstructors();\n\t\t\n\t\tperson1 = (Person) constructors[0].newInstance();\n\t\tperson1.setAge(30);\n\t\tperson1.setName(\"leeFeng\");\n\t\t\n\t\tperson2 = (Person) constructors[1].newInstance(20,\"leeFeng\");\n\t\t\n\t\tSystem.out.println(\"Demo4: \" + person1.getName() + \" : \" + person1.getAge()\n\t\t\t\t+ \"  ,   \" + person2.getName() + \" : \" + person2.getAge()\n\t\t\t\t);\n\t\t\n\t}\n\t\n\t/**\n\t * Demo5: 通过Java反射机制操作成员变量, set 和 get\n\t * \n\t * @throws IllegalAccessException \n\t * @throws IllegalArgumentException \n\t * @throws NoSuchFieldException \n\t * @throws SecurityException \n\t * @throws InstantiationException \n\t * @throws ClassNotFoundException \n\t */\n\tpublic static void Demo5() throws IllegalArgumentException, IllegalAccessException, SecurityException, NoSuchFieldException, InstantiationException, ClassNotFoundException\n\t{\n\t\tClass<?> class1 = null;\n\t\tclass1 = Class.forName(\"cn.lee.demo.Person\");\n\t\tObject obj = class1.newInstance();\n\t\t\n\t\tField personNameField = class1.getDeclaredField(\"name\");\n\t\tpersonNameField.setAccessible(true);\n\t\tpersonNameField.set(obj, \"胖虎先森\");\n\t\t\n\t\t\n\t\tSystem.out.println(\"Demo5: 修改属性之后得到属性变量的值：\" + personNameField.get(obj));\n\t\t\n\t}\n\t\n \n\t/**\n\t * Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等\n\t * @throws ClassNotFoundException \n\t */\n\tpublic static void Demo6() throws ClassNotFoundException\n\t{\n\t\tClass<?> class1 = null;\n\t\tclass1 = Class.forName(\"cn.lee.demo.SuperMan\");\n\t\t\n\t\t//取得父类名称\n\t\tClass<?>  superClass = class1.getSuperclass();\n\t\tSystem.out.println(\"Demo6:  SuperMan类的父类名: \" + superClass.getName());\n\t\t\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t\n\t\tField[] fields = class1.getDeclaredFields();\n\t\tfor (int i = 0; i < fields.length; i++) {\n\t\t\tSystem.out.println(\"类中的成员: \" + fields[i]);\n\t\t}\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t\n\t\t//取得类方法\n\t\tMethod[] methods = class1.getDeclaredMethods();\n\t\tfor (int i = 0; i < methods.length; i++) {\n\t\t\tSystem.out.println(\"Demo6,取得SuperMan类的方法：\");\n\t\t\tSystem.out.println(\"函数名：\" + methods[i].getName());\n\t\t\tSystem.out.println(\"函数返回类型：\" + methods[i].getReturnType());\n\t\t\tSystem.out.println(\"函数访问修饰符：\" + Modifier.toString(methods[i].getModifiers()));\n\t\t\tSystem.out.println(\"函数代码写法： \" + methods[i]);\n\t\t}\n\t\t\n\t\tSystem.out.println(\"===============================================\");\n\t\t\n\t\t//取得类实现的接口,因为接口类也属于Class,所以得到接口中的方法也是一样的方法得到哈\n\t\tClass<?> interfaces[] = class1.getInterfaces();\n\t\tfor (int i = 0; i < interfaces.length; i++) {\n\t\t\tSystem.out.println(\"实现的接口类名: \" + interfaces[i].getName() );\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Demo7: 通过Java反射机制调用类方法\n\t * @throws ClassNotFoundException \n\t * @throws NoSuchMethodException \n\t * @throws SecurityException \n\t * @throws InvocationTargetException \n\t * @throws IllegalAccessException \n\t * @throws IllegalArgumentException \n\t * @throws InstantiationException \n\t */\n\tpublic static void Demo7() throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, InstantiationException\n\t{\n\t\tClass<?> class1 = null;\n\t\tclass1 = Class.forName(\"cn.lee.demo.SuperMan\");\n\t\t\n\t\tSystem.out.println(\"Demo7: \\n调用无参方法fly()：\");\n\t\tMethod method = class1.getMethod(\"fly\");\n\t\tmethod.invoke(class1.newInstance());\n\t\t\n\t\tSystem.out.println(\"调用有参方法walk(int m)：\");\n\t\tmethod = class1.getMethod(\"walk\",int.class);\n\t\tmethod.invoke(class1.newInstance(),100);\n\t}\n\t\n\t/**\n\t * Demo8: 通过Java反射机制得到类加载器信息\n\t * \n\t * 在java中有三种类类加载器。[这段资料网上截取]\n\t\t1）Bootstrap ClassLoader 此加载器采用c++编写，一般开发中很少见。\n\t\t2）Extension ClassLoader 用来进行扩展类的加载，一般对应的是jre\\lib\\ext目录中的类\n\t\t3）AppClassLoader 加载classpath指定的类，是最常用的加载器。同时也是java中默认的加载器。\n\t * \n\t * @throws ClassNotFoundException \n\t */\n\tpublic static void Demo8() throws ClassNotFoundException\n\t{\n\t\tClass<?> class1 = null;\n\t\tclass1 = Class.forName(\"cn.lee.demo.SuperMan\");\n\t\tString nameString = class1.getClassLoader().getClass().getName();\n\t\t\n\t\tSystem.out.println(\"Demo8: 类加载器类名: \" + nameString);\n\t}\n\t\n\t\n\t\n}\n/**\n * \n * @author xiaoyaomeng\n *\n */\nclass  Person{\n\tprivate int age;\n\tprivate String name;\n\tpublic Person(){\n\t\t\n\t}\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n \n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n}\n \nclass SuperMan extends Person implements ActionInterface\n{\n\tprivate boolean BlueBriefs;\n\t\n\tpublic void fly()\n\t{\n\t\tSystem.out.println(\"超人会飞耶～～\");\n\t}\n\t\n\tpublic boolean isBlueBriefs() {\n\t\treturn BlueBriefs;\n\t}\n\tpublic void setBlueBriefs(boolean blueBriefs) {\n\t\tBlueBriefs = blueBriefs;\n\t}\n \n\t@Override\n\tpublic void walk(int m) {\n\t\t// TODO Auto-generated method stub\n\t\tSystem.out.println(\"超人会走耶～～走了\" + m + \"米就走不动了！\");\n\t}\n}\ninterface ActionInterface{\n\tpublic void walk(int m);\n}\n```\n## 五、java反射调用service或mapper中的接口\njava中的反射需要一个实例，但是接口无法提供这样的实例，但是JDK提供了一个叫做动态代理的东西，这个代理恰恰只能代理接口。所以我们想要反射接口需要使用这个动态代理来做。\n\n在java的动态代理机制中，有两个重要的东西，一个是 InvocationHandler(接口)、另一个则是 Proxy(类)，这是我们动态代理必须用到的两个东西。\n\n### 1、静态代理\n先来看一下静态代理\n```\npublic class TestStaticProxy {\n    //这里传入的是接口类型的对象，方便向上转型，实现多态\n    public static void consumer(ProxyInterface pi){\n        pi.say();\n    }\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        consumer(new ProxyObject());\n    }\n}\n\n//代理接口\ninterface ProxyInterface{\n    public void say();\n}\n\n\n//被代理者\nclass RealObject implements ProxyInterface{\n    //实现接口方法\n    @Override\n    public void say() {\n        // TODO Auto-generated method stub\n        System.out.println(\"say\");\n    }\n    \n}\n\n\n//代理者\nclass ProxyObject implements ProxyInterface{\n\n    @Override\n    public void say() {\n        // TODO Auto-generated method stub\n        //dosomething for example\n        System.out.println(\"hello proxy\");\n        new RealObject().say();\n        System.out.println(\"this is method end\");\n    }\n    \n}\noutput:\nhello proxy\nsay\nthis is method end\n```\n### 2、动态代理\n```\nimport java.lang.reflect.*;\n\npublic class TestActiveProxy{\n    static void customer(ProxyInterface pi){\n        pi.say();\n    }\n    public static void main(String[] args){\n        RealObject real = new RealObject();\n        ProxyInterface proxy = (ProxyInterface)Proxy.newProxyInstance(ProxyInterface.class.getClassLoader(),new Class[]{ProxyInterface.class}, new ProxyObject(real));\n        customer(proxy);\n    }\n}\n\n\ninterface ProxyInterface{\n    void say();\n}\n\n//被代理类\nclass RealObject implements ProxyInterface{\n    public void say(){\n        System.out.println(\"i'm talking\");\n    }\n}\n\n//代理类，实现InvocationHandler 接口\nclass ProxyObject implements InvocationHandler{\n    private Object proxied = null;\n    public ProxyObject(){\n        \n    }\n    public ProxyObject(Object proxied){\n        this.proxied  = proxied;\n    }\n    public Object invoke(Object arg0, Method arg1, Object[] arg2) throws Throwable {\n        System.out.println(\"hello\");\n        return arg1.invoke(proxied, arg2);\n    };\n}\n```\n\n### 3、应用场景\n假如现在我们需要通过反射得到`TestMapper`接口，然后调用其中的一个`selectById`方法\n```\n    public interface TestMapper{\n            /**\n            * 根据id查对象\n            */\n            User  selectById(@Param(\"id\") Integer id);\n    }\n```\n现在如果我们需要反射使用该接口根据用户ID获取用户对象是无法直接反射调取的，所以我们需要一个动态代理类。\n创建一个`MyInvocationHandler`实现`InvocationHandler`接口\n```\npublic class MyInvocationHandler implements InvocationHandler {\n\n    private Object target;\n\n    public MyInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        return method.invoke(target,args);\n    }\n}\n```\n去生成代理对象并调用方法\n```\n SqlSession sqlSession = this.sqlSessionFactory.openSession();\n\n Class<?> clazz = Class.forName(\"com.example.demo.mapper.TestMapper\");\n\n Object instance = Proxy.newProxyInstance(\n                clazz.getClassLoader(),\n                new Class[]{clazz},\n                new MyInvocationHandler(sqlSession.getMapper(clazz))\n        );\n//这里我是通过sqlSession来获取Mapper的\n\n Method method = instance.getClass().getMethod(\"selectById\",Integer.class);\n method.invoke(instance, 1);\n//object为mapper中传入的参数\n```\n\n这里需要注意，newProxyInstance()方法中最后一个参数，即为我们创建的动态代理的类（因为我这里调用的接口为mybatis中mapper中的接口，所以需要从sqlSession中getMapper）。\n\n\n参考：\nhttp://blog.qiji.tech/archives/4374\nhttps://www.jianshu.com/p/9be58ee20dee\nhttps://blog.csdn.net/ljphhj/article/details/12858767\nhttps://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn\n\n","slug":"Java反射","published":1,"updated":"2020-01-06T00:11:40.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwm20031sopsbb454v40","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hNGQzN2EyYjc0MWZiOGVhLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"一、什么是反射？\"><a href=\"#一、什么是反射？\" class=\"headerlink\" title=\"一、什么是反射？\"></a>一、什么是反射？</h2><p><a href=\"https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990\" target=\"_blank\" rel=\"noopener\">JAVA反射机制</a>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>\n<blockquote>\n<p>简单的来说：<br>1.通过new关键字创建对象操作对象，在编译时就已经确定。<br>2.通过反射可以在程序运行过程中动态的操作对象，可以获得编译期无法获得的信息，动态操作最大限度发挥了java扩展性。</p>\n</blockquote>\n<h2 id=\"二、反射原理\"><a href=\"#二、反射原理\" class=\"headerlink\" title=\"二、反射原理\"></a>二、反射原理</h2><p>Java反射的原理:java类的执行需要经历以下过程：</p>\n<ul>\n<li>编译：.java文件编译后生成.class字节码文件</li>\n<li>加载：类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例</li>\n<li>链接<br><code>验证</code>：格式（class文件规范） 语义（final类是否有子类） 操作<br><code>准备</code>：静态变量赋初值和内存空间，final修饰的内存空间直接赋原值，此处不是用户指定的初值。<br><code>解析</code>：符号引用转化为直接引用，分配地址</li>\n<li>初始化：有父类先初始化父类，然后初始化自己；将static修饰代码执行一遍，如果是静态变量，则用用户指定值覆盖原有初值；如果是代码块，则执行一遍操作。</li>\n</ul>\n<p>Java的反射就是利用上面第二步加载到jvm中的.class文件来进行操作的。.class文件中包含java类的所有信息，当你不知道某个类具体信息时，可以使用反射获取class，然后进行各种操作。</p>\n<p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。总结说：反射就是把java类中的各种成分映射成一个个的Java对象，并且可以进行操作。</p>\n<h2 id=\"三、反射机制相关\"><a href=\"#三、反射机制相关\" class=\"headerlink\" title=\"三、反射机制相关\"></a>三、反射机制相关</h2><p>与Java反射相关的类如下：</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Class类</td>\n<td>代表类的实体，在运行的Java应用程序中表示类和接口</td>\n</tr>\n<tr>\n<td>Field类</td>\n<td>代表类的成员变量（成员变量也称为类的属性）</td>\n</tr>\n<tr>\n<td>Method类</td>\n<td>代表类的方法</td>\n</tr>\n<tr>\n<td>Constructor类</td>\n<td>代表类的构造方法</td>\n</tr>\n</tbody></table>\n<p> 反射可访问的常用信息</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>访问方法</th>\n<th>返回值类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>包路径</td>\n<td>getPackage()</td>\n<td>Package 对象</td>\n<td>获取该类的存放路径</td>\n</tr>\n<tr>\n<td>类名称</td>\n<td>getName()</td>\n<td>String 对象</td>\n<td>获取该类的名称</td>\n</tr>\n<tr>\n<td>继承类</td>\n<td>getSuperclass()</td>\n<td>Class 对象</td>\n<td>获取该类继承的类</td>\n</tr>\n<tr>\n<td>实现接口</td>\n<td>getlnterfaces()</td>\n<td>Class 型数组</td>\n<td>获取该类实现的所有接口</td>\n</tr>\n<tr>\n<td>构造方法</td>\n<td>getConstructors()</td>\n<td>Constructor 型数组</td>\n<td>获取所有权限为 public 的构造方法</td>\n</tr>\n<tr>\n<td>构造方法</td>\n<td>getDeclaredContruectors()</td>\n<td>Constructor 对象</td>\n<td>获取当前对象的所有构造方法</td>\n</tr>\n<tr>\n<td>方法</td>\n<td>getMethods()</td>\n<td>Methods 型数组</td>\n<td>获取所有权限为 public 的方法</td>\n</tr>\n<tr>\n<td>方法</td>\n<td>getDeclaredMethods()</td>\n<td>Methods 对象</td>\n<td>获取当前对象的所有方法</td>\n</tr>\n<tr>\n<td>成员变量</td>\n<td>getFields()</td>\n<td>Field 型数组</td>\n<td>获取所有权限为 public 的成员变量</td>\n</tr>\n<tr>\n<td>成员变量</td>\n<td>getDeclareFileds()</td>\n<td>Field 对象</td>\n<td>获取当前对象的所有成员变量</td>\n</tr>\n<tr>\n<td>内部类</td>\n<td>getClasses()</td>\n<td>Class 型数组</td>\n<td>获取所有权限为 public 的内部类</td>\n</tr>\n<tr>\n<td>内部类</td>\n<td>getDeclaredClasses()</td>\n<td>Class 型数组</td>\n<td>获取所有内部类</td>\n</tr>\n<tr>\n<td>内部类的声明类</td>\n<td>getDeclaringClass()</td>\n<td>Class 对象</td>\n<td>如果该类为内部类，则返回它的成员类，否则返回 null</td>\n</tr>\n</tbody></table>\n<p>Java 反射机制主要提供了以下功能，这些功能都位于java.lang.reflect包。</p>\n<ul>\n<li><p>在运行时判断任意一个对象所属的类。</p>\n</li>\n<li><p>在运行时构造任意一个类的对象。</p>\n</li>\n<li><p>在运行时判断任意一个类所具有的成员变量和方法。</p>\n</li>\n<li><p>在运行时调用任意一个对象的方法。</p>\n</li>\n<li><p>生成动态代理。</p>\n</li>\n</ul>\n<h2 id=\"四、反射的使用\"><a href=\"#四、反射的使用\" class=\"headerlink\" title=\"四、反射的使用\"></a>四、反射的使用</h2><h3 id=\"1、java中的Class三种获取方式\"><a href=\"#1、java中的Class三种获取方式\" class=\"headerlink\" title=\"1、java中的Class三种获取方式\"></a>1、java中的Class三种获取方式</h3><p>　jdk提供了三种方式获取一个对象的Class，就Person person 来说</p>\n<p>　　1.person .getClass()，这个是Object类里面的方法</p>\n<p>　　2.Person .Class属性，任何的数据类型，基本数据类型或者抽象数据类型，都可以通过这种方式获取类</p>\n<p>　　3.Class.forName(“”)，Class类提供了这样一个方法，让我们通过类名来获取到对象类</p>\n<p>　说明：在运行期间，如果我们要产生某个类的对象，Java虚拟机(JVM)会检查该类型的Class对象是否已被加载。如果没有被加载，JVM会根据类的名称找到.class文件并加载它。一旦某个类型的Class对象已被加载到内存，就可以用它来产生该类型的所有对象。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;方式一</span><br><span class=\"line\">Person person &#x3D; new Person();</span><br><span class=\"line\">Class&lt;? extends Person&gt; personClazz01 &#x3D; person.getClass();</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;方式二</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    Class&lt;?&gt; personClazz02 &#x3D; Class.forName(&quot;Person&quot;);</span><br><span class=\"line\">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;方式三</span><br><span class=\"line\">Class&lt;? extends Person&gt; personClazz03 &#x3D; Person.class;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、如何通过反射获取私有成员变量和私有方法\"><a href=\"#2、如何通过反射获取私有成员变量和私有方法\" class=\"headerlink\" title=\"2、如何通过反射获取私有成员变量和私有方法\"></a>2、如何通过反射获取私有成员变量和私有方法</h3><p>Person类 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">private String name &#x3D; &quot;zhangsan&quot;;</span><br><span class=\"line\">private String age;</span><br><span class=\"line\"> </span><br><span class=\"line\">public String getName() &#123;</span><br><span class=\"line\">    return name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public void setName(String name) &#123;</span><br><span class=\"line\">    this.name &#x3D; name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    Person person &#x3D; new Person();</span><br><span class=\"line\">    &#x2F;&#x2F;打印没有改变属性之前的name值</span><br><span class=\"line\">    System.out.println(&quot;before：&quot; + getPrivateValue(person, &quot;name&quot;));</span><br><span class=\"line\">    person.setName(&quot;lisi&quot;);</span><br><span class=\"line\">    &#x2F;&#x2F;打印修改之后的name值</span><br><span class=\"line\">    System.out.println(&quot;after：&quot; + getPrivateValue(person, &quot;name&quot;));</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 通过反射获取私有的成员变量</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param person</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">private Object getPrivateValue(Person person, String fieldName) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Field field &#x3D; person.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        &#x2F;&#x2F; 参数值为true，打开禁用访问控制检查</span><br><span class=\"line\">        &#x2F;&#x2F;setAccessible(true) 并不是将方法的访问权限改成了public，而是取消java的权限控制检查。</span><br><span class=\"line\">        &#x2F;&#x2F;所以即使是public方法，其accessible 属相默认也是false</span><br><span class=\"line\">        field.setAccessible(true);</span><br><span class=\"line\">        return field.get(person);</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iNmRjM2Q1MWY1YTM5NzA1LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h3 id=\"3、demo\"><a href=\"#3、demo\" class=\"headerlink\" title=\"3、demo\"></a>3、demo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.lee.demo;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.lang.reflect.Constructor;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">import java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import java.lang.reflect.Modifier;</span><br><span class=\"line\">import java.lang.reflect.TypeVariable;</span><br><span class=\"line\"> </span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * 为了看清楚Java反射部分代码，所有异常我都最后抛出来给虚拟机处理！</span><br><span class=\"line\">\t * @param args</span><br><span class=\"line\">\t * @throws ClassNotFoundException</span><br><span class=\"line\">\t * @throws InstantiationException</span><br><span class=\"line\">\t * @throws IllegalAccessException</span><br><span class=\"line\">\t * @throws InvocationTargetException </span><br><span class=\"line\">\t * @throws IllegalArgumentException </span><br><span class=\"line\">\t * @throws NoSuchFieldException </span><br><span class=\"line\">\t * @throws SecurityException </span><br><span class=\"line\">\t * @throws NoSuchMethodException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, SecurityException, NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo1.  通过Java反射机制得到类的包名和类名</span><br><span class=\"line\">\t\tDemo1();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo2.  验证所有的类都是Class类的实例对象</span><br><span class=\"line\">\t\tDemo2();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo3.  通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]，无参构造</span><br><span class=\"line\">\t\tDemo3();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo4:  通过Java反射机制得到一个类的构造函数，并实现构造带参实例对象</span><br><span class=\"line\">\t\tDemo4();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo5:  通过Java反射机制操作成员变量, set 和 get</span><br><span class=\"line\">\t\tDemo5();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等</span><br><span class=\"line\">\t\tDemo6();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo7: 通过Java反射机制调用类中方法</span><br><span class=\"line\">\t\tDemo7();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo8: 通过Java反射机制获得类加载器</span><br><span class=\"line\">\t\tDemo8();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo1: 通过Java反射机制得到类的包名和类名</span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo1()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tPerson person &#x3D; new Person();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo1: 包名: &quot; + person.getClass().getPackage().getName() + &quot;，&quot; </span><br><span class=\"line\">\t\t\t\t+ &quot;完整类名: &quot; + person.getClass().getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo2: 验证所有的类都是Class类的实例对象</span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo2() throws ClassNotFoundException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F;定义两个类型都未知的Class , 设置初值为null, 看看如何给它们赋值成Person类</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">        Class&lt;?&gt; class2 &#x3D; null;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;写法1, 可能抛出 ClassNotFoundException [多用这个写法]</span><br><span class=\"line\">        class1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class=\"line\">        System.out.println(&quot;Demo2:(写法1) 包名: &quot; + class1.getPackage().getName() + &quot;，&quot; </span><br><span class=\"line\">\t\t\t\t+ &quot;完整类名: &quot; + class1.getName());</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;写法2</span><br><span class=\"line\">        class2 &#x3D; Person.class;</span><br><span class=\"line\">        System.out.println(&quot;Demo2:(写法2) 包名: &quot; + class2.getPackage().getName() + &quot;，&quot; </span><br><span class=\"line\">\t\t\t\t+ &quot;完整类名: &quot; + class2.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo3: 通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]</span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t * @throws IllegalAccessException </span><br><span class=\"line\">\t * @throws InstantiationException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo3() throws ClassNotFoundException, InstantiationException, IllegalAccessException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class=\"line\">\t\t&#x2F;&#x2F;由于这里不能带参数，所以你要实例化的这个类Person，一定要有无参构造函数哈～</span><br><span class=\"line\">\t\tPerson person &#x3D; (Person) class1.newInstance();</span><br><span class=\"line\">\t\tperson.setAge(20);</span><br><span class=\"line\">\t\tperson.setName(&quot;LeeFeng&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo3: &quot; + person.getName() + &quot; : &quot; + person.getAge());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo4: 通过Java反射机制得到一个类的构造函数，并实现创建带参实例对象</span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t * @throws InvocationTargetException </span><br><span class=\"line\">\t * @throws IllegalAccessException </span><br><span class=\"line\">\t * @throws InstantiationException </span><br><span class=\"line\">\t * @throws IllegalArgumentException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo4() throws ClassNotFoundException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tPerson person1 &#x3D; null;</span><br><span class=\"line\">\t\tPerson person2 &#x3D; null;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class=\"line\">\t\t&#x2F;&#x2F;得到一系列构造函数集合</span><br><span class=\"line\">\t\tConstructor&lt;?&gt;[] constructors &#x3D; class1.getConstructors();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tperson1 &#x3D; (Person) constructors[0].newInstance();</span><br><span class=\"line\">\t\tperson1.setAge(30);</span><br><span class=\"line\">\t\tperson1.setName(&quot;leeFeng&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tperson2 &#x3D; (Person) constructors[1].newInstance(20,&quot;leeFeng&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo4: &quot; + person1.getName() + &quot; : &quot; + person1.getAge()</span><br><span class=\"line\">\t\t\t\t+ &quot;  ,   &quot; + person2.getName() + &quot; : &quot; + person2.getAge()</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo5: 通过Java反射机制操作成员变量, set 和 get</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @throws IllegalAccessException </span><br><span class=\"line\">\t * @throws IllegalArgumentException </span><br><span class=\"line\">\t * @throws NoSuchFieldException </span><br><span class=\"line\">\t * @throws SecurityException </span><br><span class=\"line\">\t * @throws InstantiationException </span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo5() throws IllegalArgumentException, IllegalAccessException, SecurityException, NoSuchFieldException, InstantiationException, ClassNotFoundException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class=\"line\">\t\tObject obj &#x3D; class1.newInstance();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tField personNameField &#x3D; class1.getDeclaredField(&quot;name&quot;);</span><br><span class=\"line\">\t\tpersonNameField.setAccessible(true);</span><br><span class=\"line\">\t\tpersonNameField.set(obj, &quot;胖虎先森&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo5: 修改属性之后得到属性变量的值：&quot; + personNameField.get(obj));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"> </span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等</span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo6() throws ClassNotFoundException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;取得父类名称</span><br><span class=\"line\">\t\tClass&lt;?&gt;  superClass &#x3D; class1.getSuperclass();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo6:  SuperMan类的父类名: &quot; + superClass.getName());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tField[] fields &#x3D; class1.getDeclaredFields();</span><br><span class=\"line\">\t\tfor (int i &#x3D; 0; i &lt; fields.length; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;类中的成员: &quot; + fields[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;取得类方法</span><br><span class=\"line\">\t\tMethod[] methods &#x3D; class1.getDeclaredMethods();</span><br><span class=\"line\">\t\tfor (int i &#x3D; 0; i &lt; methods.length; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;Demo6,取得SuperMan类的方法：&quot;);</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;函数名：&quot; + methods[i].getName());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;函数返回类型：&quot; + methods[i].getReturnType());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;函数访问修饰符：&quot; + Modifier.toString(methods[i].getModifiers()));</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;函数代码写法： &quot; + methods[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;取得类实现的接口,因为接口类也属于Class,所以得到接口中的方法也是一样的方法得到哈</span><br><span class=\"line\">\t\tClass&lt;?&gt; interfaces[] &#x3D; class1.getInterfaces();</span><br><span class=\"line\">\t\tfor (int i &#x3D; 0; i &lt; interfaces.length; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;实现的接口类名: &quot; + interfaces[i].getName() );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo7: 通过Java反射机制调用类方法</span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t * @throws NoSuchMethodException </span><br><span class=\"line\">\t * @throws SecurityException </span><br><span class=\"line\">\t * @throws InvocationTargetException </span><br><span class=\"line\">\t * @throws IllegalAccessException </span><br><span class=\"line\">\t * @throws IllegalArgumentException </span><br><span class=\"line\">\t * @throws InstantiationException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo7() throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, InstantiationException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo7: \\n调用无参方法fly()：&quot;);</span><br><span class=\"line\">\t\tMethod method &#x3D; class1.getMethod(&quot;fly&quot;);</span><br><span class=\"line\">\t\tmethod.invoke(class1.newInstance());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;调用有参方法walk(int m)：&quot;);</span><br><span class=\"line\">\t\tmethod &#x3D; class1.getMethod(&quot;walk&quot;,int.class);</span><br><span class=\"line\">\t\tmethod.invoke(class1.newInstance(),100);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo8: 通过Java反射机制得到类加载器信息</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * 在java中有三种类类加载器。[这段资料网上截取]</span><br><span class=\"line\">\t\t1）Bootstrap ClassLoader 此加载器采用c++编写，一般开发中很少见。</span><br><span class=\"line\">\t\t2）Extension ClassLoader 用来进行扩展类的加载，一般对应的是jre\\lib\\ext目录中的类</span><br><span class=\"line\">\t\t3）AppClassLoader 加载classpath指定的类，是最常用的加载器。同时也是java中默认的加载器。</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo8() throws ClassNotFoundException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class=\"line\">\t\tString nameString &#x3D; class1.getClassLoader().getClass().getName();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo8: 类加载器类名: &quot; + nameString);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author xiaoyaomeng</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">class  Person&#123;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tpublic Person()&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Person(int age, String name)&#123;</span><br><span class=\"line\">\t\tthis.age &#x3D; age;</span><br><span class=\"line\">\t\tthis.name &#x3D; name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age &#x3D; age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name &#x3D; name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">class SuperMan extends Person implements ActionInterface</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate boolean BlueBriefs;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void fly()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;超人会飞耶～～&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic boolean isBlueBriefs() &#123;</span><br><span class=\"line\">\t\treturn BlueBriefs;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setBlueBriefs(boolean blueBriefs) &#123;</span><br><span class=\"line\">\t\tBlueBriefs &#x3D; blueBriefs;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void walk(int m) &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">\t\tSystem.out.println(&quot;超人会走耶～～走了&quot; + m + &quot;米就走不动了！&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface ActionInterface&#123;</span><br><span class=\"line\">\tpublic void walk(int m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、java反射调用service或mapper中的接口\"><a href=\"#五、java反射调用service或mapper中的接口\" class=\"headerlink\" title=\"五、java反射调用service或mapper中的接口\"></a>五、java反射调用service或mapper中的接口</h2><p>java中的反射需要一个实例，但是接口无法提供这样的实例，但是JDK提供了一个叫做动态代理的东西，这个代理恰恰只能代理接口。所以我们想要反射接口需要使用这个动态代理来做。</p>\n<p>在java的动态代理机制中，有两个重要的东西，一个是 InvocationHandler(接口)、另一个则是 Proxy(类)，这是我们动态代理必须用到的两个东西。</p>\n<h3 id=\"1、静态代理\"><a href=\"#1、静态代理\" class=\"headerlink\" title=\"1、静态代理\"></a>1、静态代理</h3><p>先来看一下静态代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestStaticProxy &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;这里传入的是接口类型的对象，方便向上转型，实现多态</span><br><span class=\"line\">    public static void consumer(ProxyInterface pi)&#123;</span><br><span class=\"line\">        pi.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">        consumer(new ProxyObject());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理接口</span><br><span class=\"line\">interface ProxyInterface&#123;</span><br><span class=\"line\">    public void say();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;被代理者</span><br><span class=\"line\">class RealObject implements ProxyInterface&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;实现接口方法</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void say() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">        System.out.println(&quot;say&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理者</span><br><span class=\"line\">class ProxyObject implements ProxyInterface&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void say() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">        &#x2F;&#x2F;dosomething for example</span><br><span class=\"line\">        System.out.println(&quot;hello proxy&quot;);</span><br><span class=\"line\">        new RealObject().say();</span><br><span class=\"line\">        System.out.println(&quot;this is method end&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output:</span><br><span class=\"line\">hello proxy</span><br><span class=\"line\">say</span><br><span class=\"line\">this is method end</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、动态代理\"><a href=\"#2、动态代理\" class=\"headerlink\" title=\"2、动态代理\"></a>2、动态代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang.reflect.*;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestActiveProxy&#123;</span><br><span class=\"line\">    static void customer(ProxyInterface pi)&#123;</span><br><span class=\"line\">        pi.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        RealObject real &#x3D; new RealObject();</span><br><span class=\"line\">        ProxyInterface proxy &#x3D; (ProxyInterface)Proxy.newProxyInstance(ProxyInterface.class.getClassLoader(),new Class[]&#123;ProxyInterface.class&#125;, new ProxyObject(real));</span><br><span class=\"line\">        customer(proxy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">interface ProxyInterface&#123;</span><br><span class=\"line\">    void say();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;被代理类</span><br><span class=\"line\">class RealObject implements ProxyInterface&#123;</span><br><span class=\"line\">    public void say()&#123;</span><br><span class=\"line\">        System.out.println(&quot;i&#39;m talking&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理类，实现InvocationHandler 接口</span><br><span class=\"line\">class ProxyObject implements InvocationHandler&#123;</span><br><span class=\"line\">    private Object proxied &#x3D; null;</span><br><span class=\"line\">    public ProxyObject()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public ProxyObject(Object proxied)&#123;</span><br><span class=\"line\">        this.proxied  &#x3D; proxied;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Object invoke(Object arg0, Method arg1, Object[] arg2) throws Throwable &#123;</span><br><span class=\"line\">        System.out.println(&quot;hello&quot;);</span><br><span class=\"line\">        return arg1.invoke(proxied, arg2);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、应用场景\"><a href=\"#3、应用场景\" class=\"headerlink\" title=\"3、应用场景\"></a>3、应用场景</h3><p>假如现在我们需要通过反射得到<code>TestMapper</code>接口，然后调用其中的一个<code>selectById</code>方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface TestMapper&#123;</span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">        * 根据id查对象</span><br><span class=\"line\">        *&#x2F;</span><br><span class=\"line\">        User  selectById(@Param(&quot;id&quot;) Integer id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在如果我们需要反射使用该接口根据用户ID获取用户对象是无法直接反射调取的，所以我们需要一个动态代理类。<br>创建一个<code>MyInvocationHandler</code>实现<code>InvocationHandler</code>接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyInvocationHandler(Object target) &#123;</span><br><span class=\"line\">        this.target &#x3D; target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">        return method.invoke(target,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>去生成代理对象并调用方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> SqlSession sqlSession &#x3D; this.sqlSessionFactory.openSession();</span><br><span class=\"line\"></span><br><span class=\"line\"> Class&lt;?&gt; clazz &#x3D; Class.forName(&quot;com.example.demo.mapper.TestMapper&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"> Object instance &#x3D; Proxy.newProxyInstance(</span><br><span class=\"line\">                clazz.getClassLoader(),</span><br><span class=\"line\">                new Class[]&#123;clazz&#125;,</span><br><span class=\"line\">                new MyInvocationHandler(sqlSession.getMapper(clazz))</span><br><span class=\"line\">        );</span><br><span class=\"line\">&#x2F;&#x2F;这里我是通过sqlSession来获取Mapper的</span><br><span class=\"line\"></span><br><span class=\"line\"> Method method &#x3D; instance.getClass().getMethod(&quot;selectById&quot;,Integer.class);</span><br><span class=\"line\"> method.invoke(instance, 1);</span><br><span class=\"line\">&#x2F;&#x2F;object为mapper中传入的参数</span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意，newProxyInstance()方法中最后一个参数，即为我们创建的动态代理的类（因为我这里调用的接口为mybatis中mapper中的接口，所以需要从sqlSession中getMapper）。</p>\n<p>参考：<br><a href=\"http://blog.qiji.tech/archives/4374\" target=\"_blank\" rel=\"noopener\">http://blog.qiji.tech/archives/4374</a><br><a href=\"https://www.jianshu.com/p/9be58ee20dee\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/9be58ee20dee</a><br><a href=\"https://blog.csdn.net/ljphhj/article/details/12858767\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ljphhj/article/details/12858767</a><br><a href=\"https://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">https://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hNGQzN2EyYjc0MWZiOGVhLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"一、什么是反射？\"><a href=\"#一、什么是反射？\" class=\"headerlink\" title=\"一、什么是反射？\"></a>一、什么是反射？</h2><p><a href=\"https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990\" target=\"_blank\" rel=\"noopener\">JAVA反射机制</a>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>\n<blockquote>\n<p>简单的来说：<br>1.通过new关键字创建对象操作对象，在编译时就已经确定。<br>2.通过反射可以在程序运行过程中动态的操作对象，可以获得编译期无法获得的信息，动态操作最大限度发挥了java扩展性。</p>\n</blockquote>\n<h2 id=\"二、反射原理\"><a href=\"#二、反射原理\" class=\"headerlink\" title=\"二、反射原理\"></a>二、反射原理</h2><p>Java反射的原理:java类的执行需要经历以下过程：</p>\n<ul>\n<li>编译：.java文件编译后生成.class字节码文件</li>\n<li>加载：类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例</li>\n<li>链接<br><code>验证</code>：格式（class文件规范） 语义（final类是否有子类） 操作<br><code>准备</code>：静态变量赋初值和内存空间，final修饰的内存空间直接赋原值，此处不是用户指定的初值。<br><code>解析</code>：符号引用转化为直接引用，分配地址</li>\n<li>初始化：有父类先初始化父类，然后初始化自己；将static修饰代码执行一遍，如果是静态变量，则用用户指定值覆盖原有初值；如果是代码块，则执行一遍操作。</li>\n</ul>\n<p>Java的反射就是利用上面第二步加载到jvm中的.class文件来进行操作的。.class文件中包含java类的所有信息，当你不知道某个类具体信息时，可以使用反射获取class，然后进行各种操作。</p>\n<p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。总结说：反射就是把java类中的各种成分映射成一个个的Java对象，并且可以进行操作。</p>\n<h2 id=\"三、反射机制相关\"><a href=\"#三、反射机制相关\" class=\"headerlink\" title=\"三、反射机制相关\"></a>三、反射机制相关</h2><p>与Java反射相关的类如下：</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Class类</td>\n<td>代表类的实体，在运行的Java应用程序中表示类和接口</td>\n</tr>\n<tr>\n<td>Field类</td>\n<td>代表类的成员变量（成员变量也称为类的属性）</td>\n</tr>\n<tr>\n<td>Method类</td>\n<td>代表类的方法</td>\n</tr>\n<tr>\n<td>Constructor类</td>\n<td>代表类的构造方法</td>\n</tr>\n</tbody></table>\n<p> 反射可访问的常用信息</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>访问方法</th>\n<th>返回值类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>包路径</td>\n<td>getPackage()</td>\n<td>Package 对象</td>\n<td>获取该类的存放路径</td>\n</tr>\n<tr>\n<td>类名称</td>\n<td>getName()</td>\n<td>String 对象</td>\n<td>获取该类的名称</td>\n</tr>\n<tr>\n<td>继承类</td>\n<td>getSuperclass()</td>\n<td>Class 对象</td>\n<td>获取该类继承的类</td>\n</tr>\n<tr>\n<td>实现接口</td>\n<td>getlnterfaces()</td>\n<td>Class 型数组</td>\n<td>获取该类实现的所有接口</td>\n</tr>\n<tr>\n<td>构造方法</td>\n<td>getConstructors()</td>\n<td>Constructor 型数组</td>\n<td>获取所有权限为 public 的构造方法</td>\n</tr>\n<tr>\n<td>构造方法</td>\n<td>getDeclaredContruectors()</td>\n<td>Constructor 对象</td>\n<td>获取当前对象的所有构造方法</td>\n</tr>\n<tr>\n<td>方法</td>\n<td>getMethods()</td>\n<td>Methods 型数组</td>\n<td>获取所有权限为 public 的方法</td>\n</tr>\n<tr>\n<td>方法</td>\n<td>getDeclaredMethods()</td>\n<td>Methods 对象</td>\n<td>获取当前对象的所有方法</td>\n</tr>\n<tr>\n<td>成员变量</td>\n<td>getFields()</td>\n<td>Field 型数组</td>\n<td>获取所有权限为 public 的成员变量</td>\n</tr>\n<tr>\n<td>成员变量</td>\n<td>getDeclareFileds()</td>\n<td>Field 对象</td>\n<td>获取当前对象的所有成员变量</td>\n</tr>\n<tr>\n<td>内部类</td>\n<td>getClasses()</td>\n<td>Class 型数组</td>\n<td>获取所有权限为 public 的内部类</td>\n</tr>\n<tr>\n<td>内部类</td>\n<td>getDeclaredClasses()</td>\n<td>Class 型数组</td>\n<td>获取所有内部类</td>\n</tr>\n<tr>\n<td>内部类的声明类</td>\n<td>getDeclaringClass()</td>\n<td>Class 对象</td>\n<td>如果该类为内部类，则返回它的成员类，否则返回 null</td>\n</tr>\n</tbody></table>\n<p>Java 反射机制主要提供了以下功能，这些功能都位于java.lang.reflect包。</p>\n<ul>\n<li><p>在运行时判断任意一个对象所属的类。</p>\n</li>\n<li><p>在运行时构造任意一个类的对象。</p>\n</li>\n<li><p>在运行时判断任意一个类所具有的成员变量和方法。</p>\n</li>\n<li><p>在运行时调用任意一个对象的方法。</p>\n</li>\n<li><p>生成动态代理。</p>\n</li>\n</ul>\n<h2 id=\"四、反射的使用\"><a href=\"#四、反射的使用\" class=\"headerlink\" title=\"四、反射的使用\"></a>四、反射的使用</h2><h3 id=\"1、java中的Class三种获取方式\"><a href=\"#1、java中的Class三种获取方式\" class=\"headerlink\" title=\"1、java中的Class三种获取方式\"></a>1、java中的Class三种获取方式</h3><p>　jdk提供了三种方式获取一个对象的Class，就Person person 来说</p>\n<p>　　1.person .getClass()，这个是Object类里面的方法</p>\n<p>　　2.Person .Class属性，任何的数据类型，基本数据类型或者抽象数据类型，都可以通过这种方式获取类</p>\n<p>　　3.Class.forName(“”)，Class类提供了这样一个方法，让我们通过类名来获取到对象类</p>\n<p>　说明：在运行期间，如果我们要产生某个类的对象，Java虚拟机(JVM)会检查该类型的Class对象是否已被加载。如果没有被加载，JVM会根据类的名称找到.class文件并加载它。一旦某个类型的Class对象已被加载到内存，就可以用它来产生该类型的所有对象。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;方式一</span><br><span class=\"line\">Person person &#x3D; new Person();</span><br><span class=\"line\">Class&lt;? extends Person&gt; personClazz01 &#x3D; person.getClass();</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;方式二</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    Class&lt;?&gt; personClazz02 &#x3D; Class.forName(&quot;Person&quot;);</span><br><span class=\"line\">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;方式三</span><br><span class=\"line\">Class&lt;? extends Person&gt; personClazz03 &#x3D; Person.class;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、如何通过反射获取私有成员变量和私有方法\"><a href=\"#2、如何通过反射获取私有成员变量和私有方法\" class=\"headerlink\" title=\"2、如何通过反射获取私有成员变量和私有方法\"></a>2、如何通过反射获取私有成员变量和私有方法</h3><p>Person类 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">private String name &#x3D; &quot;zhangsan&quot;;</span><br><span class=\"line\">private String age;</span><br><span class=\"line\"> </span><br><span class=\"line\">public String getName() &#123;</span><br><span class=\"line\">    return name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public void setName(String name) &#123;</span><br><span class=\"line\">    this.name &#x3D; name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    Person person &#x3D; new Person();</span><br><span class=\"line\">    &#x2F;&#x2F;打印没有改变属性之前的name值</span><br><span class=\"line\">    System.out.println(&quot;before：&quot; + getPrivateValue(person, &quot;name&quot;));</span><br><span class=\"line\">    person.setName(&quot;lisi&quot;);</span><br><span class=\"line\">    &#x2F;&#x2F;打印修改之后的name值</span><br><span class=\"line\">    System.out.println(&quot;after：&quot; + getPrivateValue(person, &quot;name&quot;));</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 通过反射获取私有的成员变量</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param person</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">private Object getPrivateValue(Person person, String fieldName) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Field field &#x3D; person.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        &#x2F;&#x2F; 参数值为true，打开禁用访问控制检查</span><br><span class=\"line\">        &#x2F;&#x2F;setAccessible(true) 并不是将方法的访问权限改成了public，而是取消java的权限控制检查。</span><br><span class=\"line\">        &#x2F;&#x2F;所以即使是public方法，其accessible 属相默认也是false</span><br><span class=\"line\">        field.setAccessible(true);</span><br><span class=\"line\">        return field.get(person);</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1iNmRjM2Q1MWY1YTM5NzA1LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h3 id=\"3、demo\"><a href=\"#3、demo\" class=\"headerlink\" title=\"3、demo\"></a>3、demo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.lee.demo;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.lang.reflect.Constructor;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">import java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import java.lang.reflect.Modifier;</span><br><span class=\"line\">import java.lang.reflect.TypeVariable;</span><br><span class=\"line\"> </span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * 为了看清楚Java反射部分代码，所有异常我都最后抛出来给虚拟机处理！</span><br><span class=\"line\">\t * @param args</span><br><span class=\"line\">\t * @throws ClassNotFoundException</span><br><span class=\"line\">\t * @throws InstantiationException</span><br><span class=\"line\">\t * @throws IllegalAccessException</span><br><span class=\"line\">\t * @throws InvocationTargetException </span><br><span class=\"line\">\t * @throws IllegalArgumentException </span><br><span class=\"line\">\t * @throws NoSuchFieldException </span><br><span class=\"line\">\t * @throws SecurityException </span><br><span class=\"line\">\t * @throws NoSuchMethodException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, SecurityException, NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo1.  通过Java反射机制得到类的包名和类名</span><br><span class=\"line\">\t\tDemo1();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo2.  验证所有的类都是Class类的实例对象</span><br><span class=\"line\">\t\tDemo2();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo3.  通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]，无参构造</span><br><span class=\"line\">\t\tDemo3();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo4:  通过Java反射机制得到一个类的构造函数，并实现构造带参实例对象</span><br><span class=\"line\">\t\tDemo4();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo5:  通过Java反射机制操作成员变量, set 和 get</span><br><span class=\"line\">\t\tDemo5();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等</span><br><span class=\"line\">\t\tDemo6();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo7: 通过Java反射机制调用类中方法</span><br><span class=\"line\">\t\tDemo7();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;Demo8: 通过Java反射机制获得类加载器</span><br><span class=\"line\">\t\tDemo8();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo1: 通过Java反射机制得到类的包名和类名</span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo1()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tPerson person &#x3D; new Person();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo1: 包名: &quot; + person.getClass().getPackage().getName() + &quot;，&quot; </span><br><span class=\"line\">\t\t\t\t+ &quot;完整类名: &quot; + person.getClass().getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo2: 验证所有的类都是Class类的实例对象</span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo2() throws ClassNotFoundException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F;定义两个类型都未知的Class , 设置初值为null, 看看如何给它们赋值成Person类</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">        Class&lt;?&gt; class2 &#x3D; null;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;写法1, 可能抛出 ClassNotFoundException [多用这个写法]</span><br><span class=\"line\">        class1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class=\"line\">        System.out.println(&quot;Demo2:(写法1) 包名: &quot; + class1.getPackage().getName() + &quot;，&quot; </span><br><span class=\"line\">\t\t\t\t+ &quot;完整类名: &quot; + class1.getName());</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;写法2</span><br><span class=\"line\">        class2 &#x3D; Person.class;</span><br><span class=\"line\">        System.out.println(&quot;Demo2:(写法2) 包名: &quot; + class2.getPackage().getName() + &quot;，&quot; </span><br><span class=\"line\">\t\t\t\t+ &quot;完整类名: &quot; + class2.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo3: 通过Java反射机制，用Class 创建类对象[这也就是反射存在的意义所在]</span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t * @throws IllegalAccessException </span><br><span class=\"line\">\t * @throws InstantiationException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo3() throws ClassNotFoundException, InstantiationException, IllegalAccessException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class=\"line\">\t\t&#x2F;&#x2F;由于这里不能带参数，所以你要实例化的这个类Person，一定要有无参构造函数哈～</span><br><span class=\"line\">\t\tPerson person &#x3D; (Person) class1.newInstance();</span><br><span class=\"line\">\t\tperson.setAge(20);</span><br><span class=\"line\">\t\tperson.setName(&quot;LeeFeng&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo3: &quot; + person.getName() + &quot; : &quot; + person.getAge());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo4: 通过Java反射机制得到一个类的构造函数，并实现创建带参实例对象</span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t * @throws InvocationTargetException </span><br><span class=\"line\">\t * @throws IllegalAccessException </span><br><span class=\"line\">\t * @throws InstantiationException </span><br><span class=\"line\">\t * @throws IllegalArgumentException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo4() throws ClassNotFoundException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tPerson person1 &#x3D; null;</span><br><span class=\"line\">\t\tPerson person2 &#x3D; null;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class=\"line\">\t\t&#x2F;&#x2F;得到一系列构造函数集合</span><br><span class=\"line\">\t\tConstructor&lt;?&gt;[] constructors &#x3D; class1.getConstructors();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tperson1 &#x3D; (Person) constructors[0].newInstance();</span><br><span class=\"line\">\t\tperson1.setAge(30);</span><br><span class=\"line\">\t\tperson1.setName(&quot;leeFeng&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tperson2 &#x3D; (Person) constructors[1].newInstance(20,&quot;leeFeng&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo4: &quot; + person1.getName() + &quot; : &quot; + person1.getAge()</span><br><span class=\"line\">\t\t\t\t+ &quot;  ,   &quot; + person2.getName() + &quot; : &quot; + person2.getAge()</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo5: 通过Java反射机制操作成员变量, set 和 get</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @throws IllegalAccessException </span><br><span class=\"line\">\t * @throws IllegalArgumentException </span><br><span class=\"line\">\t * @throws NoSuchFieldException </span><br><span class=\"line\">\t * @throws SecurityException </span><br><span class=\"line\">\t * @throws InstantiationException </span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo5() throws IllegalArgumentException, IllegalAccessException, SecurityException, NoSuchFieldException, InstantiationException, ClassNotFoundException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.Person&quot;);</span><br><span class=\"line\">\t\tObject obj &#x3D; class1.newInstance();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tField personNameField &#x3D; class1.getDeclaredField(&quot;name&quot;);</span><br><span class=\"line\">\t\tpersonNameField.setAccessible(true);</span><br><span class=\"line\">\t\tpersonNameField.set(obj, &quot;胖虎先森&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo5: 修改属性之后得到属性变量的值：&quot; + personNameField.get(obj));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"> </span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo6: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等</span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo6() throws ClassNotFoundException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;取得父类名称</span><br><span class=\"line\">\t\tClass&lt;?&gt;  superClass &#x3D; class1.getSuperclass();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo6:  SuperMan类的父类名: &quot; + superClass.getName());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tField[] fields &#x3D; class1.getDeclaredFields();</span><br><span class=\"line\">\t\tfor (int i &#x3D; 0; i &lt; fields.length; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;类中的成员: &quot; + fields[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;取得类方法</span><br><span class=\"line\">\t\tMethod[] methods &#x3D; class1.getDeclaredMethods();</span><br><span class=\"line\">\t\tfor (int i &#x3D; 0; i &lt; methods.length; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;Demo6,取得SuperMan类的方法：&quot;);</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;函数名：&quot; + methods[i].getName());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;函数返回类型：&quot; + methods[i].getReturnType());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;函数访问修饰符：&quot; + Modifier.toString(methods[i].getModifiers()));</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;函数代码写法： &quot; + methods[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;取得类实现的接口,因为接口类也属于Class,所以得到接口中的方法也是一样的方法得到哈</span><br><span class=\"line\">\t\tClass&lt;?&gt; interfaces[] &#x3D; class1.getInterfaces();</span><br><span class=\"line\">\t\tfor (int i &#x3D; 0; i &lt; interfaces.length; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;实现的接口类名: &quot; + interfaces[i].getName() );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo7: 通过Java反射机制调用类方法</span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t * @throws NoSuchMethodException </span><br><span class=\"line\">\t * @throws SecurityException </span><br><span class=\"line\">\t * @throws InvocationTargetException </span><br><span class=\"line\">\t * @throws IllegalAccessException </span><br><span class=\"line\">\t * @throws IllegalArgumentException </span><br><span class=\"line\">\t * @throws InstantiationException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo7() throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, InstantiationException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo7: \\n调用无参方法fly()：&quot;);</span><br><span class=\"line\">\t\tMethod method &#x3D; class1.getMethod(&quot;fly&quot;);</span><br><span class=\"line\">\t\tmethod.invoke(class1.newInstance());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;调用有参方法walk(int m)：&quot;);</span><br><span class=\"line\">\t\tmethod &#x3D; class1.getMethod(&quot;walk&quot;,int.class);</span><br><span class=\"line\">\t\tmethod.invoke(class1.newInstance(),100);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;**</span><br><span class=\"line\">\t * Demo8: 通过Java反射机制得到类加载器信息</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * 在java中有三种类类加载器。[这段资料网上截取]</span><br><span class=\"line\">\t\t1）Bootstrap ClassLoader 此加载器采用c++编写，一般开发中很少见。</span><br><span class=\"line\">\t\t2）Extension ClassLoader 用来进行扩展类的加载，一般对应的是jre\\lib\\ext目录中的类</span><br><span class=\"line\">\t\t3）AppClassLoader 加载classpath指定的类，是最常用的加载器。同时也是java中默认的加载器。</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @throws ClassNotFoundException </span><br><span class=\"line\">\t *&#x2F;</span><br><span class=\"line\">\tpublic static void Demo8() throws ClassNotFoundException</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 &#x3D; null;</span><br><span class=\"line\">\t\tclass1 &#x3D; Class.forName(&quot;cn.lee.demo.SuperMan&quot;);</span><br><span class=\"line\">\t\tString nameString &#x3D; class1.getClassLoader().getClass().getName();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Demo8: 类加载器类名: &quot; + nameString);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author xiaoyaomeng</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">class  Person&#123;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tpublic Person()&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Person(int age, String name)&#123;</span><br><span class=\"line\">\t\tthis.age &#x3D; age;</span><br><span class=\"line\">\t\tthis.name &#x3D; name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age &#x3D; age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name &#x3D; name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">class SuperMan extends Person implements ActionInterface</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate boolean BlueBriefs;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void fly()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;超人会飞耶～～&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic boolean isBlueBriefs() &#123;</span><br><span class=\"line\">\t\treturn BlueBriefs;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setBlueBriefs(boolean blueBriefs) &#123;</span><br><span class=\"line\">\t\tBlueBriefs &#x3D; blueBriefs;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void walk(int m) &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">\t\tSystem.out.println(&quot;超人会走耶～～走了&quot; + m + &quot;米就走不动了！&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface ActionInterface&#123;</span><br><span class=\"line\">\tpublic void walk(int m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、java反射调用service或mapper中的接口\"><a href=\"#五、java反射调用service或mapper中的接口\" class=\"headerlink\" title=\"五、java反射调用service或mapper中的接口\"></a>五、java反射调用service或mapper中的接口</h2><p>java中的反射需要一个实例，但是接口无法提供这样的实例，但是JDK提供了一个叫做动态代理的东西，这个代理恰恰只能代理接口。所以我们想要反射接口需要使用这个动态代理来做。</p>\n<p>在java的动态代理机制中，有两个重要的东西，一个是 InvocationHandler(接口)、另一个则是 Proxy(类)，这是我们动态代理必须用到的两个东西。</p>\n<h3 id=\"1、静态代理\"><a href=\"#1、静态代理\" class=\"headerlink\" title=\"1、静态代理\"></a>1、静态代理</h3><p>先来看一下静态代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestStaticProxy &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;这里传入的是接口类型的对象，方便向上转型，实现多态</span><br><span class=\"line\">    public static void consumer(ProxyInterface pi)&#123;</span><br><span class=\"line\">        pi.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">        consumer(new ProxyObject());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理接口</span><br><span class=\"line\">interface ProxyInterface&#123;</span><br><span class=\"line\">    public void say();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;被代理者</span><br><span class=\"line\">class RealObject implements ProxyInterface&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;实现接口方法</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void say() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">        System.out.println(&quot;say&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理者</span><br><span class=\"line\">class ProxyObject implements ProxyInterface&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void say() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">        &#x2F;&#x2F;dosomething for example</span><br><span class=\"line\">        System.out.println(&quot;hello proxy&quot;);</span><br><span class=\"line\">        new RealObject().say();</span><br><span class=\"line\">        System.out.println(&quot;this is method end&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output:</span><br><span class=\"line\">hello proxy</span><br><span class=\"line\">say</span><br><span class=\"line\">this is method end</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、动态代理\"><a href=\"#2、动态代理\" class=\"headerlink\" title=\"2、动态代理\"></a>2、动态代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang.reflect.*;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestActiveProxy&#123;</span><br><span class=\"line\">    static void customer(ProxyInterface pi)&#123;</span><br><span class=\"line\">        pi.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        RealObject real &#x3D; new RealObject();</span><br><span class=\"line\">        ProxyInterface proxy &#x3D; (ProxyInterface)Proxy.newProxyInstance(ProxyInterface.class.getClassLoader(),new Class[]&#123;ProxyInterface.class&#125;, new ProxyObject(real));</span><br><span class=\"line\">        customer(proxy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">interface ProxyInterface&#123;</span><br><span class=\"line\">    void say();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;被代理类</span><br><span class=\"line\">class RealObject implements ProxyInterface&#123;</span><br><span class=\"line\">    public void say()&#123;</span><br><span class=\"line\">        System.out.println(&quot;i&#39;m talking&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理类，实现InvocationHandler 接口</span><br><span class=\"line\">class ProxyObject implements InvocationHandler&#123;</span><br><span class=\"line\">    private Object proxied &#x3D; null;</span><br><span class=\"line\">    public ProxyObject()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public ProxyObject(Object proxied)&#123;</span><br><span class=\"line\">        this.proxied  &#x3D; proxied;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Object invoke(Object arg0, Method arg1, Object[] arg2) throws Throwable &#123;</span><br><span class=\"line\">        System.out.println(&quot;hello&quot;);</span><br><span class=\"line\">        return arg1.invoke(proxied, arg2);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、应用场景\"><a href=\"#3、应用场景\" class=\"headerlink\" title=\"3、应用场景\"></a>3、应用场景</h3><p>假如现在我们需要通过反射得到<code>TestMapper</code>接口，然后调用其中的一个<code>selectById</code>方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface TestMapper&#123;</span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">        * 根据id查对象</span><br><span class=\"line\">        *&#x2F;</span><br><span class=\"line\">        User  selectById(@Param(&quot;id&quot;) Integer id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在如果我们需要反射使用该接口根据用户ID获取用户对象是无法直接反射调取的，所以我们需要一个动态代理类。<br>创建一个<code>MyInvocationHandler</code>实现<code>InvocationHandler</code>接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyInvocationHandler(Object target) &#123;</span><br><span class=\"line\">        this.target &#x3D; target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">        return method.invoke(target,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>去生成代理对象并调用方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> SqlSession sqlSession &#x3D; this.sqlSessionFactory.openSession();</span><br><span class=\"line\"></span><br><span class=\"line\"> Class&lt;?&gt; clazz &#x3D; Class.forName(&quot;com.example.demo.mapper.TestMapper&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"> Object instance &#x3D; Proxy.newProxyInstance(</span><br><span class=\"line\">                clazz.getClassLoader(),</span><br><span class=\"line\">                new Class[]&#123;clazz&#125;,</span><br><span class=\"line\">                new MyInvocationHandler(sqlSession.getMapper(clazz))</span><br><span class=\"line\">        );</span><br><span class=\"line\">&#x2F;&#x2F;这里我是通过sqlSession来获取Mapper的</span><br><span class=\"line\"></span><br><span class=\"line\"> Method method &#x3D; instance.getClass().getMethod(&quot;selectById&quot;,Integer.class);</span><br><span class=\"line\"> method.invoke(instance, 1);</span><br><span class=\"line\">&#x2F;&#x2F;object为mapper中传入的参数</span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意，newProxyInstance()方法中最后一个参数，即为我们创建的动态代理的类（因为我这里调用的接口为mybatis中mapper中的接口，所以需要从sqlSession中getMapper）。</p>\n<p>参考：<br><a href=\"http://blog.qiji.tech/archives/4374\" target=\"_blank\" rel=\"noopener\">http://blog.qiji.tech/archives/4374</a><br><a href=\"https://www.jianshu.com/p/9be58ee20dee\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/9be58ee20dee</a><br><a href=\"https://blog.csdn.net/ljphhj/article/details/12858767\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ljphhj/article/details/12858767</a><br><a href=\"https://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">https://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hNGQzN2EyYjc0MWZiOGVhLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Mon Jan 06 2020 08:11:40 GMT+0800 (GMT+08:00)","title":"Java反射","path":"2020/01/06/Java反射/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hNGQzN2EyYjc0MWZiOGVhLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hNGQzN2EyYjc0MWZiOGVhLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2020-01-05T23:57:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["反射"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"快速搭建Spring Boot项目及常用技术整合","date":"2020-01-01T03:18:00.000Z","cover":true,"_content":"\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZWEzZDRhYjIyOGVmNjIxLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n### Spring Boot简介\nSpring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。\n### Spring Boot特点\n* 创建独立的Spring应用程序\n\n* 嵌入的Tomcat，无需部署WAR文件\n\n* 简化Maven配置\n\n* 自动配置Spring\n\n* 提供生产就绪型功能，如指标，健康检查和外部配置\n\n* 绝对没有代码生成并且对XML也没有配置要求\n### 快速入门\n####  1、访问http://start.spring.io/构建项目，也可在idea创建如下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191218173310114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RldmlsbGkwMzEw,size_16,color_FFFFFF,t_70)\n![step2.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05ZWMxNTkwMzg4MzE0ZWYxLnBuZw?x-oss-process=image/format,png)\n![step3.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xN2RlNDY2YTU4Yjk1YWQyLnBuZw?x-oss-process=image/format,png)\n![step4.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNzQwYWIyYzFiMTE2ZGYzLnBuZw?x-oss-process=image/format,png)\n#### 2、 springboot默认生成三个文件\n##### 2.1 pom.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.4.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.example</groupId>\n    <artifactId>demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>demo</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n重点就一个gav：spring-boot-starter-web，其他可以删除。\n##### 2.2 application.properties\n该文件默认为空，springboot的默认启动端口号：8080，可以在改文件修改。建议用yml的格式\n```\nserver:\n  port: 8080\n```\n##### 2.3 启动类文件\n```\npublic class JxcApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JxcApplication.class, args);\n    }\n\n}\n```\n##### 2.4 验证springboot\n在项目包路径下创建一个Controller，写一个`HelloController `\n```\n@Controller\npublic class HelloController {\n\n    @RequestMapping(\"/\")\n    @ResponseBody\n    public String getHello() {\n        return \"hello\";\n    }\n}\n```\n浏览器查看效果\n![HelloController.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMDhmZmU5ZDVjZWI5Nzg4LnBuZw?x-oss-process=image/format,png)\n\n### 完成项目\n#### 完整项目目录\n![project.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZDM5ZWI1ZTRkOGU5ZjJjLnBuZw?x-oss-process=image/format,png)\n#### 1、项目依赖\n* web \n```\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>2.1.0</version>\n        </dependency>\n\n      <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjweaver</artifactId>\n            <version>${aspectjweaver.version}</version>\n        </dependency>\n```\n* mysql\n```\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>${mysql.version}</version>\n        </dependency>\n```\n* lombok(可选)\n```\n       <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n```\n* pagehelper(可选)\n```\n       <dependency>\n            <groupId>com.github.pagehelper</groupId>\n            <artifactId>pagehelper-spring-boot-starter</artifactId>\n            <version>${pagehelper.version}</version>\n        </dependency>\n```\n* JWT(可选)\n```\n       <dependency>\n            <groupId>io.jsonwebtoken</groupId>\n            <artifactId>jjwt</artifactId>\n            <version>${jwt.version}</version>\n        </dependency>\n```\n* mybatis\n```\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis-spring</artifactId>\n            <version>2.0.2</version>\n        </dependency>\n```\n* shiro\n```\n       <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-spring</artifactId>\n            <version>1.4.0</version>\n        </dependency>\n```\n* hutool(可选)\n```\n<dependency>\n            <groupId>cn.hutool</groupId>\n            <artifactId>hutool-all</artifactId>\n            <version>5.0.7</version>\n        </dependency>\n```\n* druid\n```\n       <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid-spring-boot-starter</artifactId>\n            <version>1.1.10</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.10</version>\n        </dependency>\n```\n* jdbc\n```\n <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n```\n* fastjson\n```\n      <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>${fastjson.version}</version>\n        </dependency>\n```\n* tomcat\n```\n       <dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-core</artifactId>\n        </dependency>\n```\n附上properties\n```\n<properties>\n        <project.version>1.0</project.version>\n        <java.version>1.8</java.version>\n        <mysql.version>5.1.25</mysql.version>\n        <pagehelper.version>1.2.12</pagehelper.version>\n        <jwt.version>0.9.1</jwt.version>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <commons.lang.version>3.9</commons.lang.version>\n        <aspectjweaver.version>1.9.4</aspectjweaver.version>\n        <fastjson.version>1.2.62</fastjson.version>\n    </properties>\n```\n#### 2、配置文件\n##### 2.1修改`application.properties`为`application.yml`\n配置端口，项目根路径，spring配置，mybatis配置，分页插件配置\n```\n\nserver:\n  port: 8100\n  servlet:\n    context-path: /api\n\n\nspring:\n  profiles:\n    active: dev\n  http:\n    encoding:\n      charset: UTF-8\n      force: true\n      enabled: true\n\nmybatis:\n  mapper-locations: classpath:/mapper/*.xml\n  type-aliases-package: com.example.jxc.domain.entity.*\n  configuration:\n    cache-enabled: true\n    lazy-loading-enabled: true\n    multiple-result-sets-enabled: true\n    use-column-label: true\n    call-setters-on-nulls: true\n    local-cache-scope: session\n    map-underscore-to-camel-case: true\n    default-executor-type: BATCH\n    auto-mapping-behavior: PARTIAL\n\npagehelper:\n  helperDialect: mysql\n  reasonable: true\n  supportMethodsArguments: true\n  params: count=countSql\n\n```\n\nmybatis中的configuration配置，这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项的意图、默认值等。\n| 设置名| 描述| 有效值|默认值|\n|-----|-----|------|------|\n| cacheEnabled | 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。 |  true  false |true|\n| lazyLoadingEnabled| 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 |  true  false |false|\n| aggressiveLazyLoading|  \t当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。 |  true  false |false （在 3.4.1 及之前的版本默认值为 true） |\n| multipleResultSetsEnabled| 是否允许单一语句返回多结果集（需要驱动支持）。 |  true  false |true|\n| useColumnLabel|  \t使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。  |  true  false |true|\n| useGeneratedKeys| 允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。 |  true  false |false |\n| autoMappingBehavior| 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 | NONE, PARTIAL, FULL  |PARTIAL|\n| autoMappingUnknownColumnBehavior| 指定发现自动映射目标未知列（或者未知属性类型）的行为。NONE: 不做任何反应，WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN) ，FAILING: 映射失败 (抛出 SqlSessionException) |  NONE, WARNING, FAILING  |NONE|\n| defaultExecutorType| 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。 |  SIMPLE REUSE BATCH  |SIMPLE|\n| defaultStatementTimeout|  \t设置超时时间，它决定驱动等待数据库响应的秒数。  |  任意正整数 |未设置 (null) |\n| defaultFetchSize|  \t为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。  |  任意正整数 |未设置 (null) |\n| defaultResultSetType|  \tSpecifies a scroll strategy when omit it per statement settings. (Since: 3.5.2)  |  FORWARD_ONLY SCROLL_SENSITIVE SCROLL_INSENSITIVE  DEFAULT(same behavior with 'Not Set')  |Not Set (null) |\n| safeRowBoundsEnabled| 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。  |  true  false |false |\n| safeResultHandlerEnabled|允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为 false。 |  true  false |false |\n| mapUnderscoreToCamelCase|是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 |  true  false |false |\n| localCacheScope| MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。  |  SESSION  STATEMENT |SESSION  |\n| jdbcTypeForNull| 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 |  JdbcType 常量，常用值：NULL, VARCHAR 或 OTHER。|OTHER|\n| lazyLoadTriggerMethods| 指定哪个对象的方法触发一次延迟加载。 | 用逗号分隔的方法列表 |equals,clone,hashCode,toString |\n| defaultScriptingLanguage| 指定动态 SQL 生成的默认语言。 | 一个类型别名或完全限定类名 |org.apache.ibatis.scripting.xmltags.XMLLanguageDriver |\n| defaultEnumTypeHandler|指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）  | 一个类型别名或完全限定类名 |org.apache.ibatis.type.EnumTypeHandler |\n| callSettersOnNulls| 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值初始化的时候比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。 |  true  false |false |\n| returnInstanceForEmptyRow| 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2）  |  true  false |false |\n| logPrefix| 指定 MyBatis 增加到日志名称的前缀。 |  任何字符串 |未设置|\n| logImpl| 指定 MyBatis  \t指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 |  SLF4J,LOG4J,LOG4J2,JDK_LOGGING,COMMONS_LOGGING,STDOUT_LOGGING,NO_LOGGING |未设置|\n| proxyFactory|  \t指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。 |   \tCGLIB ,JAVASSIST |AVASSIST （MyBatis 3.3 以上） |\n| vfsImpl| 指定 VFS 的实现  |   \t自定义 VFS 的实现的类全限定名，以逗号分隔。 |未设置|\n| useActualParamName| 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）  |  true   false  |true|\n| configurationFactory|  \t指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3）   |   \t类型别名或者全类名.  |未设置|\n\n##### 2.2 新建`application-dev.yml`\n配置数据库信息,通过`application.yml`中的active来启用dev配置文件\n```\nspring:\n  profiles:\n    active: dev\n```\n`application-dev.yml`完整配置\n```\nspring:\n  datasource:\n    #   数据源基本配置\n    username: root\n    password:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/fhshgl\n    type: com.alibaba.druid.pool.DruidDataSource\n    #   数据源其他配置\n    initialSize: 5\n    minIdle: 5\n    maxActive: 20\n    maxWait: 60000\n    timeBetweenEvictionRunsMillis: 60000\n    minEvictableIdleTimeMillis: 300000\n    validationQuery: SELECT 1 FROM DUAL\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    poolPreparedStatements: true\n    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙\n    filters: stat,wall\n    maxPoolPreparedStatementPerConnectionSize: 20\n    useGlobalDataSourceStat: true\n    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500\n```\n#### 3、数据库连接池\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjc5NGJmZjQ0ZDk3NjY4LnBuZw?x-oss-process=image/format,png)\n```\n@Configuration\npublic class DruidConfig {\n\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    @Bean\n    public DataSource druid(){\n        return  new DruidDataSource();\n    }\n\n    /**\n     * 配置Druid的监控\n     * @return\n     */\n    @Bean\n    public ServletRegistrationBean statViewServlet(){\n        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), \"/druid/*\");\n        Map<String,String> initParams = new HashMap<>();\n\n        initParams.put(\"loginUsername\",\"admin\");\n        initParams.put(\"loginPassword\",\"123456\");\n        //默认就是允许所有访问\n        initParams.put(\"allow\",\"\");\n        initParams.put(\"deny\",\"192.168.15.21\");\n\n        bean.setInitParameters(initParams);\n        return bean;\n    }\n\n\n    /**\n     * 配置一个web监控的filter\n     * @return\n     */\n    @Bean\n    public FilterRegistrationBean webStatFilter(){\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new WebStatFilter());\n\n        Map<String,String> initParams = new HashMap<>();\n        initParams.put(\"exclusions\",\"*.js,*.css,/druid/*\");\n\n        bean.setInitParameters(initParams);\n\n        bean.setUrlPatterns(Arrays.asList(\"/*\"));\n\n        return  bean;\n    }\n}\n```\n#### 4、shiro\n##### 4.1自定义realm\n![realm.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMzlmZmVlNDViNzQxOWIzLnBuZw?x-oss-process=image/format,png)\n代码如下：\n```\npublic class MyRealm extends AuthorizingRealm{\n\n    @Autowired\n    private UserService userService;\n\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n        return null;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        //拿到封装好账户密码的token\n        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;\n        String userName = token.getUsername();\n        //用户校验\n        User user = this.userService.getUser(userName);\n        if (user == null) {\n            throw new AuthenticationException(\"用户名或密码错误！\");\n        }\n        //加盐 计算盐值 保证每个加密后的 MD5 不一样\n        ByteSource credentialsSalt = ByteSource.Util.bytes(user.getUsername());\n        SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(user, user.getPassword(), credentialsSalt,\n                this.getName());\n        return info;\n    }\n}\n```\n##### 4.2shiro配置\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kMmViZjdkM2UwOWExNzBlLnBuZw?x-oss-process=image/format,png)\n\n```\n@Configuration\npublic class ShiroConfig {\n\n    /**\n     * 主要配置一些相应的URL的规则和访问权限\n     */\n    @Bean\n    public ShiroFilterFactoryBean shiroFilter() {\n        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();\n        shiroFilterFactoryBean.setSecurityManager(securityManager());\n        //拦截器.\n        Map<String, String> filterChainDefinitionMap = new LinkedHashMap<String, String>();\n        //配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了\n        filterChainDefinitionMap.put(\"/system/logout\", \"anon\");\n        //过滤链定义，从上向下顺序执行，一般将/**放在最为下边\n        //authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问\n//        filterChainDefinitionMap.put(\"/static/**\", \"anon\");\n        shiroFilterFactoryBean.setLoginUrl(\"/system/login\");\n        filterChainDefinitionMap.put(\"/**\", \"authc\");\n        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);\n        return shiroFilterFactoryBean;\n    }\n\n\n    /**\n     * 注入 securityManager\n     */\n    @Bean\n    public DefaultWebSecurityManager securityManager() {\n        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n        // 设置realm.\n        securityManager.setRealm(customRealm());\n        return securityManager;\n    }\n\n    /**\n     * 自定义身份认证 realm;\n     * <p>\n     * 必须写这个类，并加上 @Bean 注解，目的是注入 MyRealm，\n     * 否则会影响 MyRealm 中其他类的依赖注入\n     */\n    @Bean\n    public MyRealm customRealm() {\n        return new MyRealm();\n    }\n\n\n    /**\n     * 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证\n     * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能\n     *\n     * @return\n     */\n    @Bean\n    @DependsOn({\"lifecycleBeanPostProcessor\"})\n    public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() {\n        DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();\n        advisorAutoProxyCreator.setProxyTargetClass(true);\n        return advisorAutoProxyCreator;\n    }\n\n    @Bean\n    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor() {\n        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();\n        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());\n        return authorizationAttributeSourceAdvisor;\n    }\n\n    /**\n     * Shiro生命周期处理器 ---可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.\n     *\n     * @return\n     */\n    @Bean\n    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {\n        return new LifecycleBeanPostProcessor();\n    }\n}\n```\n#### 5、过滤器-跨域过滤\n##### 5.1跨域过滤\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODEwMTBkMGZhZGEwYTcwLnBuZw?x-oss-process=image/format,png)\n```\npublic class CostFilter implements Filter {\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletRequest req = (HttpServletRequest) request;\n        HttpServletResponse resp = (HttpServletResponse) response;\n        String origin = req.getHeader(\"Origin\");\n        if (origin == null) {\n            origin = req.getHeader(\"Referer\");\n        }\n        // 允许指定域访问跨域资源\n        resp.setHeader(\"Access-Control-Allow-Origin\", origin);\n        // 允许客户端携带跨域cookie，此时origin值不能为“*”，只能为指定单一域名\n        resp.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n\n        if (\"OPTIONS\".equals(req.getMethod())) {\n            String allowMethod = req.getHeader(\"Access-Control-Request-Method\");\n            String allowHeaders = req.getHeader(\"Access-Control-Request-Headers\");\n            // 浏览器缓存预检请求结果时间,单位:秒\n            resp.setHeader(\"Access-Control-Max-Age\", \"86400\");\n            // 允许浏览器在预检请求成功之后发送的实际请求方法名\n            resp.setHeader(\"Access-Control-Allow-Methods\", allowMethod);\n            // 允许浏览器发送的请求消息头\n            resp.setHeader(\"Access-Control-Allow-Headers\", allowHeaders);\n            resp.setHeader(\"Content-Type\", \"application/json;charset=utf-8\");\n            return;\n        }\n        chain.doFilter(request, response);\n    }\n}\n```\n##### 5.2 过滤器配置\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZWU3NDQzY2JkMDg2MDVkLnBuZw?x-oss-process=image/format,png)\n\n```\n@Configuration\npublic class FilterConfig {\n\n    @Bean\n    public FilterRegistrationBean configureFilter(){\n        FilterRegistrationBean bean = new FilterRegistrationBean<>();\n        bean.setName(\"costFilter\");\n        CostFilter costFilter = new CostFilter();\n        bean.setFilter(costFilter);\n        bean.setOrder(1);\n        List<String> urlList = new ArrayList<String>();\n        urlList.add(\"/*\");\n        bean.setUrlPatterns(urlList);\n        return bean;\n    }\n}\n```\n#### 6、token拦截\n##### 6.1JWT\njwt工具类\n```\npublic class JwtUtils {\n\n    public static SecretKey getBase64Key() {\n        String stringKey = \"MyJwtSecret\";\n        byte[] encodeKey = Base64.getDecoder().decode(stringKey);\n        SecretKey key = new SecretKeySpec(encodeKey, 0, encodeKey.length, \"AES\");\n        return key;\n    }\n\n    /**\n     * 签发token\n     *\n     * @param userName 用户名\n     * @return token\n     */\n    public static String create(String userName) {\n        Date now = new Date(System.currentTimeMillis());\n        String token = Jwts.builder()\n                .setIssuedAt(now)\n                .setSubject(userName)\n                .setExpiration(new Date(System.currentTimeMillis() + 60 * 60 * 1000))\n                .signWith(SignatureAlgorithm.HS256, getBase64Key())\n                .compact();\n\n        return token;\n    }\n\n    /**\n     * 解析token\n     *\n     * @param token token\n     * @return 用户名\n     */\n    public static String parse(String token) {\n        String username = null;\n        try {\n            username = Jwts.parser()\n                    .setSigningKey(getBase64Key())\n                    .parseClaimsJws(token.replace(\"Bearer \", \"\"))\n                    .getBody()\n                    .getSubject();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return username;\n    }\n\n    /**\n     * 检验token是否过期\n     *\n     * @param token\n     * @return\n     */\n    public static boolean verify(String token) {\n        Date expiraDate = null;\n        Date currentDate = new Date();\n        try {\n            expiraDate = Jwts.parser()\n                    .setSigningKey(getBase64Key())\n                    .parseClaimsJws(token.replace(\"Bearer \", \"\"))\n                    .getBody()\n                    .getExpiration();\n            if (currentDate.before(expiraDate)) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}\n```\n##### 6.2token拦截器\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01MzMwZjU3ZTVkNTcxOTYzLnBuZw?x-oss-process=image/format,png)\n```\n@Component\npublic class TokenInterceptor implements HandlerInterceptor {\n\n    public Log log = LogFactory.getLog(TokenInterceptor.class);\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler){\n        if (request.getMethod().equals(\"OPTIONS\")) {\n            response.setStatus(HttpServletResponse.SC_OK);\n            return true;\n        }\n        response.setCharacterEncoding(\"utf-8\");\n        String token = request.getHeader(\"Authorization\");\n        if (token != null) {\n            boolean result = JwtUtils.verify(token);\n            if (result) {\n                return true;\n            }\n        }\n        log.error(\"认证失败\");\n        response.setStatus(HttpServletResponse.SC_NON_AUTHORITATIVE_INFORMATION);\n        return false;\n    }\n}\n\n```\n##### 6.3配置拦截器\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjEyNWRjZWNhZjcyODA4LnBuZw?x-oss-process=image/format,png)\n```\n@Configuration\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\n\n    @Autowired\n    private TokenInterceptor tokenInterceptor;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(tokenInterceptor)\n                .addPathPatterns(\"/**\")\n                .excludePathPatterns(\"/**/login\")\n                .excludePathPatterns(\"/**/logOut\");\n    }\n}\n```\n\n#### 7、完成一个登录接口`LoginController`\n```\n@RestController\n@RequestMapping(\"/system\")\npublic class LoginController extends BaseController {\n\n    @Autowired\n    private UserService userService;\n\n    /**\n     * 浏览器点击登录\n     *\n     * @param user\n     * @return\n     */\n    @PostMapping(\"/login\")\n    public R login(@RequestBody User user) {\n        log.debug(\"------浏览器点击登录------\");\n        String userName = user.getUsername();\n        String passWord = user.getPassword();\n        UsernamePasswordToken usernamePasswordToken = new UsernamePasswordToken(userName, MD5.md5Salt(passWord, userName));\n        Subject subject = SecurityUtils.getSubject();\n        try {\n            subject.login(usernamePasswordToken);\n            String token = JwtUtils.create(userName);\n            return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);\n        } catch (AuthenticationException e) {\n            e.printStackTrace();\n            return R.error(R.MSG_LOGIN_ERROR);\n        }\n    }\n}\n```\n\n\n","source":"_posts/快速搭建Spring-Boot项目及常用技术整合.md","raw":"title: 快速搭建Spring Boot项目及常用技术整合\ntags:\n  - 微服务\ncategories:\n  - Java\ndate: 2020-01-01 11:18:00\ncover: true\n\n---\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZWEzZDRhYjIyOGVmNjIxLmpwZw?x-oss-process=image/format,png)\n<!-- more -->\n### Spring Boot简介\nSpring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。\n### Spring Boot特点\n* 创建独立的Spring应用程序\n\n* 嵌入的Tomcat，无需部署WAR文件\n\n* 简化Maven配置\n\n* 自动配置Spring\n\n* 提供生产就绪型功能，如指标，健康检查和外部配置\n\n* 绝对没有代码生成并且对XML也没有配置要求\n### 快速入门\n####  1、访问http://start.spring.io/构建项目，也可在idea创建如下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191218173310114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RldmlsbGkwMzEw,size_16,color_FFFFFF,t_70)\n![step2.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05ZWMxNTkwMzg4MzE0ZWYxLnBuZw?x-oss-process=image/format,png)\n![step3.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xN2RlNDY2YTU4Yjk1YWQyLnBuZw?x-oss-process=image/format,png)\n![step4.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNzQwYWIyYzFiMTE2ZGYzLnBuZw?x-oss-process=image/format,png)\n#### 2、 springboot默认生成三个文件\n##### 2.1 pom.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.4.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.example</groupId>\n    <artifactId>demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>demo</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n重点就一个gav：spring-boot-starter-web，其他可以删除。\n##### 2.2 application.properties\n该文件默认为空，springboot的默认启动端口号：8080，可以在改文件修改。建议用yml的格式\n```\nserver:\n  port: 8080\n```\n##### 2.3 启动类文件\n```\npublic class JxcApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JxcApplication.class, args);\n    }\n\n}\n```\n##### 2.4 验证springboot\n在项目包路径下创建一个Controller，写一个`HelloController `\n```\n@Controller\npublic class HelloController {\n\n    @RequestMapping(\"/\")\n    @ResponseBody\n    public String getHello() {\n        return \"hello\";\n    }\n}\n```\n浏览器查看效果\n![HelloController.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMDhmZmU5ZDVjZWI5Nzg4LnBuZw?x-oss-process=image/format,png)\n\n### 完成项目\n#### 完整项目目录\n![project.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZDM5ZWI1ZTRkOGU5ZjJjLnBuZw?x-oss-process=image/format,png)\n#### 1、项目依赖\n* web \n```\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>2.1.0</version>\n        </dependency>\n\n      <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjweaver</artifactId>\n            <version>${aspectjweaver.version}</version>\n        </dependency>\n```\n* mysql\n```\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>${mysql.version}</version>\n        </dependency>\n```\n* lombok(可选)\n```\n       <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n```\n* pagehelper(可选)\n```\n       <dependency>\n            <groupId>com.github.pagehelper</groupId>\n            <artifactId>pagehelper-spring-boot-starter</artifactId>\n            <version>${pagehelper.version}</version>\n        </dependency>\n```\n* JWT(可选)\n```\n       <dependency>\n            <groupId>io.jsonwebtoken</groupId>\n            <artifactId>jjwt</artifactId>\n            <version>${jwt.version}</version>\n        </dependency>\n```\n* mybatis\n```\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis-spring</artifactId>\n            <version>2.0.2</version>\n        </dependency>\n```\n* shiro\n```\n       <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-spring</artifactId>\n            <version>1.4.0</version>\n        </dependency>\n```\n* hutool(可选)\n```\n<dependency>\n            <groupId>cn.hutool</groupId>\n            <artifactId>hutool-all</artifactId>\n            <version>5.0.7</version>\n        </dependency>\n```\n* druid\n```\n       <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid-spring-boot-starter</artifactId>\n            <version>1.1.10</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.10</version>\n        </dependency>\n```\n* jdbc\n```\n <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n```\n* fastjson\n```\n      <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>${fastjson.version}</version>\n        </dependency>\n```\n* tomcat\n```\n       <dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-core</artifactId>\n        </dependency>\n```\n附上properties\n```\n<properties>\n        <project.version>1.0</project.version>\n        <java.version>1.8</java.version>\n        <mysql.version>5.1.25</mysql.version>\n        <pagehelper.version>1.2.12</pagehelper.version>\n        <jwt.version>0.9.1</jwt.version>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <commons.lang.version>3.9</commons.lang.version>\n        <aspectjweaver.version>1.9.4</aspectjweaver.version>\n        <fastjson.version>1.2.62</fastjson.version>\n    </properties>\n```\n#### 2、配置文件\n##### 2.1修改`application.properties`为`application.yml`\n配置端口，项目根路径，spring配置，mybatis配置，分页插件配置\n```\n\nserver:\n  port: 8100\n  servlet:\n    context-path: /api\n\n\nspring:\n  profiles:\n    active: dev\n  http:\n    encoding:\n      charset: UTF-8\n      force: true\n      enabled: true\n\nmybatis:\n  mapper-locations: classpath:/mapper/*.xml\n  type-aliases-package: com.example.jxc.domain.entity.*\n  configuration:\n    cache-enabled: true\n    lazy-loading-enabled: true\n    multiple-result-sets-enabled: true\n    use-column-label: true\n    call-setters-on-nulls: true\n    local-cache-scope: session\n    map-underscore-to-camel-case: true\n    default-executor-type: BATCH\n    auto-mapping-behavior: PARTIAL\n\npagehelper:\n  helperDialect: mysql\n  reasonable: true\n  supportMethodsArguments: true\n  params: count=countSql\n\n```\n\nmybatis中的configuration配置，这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项的意图、默认值等。\n| 设置名| 描述| 有效值|默认值|\n|-----|-----|------|------|\n| cacheEnabled | 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。 |  true  false |true|\n| lazyLoadingEnabled| 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 |  true  false |false|\n| aggressiveLazyLoading|  \t当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。 |  true  false |false （在 3.4.1 及之前的版本默认值为 true） |\n| multipleResultSetsEnabled| 是否允许单一语句返回多结果集（需要驱动支持）。 |  true  false |true|\n| useColumnLabel|  \t使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。  |  true  false |true|\n| useGeneratedKeys| 允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。 |  true  false |false |\n| autoMappingBehavior| 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 | NONE, PARTIAL, FULL  |PARTIAL|\n| autoMappingUnknownColumnBehavior| 指定发现自动映射目标未知列（或者未知属性类型）的行为。NONE: 不做任何反应，WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN) ，FAILING: 映射失败 (抛出 SqlSessionException) |  NONE, WARNING, FAILING  |NONE|\n| defaultExecutorType| 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。 |  SIMPLE REUSE BATCH  |SIMPLE|\n| defaultStatementTimeout|  \t设置超时时间，它决定驱动等待数据库响应的秒数。  |  任意正整数 |未设置 (null) |\n| defaultFetchSize|  \t为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。  |  任意正整数 |未设置 (null) |\n| defaultResultSetType|  \tSpecifies a scroll strategy when omit it per statement settings. (Since: 3.5.2)  |  FORWARD_ONLY SCROLL_SENSITIVE SCROLL_INSENSITIVE  DEFAULT(same behavior with 'Not Set')  |Not Set (null) |\n| safeRowBoundsEnabled| 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。  |  true  false |false |\n| safeResultHandlerEnabled|允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为 false。 |  true  false |false |\n| mapUnderscoreToCamelCase|是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 |  true  false |false |\n| localCacheScope| MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。  |  SESSION  STATEMENT |SESSION  |\n| jdbcTypeForNull| 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 |  JdbcType 常量，常用值：NULL, VARCHAR 或 OTHER。|OTHER|\n| lazyLoadTriggerMethods| 指定哪个对象的方法触发一次延迟加载。 | 用逗号分隔的方法列表 |equals,clone,hashCode,toString |\n| defaultScriptingLanguage| 指定动态 SQL 生成的默认语言。 | 一个类型别名或完全限定类名 |org.apache.ibatis.scripting.xmltags.XMLLanguageDriver |\n| defaultEnumTypeHandler|指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）  | 一个类型别名或完全限定类名 |org.apache.ibatis.type.EnumTypeHandler |\n| callSettersOnNulls| 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值初始化的时候比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。 |  true  false |false |\n| returnInstanceForEmptyRow| 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2）  |  true  false |false |\n| logPrefix| 指定 MyBatis 增加到日志名称的前缀。 |  任何字符串 |未设置|\n| logImpl| 指定 MyBatis  \t指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 |  SLF4J,LOG4J,LOG4J2,JDK_LOGGING,COMMONS_LOGGING,STDOUT_LOGGING,NO_LOGGING |未设置|\n| proxyFactory|  \t指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。 |   \tCGLIB ,JAVASSIST |AVASSIST （MyBatis 3.3 以上） |\n| vfsImpl| 指定 VFS 的实现  |   \t自定义 VFS 的实现的类全限定名，以逗号分隔。 |未设置|\n| useActualParamName| 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）  |  true   false  |true|\n| configurationFactory|  \t指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3）   |   \t类型别名或者全类名.  |未设置|\n\n##### 2.2 新建`application-dev.yml`\n配置数据库信息,通过`application.yml`中的active来启用dev配置文件\n```\nspring:\n  profiles:\n    active: dev\n```\n`application-dev.yml`完整配置\n```\nspring:\n  datasource:\n    #   数据源基本配置\n    username: root\n    password:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/fhshgl\n    type: com.alibaba.druid.pool.DruidDataSource\n    #   数据源其他配置\n    initialSize: 5\n    minIdle: 5\n    maxActive: 20\n    maxWait: 60000\n    timeBetweenEvictionRunsMillis: 60000\n    minEvictableIdleTimeMillis: 300000\n    validationQuery: SELECT 1 FROM DUAL\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    poolPreparedStatements: true\n    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙\n    filters: stat,wall\n    maxPoolPreparedStatementPerConnectionSize: 20\n    useGlobalDataSourceStat: true\n    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500\n```\n#### 3、数据库连接池\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjc5NGJmZjQ0ZDk3NjY4LnBuZw?x-oss-process=image/format,png)\n```\n@Configuration\npublic class DruidConfig {\n\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    @Bean\n    public DataSource druid(){\n        return  new DruidDataSource();\n    }\n\n    /**\n     * 配置Druid的监控\n     * @return\n     */\n    @Bean\n    public ServletRegistrationBean statViewServlet(){\n        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), \"/druid/*\");\n        Map<String,String> initParams = new HashMap<>();\n\n        initParams.put(\"loginUsername\",\"admin\");\n        initParams.put(\"loginPassword\",\"123456\");\n        //默认就是允许所有访问\n        initParams.put(\"allow\",\"\");\n        initParams.put(\"deny\",\"192.168.15.21\");\n\n        bean.setInitParameters(initParams);\n        return bean;\n    }\n\n\n    /**\n     * 配置一个web监控的filter\n     * @return\n     */\n    @Bean\n    public FilterRegistrationBean webStatFilter(){\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new WebStatFilter());\n\n        Map<String,String> initParams = new HashMap<>();\n        initParams.put(\"exclusions\",\"*.js,*.css,/druid/*\");\n\n        bean.setInitParameters(initParams);\n\n        bean.setUrlPatterns(Arrays.asList(\"/*\"));\n\n        return  bean;\n    }\n}\n```\n#### 4、shiro\n##### 4.1自定义realm\n![realm.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMzlmZmVlNDViNzQxOWIzLnBuZw?x-oss-process=image/format,png)\n代码如下：\n```\npublic class MyRealm extends AuthorizingRealm{\n\n    @Autowired\n    private UserService userService;\n\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n        return null;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        //拿到封装好账户密码的token\n        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;\n        String userName = token.getUsername();\n        //用户校验\n        User user = this.userService.getUser(userName);\n        if (user == null) {\n            throw new AuthenticationException(\"用户名或密码错误！\");\n        }\n        //加盐 计算盐值 保证每个加密后的 MD5 不一样\n        ByteSource credentialsSalt = ByteSource.Util.bytes(user.getUsername());\n        SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(user, user.getPassword(), credentialsSalt,\n                this.getName());\n        return info;\n    }\n}\n```\n##### 4.2shiro配置\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kMmViZjdkM2UwOWExNzBlLnBuZw?x-oss-process=image/format,png)\n\n```\n@Configuration\npublic class ShiroConfig {\n\n    /**\n     * 主要配置一些相应的URL的规则和访问权限\n     */\n    @Bean\n    public ShiroFilterFactoryBean shiroFilter() {\n        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();\n        shiroFilterFactoryBean.setSecurityManager(securityManager());\n        //拦截器.\n        Map<String, String> filterChainDefinitionMap = new LinkedHashMap<String, String>();\n        //配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了\n        filterChainDefinitionMap.put(\"/system/logout\", \"anon\");\n        //过滤链定义，从上向下顺序执行，一般将/**放在最为下边\n        //authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问\n//        filterChainDefinitionMap.put(\"/static/**\", \"anon\");\n        shiroFilterFactoryBean.setLoginUrl(\"/system/login\");\n        filterChainDefinitionMap.put(\"/**\", \"authc\");\n        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);\n        return shiroFilterFactoryBean;\n    }\n\n\n    /**\n     * 注入 securityManager\n     */\n    @Bean\n    public DefaultWebSecurityManager securityManager() {\n        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n        // 设置realm.\n        securityManager.setRealm(customRealm());\n        return securityManager;\n    }\n\n    /**\n     * 自定义身份认证 realm;\n     * <p>\n     * 必须写这个类，并加上 @Bean 注解，目的是注入 MyRealm，\n     * 否则会影响 MyRealm 中其他类的依赖注入\n     */\n    @Bean\n    public MyRealm customRealm() {\n        return new MyRealm();\n    }\n\n\n    /**\n     * 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证\n     * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能\n     *\n     * @return\n     */\n    @Bean\n    @DependsOn({\"lifecycleBeanPostProcessor\"})\n    public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() {\n        DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();\n        advisorAutoProxyCreator.setProxyTargetClass(true);\n        return advisorAutoProxyCreator;\n    }\n\n    @Bean\n    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor() {\n        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();\n        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());\n        return authorizationAttributeSourceAdvisor;\n    }\n\n    /**\n     * Shiro生命周期处理器 ---可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.\n     *\n     * @return\n     */\n    @Bean\n    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {\n        return new LifecycleBeanPostProcessor();\n    }\n}\n```\n#### 5、过滤器-跨域过滤\n##### 5.1跨域过滤\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODEwMTBkMGZhZGEwYTcwLnBuZw?x-oss-process=image/format,png)\n```\npublic class CostFilter implements Filter {\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletRequest req = (HttpServletRequest) request;\n        HttpServletResponse resp = (HttpServletResponse) response;\n        String origin = req.getHeader(\"Origin\");\n        if (origin == null) {\n            origin = req.getHeader(\"Referer\");\n        }\n        // 允许指定域访问跨域资源\n        resp.setHeader(\"Access-Control-Allow-Origin\", origin);\n        // 允许客户端携带跨域cookie，此时origin值不能为“*”，只能为指定单一域名\n        resp.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n\n        if (\"OPTIONS\".equals(req.getMethod())) {\n            String allowMethod = req.getHeader(\"Access-Control-Request-Method\");\n            String allowHeaders = req.getHeader(\"Access-Control-Request-Headers\");\n            // 浏览器缓存预检请求结果时间,单位:秒\n            resp.setHeader(\"Access-Control-Max-Age\", \"86400\");\n            // 允许浏览器在预检请求成功之后发送的实际请求方法名\n            resp.setHeader(\"Access-Control-Allow-Methods\", allowMethod);\n            // 允许浏览器发送的请求消息头\n            resp.setHeader(\"Access-Control-Allow-Headers\", allowHeaders);\n            resp.setHeader(\"Content-Type\", \"application/json;charset=utf-8\");\n            return;\n        }\n        chain.doFilter(request, response);\n    }\n}\n```\n##### 5.2 过滤器配置\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZWU3NDQzY2JkMDg2MDVkLnBuZw?x-oss-process=image/format,png)\n\n```\n@Configuration\npublic class FilterConfig {\n\n    @Bean\n    public FilterRegistrationBean configureFilter(){\n        FilterRegistrationBean bean = new FilterRegistrationBean<>();\n        bean.setName(\"costFilter\");\n        CostFilter costFilter = new CostFilter();\n        bean.setFilter(costFilter);\n        bean.setOrder(1);\n        List<String> urlList = new ArrayList<String>();\n        urlList.add(\"/*\");\n        bean.setUrlPatterns(urlList);\n        return bean;\n    }\n}\n```\n#### 6、token拦截\n##### 6.1JWT\njwt工具类\n```\npublic class JwtUtils {\n\n    public static SecretKey getBase64Key() {\n        String stringKey = \"MyJwtSecret\";\n        byte[] encodeKey = Base64.getDecoder().decode(stringKey);\n        SecretKey key = new SecretKeySpec(encodeKey, 0, encodeKey.length, \"AES\");\n        return key;\n    }\n\n    /**\n     * 签发token\n     *\n     * @param userName 用户名\n     * @return token\n     */\n    public static String create(String userName) {\n        Date now = new Date(System.currentTimeMillis());\n        String token = Jwts.builder()\n                .setIssuedAt(now)\n                .setSubject(userName)\n                .setExpiration(new Date(System.currentTimeMillis() + 60 * 60 * 1000))\n                .signWith(SignatureAlgorithm.HS256, getBase64Key())\n                .compact();\n\n        return token;\n    }\n\n    /**\n     * 解析token\n     *\n     * @param token token\n     * @return 用户名\n     */\n    public static String parse(String token) {\n        String username = null;\n        try {\n            username = Jwts.parser()\n                    .setSigningKey(getBase64Key())\n                    .parseClaimsJws(token.replace(\"Bearer \", \"\"))\n                    .getBody()\n                    .getSubject();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return username;\n    }\n\n    /**\n     * 检验token是否过期\n     *\n     * @param token\n     * @return\n     */\n    public static boolean verify(String token) {\n        Date expiraDate = null;\n        Date currentDate = new Date();\n        try {\n            expiraDate = Jwts.parser()\n                    .setSigningKey(getBase64Key())\n                    .parseClaimsJws(token.replace(\"Bearer \", \"\"))\n                    .getBody()\n                    .getExpiration();\n            if (currentDate.before(expiraDate)) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}\n```\n##### 6.2token拦截器\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01MzMwZjU3ZTVkNTcxOTYzLnBuZw?x-oss-process=image/format,png)\n```\n@Component\npublic class TokenInterceptor implements HandlerInterceptor {\n\n    public Log log = LogFactory.getLog(TokenInterceptor.class);\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler){\n        if (request.getMethod().equals(\"OPTIONS\")) {\n            response.setStatus(HttpServletResponse.SC_OK);\n            return true;\n        }\n        response.setCharacterEncoding(\"utf-8\");\n        String token = request.getHeader(\"Authorization\");\n        if (token != null) {\n            boolean result = JwtUtils.verify(token);\n            if (result) {\n                return true;\n            }\n        }\n        log.error(\"认证失败\");\n        response.setStatus(HttpServletResponse.SC_NON_AUTHORITATIVE_INFORMATION);\n        return false;\n    }\n}\n\n```\n##### 6.3配置拦截器\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjEyNWRjZWNhZjcyODA4LnBuZw?x-oss-process=image/format,png)\n```\n@Configuration\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\n\n    @Autowired\n    private TokenInterceptor tokenInterceptor;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(tokenInterceptor)\n                .addPathPatterns(\"/**\")\n                .excludePathPatterns(\"/**/login\")\n                .excludePathPatterns(\"/**/logOut\");\n    }\n}\n```\n\n#### 7、完成一个登录接口`LoginController`\n```\n@RestController\n@RequestMapping(\"/system\")\npublic class LoginController extends BaseController {\n\n    @Autowired\n    private UserService userService;\n\n    /**\n     * 浏览器点击登录\n     *\n     * @param user\n     * @return\n     */\n    @PostMapping(\"/login\")\n    public R login(@RequestBody User user) {\n        log.debug(\"------浏览器点击登录------\");\n        String userName = user.getUsername();\n        String passWord = user.getPassword();\n        UsernamePasswordToken usernamePasswordToken = new UsernamePasswordToken(userName, MD5.md5Salt(passWord, userName));\n        Subject subject = SecurityUtils.getSubject();\n        try {\n            subject.login(usernamePasswordToken);\n            String token = JwtUtils.create(userName);\n            return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);\n        } catch (AuthenticationException e) {\n            e.printStackTrace();\n            return R.error(R.MSG_LOGIN_ERROR);\n        }\n    }\n}\n```\n\n\n","slug":"快速搭建Spring-Boot项目及常用技术整合","published":1,"updated":"2020-01-01T03:20:50.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58tmwmr0035sops9cktg9l6","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZWEzZDRhYjIyOGVmNjIxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h3 id=\"Spring-Boot简介\"><a href=\"#Spring-Boot简介\" class=\"headerlink\" title=\"Spring Boot简介\"></a>Spring Boot简介</h3><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p>\n<h3 id=\"Spring-Boot特点\"><a href=\"#Spring-Boot特点\" class=\"headerlink\" title=\"Spring Boot特点\"></a>Spring Boot特点</h3><ul>\n<li><p>创建独立的Spring应用程序</p>\n</li>\n<li><p>嵌入的Tomcat，无需部署WAR文件</p>\n</li>\n<li><p>简化Maven配置</p>\n</li>\n<li><p>自动配置Spring</p>\n</li>\n<li><p>提供生产就绪型功能，如指标，健康检查和外部配置</p>\n</li>\n<li><p>绝对没有代码生成并且对XML也没有配置要求</p>\n<h3 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h3><h4 id=\"1、访问http-start-spring-io-构建项目，也可在idea创建如下图：\"><a href=\"#1、访问http-start-spring-io-构建项目，也可在idea创建如下图：\" class=\"headerlink\" title=\"1、访问http://start.spring.io/构建项目，也可在idea创建如下图：\"></a>1、访问<a href=\"http://start.spring.io/构建项目，也可在idea创建如下图：\" target=\"_blank\" rel=\"noopener\">http://start.spring.io/构建项目，也可在idea创建如下图：</a></h4><p><img src=\"https://img-blog.csdnimg.cn/20191218173310114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RldmlsbGkwMzEw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05ZWMxNTkwMzg4MzE0ZWYxLnBuZw?x-oss-process=image/format,png\" alt=\"step2.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xN2RlNDY2YTU4Yjk1YWQyLnBuZw?x-oss-process=image/format,png\" alt=\"step3.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNzQwYWIyYzFiMTE2ZGYzLnBuZw?x-oss-process=image/format,png\" alt=\"step4.png\"></p>\n<h4 id=\"2、-springboot默认生成三个文件\"><a href=\"#2、-springboot默认生成三个文件\" class=\"headerlink\" title=\"2、 springboot默认生成三个文件\"></a>2、 springboot默认生成三个文件</h4><h5 id=\"2-1-pom-xml\"><a href=\"#2-1-pom-xml\" class=\"headerlink\" title=\"2.1 pom.xml\"></a>2.1 pom.xml</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.example&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;demo&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;name&gt;demo&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>\n<p>重点就一个gav：spring-boot-starter-web，其他可以删除。</p>\n<h5 id=\"2-2-application-properties\"><a href=\"#2-2-application-properties\" class=\"headerlink\" title=\"2.2 application.properties\"></a>2.2 application.properties</h5><p>该文件默认为空，springboot的默认启动端口号：8080，可以在改文件修改。建议用yml的格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 8080</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-3-启动类文件\"><a href=\"#2-3-启动类文件\" class=\"headerlink\" title=\"2.3 启动类文件\"></a>2.3 启动类文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JxcApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(JxcApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-4-验证springboot\"><a href=\"#2-4-验证springboot\" class=\"headerlink\" title=\"2.4 验证springboot\"></a>2.4 验证springboot</h5><p>在项目包路径下创建一个Controller，写一个<code>HelloController</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;&#x2F;&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String getHello() &#123;</span><br><span class=\"line\">        return &quot;hello&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>浏览器查看效果<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMDhmZmU5ZDVjZWI5Nzg4LnBuZw?x-oss-process=image/format,png\" alt=\"HelloController.png\"></p>\n</li>\n</ul>\n<h3 id=\"完成项目\"><a href=\"#完成项目\" class=\"headerlink\" title=\"完成项目\"></a>完成项目</h3><h4 id=\"完整项目目录\"><a href=\"#完整项目目录\" class=\"headerlink\" title=\"完整项目目录\"></a>完整项目目录</h4><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZDM5ZWI1ZTRkOGU5ZjJjLnBuZw?x-oss-process=image/format,png\" alt=\"project.png\"></p>\n<h4 id=\"1、项目依赖\"><a href=\"#1、项目依赖\" class=\"headerlink\" title=\"1、项目依赖\"></a>1、项目依赖</h4><ul>\n<li>web <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;$&#123;aspectjweaver.version&#125;&lt;&#x2F;version&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>mysql<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>lombok(可选)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>pagehelper(可选)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;pagehelper.version&#125;&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JWT(可选)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;io.jsonwebtoken&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jjwt&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;jwt.version&#125;&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>mybatis<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>shiro<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;shiro-spring&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.4.0&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>hutool(可选)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.0.7&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>druid<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.1.10&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.1.10&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>jdbc<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">       &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>fastjson<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;$&#123;fastjson.version&#125;&lt;&#x2F;version&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>tomcat<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.tomcat.embed&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;tomcat-embed-core&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n附上properties<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">        &lt;project.version&gt;1.0&lt;&#x2F;project.version&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">        &lt;mysql.version&gt;5.1.25&lt;&#x2F;mysql.version&gt;</span><br><span class=\"line\">        &lt;pagehelper.version&gt;1.2.12&lt;&#x2F;pagehelper.version&gt;</span><br><span class=\"line\">        &lt;jwt.version&gt;0.9.1&lt;&#x2F;jwt.version&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;commons.lang.version&gt;3.9&lt;&#x2F;commons.lang.version&gt;</span><br><span class=\"line\">        &lt;aspectjweaver.version&gt;1.9.4&lt;&#x2F;aspectjweaver.version&gt;</span><br><span class=\"line\">        &lt;fastjson.version&gt;1.2.62&lt;&#x2F;fastjson.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、配置文件\"><a href=\"#2、配置文件\" class=\"headerlink\" title=\"2、配置文件\"></a>2、配置文件</h4><h5 id=\"2-1修改application-properties为application-yml\"><a href=\"#2-1修改application-properties为application-yml\" class=\"headerlink\" title=\"2.1修改application.properties为application.yml\"></a>2.1修改<code>application.properties</code>为<code>application.yml</code></h5>配置端口，项目根路径，spring配置，mybatis配置，分页插件配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8100</span><br><span class=\"line\">  servlet:</span><br><span class=\"line\">    context-path: &#x2F;api</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  profiles:</span><br><span class=\"line\">    active: dev</span><br><span class=\"line\">  http:</span><br><span class=\"line\">    encoding:</span><br><span class=\"line\">      charset: UTF-8</span><br><span class=\"line\">      force: true</span><br><span class=\"line\">      enabled: true</span><br><span class=\"line\"></span><br><span class=\"line\">mybatis:</span><br><span class=\"line\">  mapper-locations: classpath:&#x2F;mapper&#x2F;*.xml</span><br><span class=\"line\">  type-aliases-package: com.example.jxc.domain.entity.*</span><br><span class=\"line\">  configuration:</span><br><span class=\"line\">    cache-enabled: true</span><br><span class=\"line\">    lazy-loading-enabled: true</span><br><span class=\"line\">    multiple-result-sets-enabled: true</span><br><span class=\"line\">    use-column-label: true</span><br><span class=\"line\">    call-setters-on-nulls: true</span><br><span class=\"line\">    local-cache-scope: session</span><br><span class=\"line\">    map-underscore-to-camel-case: true</span><br><span class=\"line\">    default-executor-type: BATCH</span><br><span class=\"line\">    auto-mapping-behavior: PARTIAL</span><br><span class=\"line\"></span><br><span class=\"line\">pagehelper:</span><br><span class=\"line\">  helperDialect: mysql</span><br><span class=\"line\">  reasonable: true</span><br><span class=\"line\">  supportMethodsArguments: true</span><br><span class=\"line\">  params: count&#x3D;countSql</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>mybatis中的configuration配置，这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项的意图、默认值等。<br>| 设置名| 描述| 有效值|默认值|<br>|—–|—–|——|——|<br>| cacheEnabled | 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。 |  true  false |true|<br>| lazyLoadingEnabled| 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 |  true  false |false|<br>| aggressiveLazyLoading|      当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。 |  true  false |false （在 3.4.1 及之前的版本默认值为 true） |<br>| multipleResultSetsEnabled| 是否允许单一语句返回多结果集（需要驱动支持）。 |  true  false |true|<br>| useColumnLabel|      使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。  |  true  false |true|<br>| useGeneratedKeys| 允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。 |  true  false |false |<br>| autoMappingBehavior| 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 | NONE, PARTIAL, FULL  |PARTIAL|<br>| autoMappingUnknownColumnBehavior| 指定发现自动映射目标未知列（或者未知属性类型）的行为。NONE: 不做任何反应，WARNING: 输出提醒日志 (‘org.apache.ibatis.session.AutoMappingUnknownColumnBehavior’ 的日志等级必须设置为 WARN) ，FAILING: 映射失败 (抛出 SqlSessionException) |  NONE, WARNING, FAILING  |NONE|<br>| defaultExecutorType| 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。 |  SIMPLE REUSE BATCH  |SIMPLE|<br>| defaultStatementTimeout|      设置超时时间，它决定驱动等待数据库响应的秒数。  |  任意正整数 |未设置 (null) |<br>| defaultFetchSize|      为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。  |  任意正整数 |未设置 (null) |<br>| defaultResultSetType|      Specifies a scroll strategy when omit it per statement settings. (Since: 3.5.2)  |  FORWARD_ONLY SCROLL_SENSITIVE SCROLL_INSENSITIVE  DEFAULT(same behavior with ‘Not Set’)  |Not Set (null) |<br>| safeRowBoundsEnabled| 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。  |  true  false |false |<br>| safeResultHandlerEnabled|允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为 false。 |  true  false |false |<br>| mapUnderscoreToCamelCase|是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 |  true  false |false |<br>| localCacheScope| MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。  |  SESSION  STATEMENT |SESSION  |<br>| jdbcTypeForNull| 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 |  JdbcType 常量，常用值：NULL, VARCHAR 或 OTHER。|OTHER|<br>| lazyLoadTriggerMethods| 指定哪个对象的方法触发一次延迟加载。 | 用逗号分隔的方法列表 |equals,clone,hashCode,toString |<br>| defaultScriptingLanguage| 指定动态 SQL 生成的默认语言。 | 一个类型别名或完全限定类名 |org.apache.ibatis.scripting.xmltags.XMLLanguageDriver |<br>| defaultEnumTypeHandler|指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）  | 一个类型别名或完全限定类名 |org.apache.ibatis.type.EnumTypeHandler |<br>| callSettersOnNulls| 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值初始化的时候比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。 |  true  false |false |<br>| returnInstanceForEmptyRow| 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2）  |  true  false |false |<br>| logPrefix| 指定 MyBatis 增加到日志名称的前缀。 |  任何字符串 |未设置|<br>| logImpl| 指定 MyBatis      指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 |  SLF4J,LOG4J,LOG4J2,JDK_LOGGING,COMMONS_LOGGING,STDOUT_LOGGING,NO_LOGGING |未设置|<br>| proxyFactory|      指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。 |       CGLIB ,JAVASSIST |AVASSIST （MyBatis 3.3 以上） |<br>| vfsImpl| 指定 VFS 的实现  |       自定义 VFS 的实现的类全限定名，以逗号分隔。 |未设置|<br>| useActualParamName| 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）  |  true   false  |true|<br>| configurationFactory|      指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3）   |       类型别名或者全类名.  |未设置|</p>\n<h5 id=\"2-2-新建application-dev-yml\"><a href=\"#2-2-新建application-dev-yml\" class=\"headerlink\" title=\"2.2 新建application-dev.yml\"></a>2.2 新建<code>application-dev.yml</code></h5><p>配置数据库信息,通过<code>application.yml</code>中的active来启用dev配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  profiles:</span><br><span class=\"line\">    active: dev</span><br></pre></td></tr></table></figure>\n<p><code>application-dev.yml</code>完整配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    #   数据源基本配置</span><br><span class=\"line\">    username: root</span><br><span class=\"line\">    password:</span><br><span class=\"line\">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;fhshgl</span><br><span class=\"line\">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">    #   数据源其他配置</span><br><span class=\"line\">    initialSize: 5</span><br><span class=\"line\">    minIdle: 5</span><br><span class=\"line\">    maxActive: 20</span><br><span class=\"line\">    maxWait: 60000</span><br><span class=\"line\">    timeBetweenEvictionRunsMillis: 60000</span><br><span class=\"line\">    minEvictableIdleTimeMillis: 300000</span><br><span class=\"line\">    validationQuery: SELECT 1 FROM DUAL</span><br><span class=\"line\">    testWhileIdle: true</span><br><span class=\"line\">    testOnBorrow: false</span><br><span class=\"line\">    testOnReturn: false</span><br><span class=\"line\">    poolPreparedStatements: true</span><br><span class=\"line\">    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#39;wall&#39;用于防火墙</span><br><span class=\"line\">    filters: stat,wall</span><br><span class=\"line\">    maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class=\"line\">    useGlobalDataSourceStat: true</span><br><span class=\"line\">    connectionProperties: druid.stat.mergeSql&#x3D;true;druid.stat.slowSqlMillis&#x3D;500</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、数据库连接池\"><a href=\"#3、数据库连接池\" class=\"headerlink\" title=\"3、数据库连接池\"></a>3、数据库连接池</h4><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjc5NGJmZjQ0ZDk3NjY4LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class DruidConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ConfigurationProperties(prefix &#x3D; &quot;spring.datasource&quot;)</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public DataSource druid()&#123;</span><br><span class=\"line\">        return  new DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 配置Druid的监控</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ServletRegistrationBean statViewServlet()&#123;</span><br><span class=\"line\">        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean(new StatViewServlet(), &quot;&#x2F;druid&#x2F;*&quot;);</span><br><span class=\"line\">        Map&lt;String,String&gt; initParams &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);</span><br><span class=\"line\">        initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);</span><br><span class=\"line\">        &#x2F;&#x2F;默认就是允许所有访问</span><br><span class=\"line\">        initParams.put(&quot;allow&quot;,&quot;&quot;);</span><br><span class=\"line\">        initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        return bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 配置一个web监控的filter</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public FilterRegistrationBean webStatFilter()&#123;</span><br><span class=\"line\">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean();</span><br><span class=\"line\">        bean.setFilter(new WebStatFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String,String&gt; initParams &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,&#x2F;druid&#x2F;*&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setUrlPatterns(Arrays.asList(&quot;&#x2F;*&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">        return  bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、shiro\"><a href=\"#4、shiro\" class=\"headerlink\" title=\"4、shiro\"></a>4、shiro</h4><h5 id=\"4-1自定义realm\"><a href=\"#4-1自定义realm\" class=\"headerlink\" title=\"4.1自定义realm\"></a>4.1自定义realm</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMzlmZmVlNDViNzQxOWIzLnBuZw?x-oss-process=image/format,png\" alt=\"realm.png\"><br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyRealm extends AuthorizingRealm&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;拿到封装好账户密码的token</span><br><span class=\"line\">        UsernamePasswordToken token &#x3D; (UsernamePasswordToken) authenticationToken;</span><br><span class=\"line\">        String userName &#x3D; token.getUsername();</span><br><span class=\"line\">        &#x2F;&#x2F;用户校验</span><br><span class=\"line\">        User user &#x3D; this.userService.getUser(userName);</span><br><span class=\"line\">        if (user &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            throw new AuthenticationException(&quot;用户名或密码错误！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;加盐 计算盐值 保证每个加密后的 MD5 不一样</span><br><span class=\"line\">        ByteSource credentialsSalt &#x3D; ByteSource.Util.bytes(user.getUsername());</span><br><span class=\"line\">        SimpleAuthenticationInfo info &#x3D; new SimpleAuthenticationInfo(user, user.getPassword(), credentialsSalt,</span><br><span class=\"line\">                this.getName());</span><br><span class=\"line\">        return info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-2shiro配置\"><a href=\"#4-2shiro配置\" class=\"headerlink\" title=\"4.2shiro配置\"></a>4.2shiro配置</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kMmViZjdkM2UwOWExNzBlLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class ShiroConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 主要配置一些相应的URL的规则和访问权限</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ShiroFilterFactoryBean shiroFilter() &#123;</span><br><span class=\"line\">        ShiroFilterFactoryBean shiroFilterFactoryBean &#x3D; new ShiroFilterFactoryBean();</span><br><span class=\"line\">        shiroFilterFactoryBean.setSecurityManager(securityManager());</span><br><span class=\"line\">        &#x2F;&#x2F;拦截器.</span><br><span class=\"line\">        Map&lt;String, String&gt; filterChainDefinitionMap &#x3D; new LinkedHashMap&lt;String, String&gt;();</span><br><span class=\"line\">        &#x2F;&#x2F;配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了</span><br><span class=\"line\">        filterChainDefinitionMap.put(&quot;&#x2F;system&#x2F;logout&quot;, &quot;anon&quot;);</span><br><span class=\"line\">        &#x2F;&#x2F;过滤链定义，从上向下顺序执行，一般将&#x2F;**放在最为下边</span><br><span class=\"line\">        &#x2F;&#x2F;authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问</span><br><span class=\"line\">&#x2F;&#x2F;        filterChainDefinitionMap.put(&quot;&#x2F;static&#x2F;**&quot;, &quot;anon&quot;);</span><br><span class=\"line\">        shiroFilterFactoryBean.setLoginUrl(&quot;&#x2F;system&#x2F;login&quot;);</span><br><span class=\"line\">        filterChainDefinitionMap.put(&quot;&#x2F;**&quot;, &quot;authc&quot;);</span><br><span class=\"line\">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class=\"line\">        return shiroFilterFactoryBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 注入 securityManager</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public DefaultWebSecurityManager securityManager() &#123;</span><br><span class=\"line\">        DefaultWebSecurityManager securityManager &#x3D; new DefaultWebSecurityManager();</span><br><span class=\"line\">        &#x2F;&#x2F; 设置realm.</span><br><span class=\"line\">        securityManager.setRealm(customRealm());</span><br><span class=\"line\">        return securityManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 自定义身份认证 realm;</span><br><span class=\"line\">     * &lt;p&gt;</span><br><span class=\"line\">     * 必须写这个类，并加上 @Bean 注解，目的是注入 MyRealm，</span><br><span class=\"line\">     * 否则会影响 MyRealm 中其他类的依赖注入</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public MyRealm customRealm() &#123;</span><br><span class=\"line\">        return new MyRealm();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证</span><br><span class=\"line\">     * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @DependsOn(&#123;&quot;lifecycleBeanPostProcessor&quot;&#125;)</span><br><span class=\"line\">    public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() &#123;</span><br><span class=\"line\">        DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator &#x3D; new DefaultAdvisorAutoProxyCreator();</span><br><span class=\"line\">        advisorAutoProxyCreator.setProxyTargetClass(true);</span><br><span class=\"line\">        return advisorAutoProxyCreator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor() &#123;</span><br><span class=\"line\">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor &#x3D; new AuthorizationAttributeSourceAdvisor();</span><br><span class=\"line\">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());</span><br><span class=\"line\">        return authorizationAttributeSourceAdvisor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * Shiro生命周期处理器 ---可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123;</span><br><span class=\"line\">        return new LifecycleBeanPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、过滤器-跨域过滤\"><a href=\"#5、过滤器-跨域过滤\" class=\"headerlink\" title=\"5、过滤器-跨域过滤\"></a>5、过滤器-跨域过滤</h4><h5 id=\"5-1跨域过滤\"><a href=\"#5-1跨域过滤\" class=\"headerlink\" title=\"5.1跨域过滤\"></a>5.1跨域过滤</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODEwMTBkMGZhZGEwYTcwLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CostFilter implements Filter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        HttpServletRequest req &#x3D; (HttpServletRequest) request;</span><br><span class=\"line\">        HttpServletResponse resp &#x3D; (HttpServletResponse) response;</span><br><span class=\"line\">        String origin &#x3D; req.getHeader(&quot;Origin&quot;);</span><br><span class=\"line\">        if (origin &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            origin &#x3D; req.getHeader(&quot;Referer&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 允许指定域访问跨域资源</span><br><span class=\"line\">        resp.setHeader(&quot;Access-Control-Allow-Origin&quot;, origin);</span><br><span class=\"line\">        &#x2F;&#x2F; 允许客户端携带跨域cookie，此时origin值不能为“*”，只能为指定单一域名</span><br><span class=\"line\">        resp.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (&quot;OPTIONS&quot;.equals(req.getMethod())) &#123;</span><br><span class=\"line\">            String allowMethod &#x3D; req.getHeader(&quot;Access-Control-Request-Method&quot;);</span><br><span class=\"line\">            String allowHeaders &#x3D; req.getHeader(&quot;Access-Control-Request-Headers&quot;);</span><br><span class=\"line\">            &#x2F;&#x2F; 浏览器缓存预检请求结果时间,单位:秒</span><br><span class=\"line\">            resp.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;86400&quot;);</span><br><span class=\"line\">            &#x2F;&#x2F; 允许浏览器在预检请求成功之后发送的实际请求方法名</span><br><span class=\"line\">            resp.setHeader(&quot;Access-Control-Allow-Methods&quot;, allowMethod);</span><br><span class=\"line\">            &#x2F;&#x2F; 允许浏览器发送的请求消息头</span><br><span class=\"line\">            resp.setHeader(&quot;Access-Control-Allow-Headers&quot;, allowHeaders);</span><br><span class=\"line\">            resp.setHeader(&quot;Content-Type&quot;, &quot;application&#x2F;json;charset&#x3D;utf-8&quot;);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-2-过滤器配置\"><a href=\"#5-2-过滤器配置\" class=\"headerlink\" title=\"5.2 过滤器配置\"></a>5.2 过滤器配置</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZWU3NDQzY2JkMDg2MDVkLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class FilterConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public FilterRegistrationBean configureFilter()&#123;</span><br><span class=\"line\">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean&lt;&gt;();</span><br><span class=\"line\">        bean.setName(&quot;costFilter&quot;);</span><br><span class=\"line\">        CostFilter costFilter &#x3D; new CostFilter();</span><br><span class=\"line\">        bean.setFilter(costFilter);</span><br><span class=\"line\">        bean.setOrder(1);</span><br><span class=\"line\">        List&lt;String&gt; urlList &#x3D; new ArrayList&lt;String&gt;();</span><br><span class=\"line\">        urlList.add(&quot;&#x2F;*&quot;);</span><br><span class=\"line\">        bean.setUrlPatterns(urlList);</span><br><span class=\"line\">        return bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、token拦截\"><a href=\"#6、token拦截\" class=\"headerlink\" title=\"6、token拦截\"></a>6、token拦截</h4><h5 id=\"6-1JWT\"><a href=\"#6-1JWT\" class=\"headerlink\" title=\"6.1JWT\"></a>6.1JWT</h5><p>jwt工具类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JwtUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static SecretKey getBase64Key() &#123;</span><br><span class=\"line\">        String stringKey &#x3D; &quot;MyJwtSecret&quot;;</span><br><span class=\"line\">        byte[] encodeKey &#x3D; Base64.getDecoder().decode(stringKey);</span><br><span class=\"line\">        SecretKey key &#x3D; new SecretKeySpec(encodeKey, 0, encodeKey.length, &quot;AES&quot;);</span><br><span class=\"line\">        return key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 签发token</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param userName 用户名</span><br><span class=\"line\">     * @return token</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static String create(String userName) &#123;</span><br><span class=\"line\">        Date now &#x3D; new Date(System.currentTimeMillis());</span><br><span class=\"line\">        String token &#x3D; Jwts.builder()</span><br><span class=\"line\">                .setIssuedAt(now)</span><br><span class=\"line\">                .setSubject(userName)</span><br><span class=\"line\">                .setExpiration(new Date(System.currentTimeMillis() + 60 * 60 * 1000))</span><br><span class=\"line\">                .signWith(SignatureAlgorithm.HS256, getBase64Key())</span><br><span class=\"line\">                .compact();</span><br><span class=\"line\"></span><br><span class=\"line\">        return token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 解析token</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token token</span><br><span class=\"line\">     * @return 用户名</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static String parse(String token) &#123;</span><br><span class=\"line\">        String username &#x3D; null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            username &#x3D; Jwts.parser()</span><br><span class=\"line\">                    .setSigningKey(getBase64Key())</span><br><span class=\"line\">                    .parseClaimsJws(token.replace(&quot;Bearer &quot;, &quot;&quot;))</span><br><span class=\"line\">                    .getBody()</span><br><span class=\"line\">                    .getSubject();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 检验token是否过期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static boolean verify(String token) &#123;</span><br><span class=\"line\">        Date expiraDate &#x3D; null;</span><br><span class=\"line\">        Date currentDate &#x3D; new Date();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            expiraDate &#x3D; Jwts.parser()</span><br><span class=\"line\">                    .setSigningKey(getBase64Key())</span><br><span class=\"line\">                    .parseClaimsJws(token.replace(&quot;Bearer &quot;, &quot;&quot;))</span><br><span class=\"line\">                    .getBody()</span><br><span class=\"line\">                    .getExpiration();</span><br><span class=\"line\">            if (currentDate.before(expiraDate)) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-2token拦截器\"><a href=\"#6-2token拦截器\" class=\"headerlink\" title=\"6.2token拦截器\"></a>6.2token拦截器</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01MzMwZjU3ZTVkNTcxOTYzLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class TokenInterceptor implements HandlerInterceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Log log &#x3D; LogFactory.getLog(TokenInterceptor.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)&#123;</span><br><span class=\"line\">        if (request.getMethod().equals(&quot;OPTIONS&quot;)) &#123;</span><br><span class=\"line\">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class=\"line\">        String token &#x3D; request.getHeader(&quot;Authorization&quot;);</span><br><span class=\"line\">        if (token !&#x3D; null) &#123;</span><br><span class=\"line\">            boolean result &#x3D; JwtUtils.verify(token);</span><br><span class=\"line\">            if (result) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.error(&quot;认证失败&quot;);</span><br><span class=\"line\">        response.setStatus(HttpServletResponse.SC_NON_AUTHORITATIVE_INFORMATION);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-3配置拦截器\"><a href=\"#6-3配置拦截器\" class=\"headerlink\" title=\"6.3配置拦截器\"></a>6.3配置拦截器</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjEyNWRjZWNhZjcyODA4LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class InterceptorConfig extends WebMvcConfigurationSupport &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private TokenInterceptor tokenInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class=\"line\">        registry.addInterceptor(tokenInterceptor)</span><br><span class=\"line\">                .addPathPatterns(&quot;&#x2F;**&quot;)</span><br><span class=\"line\">                .excludePathPatterns(&quot;&#x2F;**&#x2F;login&quot;)</span><br><span class=\"line\">                .excludePathPatterns(&quot;&#x2F;**&#x2F;logOut&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7、完成一个登录接口LoginController\"><a href=\"#7、完成一个登录接口LoginController\" class=\"headerlink\" title=\"7、完成一个登录接口LoginController\"></a>7、完成一个登录接口<code>LoginController</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;&#x2F;system&quot;)</span><br><span class=\"line\">public class LoginController extends BaseController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 浏览器点击登录</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param user</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @PostMapping(&quot;&#x2F;login&quot;)</span><br><span class=\"line\">    public R login(@RequestBody User user) &#123;</span><br><span class=\"line\">        log.debug(&quot;------浏览器点击登录------&quot;);</span><br><span class=\"line\">        String userName &#x3D; user.getUsername();</span><br><span class=\"line\">        String passWord &#x3D; user.getPassword();</span><br><span class=\"line\">        UsernamePasswordToken usernamePasswordToken &#x3D; new UsernamePasswordToken(userName, MD5.md5Salt(passWord, userName));</span><br><span class=\"line\">        Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            subject.login(usernamePasswordToken);</span><br><span class=\"line\">            String token &#x3D; JwtUtils.create(userName);</span><br><span class=\"line\">            return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);</span><br><span class=\"line\">        &#125; catch (AuthenticationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            return R.error(R.MSG_LOGIN_ERROR);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZWEzZDRhYjIyOGVmNjIxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h3 id=\"Spring-Boot简介\"><a href=\"#Spring-Boot简介\" class=\"headerlink\" title=\"Spring Boot简介\"></a>Spring Boot简介</h3><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p>\n<h3 id=\"Spring-Boot特点\"><a href=\"#Spring-Boot特点\" class=\"headerlink\" title=\"Spring Boot特点\"></a>Spring Boot特点</h3><ul>\n<li><p>创建独立的Spring应用程序</p>\n</li>\n<li><p>嵌入的Tomcat，无需部署WAR文件</p>\n</li>\n<li><p>简化Maven配置</p>\n</li>\n<li><p>自动配置Spring</p>\n</li>\n<li><p>提供生产就绪型功能，如指标，健康检查和外部配置</p>\n</li>\n<li><p>绝对没有代码生成并且对XML也没有配置要求</p>\n<h3 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h3><h4 id=\"1、访问http-start-spring-io-构建项目，也可在idea创建如下图：\"><a href=\"#1、访问http-start-spring-io-构建项目，也可在idea创建如下图：\" class=\"headerlink\" title=\"1、访问http://start.spring.io/构建项目，也可在idea创建如下图：\"></a>1、访问<a href=\"http://start.spring.io/构建项目，也可在idea创建如下图：\" target=\"_blank\" rel=\"noopener\">http://start.spring.io/构建项目，也可在idea创建如下图：</a></h4><p><img src=\"https://img-blog.csdnimg.cn/20191218173310114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RldmlsbGkwMzEw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05ZWMxNTkwMzg4MzE0ZWYxLnBuZw?x-oss-process=image/format,png\" alt=\"step2.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xN2RlNDY2YTU4Yjk1YWQyLnBuZw?x-oss-process=image/format,png\" alt=\"step3.png\"><br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jNzQwYWIyYzFiMTE2ZGYzLnBuZw?x-oss-process=image/format,png\" alt=\"step4.png\"></p>\n<h4 id=\"2、-springboot默认生成三个文件\"><a href=\"#2、-springboot默认生成三个文件\" class=\"headerlink\" title=\"2、 springboot默认生成三个文件\"></a>2、 springboot默认生成三个文件</h4><h5 id=\"2-1-pom-xml\"><a href=\"#2-1-pom-xml\" class=\"headerlink\" title=\"2.1 pom.xml\"></a>2.1 pom.xml</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.example&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;demo&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;name&gt;demo&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>\n<p>重点就一个gav：spring-boot-starter-web，其他可以删除。</p>\n<h5 id=\"2-2-application-properties\"><a href=\"#2-2-application-properties\" class=\"headerlink\" title=\"2.2 application.properties\"></a>2.2 application.properties</h5><p>该文件默认为空，springboot的默认启动端口号：8080，可以在改文件修改。建议用yml的格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 8080</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-3-启动类文件\"><a href=\"#2-3-启动类文件\" class=\"headerlink\" title=\"2.3 启动类文件\"></a>2.3 启动类文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JxcApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(JxcApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-4-验证springboot\"><a href=\"#2-4-验证springboot\" class=\"headerlink\" title=\"2.4 验证springboot\"></a>2.4 验证springboot</h5><p>在项目包路径下创建一个Controller，写一个<code>HelloController</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;&#x2F;&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String getHello() &#123;</span><br><span class=\"line\">        return &quot;hello&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>浏览器查看效果<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lMDhmZmU5ZDVjZWI5Nzg4LnBuZw?x-oss-process=image/format,png\" alt=\"HelloController.png\"></p>\n</li>\n</ul>\n<h3 id=\"完成项目\"><a href=\"#完成项目\" class=\"headerlink\" title=\"完成项目\"></a>完成项目</h3><h4 id=\"完整项目目录\"><a href=\"#完整项目目录\" class=\"headerlink\" title=\"完整项目目录\"></a>完整项目目录</h4><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kZDM5ZWI1ZTRkOGU5ZjJjLnBuZw?x-oss-process=image/format,png\" alt=\"project.png\"></p>\n<h4 id=\"1、项目依赖\"><a href=\"#1、项目依赖\" class=\"headerlink\" title=\"1、项目依赖\"></a>1、项目依赖</h4><ul>\n<li>web <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;$&#123;aspectjweaver.version&#125;&lt;&#x2F;version&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>mysql<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>lombok(可选)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>pagehelper(可选)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;pagehelper.version&#125;&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JWT(可选)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;io.jsonwebtoken&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jjwt&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;jwt.version&#125;&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>mybatis<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>shiro<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;shiro-spring&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.4.0&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>hutool(可选)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.0.7&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>druid<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.1.10&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.1.10&lt;&#x2F;version&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>jdbc<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">       &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>fastjson<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;$&#123;fastjson.version&#125;&lt;&#x2F;version&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li>tomcat<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.tomcat.embed&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;tomcat-embed-core&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n附上properties<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">        &lt;project.version&gt;1.0&lt;&#x2F;project.version&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">        &lt;mysql.version&gt;5.1.25&lt;&#x2F;mysql.version&gt;</span><br><span class=\"line\">        &lt;pagehelper.version&gt;1.2.12&lt;&#x2F;pagehelper.version&gt;</span><br><span class=\"line\">        &lt;jwt.version&gt;0.9.1&lt;&#x2F;jwt.version&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;commons.lang.version&gt;3.9&lt;&#x2F;commons.lang.version&gt;</span><br><span class=\"line\">        &lt;aspectjweaver.version&gt;1.9.4&lt;&#x2F;aspectjweaver.version&gt;</span><br><span class=\"line\">        &lt;fastjson.version&gt;1.2.62&lt;&#x2F;fastjson.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、配置文件\"><a href=\"#2、配置文件\" class=\"headerlink\" title=\"2、配置文件\"></a>2、配置文件</h4><h5 id=\"2-1修改application-properties为application-yml\"><a href=\"#2-1修改application-properties为application-yml\" class=\"headerlink\" title=\"2.1修改application.properties为application.yml\"></a>2.1修改<code>application.properties</code>为<code>application.yml</code></h5>配置端口，项目根路径，spring配置，mybatis配置，分页插件配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8100</span><br><span class=\"line\">  servlet:</span><br><span class=\"line\">    context-path: &#x2F;api</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  profiles:</span><br><span class=\"line\">    active: dev</span><br><span class=\"line\">  http:</span><br><span class=\"line\">    encoding:</span><br><span class=\"line\">      charset: UTF-8</span><br><span class=\"line\">      force: true</span><br><span class=\"line\">      enabled: true</span><br><span class=\"line\"></span><br><span class=\"line\">mybatis:</span><br><span class=\"line\">  mapper-locations: classpath:&#x2F;mapper&#x2F;*.xml</span><br><span class=\"line\">  type-aliases-package: com.example.jxc.domain.entity.*</span><br><span class=\"line\">  configuration:</span><br><span class=\"line\">    cache-enabled: true</span><br><span class=\"line\">    lazy-loading-enabled: true</span><br><span class=\"line\">    multiple-result-sets-enabled: true</span><br><span class=\"line\">    use-column-label: true</span><br><span class=\"line\">    call-setters-on-nulls: true</span><br><span class=\"line\">    local-cache-scope: session</span><br><span class=\"line\">    map-underscore-to-camel-case: true</span><br><span class=\"line\">    default-executor-type: BATCH</span><br><span class=\"line\">    auto-mapping-behavior: PARTIAL</span><br><span class=\"line\"></span><br><span class=\"line\">pagehelper:</span><br><span class=\"line\">  helperDialect: mysql</span><br><span class=\"line\">  reasonable: true</span><br><span class=\"line\">  supportMethodsArguments: true</span><br><span class=\"line\">  params: count&#x3D;countSql</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>mybatis中的configuration配置，这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项的意图、默认值等。<br>| 设置名| 描述| 有效值|默认值|<br>|—–|—–|——|——|<br>| cacheEnabled | 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。 |  true  false |true|<br>| lazyLoadingEnabled| 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 |  true  false |false|<br>| aggressiveLazyLoading|      当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。 |  true  false |false （在 3.4.1 及之前的版本默认值为 true） |<br>| multipleResultSetsEnabled| 是否允许单一语句返回多结果集（需要驱动支持）。 |  true  false |true|<br>| useColumnLabel|      使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。  |  true  false |true|<br>| useGeneratedKeys| 允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。 |  true  false |false |<br>| autoMappingBehavior| 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 | NONE, PARTIAL, FULL  |PARTIAL|<br>| autoMappingUnknownColumnBehavior| 指定发现自动映射目标未知列（或者未知属性类型）的行为。NONE: 不做任何反应，WARNING: 输出提醒日志 (‘org.apache.ibatis.session.AutoMappingUnknownColumnBehavior’ 的日志等级必须设置为 WARN) ，FAILING: 映射失败 (抛出 SqlSessionException) |  NONE, WARNING, FAILING  |NONE|<br>| defaultExecutorType| 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。 |  SIMPLE REUSE BATCH  |SIMPLE|<br>| defaultStatementTimeout|      设置超时时间，它决定驱动等待数据库响应的秒数。  |  任意正整数 |未设置 (null) |<br>| defaultFetchSize|      为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。  |  任意正整数 |未设置 (null) |<br>| defaultResultSetType|      Specifies a scroll strategy when omit it per statement settings. (Since: 3.5.2)  |  FORWARD_ONLY SCROLL_SENSITIVE SCROLL_INSENSITIVE  DEFAULT(same behavior with ‘Not Set’)  |Not Set (null) |<br>| safeRowBoundsEnabled| 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。  |  true  false |false |<br>| safeResultHandlerEnabled|允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为 false。 |  true  false |false |<br>| mapUnderscoreToCamelCase|是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 |  true  false |false |<br>| localCacheScope| MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。  |  SESSION  STATEMENT |SESSION  |<br>| jdbcTypeForNull| 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 |  JdbcType 常量，常用值：NULL, VARCHAR 或 OTHER。|OTHER|<br>| lazyLoadTriggerMethods| 指定哪个对象的方法触发一次延迟加载。 | 用逗号分隔的方法列表 |equals,clone,hashCode,toString |<br>| defaultScriptingLanguage| 指定动态 SQL 生成的默认语言。 | 一个类型别名或完全限定类名 |org.apache.ibatis.scripting.xmltags.XMLLanguageDriver |<br>| defaultEnumTypeHandler|指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）  | 一个类型别名或完全限定类名 |org.apache.ibatis.type.EnumTypeHandler |<br>| callSettersOnNulls| 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值初始化的时候比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。 |  true  false |false |<br>| returnInstanceForEmptyRow| 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2）  |  true  false |false |<br>| logPrefix| 指定 MyBatis 增加到日志名称的前缀。 |  任何字符串 |未设置|<br>| logImpl| 指定 MyBatis      指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 |  SLF4J,LOG4J,LOG4J2,JDK_LOGGING,COMMONS_LOGGING,STDOUT_LOGGING,NO_LOGGING |未设置|<br>| proxyFactory|      指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。 |       CGLIB ,JAVASSIST |AVASSIST （MyBatis 3.3 以上） |<br>| vfsImpl| 指定 VFS 的实现  |       自定义 VFS 的实现的类全限定名，以逗号分隔。 |未设置|<br>| useActualParamName| 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）  |  true   false  |true|<br>| configurationFactory|      指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3）   |       类型别名或者全类名.  |未设置|</p>\n<h5 id=\"2-2-新建application-dev-yml\"><a href=\"#2-2-新建application-dev-yml\" class=\"headerlink\" title=\"2.2 新建application-dev.yml\"></a>2.2 新建<code>application-dev.yml</code></h5><p>配置数据库信息,通过<code>application.yml</code>中的active来启用dev配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  profiles:</span><br><span class=\"line\">    active: dev</span><br></pre></td></tr></table></figure>\n<p><code>application-dev.yml</code>完整配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    #   数据源基本配置</span><br><span class=\"line\">    username: root</span><br><span class=\"line\">    password:</span><br><span class=\"line\">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;fhshgl</span><br><span class=\"line\">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">    #   数据源其他配置</span><br><span class=\"line\">    initialSize: 5</span><br><span class=\"line\">    minIdle: 5</span><br><span class=\"line\">    maxActive: 20</span><br><span class=\"line\">    maxWait: 60000</span><br><span class=\"line\">    timeBetweenEvictionRunsMillis: 60000</span><br><span class=\"line\">    minEvictableIdleTimeMillis: 300000</span><br><span class=\"line\">    validationQuery: SELECT 1 FROM DUAL</span><br><span class=\"line\">    testWhileIdle: true</span><br><span class=\"line\">    testOnBorrow: false</span><br><span class=\"line\">    testOnReturn: false</span><br><span class=\"line\">    poolPreparedStatements: true</span><br><span class=\"line\">    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#39;wall&#39;用于防火墙</span><br><span class=\"line\">    filters: stat,wall</span><br><span class=\"line\">    maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class=\"line\">    useGlobalDataSourceStat: true</span><br><span class=\"line\">    connectionProperties: druid.stat.mergeSql&#x3D;true;druid.stat.slowSqlMillis&#x3D;500</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、数据库连接池\"><a href=\"#3、数据库连接池\" class=\"headerlink\" title=\"3、数据库连接池\"></a>3、数据库连接池</h4><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS05Zjc5NGJmZjQ0ZDk3NjY4LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class DruidConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ConfigurationProperties(prefix &#x3D; &quot;spring.datasource&quot;)</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public DataSource druid()&#123;</span><br><span class=\"line\">        return  new DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 配置Druid的监控</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ServletRegistrationBean statViewServlet()&#123;</span><br><span class=\"line\">        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean(new StatViewServlet(), &quot;&#x2F;druid&#x2F;*&quot;);</span><br><span class=\"line\">        Map&lt;String,String&gt; initParams &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);</span><br><span class=\"line\">        initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);</span><br><span class=\"line\">        &#x2F;&#x2F;默认就是允许所有访问</span><br><span class=\"line\">        initParams.put(&quot;allow&quot;,&quot;&quot;);</span><br><span class=\"line\">        initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        return bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 配置一个web监控的filter</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public FilterRegistrationBean webStatFilter()&#123;</span><br><span class=\"line\">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean();</span><br><span class=\"line\">        bean.setFilter(new WebStatFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String,String&gt; initParams &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,&#x2F;druid&#x2F;*&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setUrlPatterns(Arrays.asList(&quot;&#x2F;*&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">        return  bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、shiro\"><a href=\"#4、shiro\" class=\"headerlink\" title=\"4、shiro\"></a>4、shiro</h4><h5 id=\"4-1自定义realm\"><a href=\"#4-1自定义realm\" class=\"headerlink\" title=\"4.1自定义realm\"></a>4.1自定义realm</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0xMzlmZmVlNDViNzQxOWIzLnBuZw?x-oss-process=image/format,png\" alt=\"realm.png\"><br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyRealm extends AuthorizingRealm&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;拿到封装好账户密码的token</span><br><span class=\"line\">        UsernamePasswordToken token &#x3D; (UsernamePasswordToken) authenticationToken;</span><br><span class=\"line\">        String userName &#x3D; token.getUsername();</span><br><span class=\"line\">        &#x2F;&#x2F;用户校验</span><br><span class=\"line\">        User user &#x3D; this.userService.getUser(userName);</span><br><span class=\"line\">        if (user &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            throw new AuthenticationException(&quot;用户名或密码错误！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;加盐 计算盐值 保证每个加密后的 MD5 不一样</span><br><span class=\"line\">        ByteSource credentialsSalt &#x3D; ByteSource.Util.bytes(user.getUsername());</span><br><span class=\"line\">        SimpleAuthenticationInfo info &#x3D; new SimpleAuthenticationInfo(user, user.getPassword(), credentialsSalt,</span><br><span class=\"line\">                this.getName());</span><br><span class=\"line\">        return info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-2shiro配置\"><a href=\"#4-2shiro配置\" class=\"headerlink\" title=\"4.2shiro配置\"></a>4.2shiro配置</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1kMmViZjdkM2UwOWExNzBlLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class ShiroConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 主要配置一些相应的URL的规则和访问权限</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ShiroFilterFactoryBean shiroFilter() &#123;</span><br><span class=\"line\">        ShiroFilterFactoryBean shiroFilterFactoryBean &#x3D; new ShiroFilterFactoryBean();</span><br><span class=\"line\">        shiroFilterFactoryBean.setSecurityManager(securityManager());</span><br><span class=\"line\">        &#x2F;&#x2F;拦截器.</span><br><span class=\"line\">        Map&lt;String, String&gt; filterChainDefinitionMap &#x3D; new LinkedHashMap&lt;String, String&gt;();</span><br><span class=\"line\">        &#x2F;&#x2F;配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了</span><br><span class=\"line\">        filterChainDefinitionMap.put(&quot;&#x2F;system&#x2F;logout&quot;, &quot;anon&quot;);</span><br><span class=\"line\">        &#x2F;&#x2F;过滤链定义，从上向下顺序执行，一般将&#x2F;**放在最为下边</span><br><span class=\"line\">        &#x2F;&#x2F;authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问</span><br><span class=\"line\">&#x2F;&#x2F;        filterChainDefinitionMap.put(&quot;&#x2F;static&#x2F;**&quot;, &quot;anon&quot;);</span><br><span class=\"line\">        shiroFilterFactoryBean.setLoginUrl(&quot;&#x2F;system&#x2F;login&quot;);</span><br><span class=\"line\">        filterChainDefinitionMap.put(&quot;&#x2F;**&quot;, &quot;authc&quot;);</span><br><span class=\"line\">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class=\"line\">        return shiroFilterFactoryBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 注入 securityManager</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public DefaultWebSecurityManager securityManager() &#123;</span><br><span class=\"line\">        DefaultWebSecurityManager securityManager &#x3D; new DefaultWebSecurityManager();</span><br><span class=\"line\">        &#x2F;&#x2F; 设置realm.</span><br><span class=\"line\">        securityManager.setRealm(customRealm());</span><br><span class=\"line\">        return securityManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 自定义身份认证 realm;</span><br><span class=\"line\">     * &lt;p&gt;</span><br><span class=\"line\">     * 必须写这个类，并加上 @Bean 注解，目的是注入 MyRealm，</span><br><span class=\"line\">     * 否则会影响 MyRealm 中其他类的依赖注入</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public MyRealm customRealm() &#123;</span><br><span class=\"line\">        return new MyRealm();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证</span><br><span class=\"line\">     * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @DependsOn(&#123;&quot;lifecycleBeanPostProcessor&quot;&#125;)</span><br><span class=\"line\">    public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() &#123;</span><br><span class=\"line\">        DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator &#x3D; new DefaultAdvisorAutoProxyCreator();</span><br><span class=\"line\">        advisorAutoProxyCreator.setProxyTargetClass(true);</span><br><span class=\"line\">        return advisorAutoProxyCreator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor() &#123;</span><br><span class=\"line\">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor &#x3D; new AuthorizationAttributeSourceAdvisor();</span><br><span class=\"line\">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());</span><br><span class=\"line\">        return authorizationAttributeSourceAdvisor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * Shiro生命周期处理器 ---可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123;</span><br><span class=\"line\">        return new LifecycleBeanPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、过滤器-跨域过滤\"><a href=\"#5、过滤器-跨域过滤\" class=\"headerlink\" title=\"5、过滤器-跨域过滤\"></a>5、过滤器-跨域过滤</h4><h5 id=\"5-1跨域过滤\"><a href=\"#5-1跨域过滤\" class=\"headerlink\" title=\"5.1跨域过滤\"></a>5.1跨域过滤</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ODEwMTBkMGZhZGEwYTcwLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CostFilter implements Filter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        HttpServletRequest req &#x3D; (HttpServletRequest) request;</span><br><span class=\"line\">        HttpServletResponse resp &#x3D; (HttpServletResponse) response;</span><br><span class=\"line\">        String origin &#x3D; req.getHeader(&quot;Origin&quot;);</span><br><span class=\"line\">        if (origin &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            origin &#x3D; req.getHeader(&quot;Referer&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 允许指定域访问跨域资源</span><br><span class=\"line\">        resp.setHeader(&quot;Access-Control-Allow-Origin&quot;, origin);</span><br><span class=\"line\">        &#x2F;&#x2F; 允许客户端携带跨域cookie，此时origin值不能为“*”，只能为指定单一域名</span><br><span class=\"line\">        resp.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (&quot;OPTIONS&quot;.equals(req.getMethod())) &#123;</span><br><span class=\"line\">            String allowMethod &#x3D; req.getHeader(&quot;Access-Control-Request-Method&quot;);</span><br><span class=\"line\">            String allowHeaders &#x3D; req.getHeader(&quot;Access-Control-Request-Headers&quot;);</span><br><span class=\"line\">            &#x2F;&#x2F; 浏览器缓存预检请求结果时间,单位:秒</span><br><span class=\"line\">            resp.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;86400&quot;);</span><br><span class=\"line\">            &#x2F;&#x2F; 允许浏览器在预检请求成功之后发送的实际请求方法名</span><br><span class=\"line\">            resp.setHeader(&quot;Access-Control-Allow-Methods&quot;, allowMethod);</span><br><span class=\"line\">            &#x2F;&#x2F; 允许浏览器发送的请求消息头</span><br><span class=\"line\">            resp.setHeader(&quot;Access-Control-Allow-Headers&quot;, allowHeaders);</span><br><span class=\"line\">            resp.setHeader(&quot;Content-Type&quot;, &quot;application&#x2F;json;charset&#x3D;utf-8&quot;);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-2-过滤器配置\"><a href=\"#5-2-过滤器配置\" class=\"headerlink\" title=\"5.2 过滤器配置\"></a>5.2 过滤器配置</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS02ZWU3NDQzY2JkMDg2MDVkLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class FilterConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public FilterRegistrationBean configureFilter()&#123;</span><br><span class=\"line\">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean&lt;&gt;();</span><br><span class=\"line\">        bean.setName(&quot;costFilter&quot;);</span><br><span class=\"line\">        CostFilter costFilter &#x3D; new CostFilter();</span><br><span class=\"line\">        bean.setFilter(costFilter);</span><br><span class=\"line\">        bean.setOrder(1);</span><br><span class=\"line\">        List&lt;String&gt; urlList &#x3D; new ArrayList&lt;String&gt;();</span><br><span class=\"line\">        urlList.add(&quot;&#x2F;*&quot;);</span><br><span class=\"line\">        bean.setUrlPatterns(urlList);</span><br><span class=\"line\">        return bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、token拦截\"><a href=\"#6、token拦截\" class=\"headerlink\" title=\"6、token拦截\"></a>6、token拦截</h4><h5 id=\"6-1JWT\"><a href=\"#6-1JWT\" class=\"headerlink\" title=\"6.1JWT\"></a>6.1JWT</h5><p>jwt工具类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JwtUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static SecretKey getBase64Key() &#123;</span><br><span class=\"line\">        String stringKey &#x3D; &quot;MyJwtSecret&quot;;</span><br><span class=\"line\">        byte[] encodeKey &#x3D; Base64.getDecoder().decode(stringKey);</span><br><span class=\"line\">        SecretKey key &#x3D; new SecretKeySpec(encodeKey, 0, encodeKey.length, &quot;AES&quot;);</span><br><span class=\"line\">        return key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 签发token</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param userName 用户名</span><br><span class=\"line\">     * @return token</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static String create(String userName) &#123;</span><br><span class=\"line\">        Date now &#x3D; new Date(System.currentTimeMillis());</span><br><span class=\"line\">        String token &#x3D; Jwts.builder()</span><br><span class=\"line\">                .setIssuedAt(now)</span><br><span class=\"line\">                .setSubject(userName)</span><br><span class=\"line\">                .setExpiration(new Date(System.currentTimeMillis() + 60 * 60 * 1000))</span><br><span class=\"line\">                .signWith(SignatureAlgorithm.HS256, getBase64Key())</span><br><span class=\"line\">                .compact();</span><br><span class=\"line\"></span><br><span class=\"line\">        return token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 解析token</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token token</span><br><span class=\"line\">     * @return 用户名</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static String parse(String token) &#123;</span><br><span class=\"line\">        String username &#x3D; null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            username &#x3D; Jwts.parser()</span><br><span class=\"line\">                    .setSigningKey(getBase64Key())</span><br><span class=\"line\">                    .parseClaimsJws(token.replace(&quot;Bearer &quot;, &quot;&quot;))</span><br><span class=\"line\">                    .getBody()</span><br><span class=\"line\">                    .getSubject();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 检验token是否过期</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static boolean verify(String token) &#123;</span><br><span class=\"line\">        Date expiraDate &#x3D; null;</span><br><span class=\"line\">        Date currentDate &#x3D; new Date();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            expiraDate &#x3D; Jwts.parser()</span><br><span class=\"line\">                    .setSigningKey(getBase64Key())</span><br><span class=\"line\">                    .parseClaimsJws(token.replace(&quot;Bearer &quot;, &quot;&quot;))</span><br><span class=\"line\">                    .getBody()</span><br><span class=\"line\">                    .getExpiration();</span><br><span class=\"line\">            if (currentDate.before(expiraDate)) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-2token拦截器\"><a href=\"#6-2token拦截器\" class=\"headerlink\" title=\"6.2token拦截器\"></a>6.2token拦截器</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS01MzMwZjU3ZTVkNTcxOTYzLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class TokenInterceptor implements HandlerInterceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Log log &#x3D; LogFactory.getLog(TokenInterceptor.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)&#123;</span><br><span class=\"line\">        if (request.getMethod().equals(&quot;OPTIONS&quot;)) &#123;</span><br><span class=\"line\">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class=\"line\">        String token &#x3D; request.getHeader(&quot;Authorization&quot;);</span><br><span class=\"line\">        if (token !&#x3D; null) &#123;</span><br><span class=\"line\">            boolean result &#x3D; JwtUtils.verify(token);</span><br><span class=\"line\">            if (result) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.error(&quot;认证失败&quot;);</span><br><span class=\"line\">        response.setStatus(HttpServletResponse.SC_NON_AUTHORITATIVE_INFORMATION);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-3配置拦截器\"><a href=\"#6-3配置拦截器\" class=\"headerlink\" title=\"6.3配置拦截器\"></a>6.3配置拦截器</h5><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZjEyNWRjZWNhZjcyODA4LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class InterceptorConfig extends WebMvcConfigurationSupport &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private TokenInterceptor tokenInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class=\"line\">        registry.addInterceptor(tokenInterceptor)</span><br><span class=\"line\">                .addPathPatterns(&quot;&#x2F;**&quot;)</span><br><span class=\"line\">                .excludePathPatterns(&quot;&#x2F;**&#x2F;login&quot;)</span><br><span class=\"line\">                .excludePathPatterns(&quot;&#x2F;**&#x2F;logOut&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7、完成一个登录接口LoginController\"><a href=\"#7、完成一个登录接口LoginController\" class=\"headerlink\" title=\"7、完成一个登录接口LoginController\"></a>7、完成一个登录接口<code>LoginController</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;&#x2F;system&quot;)</span><br><span class=\"line\">public class LoginController extends BaseController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 浏览器点击登录</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param user</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @PostMapping(&quot;&#x2F;login&quot;)</span><br><span class=\"line\">    public R login(@RequestBody User user) &#123;</span><br><span class=\"line\">        log.debug(&quot;------浏览器点击登录------&quot;);</span><br><span class=\"line\">        String userName &#x3D; user.getUsername();</span><br><span class=\"line\">        String passWord &#x3D; user.getPassword();</span><br><span class=\"line\">        UsernamePasswordToken usernamePasswordToken &#x3D; new UsernamePasswordToken(userName, MD5.md5Salt(passWord, userName));</span><br><span class=\"line\">        Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            subject.login(usernamePasswordToken);</span><br><span class=\"line\">            String token &#x3D; JwtUtils.create(userName);</span><br><span class=\"line\">            return R.ok(R.SUCCESS, R.MSG_SUCCESS, token);</span><br><span class=\"line\">        &#125; catch (AuthenticationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            return R.error(R.MSG_LOGIN_ERROR);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZWEzZDRhYjIyOGVmNjIxLmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Wed Jan 01 2020 11:20:50 GMT+0800 (GMT+08:00)","title":"快速搭建Spring Boot项目及常用技术整合","path":"2020/01/01/快速搭建Spring-Boot项目及常用技术整合/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZWEzZDRhYjIyOGVmNjIxLmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1lZWEzZDRhYjIyOGVmNjIxLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2020-01-01T03:18:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["微服务"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java中的clone","date":"2020-01-12T23:56:00.000Z","cover":true,"_content":"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hYWRiMDk5MzU4NWNkMjU1LmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n## Java中对象的创建\n* 使用new操作符创建一个对象\n* 使用clone方法复制一个对象\n### 这两种方式有什么相同和不同呢？\nnew操作符的本意是分配内存。程序执行到new操作符时， 首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。\n而clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部 。\n## Java中的Clone\nclone 顾名思义就是 复制 ， 在Java语言中， clone方法被对象调用，所以会复制对象。所谓的复制对象，首先要分配一个和源对象同样大小的空间，在这个空间中创建一个新的对象\n### 复制对象 or 复制引用\n```\nPerson p = new Person(23, \"张三\");  \nPerson p1 = p;\nSystem.out.println(p);  \nSystem.out.println(p1); \n```\n打印结果：\n```\ncom.pansoft.zhangjg.testclone.Person@2f9ee1ac\ncom.pansoft.zhangjg.testclone.Person@2f9ee1ac\n```\n可以看出，打印的地址值是相同的，既然地址都是相同的，那么肯定是同一个对象。p和p1只是引用而已，他们都指向了一个相同的对象Person(23, \"张三\") 。 可以把这种现象叫做 引用的复制 \n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOGZkNGRmZWE3ODViODI1LnBuZw?x-oss-process=image/format,png)\n而下面的代码是真真正正的克隆了一个对象：\n```\nPerson p = new Person(23, \"张三\");    \nPerson p1 = (Person) p.clone();   \nSystem.out.println(p);  \nSystem.out.println(p1);\n```\n打印结果:\n```\ncom.pansoft.zhangjg.testclone.Person@2f9ee1ac\ncom.pansoft.zhangjg.testclone.Person@67f1fba0\n```\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mMjkxN2I1NjEzYWFiYTJlLnBuZw?x-oss-process=image/format,png)\n## 深拷贝 or 浅拷贝\n上面的示例代码中，Person中有两个成员变量，分别是name和age， name是String类型， age是int类型。代码非常简单，如下所示：\n```\npublic class Person implements Cloneable{ \n    private int age ;\n    private String name;\n    public Person(int age, String name) {\n       this.age = age; \n       this.name = name;  \n    }\n   public Person() {}  \n   public int getAge() {\n       return age;\n   }\n  public String getName() {\n       return name;\n   } \n @Override\n protected Object clone() throws CloneNotSupportedException{\n    return (Person)super.clone();\n }\n}\n```\n由于age是基本数据类型， 那么对它的拷贝没有什么疑议，直接将一个4字节的整数值拷贝过来就行。但是name是String类型的， 它只是一个引用， 指向一个真正的String对象，那么对它的拷贝有两种方式：\n\n①直接将源对象中的name的引用值拷贝给新对象的name字段；\n\n②根据原Person对象中的name指向的字符串对象创建一个新的相同的字符串对象，将这个新字符串对象的引用赋给新拷贝的Person对象的name字段。\n\n这两种拷贝方式分别叫做 浅拷贝 和 深拷贝 。\n\n深拷贝和浅拷贝的原理如下图所示：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wZWNkYTQ4MDAwNzMyM2U5LnBuZw?x-oss-process=image/format,png)\n## clone是浅拷贝还是深拷贝\n如果两个Person对象的name的地址值相同， 说明两个对象的name都指向同一个String对象， 也就是浅拷贝， 而如果两个对象的name的地址值不同， 那么就说明指向不同的String对象， 也就是在拷贝Person对象的时候， 同时拷贝了name引用的String对象， 也就是深拷贝。验证代码如下：\n```\nPerson p = new Person(23,\"张三\");\nPerson p1 =(Person)p.clone();\nString  result = p.getName() == p1.getName() ? \n                 \"clone是浅拷贝的\":\"clone是深拷贝的\";\n```\n打印结果:\n```\nclone是浅拷贝的\n```\n\n","source":"_posts/Java中的clone.md","raw":"title: Java中的clone\ntags:\n  - Java\ncategories:\n  - Java\ndate: 2020-01-13 07:56:00\ncover: true\n\n---\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hYWRiMDk5MzU4NWNkMjU1LmpwZw?x-oss-process=image/format,png )\n<!-- more -->\n## Java中对象的创建\n* 使用new操作符创建一个对象\n* 使用clone方法复制一个对象\n### 这两种方式有什么相同和不同呢？\nnew操作符的本意是分配内存。程序执行到new操作符时， 首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。\n而clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部 。\n## Java中的Clone\nclone 顾名思义就是 复制 ， 在Java语言中， clone方法被对象调用，所以会复制对象。所谓的复制对象，首先要分配一个和源对象同样大小的空间，在这个空间中创建一个新的对象\n### 复制对象 or 复制引用\n```\nPerson p = new Person(23, \"张三\");  \nPerson p1 = p;\nSystem.out.println(p);  \nSystem.out.println(p1); \n```\n打印结果：\n```\ncom.pansoft.zhangjg.testclone.Person@2f9ee1ac\ncom.pansoft.zhangjg.testclone.Person@2f9ee1ac\n```\n可以看出，打印的地址值是相同的，既然地址都是相同的，那么肯定是同一个对象。p和p1只是引用而已，他们都指向了一个相同的对象Person(23, \"张三\") 。 可以把这种现象叫做 引用的复制 \n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOGZkNGRmZWE3ODViODI1LnBuZw?x-oss-process=image/format,png)\n而下面的代码是真真正正的克隆了一个对象：\n```\nPerson p = new Person(23, \"张三\");    \nPerson p1 = (Person) p.clone();   \nSystem.out.println(p);  \nSystem.out.println(p1);\n```\n打印结果:\n```\ncom.pansoft.zhangjg.testclone.Person@2f9ee1ac\ncom.pansoft.zhangjg.testclone.Person@67f1fba0\n```\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mMjkxN2I1NjEzYWFiYTJlLnBuZw?x-oss-process=image/format,png)\n## 深拷贝 or 浅拷贝\n上面的示例代码中，Person中有两个成员变量，分别是name和age， name是String类型， age是int类型。代码非常简单，如下所示：\n```\npublic class Person implements Cloneable{ \n    private int age ;\n    private String name;\n    public Person(int age, String name) {\n       this.age = age; \n       this.name = name;  \n    }\n   public Person() {}  \n   public int getAge() {\n       return age;\n   }\n  public String getName() {\n       return name;\n   } \n @Override\n protected Object clone() throws CloneNotSupportedException{\n    return (Person)super.clone();\n }\n}\n```\n由于age是基本数据类型， 那么对它的拷贝没有什么疑议，直接将一个4字节的整数值拷贝过来就行。但是name是String类型的， 它只是一个引用， 指向一个真正的String对象，那么对它的拷贝有两种方式：\n\n①直接将源对象中的name的引用值拷贝给新对象的name字段；\n\n②根据原Person对象中的name指向的字符串对象创建一个新的相同的字符串对象，将这个新字符串对象的引用赋给新拷贝的Person对象的name字段。\n\n这两种拷贝方式分别叫做 浅拷贝 和 深拷贝 。\n\n深拷贝和浅拷贝的原理如下图所示：\n![图片.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wZWNkYTQ4MDAwNzMyM2U5LnBuZw?x-oss-process=image/format,png)\n## clone是浅拷贝还是深拷贝\n如果两个Person对象的name的地址值相同， 说明两个对象的name都指向同一个String对象， 也就是浅拷贝， 而如果两个对象的name的地址值不同， 那么就说明指向不同的String对象， 也就是在拷贝Person对象的时候， 同时拷贝了name引用的String对象， 也就是深拷贝。验证代码如下：\n```\nPerson p = new Person(23,\"张三\");\nPerson p1 =(Person)p.clone();\nString  result = p.getName() == p1.getName() ? \n                 \"clone是浅拷贝的\":\"clone是深拷贝的\";\n```\n打印结果:\n```\nclone是浅拷贝的\n```\n\n","slug":"Java中的clone","published":1,"updated":"2020-01-12T23:59:25.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5bolaw40000rspsa0skda8c","content":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hYWRiMDk5MzU4NWNkMjU1LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"Java中对象的创建\"><a href=\"#Java中对象的创建\" class=\"headerlink\" title=\"Java中对象的创建\"></a>Java中对象的创建</h2><ul>\n<li>使用new操作符创建一个对象</li>\n<li>使用clone方法复制一个对象<h3 id=\"这两种方式有什么相同和不同呢？\"><a href=\"#这两种方式有什么相同和不同呢？\" class=\"headerlink\" title=\"这两种方式有什么相同和不同呢？\"></a>这两种方式有什么相同和不同呢？</h3>new操作符的本意是分配内存。程序执行到new操作符时， 首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。<br>而clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部 。<h2 id=\"Java中的Clone\"><a href=\"#Java中的Clone\" class=\"headerlink\" title=\"Java中的Clone\"></a>Java中的Clone</h2>clone 顾名思义就是 复制 ， 在Java语言中， clone方法被对象调用，所以会复制对象。所谓的复制对象，首先要分配一个和源对象同样大小的空间，在这个空间中创建一个新的对象<h3 id=\"复制对象-or-复制引用\"><a href=\"#复制对象-or-复制引用\" class=\"headerlink\" title=\"复制对象 or 复制引用\"></a>复制对象 or 复制引用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p &#x3D; new Person(23, &quot;张三&quot;);  </span><br><span class=\"line\">Person p1 &#x3D; p;</span><br><span class=\"line\">System.out.println(p);  </span><br><span class=\"line\">System.out.println(p1);</span><br></pre></td></tr></table></figure>\n打印结果：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br><span class=\"line\">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br></pre></td></tr></table></figure>\n可以看出，打印的地址值是相同的，既然地址都是相同的，那么肯定是同一个对象。p和p1只是引用而已，他们都指向了一个相同的对象Person(23, “张三”) 。 可以把这种现象叫做 引用的复制<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOGZkNGRmZWE3ODViODI1LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>而下面的代码是真真正正的克隆了一个对象：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p &#x3D; new Person(23, &quot;张三&quot;);    </span><br><span class=\"line\">Person p1 &#x3D; (Person) p.clone();   </span><br><span class=\"line\">System.out.println(p);  </span><br><span class=\"line\">System.out.println(p1);</span><br></pre></td></tr></table></figure>\n打印结果:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br><span class=\"line\">com.pansoft.zhangjg.testclone.Person@67f1fba0</span><br></pre></td></tr></table></figure>\n<img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mMjkxN2I1NjEzYWFiYTJlLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><h2 id=\"深拷贝-or-浅拷贝\"><a href=\"#深拷贝-or-浅拷贝\" class=\"headerlink\" title=\"深拷贝 or 浅拷贝\"></a>深拷贝 or 浅拷贝</h2>上面的示例代码中，Person中有两个成员变量，分别是name和age， name是String类型， age是int类型。代码非常简单，如下所示：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person implements Cloneable&#123; </span><br><span class=\"line\">    private int age ;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    public Person(int age, String name) &#123;</span><br><span class=\"line\">       this.age &#x3D; age; </span><br><span class=\"line\">       this.name &#x3D; name;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   public Person() &#123;&#125;  </span><br><span class=\"line\">   public int getAge() &#123;</span><br><span class=\"line\">       return age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  public String getName() &#123;</span><br><span class=\"line\">       return name;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\"> @Override</span><br><span class=\"line\"> protected Object clone() throws CloneNotSupportedException&#123;</span><br><span class=\"line\">    return (Person)super.clone();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n由于age是基本数据类型， 那么对它的拷贝没有什么疑议，直接将一个4字节的整数值拷贝过来就行。但是name是String类型的， 它只是一个引用， 指向一个真正的String对象，那么对它的拷贝有两种方式：</li>\n</ul>\n<p>①直接将源对象中的name的引用值拷贝给新对象的name字段；</p>\n<p>②根据原Person对象中的name指向的字符串对象创建一个新的相同的字符串对象，将这个新字符串对象的引用赋给新拷贝的Person对象的name字段。</p>\n<p>这两种拷贝方式分别叫做 浅拷贝 和 深拷贝 。</p>\n<p>深拷贝和浅拷贝的原理如下图所示：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wZWNkYTQ4MDAwNzMyM2U5LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h2 id=\"clone是浅拷贝还是深拷贝\"><a href=\"#clone是浅拷贝还是深拷贝\" class=\"headerlink\" title=\"clone是浅拷贝还是深拷贝\"></a>clone是浅拷贝还是深拷贝</h2><p>如果两个Person对象的name的地址值相同， 说明两个对象的name都指向同一个String对象， 也就是浅拷贝， 而如果两个对象的name的地址值不同， 那么就说明指向不同的String对象， 也就是在拷贝Person对象的时候， 同时拷贝了name引用的String对象， 也就是深拷贝。验证代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p &#x3D; new Person(23,&quot;张三&quot;);</span><br><span class=\"line\">Person p1 &#x3D;(Person)p.clone();</span><br><span class=\"line\">String  result &#x3D; p.getName() &#x3D;&#x3D; p1.getName() ? </span><br><span class=\"line\">                 &quot;clone是浅拷贝的&quot;:&quot;clone是深拷贝的&quot;;</span><br></pre></td></tr></table></figure>\n<p>打印结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clone是浅拷贝的</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hYWRiMDk5MzU4NWNkMjU1LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","more":"<h2 id=\"Java中对象的创建\"><a href=\"#Java中对象的创建\" class=\"headerlink\" title=\"Java中对象的创建\"></a>Java中对象的创建</h2><ul>\n<li>使用new操作符创建一个对象</li>\n<li>使用clone方法复制一个对象<h3 id=\"这两种方式有什么相同和不同呢？\"><a href=\"#这两种方式有什么相同和不同呢？\" class=\"headerlink\" title=\"这两种方式有什么相同和不同呢？\"></a>这两种方式有什么相同和不同呢？</h3>new操作符的本意是分配内存。程序执行到new操作符时， 首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。<br>而clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部 。<h2 id=\"Java中的Clone\"><a href=\"#Java中的Clone\" class=\"headerlink\" title=\"Java中的Clone\"></a>Java中的Clone</h2>clone 顾名思义就是 复制 ， 在Java语言中， clone方法被对象调用，所以会复制对象。所谓的复制对象，首先要分配一个和源对象同样大小的空间，在这个空间中创建一个新的对象<h3 id=\"复制对象-or-复制引用\"><a href=\"#复制对象-or-复制引用\" class=\"headerlink\" title=\"复制对象 or 复制引用\"></a>复制对象 or 复制引用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p &#x3D; new Person(23, &quot;张三&quot;);  </span><br><span class=\"line\">Person p1 &#x3D; p;</span><br><span class=\"line\">System.out.println(p);  </span><br><span class=\"line\">System.out.println(p1);</span><br></pre></td></tr></table></figure>\n打印结果：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br><span class=\"line\">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br></pre></td></tr></table></figure>\n可以看出，打印的地址值是相同的，既然地址都是相同的，那么肯定是同一个对象。p和p1只是引用而已，他们都指向了一个相同的对象Person(23, “张三”) 。 可以把这种现象叫做 引用的复制<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1jOGZkNGRmZWE3ODViODI1LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><br>而下面的代码是真真正正的克隆了一个对象：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p &#x3D; new Person(23, &quot;张三&quot;);    </span><br><span class=\"line\">Person p1 &#x3D; (Person) p.clone();   </span><br><span class=\"line\">System.out.println(p);  </span><br><span class=\"line\">System.out.println(p1);</span><br></pre></td></tr></table></figure>\n打印结果:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.pansoft.zhangjg.testclone.Person@2f9ee1ac</span><br><span class=\"line\">com.pansoft.zhangjg.testclone.Person@67f1fba0</span><br></pre></td></tr></table></figure>\n<img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1mMjkxN2I1NjEzYWFiYTJlLnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"><h2 id=\"深拷贝-or-浅拷贝\"><a href=\"#深拷贝-or-浅拷贝\" class=\"headerlink\" title=\"深拷贝 or 浅拷贝\"></a>深拷贝 or 浅拷贝</h2>上面的示例代码中，Person中有两个成员变量，分别是name和age， name是String类型， age是int类型。代码非常简单，如下所示：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person implements Cloneable&#123; </span><br><span class=\"line\">    private int age ;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    public Person(int age, String name) &#123;</span><br><span class=\"line\">       this.age &#x3D; age; </span><br><span class=\"line\">       this.name &#x3D; name;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   public Person() &#123;&#125;  </span><br><span class=\"line\">   public int getAge() &#123;</span><br><span class=\"line\">       return age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  public String getName() &#123;</span><br><span class=\"line\">       return name;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\"> @Override</span><br><span class=\"line\"> protected Object clone() throws CloneNotSupportedException&#123;</span><br><span class=\"line\">    return (Person)super.clone();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n由于age是基本数据类型， 那么对它的拷贝没有什么疑议，直接将一个4字节的整数值拷贝过来就行。但是name是String类型的， 它只是一个引用， 指向一个真正的String对象，那么对它的拷贝有两种方式：</li>\n</ul>\n<p>①直接将源对象中的name的引用值拷贝给新对象的name字段；</p>\n<p>②根据原Person对象中的name指向的字符串对象创建一个新的相同的字符串对象，将这个新字符串对象的引用赋给新拷贝的Person对象的name字段。</p>\n<p>这两种拷贝方式分别叫做 浅拷贝 和 深拷贝 。</p>\n<p>深拷贝和浅拷贝的原理如下图所示：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS0wZWNkYTQ4MDAwNzMyM2U5LnBuZw?x-oss-process=image/format,png\" alt=\"图片.png\"></p>\n<h2 id=\"clone是浅拷贝还是深拷贝\"><a href=\"#clone是浅拷贝还是深拷贝\" class=\"headerlink\" title=\"clone是浅拷贝还是深拷贝\"></a>clone是浅拷贝还是深拷贝</h2><p>如果两个Person对象的name的地址值相同， 说明两个对象的name都指向同一个String对象， 也就是浅拷贝， 而如果两个对象的name的地址值不同， 那么就说明指向不同的String对象， 也就是在拷贝Person对象的时候， 同时拷贝了name引用的String对象， 也就是深拷贝。验证代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p &#x3D; new Person(23,&quot;张三&quot;);</span><br><span class=\"line\">Person p1 &#x3D;(Person)p.clone();</span><br><span class=\"line\">String  result &#x3D; p.getName() &#x3D;&#x3D; p1.getName() ? </span><br><span class=\"line\">                 &quot;clone是浅拷贝的&quot;:&quot;clone是深拷贝的&quot;;</span><br></pre></td></tr></table></figure>\n<p>打印结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clone是浅拷贝的</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hYWRiMDk5MzU4NWNkMjU1LmpwZw?x-oss-process=image/format,png","popularPost_tmp_gaData":{"updated":"Mon Jan 13 2020 07:59:25 GMT+0800 (GMT+08:00)","title":"Java中的clone","path":"2020/01/13/Java中的clone/","eyeCatchImage":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hYWRiMDk5MzU4NWNkMjU1LmpwZw?x-oss-process=image/format,png","excerpt":"<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjU1MzI0OS1hYWRiMDk5MzU4NWNkMjU1LmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>","date":"2020-01-12T23:56:00.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"ck58tmwiy0000sopshukhecrr","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwju000dsopscfpj7wfq"},{"post_id":"ck58tmwjs000asops3p5shuvn","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwjx000isopseee76w33"},{"post_id":"ck58tmwj80001sopsb8f6f219","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwjy000nsopsdiw825e3"},{"post_id":"ck58tmwjt000bsopshdlmhlmi","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwk0000qsopscy4s3z9h"},{"post_id":"ck58tmwjv000fsopse5sx5dg4","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwk3000vsops5o5qb8fn"},{"post_id":"ck58tmwjm0004sops5ixwam14","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwk4000ysops49p325bg"},{"post_id":"ck58tmwjw000hsopscox0feei","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwk50010sops664fcxtu"},{"post_id":"ck58tmwjy000msopsa8wigilt","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwk60014sops8p89b5ym"},{"post_id":"ck58tmwjn0005sops7fnp2ahl","category_id":"ck58tmwjx000jsopsad513043","_id":"ck58tmwk70016sopsezgycdo5"},{"post_id":"ck58tmwjz000psopsebz92xta","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwkb0019sops11vxf3ek"},{"post_id":"ck58tmwk2000usops0pl14dtb","category_id":"ck58tmwk0000rsops48jea378","_id":"ck58tmwkd001csopse4gk9b44"},{"post_id":"ck58tmwjo0006sops8t4xayor","category_id":"ck58tmwk0000rsops48jea378","_id":"ck58tmwke001fsops4uhwekfc"},{"post_id":"ck58tmwk4000xsopshtbradjc","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwkg001isopsddkb5f1j"},{"post_id":"ck58tmwk5000zsopsgi374v5q","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwkg001ksopses6f6y3t"},{"post_id":"ck58tmwk60013sops3ih73tlv","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwkh001msopsbwr233f8"},{"post_id":"ck58tmwk70015sops8r7zhvm0","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwkh001nsopscwa5bhom"},{"post_id":"ck58tmwk80018sopsdkwccitx","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwkh001qsops2kax88lu"},{"post_id":"ck58tmwkd001esops3sl7elxo","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwkh001rsopsdxzcczib"},{"post_id":"ck58tmwkf001hsops0k620c6u","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwki001tsops7e3p57e1"},{"post_id":"ck58tmwl70029sopsgjc0dvpu","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwld002hsops8wx4hfh8"},{"post_id":"ck58tmwl9002bsops8r1a67xf","category_id":"ck58tmwk0000rsops48jea378","_id":"ck58tmwlg002ksopsfr6f4pky"},{"post_id":"ck58tmwlb002esopsenkyh7q9","category_id":"ck58tmwk0000rsops48jea378","_id":"ck58tmwli002psopsdigng1q1"},{"post_id":"ck58tmwlf002jsops8m6p2qx2","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwlj002ssopsfbwm13nw"},{"post_id":"ck58tmwli002osops5goc1y65","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwlk002usopsen2e0et0"},{"post_id":"ck58tmwlc002gsops7wg71ox2","category_id":"ck58tmwlh002msopscuxt9f1p","_id":"ck58tmwlk002wsops9w7x1gh9"},{"post_id":"ck58tmwm20031sopsbb454v40","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwm40033sops9ssngv59"},{"post_id":"ck58tmwmr0035sops9cktg9l6","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck58tmwmu0037sops7fnp8hcy"},{"post_id":"ck5bolaw40000rspsa0skda8c","category_id":"ck58tmwja0002sops71ap5hhi","_id":"ck5bolawn0002rspsb9sp4wh6"}],"PostTag":[{"post_id":"ck58tmwiy0000sopshukhecrr","tag_id":"ck58tmwjl0003sopsdqqea0gg","_id":"ck58tmwjr0009sopshfw2hplg"},{"post_id":"ck58tmwj80001sopsb8f6f219","tag_id":"ck58tmwjq0008sopsfuwc5bsl","_id":"ck58tmwjw000gsops7wmkhu8n"},{"post_id":"ck58tmwjv000fsopse5sx5dg4","tag_id":"ck58tmwjv000esopsa24i340l","_id":"ck58tmwjy000lsopsbkhlg8xg"},{"post_id":"ck58tmwjm0004sops5ixwam14","tag_id":"ck58tmwjv000esopsa24i340l","_id":"ck58tmwjz000osops6cbafucq"},{"post_id":"ck58tmwjw000hsopscox0feei","tag_id":"ck58tmwjv000esopsa24i340l","_id":"ck58tmwk2000ssopsamc4cfkq"},{"post_id":"ck58tmwjn0005sops7fnp2ahl","tag_id":"ck58tmwjx000ksopsh0kv73m9","_id":"ck58tmwk3000wsopsgcl58i4c"},{"post_id":"ck58tmwjo0006sops8t4xayor","tag_id":"ck58tmwk2000tsopsho4v1iir","_id":"ck58tmwk60012sopsd7s71l13"},{"post_id":"ck58tmwjs000asops3p5shuvn","tag_id":"ck58tmwk50011sops860ebv4c","_id":"ck58tmwkb001asopsegq2d763"},{"post_id":"ck58tmwjt000bsopshdlmhlmi","tag_id":"ck58tmwk70017sops8a6z53ln","_id":"ck58tmwke001gsops3h8khnfn"},{"post_id":"ck58tmwjy000msopsa8wigilt","tag_id":"ck58tmwkd001dsopsan0kflzt","_id":"ck58tmwkh001lsops5t4423jo"},{"post_id":"ck58tmwjz000psopsebz92xta","tag_id":"ck58tmwkg001jsopsgpp3dfdd","_id":"ck58tmwkh001psops7a0hcfd7"},{"post_id":"ck58tmwk2000usops0pl14dtb","tag_id":"ck58tmwkh001osopsgn6500nu","_id":"ck58tmwki001usopsdvju4neu"},{"post_id":"ck58tmwk4000xsopshtbradjc","tag_id":"ck58tmwkh001ssopsa5nae7hr","_id":"ck58tmwki001wsopsbk6waci1"},{"post_id":"ck58tmwk5000zsopsgi374v5q","tag_id":"ck58tmwki001vsopsej8ecn7t","_id":"ck58tmwkj001ysops982fg464"},{"post_id":"ck58tmwk60013sops3ih73tlv","tag_id":"ck58tmwki001vsopsej8ecn7t","_id":"ck58tmwkj0020sopshcr5dhcd"},{"post_id":"ck58tmwk70015sops8r7zhvm0","tag_id":"ck58tmwkj001zsops5xwf8xo8","_id":"ck58tmwkj0022sopsbzp27d4t"},{"post_id":"ck58tmwk80018sopsdkwccitx","tag_id":"ck58tmwkj0021sops0h2b212b","_id":"ck58tmwkk0024sops9914dbg3"},{"post_id":"ck58tmwkd001esops3sl7elxo","tag_id":"ck58tmwkk0023sops2p6p2j1x","_id":"ck58tmwkk0026sops2efq4x8k"},{"post_id":"ck58tmwkf001hsops0k620c6u","tag_id":"ck58tmwkk0025sopse30q8h6c","_id":"ck58tmwkl0027sops86rmd5m8"},{"post_id":"ck58tmwl70029sopsgjc0dvpu","tag_id":"ck58tmwla002csops2z4a3ktj","_id":"ck58tmwlh002nsops8jk99dte"},{"post_id":"ck58tmwlf002jsops8m6p2qx2","tag_id":"ck58tmwki001vsopsej8ecn7t","_id":"ck58tmwlj002qsops754pabrp"},{"post_id":"ck58tmwl9002bsops8r1a67xf","tag_id":"ck58tmwlg002lsops7czlhkdg","_id":"ck58tmwlj002tsops04z9a671"},{"post_id":"ck58tmwlb002esopsenkyh7q9","tag_id":"ck58tmwlj002rsopsaaiwhli3","_id":"ck58tmwlk002xsops8f7tgje5"},{"post_id":"ck58tmwlc002gsops7wg71ox2","tag_id":"ck58tmwlk002vsops8wei860x","_id":"ck58tmwll002zsops7jggdzzf"},{"post_id":"ck58tmwli002osops5goc1y65","tag_id":"ck58tmwll002ysopsfamf1y5w","_id":"ck58tmwll0030sopsaz072n0s"},{"post_id":"ck58tmwm20031sopsbb454v40","tag_id":"ck58tmwm30032sops6w1o0g4k","_id":"ck58tmwm40034sops1eqeciuc"},{"post_id":"ck58tmwmr0035sops9cktg9l6","tag_id":"ck58tmwki001vsopsej8ecn7t","_id":"ck58tmwmt0036sops0oq30edy"},{"post_id":"ck5bolaw40000rspsa0skda8c","tag_id":"ck5bolaw90001rsps2lqh2v3s","_id":"ck5bolawn0003rspsf3iqh3y8"}],"Tag":[{"name":"json","_id":"ck58tmwjl0003sopsdqqea0gg"},{"name":"file","_id":"ck58tmwjq0008sopsfuwc5bsl"},{"name":"SpringBoot","_id":"ck58tmwjv000esopsa24i340l"},{"name":"打包部署","_id":"ck58tmwjx000ksopsh0kv73m9"},{"name":"SpringCloud","_id":"ck58tmwk2000tsopsho4v1iir"},{"name":"Thread","_id":"ck58tmwk50011sops860ebv4c"},{"name":"shiro","_id":"ck58tmwk70017sops8a6z53ln"},{"name":"部署","_id":"ck58tmwkd001dsopsan0kflzt"},{"name":"Spring","_id":"ck58tmwkg001jsopsgpp3dfdd"},{"name":"token","_id":"ck58tmwkh001osopsgn6500nu"},{"name":"小程序","_id":"ck58tmwkh001ssopsa5nae7hr"},{"name":"微服务","_id":"ck58tmwki001vsopsej8ecn7t"},{"name":"enum","_id":"ck58tmwkj001zsops5xwf8xo8"},{"name":"爬虫","_id":"ck58tmwkj0021sops0h2b212b"},{"name":"Tomcat","_id":"ck58tmwkk0023sops2p6p2j1x"},{"name":"规范","_id":"ck58tmwkk0025sopse30q8h6c"},{"name":"数据类型","_id":"ck58tmwla002csops2z4a3ktj"},{"name":"Consul","_id":"ck58tmwlg002lsops7czlhkdg"},{"name":"JWT","_id":"ck58tmwlj002rsopsaaiwhli3"},{"name":"javaScript","_id":"ck58tmwlk002vsops8wei860x"},{"name":"HashMap","_id":"ck58tmwll002ysopsfamf1y5w"},{"name":"反射","_id":"ck58tmwm30032sops6w1o0g4k"},{"name":"Java","_id":"ck5bolaw90001rsps2lqh2v3s"}]}}